# Query to populate IMPORTED_sparql11_federated_query.hpp for inclusion in test_SPARQL11.cpp
# $Id$

PREFIX mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
PREFIX qt:     <http://www.w3.org/2001/sw/DataAccess/tests/test-query#>
PREFIX dawgt: <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#>
PREFIX fn: <http://www.w3.org/2005/xpath-functions#>

# Construct test case code like:
# BOOST_AUTO_TEST_CASE( service2 ) {
#     const char* test = "http://www.w3.org/2009/sparql/docs/tests/sparql11-test-suite/service/manifest#service2";
#     // name: SERVICE test 2
#     // manifest: sparql11-test-suite/service/manifest.ttl
#     const char* defaultGraph_in = NULL;
#     LabeledGraph services[] = {LG("sparql11-test-suite/service/data02endpoint1.ttl", "http://example1.org/sparql"), LG("sparql11-test-suite/service/data02endpoint2.ttl", "http://example2.org/sparql")};
#     const char* request = "sparql11-test-suite/service/service02.rq";
#     const char* results = "sparql11-test-suite/service/service02.srx";
#     SERVICE_TEST();
# } /* BOOST_AUTO_TEST_CASE( service2 ) */

SELECT
  (CONCAT("BOOST_AUTO_TEST_CASE( ", ?id, " ) {\n")										AS ?line1)
  (CONCAT("    const char* test = \"", STR(?entry), "\";\n")									AS ?line2)
  (CONCAT("    // name: ", ?name, "\n")												AS ?line3)
  (CONCAT("    // manifest: ", STR(?manifest), "\n")										AS ?line4)
  (CONCAT("    const char* defaultGraph_in = ", IF(BOUND(?dgraph_in), CONCAT("\"", STR(?dgraph_in), "\""), "NULL"), ";\n")	AS ?line5)
  (CONCAT("    LabeledGraph services[] = {", IF(BOUND(?service), ?service, ""), "};\n")						AS ?line6)
  (CONCAT("    const char* request = \"", STR(?query), "\";\n")									AS ?line7)
  (CONCAT("    const char* results = \"", STR(?result), "\";\n")								AS ?line8)
  (CONCAT("    SERVICE_TEST();\n")												AS ?lineA)
  (CONCAT("} /* BOOST_AUTO_TEST_CASE( ", ?id, " ) */\n")									AS ?lineB)
{
  <http://www.w3.org/TR/sparql11-federated-query/> mf:conformanceRequirement MEMBERS(?manifest)

  GRAPH ?manifest {
    ?s a mf:Manifest ;
       mf:entries MEMBERS(?entry) .
    ?entry a mf:QueryEvaluationTest ;
           mf:name ?name ;
           dawgt:approval dawgt:Approved ;
           mf:action ?action ;
           mf:result ?result .
    ?action qt:query ?query .
  }

  # Input data
  OPTIONAL { GRAPH ?manifest { ?action qt:data ?dgraph_in } }
  OPTIONAL {
    SELECT ?action (GROUP_CONCAT(?service_row; SEPARATOR=", ") AS ?service)
     WHERE {
        GRAPH ?manifest {
            ?action qt:serviceData [ qt:data ?source ; qt:endpoint ?endpoint]
            BIND (CONCAT("LG(\"", STR(?source), "\", \"", STR(?endpoint), "\")") AS ?service_row)
        }
     } GROUP BY ?id ?action }

  # Shorten test name
  BIND (fn:replace(strafter(str(?entry), "#"), "-", "_") AS ?id)
  #  FILTER (?id = "service2") # limit to one for fiddling
}