# Query to populate IMPORTED_sparql11_query.hpp for inclusion in test_SPARQL11.cpp
# $Id$

PREFIX mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#>
PREFIX qt: <http://www.w3.org/2001/sw/DataAccess/tests/test-query#>
PREFIX dawgt: <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#>
PREFIX fn: <http://www.w3.org/2005/xpath-functions#>

# Construct test case code like:
# BOOST_AUTO_TEST_CASE( pp06 ) {
#     const char* test = "http://www.w3.org/2009/sparql/docs/tests/sparql11-test-suite/property-path/manifest#pp06";
#     // name: (pp06) Path with two graphs
#     // manifest: sparql11-test-suite/property-path/manifest.ttl
#     const char* defaultGraph_in = NULL;
#     LabeledGraph namedGraphs_in[] = {LG("sparql11-test-suite/property-path/pp061.ttl", "sparql11-test-suite/property-path/pp061.ttl"), LG("sparql11-test-suite/property-path/pp062.ttl", "sparql11-test-suite/property-path/pp062.ttl")};
#     const char* request = "sparql11-test-suite/property-path/pp06.rq";
#     const char* result = "sparql11-test-suite/property-path/pp06.srx";
#     QUERY_TEST();
# } /* BOOST_AUTO_TEST_CASE( pp06 ) */

SELECT
  (CONCAT("BOOST_AUTO_TEST_CASE( ", ?id, " ) {\n")										AS ?line1)
  (CONCAT("    const char* test = \"", STR(?entry), "\";\n")									AS ?line2)
  (CONCAT("    // name: ", ?name, "\n")												AS ?line3)
  (CONCAT("    // manifest: ", STR(?manifest), "\n")										AS ?line4)
  (CONCAT("    const char* defaultGraph_in = ", IF(BOUND(?dgraph_in), CONCAT("\"", STR(?dgraph_in), "\""), "NULL"), ";\n")	AS ?line5)
  (CONCAT("    LabeledGraph namedGraphs_in[] = {", IF(BOUND(?graph_in), ?graph_in, ""), "};\n")					AS ?line6)
  (CONCAT("    const char* request = \"", STR(?query), "\";\n")									AS ?line7)
  (CONCAT("    const char* result = \"", STR(?result), "\";\n")									AS ?line8)
  (CONCAT("    CSV_QUERY_TEST();\n")												AS ?line9)
  (CONCAT("} /* BOOST_AUTO_TEST_CASE( ", ?id, " ) */\n")									AS ?lineA)
{
  {
    <http://www.w3.org/TR/sparql11-results-csv-tsv/> mf:conformanceRequirement MEMBERS(?manifest)
  }
  GRAPH ?manifest {
    ?s a mf:Manifest ;
       mf:entries MEMBERS(?entry) .
    ?entry a mf:CSVResultFormatTest ;
           mf:name ?name ;
           dawgt:approval dawgt:Approved ;
           mf:action ?action .
    ?action qt:query ?query .
    ?entry mf:result ?result
  }

  # Input data
  OPTIONAL { GRAPH ?manifest { ?action qt:data ?dgraph_in } }
  OPTIONAL {
    SELECT ?action (GROUP_CONCAT(?graph_row_in; SEPARATOR=", ") AS ?graph_in)
     WHERE {
        GRAPH ?manifest {
            ?action qt:graphData ?source_in
            BIND (CONCAT("LG(\"", STR(?source_in), "\", \"", STR(?source_in), "\")") AS ?graph_row_in)
        }
     } GROUP BY ?id ?action }

  # Shorten test name
  BIND (fn:replace(strafter(str(?entry), "#"), "-", "_") AS ?id)
  #  FILTER (?id = "pp06") # limit to one for fiddling
}
