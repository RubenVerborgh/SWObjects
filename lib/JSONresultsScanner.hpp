// $Id: JSONresultsScanner.hpp,v 1.3 2008-10-03 07:06:02 eric Exp $

#ifndef JSONresultsScanner_H
#define JSONresultsScanner_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    w3c_sw::JSONresultsParser::token_type				\
    w3c_sw::JSONresultsScanner::lex(				\
	w3c_sw::JSONresultsParser::semantic_type* yylval,		\
	w3c_sw::JSONresultsParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer JSONresultsFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "JSONresultsParser/JSONresultsParser.hpp"

namespace w3c_sw {

/** JSONresultsScanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to JSONresultsFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the JSONresultsScanner class. This is required
 * because the yylex() defined in JSONresultsFlexLexer has no parameters. */
class JSONresultsScanner : public JSONresultsFlexLexer
{
private:
    JSONresultsDriver* driver;
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    JSONresultsScanner(JSONresultsDriver* driver, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~JSONresultsScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual JSONresultsParser::token_type lex(
	JSONresultsParser::semantic_type* yylval,
	JSONresultsParser::location_type* yylloc
	);
    JSONresultsParser::token_type lexWrapper(
	   JSONresultsParser::semantic_type* yylval,
	   JSONresultsParser::location_type* yylloc
					   ) {
	try {
	    return lex(yylval, yylloc);
	} catch (const char* e) {
	    std::stringstream s;
	    s << *yylloc << ": " << e;
	    throw s.str();
	}
    }

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    JSONresultsParser::token_type unescape(JSONresultsParser::semantic_type*&, size_t skip, JSONresultsParser::token_type tok);
};

} // namespace w3c_sw

#endif // JSONresultsScanner_H
