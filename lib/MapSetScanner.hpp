// $Id: MapSetScanner.hpp,v 1.3 2008-10-03 07:06:02 eric Exp $

#ifndef MapSetScanner_H
#define MapSetScanner_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    w3c_sw::MapSetParser::token_type				\
    w3c_sw::MapSetScanner::lex(				\
	w3c_sw::MapSetParser::semantic_type* yylval,		\
	w3c_sw::MapSetParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer MapSetFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "MapSetParser/MapSetParser.hpp"

namespace w3c_sw {

/** MapSetScanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to MapSetFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the MapSetScanner class. This is required
 * because the yylex() defined in MapSetFlexLexer has no parameters. */
class MapSetScanner : public MapSetFlexLexer
{
private:
    MapSetDriver* driver;
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    MapSetScanner(MapSetDriver* driver, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~MapSetScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual MapSetParser::token_type lex(
	MapSetParser::semantic_type* yylval,
	MapSetParser::location_type* yylloc
	);

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    MapSetParser::token_type typedLiteral(MapSetParser::semantic_type*&, MapSetParser::token_type tok);
    MapSetParser::token_type unescape(MapSetParser::semantic_type*&, size_t skip, MapSetParser::token_type tok);
    const URI* resolvePrefix(const char*);
    const URI* resolveBase(const char*, bool stripDelims);
};

} // namespace w3c_sw

#endif // MapSetScanner_H
