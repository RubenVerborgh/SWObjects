// $Id: TrigSScanner.hpp,v 1.3 2008-10-03 07:06:03 eric Exp $

#ifndef TrigSScanner_H
#define TrigSScanner_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    w3c_sw::TrigSParser::token_type				\
    w3c_sw::TrigSScanner::lex(				\
	w3c_sw::TrigSParser::semantic_type* yylval,		\
	w3c_sw::TrigSParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer TrigSFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "TrigSParser/TrigSParser.hpp"

namespace w3c_sw {

/** TrigSScanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to TrigSFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the TrigSScanner class. This is required
 * because the yylex() defined in TrigSFlexLexer has no parameters. */
class TrigSScanner : public TrigSFlexLexer
{
private:
    TrigSDriver* driver;
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    TrigSScanner(TrigSDriver* driver, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~TrigSScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual TrigSParser::token_type lex(
	TrigSParser::semantic_type* yylval,
	TrigSParser::location_type* yylloc
	);

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    TrigSParser::token_type typedLiteral(TrigSParser::semantic_type*&, TrigSParser::token_type tok);
    TrigSParser::token_type unescape(TrigSParser::semantic_type*&, size_t skip, TrigSParser::token_type tok);
    const URI* resolvePrefix(const char*);
    const URI* resolveBase(const char*, bool stripDelims);
};

} // namespace w3c_sw

#endif // TrigSScanner_H
