#line 2 "lib/TrigSScanner.cpp"

#line 4 "lib/TrigSScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TrigSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TrigSalloc (yy_size_t  );
void *TrigSrealloc (void *,yy_size_t  );
void TrigSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 38
#define YY_END_OF_BUFFER 39
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[554] =
    {   0,
        0,    0,   39,   38,    1,   38,    1,   38,    5,    6,
       13,    8,   14,    7,   20,   35,    9,   38,   38,   38,
       38,   38,   11,   12,   38,   38,   10,    3,    4,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,    1,    0,
       32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   31,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,    0,   22,
        0,   24,   21,   21,   20,    0,   36,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,   19,
        0,    0,   35,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   34,   15,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   32,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   31,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   23,   23,    0,   25,   25,    0,    0,   21,
        0,    0,   26,   36,    0,   36,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   36,   36,   36,
       36,   36,   36,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   37,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   23,    0,    0,   28,    0,
       25,    0,    0,   27,    0,   26,    0,   26,   36,   36,
       36,   36,   36,   36,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   36,   36,

       36,   36,   36,    0,    0,    0,    0,    0,    0,   19,
       19,    0,    0,    0,    0,    0,    0,    0,    0,   16,
       37,    0,   37,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   37,   37,   37,   37,   37,   37,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   28,    0,   28,    0,   27,
        0,   27,   36,   36,   36,   36,   36,    0,    0,   36,

       19,    0,   17,   37,   37,   37,   37,   37,   37,   37,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   37,   37,   37,   37,   37,    0,    0,
       30,    0,    0,    0,    0,   29,    0,    0,    0,    0,
       36,   19,   37,   37,   37,   37,   37,    0,    0,   37,
        2,   37,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    9,   10,
       11,    8,   12,   13,   14,   15,    8,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
        8,   20,    8,   21,   22,   23,   23,   23,   24,   25,
       23,   23,   26,   23,   23,   27,   23,   23,   23,   28,
       23,   29,   30,   31,   32,   23,   23,   33,   23,   23,
       34,   35,   36,   37,   38,    1,   39,   40,   41,   41,

       42,   43,   41,   41,   44,   41,   41,   45,   41,   40,
       41,   46,   41,   47,   48,   49,   50,   41,   41,   51,
       41,   41,   52,    1,   53,    8,    8,   54,   55,   56,
       56,   56,   56,   57,   58,   58,   58,   58,   58,   59,
       59,   58,   60,   61,   61,   61,   61,   61,   61,   61,
       62,   63,   63,   63,   63,   63,   63,   63,   63,   64,
       64,   64,   64,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   66,   66,   66,   66,   66,
       66,   66,   67,   68,   68,   68,   68,   68,   68,   69,
       70,   71,   71,   72,   73,   74,   74,   74,   74,   74,

       74,   74,   74,   75,   76,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   78,   79,   80,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   83,   84,   85,   86,
       87,   87,   87,   88,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    4,    3,    5,    3,    3,    1,    3,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    3,    1,    3,    1,    3,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    7,    7,    7,    7,    7,    7,    8,
        7,    9,    7,    7,    7,    7,    9,    7,   10,   11,
       12,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[781] =
    {   0,
        0,    0,  961, 4115,   87,   87,  116,  196,   92, 4115,
       83, 4115,   85,  944,   89,  269, 4115,  337,   74,  412,
       84,   78,  106, 4115,  901,  912,    0, 4115, 4115,    0,
        0,   78,   94,    0,   48,    0,   57,   60,    0,  113,
        0,  152,  854,    0,  154,   74,  171,    0,  141,  494,
      885,  218,    0,    0,    0,  178,    0,  304,    0,  307,
        0,  324,  523,    0,    0,    0,  320,    0,  447,    0,
      450,    0,  337,  603,  881,  516,    0,    0,    0,  334,
        0,  476,    0,  479,    0,  530,  611, 4115,  873,  602,
      834,  604,  605,  607,  609,  214,  678,    0,    0,  598,

      610,    0,  220,    0,  187,  524,    0,  702,    0,  719,
      794,    0,  721,  185,  728,    0,  779, 4115,    0,    0,
        0,  736,    0,  753,    0,  756,    0,  773,  833,  417,
      854,  821,  926,    0,  708,    0,  786,    0,  960,    0,
      573,  686,    0,  193,  629,    0,  957,    0,  974,  695,
        0,  976,  197,  983,    0,  276,  272,  870, 4115, 4115,
     1038,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      673,  767,    0,    0,  677,    0,    0,    0,  877,    0,
        0, 4115, 1120,    0,  679,    0,    0,    0,    0,    0,
        0,    0,    0,  678,    0,    0,    0,    0,    0,    0,

        0, 4115, 1200,    0,  677,    0,    0,    0,    0,    0,
        0,    0, 1106, 1111,  512, 1112, 1115,  541,  546, 1116,
      618,  682,  658, 1275,    0,    0,  618,    0, 1087,    0,
     1105,    0,  989,  604,    0,  583, 1100,    0, 1107,    0,
     1083,  573,    0, 1156,  382, 1159,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  493, 1115,    0,    0,  473,
        0,    0,    0, 1164,    0,    0,    0,  487,    0,    0,
        0,    0,    0,    0,    0,    0, 1222, 1349,    0,    0,
        0,    0,    0,    0,    0,    0,  491, 1171,    0,    0,
      467,    0,    0,    0, 1181,    0,    0,  275,  441, 1423,

        0,    0, 1198, 1457,    0, 1199,    0, 1067, 1121,    0,
     1454,    0, 1471,  442,    0, 1473,  570, 1480,    0,    0,
        0,    0,    0,    0,    0,    0, 1545, 1628, 1546,    0,
        0,    0, 1492,    0, 1509,    0, 1574,    0, 1519, 1711,
        0,    0,    0, 1740,    0,    0,    0, 1820, 1900, 1640,
        0,    0,    0, 1532,    0, 1596,    0, 1603,    0, 1552,
     1980,    0,    0,    0, 1247, 1343, 1280,  471,  450, 1428,
     1417, 1571,  417,  416,  414,  392,  390,  389, 2055,    0,
        0,    0,    0,    0,    0,    0,    0,  589, 1624,    0,
        0,  299,    0,    0,    0, 1652,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 2123,    0,    0,    0,  330,
     1709, 2198,    0,    0,    0,    0,    0,    0,  688,    0,
     2272,    0,    0,  287,    0, 1670,    0, 1681,    0, 1681,
      273,    0, 1517, 1524,    0, 1689,    0, 1706,  252,    0,
     1776,  595, 1779,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  200, 1696,    0,    0,  203,    0,    0,    0,
     1710,    0,    0, 2346, 2428,    0,  193,    0,    0,    0,
        0,    0,    0,    0, 2508,    0,  189,    0,    0,    0,
        0,    0,    0,    0,  207,  206,  171,  169,  168,  142,
      140,  139, 2583,    0,    0,    0,    0,    0,    0,    0,

     1634,    0,    0, 2657,    0,    0,    0,    0,    0,    0,
        0,    0, 1544, 1735,    0,    0,   75,    0,    0,    0,
     1784,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4115, 2739,    0,    0,    0, 4115, 2819,    0,    0,    0,
        0,  874,    0,    0,    0,    0,    0,    0,    0,    0,
      107,    0, 4115, 2907, 2918, 2929, 2938,  106, 2943, 2948,
     2953, 2958, 2963, 2968, 2973, 2978, 2983, 2988, 2993, 2997,
     3000, 3005, 3010, 3015, 3026, 3031, 3035, 3038, 3043, 3048,
     3053, 3064, 3069, 3073, 3076, 3081, 3086, 3091, 3096, 3101,
     3106, 3111, 3116, 3121, 3126, 3131, 3136, 3141, 3150, 3155,

     3159, 3162, 3167, 3172, 3177, 3185, 3185, 3190, 3195, 3200,
     3205, 3210, 3215, 3220, 3225, 3230, 3235, 3240, 3245, 3250,
     3255, 3260, 3265, 3270, 3275, 3286, 3291, 3296, 3301, 3306,
     3311, 3316, 3321, 3326, 3331, 3336, 3341, 3346, 3357, 3362,
     3367, 3372, 3377, 3382, 3387, 3392, 3397, 3402, 3407, 3412,
     3417, 3422, 3427, 3432, 3437, 3442, 3447, 3452, 3457, 3462,
     3467, 3472, 3477, 3482, 3487, 3492, 3497, 3502, 3507, 3512,
     3519, 3522, 3522, 3527, 3532, 3537, 3542, 3547, 3552, 3557,
     3562, 3567, 3572, 3577, 3582, 3587, 3592, 3597, 3602, 3607,
     3612, 3623, 3628, 3632, 3635, 3640, 3645, 3650, 3661, 3666,

     3671, 3682, 3687, 3692, 3703, 3708, 3712, 3715, 3720, 3725,
     3730, 3741, 3746, 3751, 3756, 3761, 3766, 3771, 3776, 3781,
     3786, 3791, 3796, 3805, 3810, 3815, 3823, 3826, 3826, 3831,
     3836, 3841, 3846, 3851, 3856, 3861, 3866, 3871, 3876, 3881,
     3886, 3891, 3896, 3901, 3906, 3911, 3916, 3921, 3932, 3937,
     3942, 3947, 3952, 3957, 3962, 3973, 3978, 3983, 3988, 3993,
     3998, 4003, 4008, 4016, 4016, 4021, 4026, 4031, 4036, 4041,
     4046, 4051, 4056, 4067, 4072, 4077, 4088, 4093, 4098, 4103
    } ;

static yyconst flex_int16_t yy_def[781] =
    {   0,
      553,    1,  553,  553,  553,  554,  555,  556,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  557,  558,  553,
       20,   20,  553,  553,  553,  553,   20,  553,  553,  559,
      560,  559,  559,  561,  562,  563,  563,  553,  564,  553,
      565,  566,  566,  567,  553,  553,  553,  568,  553,  554,
      553,  553,  569,  570,  571,  553,  572,  553,  573,  553,
      574,  553,  575,  576,  577,  578,  553,  579,  553,  580,
      553,  581,  553,  582,  553,  553,  583,  584,  585,  553,
      586,  553,  587,  553,  588,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  589,  590,  589,

      589,  591,  592,  593,  593,  553,  594,  553,  595,  596,
      596,  597,  553,  553,  553,  598,  599,  553,  600,  601,
      602,  553,  603,  553,  604,  553,  605,  553,  606,  606,
      553,  131,  553,  131,  607,  608,  607,  607,  607,  609,
      610,  553,  611,  611,  612,  613,  553,  614,  615,  615,
      616,  553,  553,  553,  617,  131,  131,  553,  553,  553,
      553,  131,  131,  131,  131,  131,  131,  131,  618,  619,
      620,  620,  620,  621,  622,  622,  620,  623,  553,  624,
      625,  553,  626,  627,  553,  628,  629,  628,  628,  630,
      631,  632,  633,  553,  634,  635,  634,  634,  636,  637,

      638,  553,  639,  640,  553,  641,  642,  641,  641,  643,
      644,  645,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  224,  224,  646,  647,  646,  646,
      646,  648,  649,  553,  650,  650,  651,  652,  553,  653,
      654,  654,  655,  553,  553,  553,  656,  224,  224,  224,
      224,  224,  224,  657,  658,  659,  659,  659,  660,  661,
      661,  659,  662,  553,  663,  664,  665,  553,  666,  667,
      666,  666,  668,  669,  670,  671,  672,  553,  278,  278,
      278,  278,  278,  278,  673,  674,  675,  675,  675,  676,
      677,  677,  675,  678,  553,  679,  680,  278,  278,  553,

      681,  682,  681,  681,  683,  684,  685,  685,  553,  686,
      553,  687,  688,  688,  689,  553,  553,  553,  690,  278,
      278,  278,  278,  278,  691,  691,  692,  692,  553,  693,
      694,  695,  553,  696,  553,  697,  553,  698,  553,  699,
      700,  700,  701,  702,  703,  703,  704,  705,  705,  553,
      706,  707,  708,  553,  709,  553,  710,  553,  711,  553,
      712,  713,  713,  714,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  379,
      379,  379,  379,  379,  379,  715,  716,  717,  717,  717,
      718,  719,  719,  717,  720,  553,  721,  722,  379,  379,

      379,  379,  379,  723,  723,  724,  725,  725,  726,  727,
      728,  553,  412,  412,  412,  412,  729,  729,  412,  412,
      553,  421,  421,  730,  731,  730,  730,  730,  732,  733,
      553,  734,  734,  735,  736,  553,  737,  738,  738,  739,
      553,  553,  553,  740,  421,  421,  421,  421,  421,  421,
      741,  742,  743,  743,  743,  744,  745,  745,  743,  746,
      553,  747,  748,  553,  749,  750,  553,  751,  752,  751,
      751,  753,  754,  755,  756,  757,  553,  758,  759,  758,
      758,  760,  761,  762,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  493,  493,  493,  493,  763,  763,  493,

      764,  464,  464,  553,  504,  504,  504,  504,  504,  504,
      765,  766,  767,  767,  767,  768,  769,  769,  767,  770,
      553,  771,  772,  504,  504,  504,  504,  504,  773,  773,
      553,  774,  775,  775,  776,  553,  777,  778,  778,  779,
      493,  764,  504,  504,  504,  504,  504,  780,  780,  504,
      764,  504,    0,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553
    } ;

static yyconst flex_int16_t yy_nxt[4204] =
    {   0,
        4,    5,    5,    5,    5,    6,    7,    4,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,    4,
       19,   20,   20,   20,   21,   20,   20,   20,   20,   20,
       22,   20,   20,   23,    4,   24,   25,   26,   27,   20,
       20,   20,   21,   20,   20,   20,   20,   20,   22,   20,
       20,   28,   29,    4,   30,   31,   32,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   33,   34,   34,   35,
        4,    4,   36,   37,    4,   38,   39,   40,   41,   42,
       43,   44,   45,    4,   46,   47,   48,    4,   49,   49,
       49,   49,   51,   87,   87,   87,   87,   89,   90,   91,

       92,  130,   88,   94,   95,  156,  157,  158,  158,  158,
      158,  129,   96,  165,  165,  165,  162,  162,  167,  130,
      276,   52,  156,  167,  157,  168,  168,  168,  505,  168,
       96,  163,  163,  163,  163,  163,  163,  163,  178,  178,
      179,  159,   49,   49,   49,   49,   53,  164,  164,  164,
      164,  164,  164,  164,  492,  492,   54,  490,   55,   55,
       55,   55,   55,   55,   56,   57,   57,   57,   57,   58,
       59,   59,   60,   61,   62,   64,  169,  169,  169,  169,
      169,  169,  169,  490,  488,   65,  488,   66,   66,   66,
       66,   66,   66,   67,   68,   68,   68,   68,   69,   70,

       70,   71,   72,   73,   75,  171,  172,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  174,  174,  174,
      174,  486,  486,   50,  348,  222,   50,  222,  327,  223,
       76,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  186,  186,  186,  186,  186,  186,  186,   97,  263,
      263,  264,   50,   97,  134,   77,  445,   50,  446,  134,
       50,  294,  294,  295,   50,   78,   50,   79,   79,   79,
       79,   79,   79,   80,   81,   81,   81,   81,   82,   83,
       83,   84,   85,   86,   97,  251,  251,  251,  248,  248,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,  298,  299,  419,  517,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
      298,  299,  419,   98,   99,  100,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  101,  102,  102,  103,  421,
      504,  104,  105,  276,  106,  107,  108,  109,  110,  111,
      112,  113,  380,  114,  115,  116,  118,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  192,  192,  192,
      192,  192,  192,  195,  195,  195,  195,  195,  195,  195,
      201,  201,  201,  201,  201,  201,  119,  206,  206,  206,

      206,  206,  206,  206,  378,  378,  120,  376,  121,  121,
      121,  121,  121,  121,  122,  123,  123,  123,  123,  124,
      125,  125,  126,  127,  128,  131,  132,  131,  133,  376,
      276,  374,  374,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  277,  395,  395,  396,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  277,  420,  369,  135,  136,  137,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  139,  140,
      140,  141,  420,  142,  143,  144,  369,  145,  146,  147,
      148,  149,  150,  151,  152,  457,  153,  154,  155,  182,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      279,   74,  117,  368,   74,  368,  248,  369,   52,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  280,
       74,  249,  373,   53,  373,   74,  374,  375,   74,  375,
      278,  376,   74,   54,   74,   55,   55,   55,   55,   55,
       55,   56,   57,   57,   57,   57,   58,   59,   59,   60,
       61,   62,   64,  212,  212,  212,  212,  212,  212,  253,
      253,  253,   65,  253,   66,   66,   66,   66,   66,   66,

       67,   68,   68,   68,   68,   69,   70,   70,   71,   72,
       73,  202,   87,   87,   87,   87,  214,   90,  217,   92,
       93,   88,  220,   94,   95,  215,  392,  218,  219,  377,
      221,  377,   96,  378,  460,  460,  461,   76,  282,  282,
      282,  279,  279,  215,  226,  218,  219,  381,  221,  226,
       96,  249,  249,  249,  249,  249,  249,  249,  379,  520,
      520,  521,   77,  250,  250,  250,  250,  250,  250,  250,
      224,  379,   78,  223,   79,   79,   79,   79,   79,   79,
       80,   81,   81,   81,   81,   82,   83,   83,   84,   85,
       86,  224,  225,  224,  284,  284,  284,  223,  284,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  503,   74,   63,   50,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  503,
      162,  163,  227,  228,  229,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  231,  232,  232,  233,  291,  234,
      235,  236,  131,  237,  238,  239,  240,  241,  242,  243,
      244,  278,  245,  246,  247,  254,  254,  254,  254,  254,
      254,  254,  256,  257,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  259,  259,  259,  259,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  118,  269,

      269,  269,  269,  269,  269,  269,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  275,  275,  275,  275,
      275,  275,  163,  163,  163,  163,  163,  553,  119,  280,
      280,  280,  280,  280,  280,  280,  276,  260,  120,  216,
      121,  121,  121,  121,  121,  121,  122,  123,  123,  123,
      123,  124,  125,  125,  126,  127,  128,  131,  132,  131,
      133,  158,  158,  158,  158,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  276,  213,  203,
      183,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  159,  551,  175,  135,  136,
      137,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      139,  140,  140,  141,  551,  142,  143,  144,  161,  145,
      146,  147,  148,  149,  150,  151,  152,  160,  153,  154,
      155,   97,  324,  324,  324,  324,  324,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   93,
      553,  553,  553,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  553,  553,  553,
       98,   99,  100,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  101,  102,  102,  103,  553,  553,  104,  105,

      553,  106,  107,  108,  109,  110,  111,  112,  113,  553,
      114,  115,  116,  281,  281,  281,  281,  281,  281,  281,
      285,  285,  285,  285,  285,  285,  285,  287,  288,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  290,
      290,  290,  290,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  300,  383,  383,  383,  380,  380,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  553,  553,  553,  553,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  553,
      553,  553,  301,  302,  303,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  304,  305,  305,  306,  553,  553,
      307,  308,  553,  309,  310,  311,  312,  313,  314,  315,
      316,  213,  317,  318,  319,  328,  366,  216,  300,  365,
      371,  220,  553,  300,  367,  370,  388,  389,  372,  221,
      381,  381,  381,  381,  381,  381,  381,  365,  391,  391,
      391,  391,  367,  370,  329,  553,  372,  221,  382,  382,
      382,  382,  382,  382,  382,  385,  385,  385,  553,  385,
      386,  386,  386,  386,  386,  386,  386,  553,  553,  330,
      249,  249,  249,  249,  249,  553,  450,  450,  450,  331,
      450,  332,  332,  332,  332,  332,  332,  333,  334,  334,

      334,  334,  335,  336,  336,  337,  338,  339,  349,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  403,
      403,  403,  403,  403,  350,  276,  280,  280,  280,  280,
      280,  553,  553,  553,  553,  411,  416,  416,  416,  416,
      416,  446,  446,  446,  446,  446,  446,  446,  485,  351,
      485,  553,  486,  411,  448,  448,  448,  445,  445,  352,
      553,  353,  353,  353,  353,  353,  353,  354,  355,  355,
      355,  355,  356,  357,  357,  358,  359,  360,  224,  225,
      224,  487,  553,  487,  553,  488,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  553,  553,
      553,  553,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  553,  553,  553,  227,
      228,  229,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  231,  232,  232,  233,  553,  234,  235,  236,  553,
      237,  238,  239,  240,  241,  242,  243,  244,  366,  245,
      246,  247,  131,  132,  131,  133,  367,  553,  553,  553,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  553,  553,  367,  553,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      553,  553,  553,  135,  136,  137,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  139,  140,  140,  141,  553,
      142,  143,  144,  553,  145,  146,  147,  148,  149,  150,
      151,  152,  371,  153,  154,  155,  421,  422,  421,  489,
      372,  489,  553,  490,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  553,  553,  372,  553,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  553,  553,  553,  424,  425,  426,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  428,
      429,  429,  430,  553,  431,  432,  433,  553,  434,  435,

      436,  437,  438,  439,  440,  441,  553,  442,  443,  444,
      447,  447,  447,  447,  447,  447,  447,  451,  451,  451,
      451,  451,  451,  451,  453,  454,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  456,  456,  456,  456,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      328,  327,  553,  553,  327,  468,  468,  468,  468,  468,
      468,  468,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  474,  474,  474,  474,  474,  474,  423,  329,
      327,  553,  491,  423,  491,  327,  492,  553,  327,  510,
      510,  510,  327,  510,  327,  478,  478,  478,  478,  478,

      478,  478,  506,  553,  330,  484,  484,  484,  484,  484,
      484,  553,  553,  504,  331,  553,  332,  332,  332,  332,
      332,  332,  333,  334,  334,  334,  334,  335,  336,  336,
      337,  338,  339,  465,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  553,  348,  553,  276,  348,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  542,
      553,  553,  329,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  553,  348,  553,  553,  542,  553,  348,
      553,  553,  348,  553,  553,  553,  348,  330,  348,  381,
      381,  381,  381,  381,  553,  553,  553,  331,  553,  332,

      332,  332,  332,  332,  332,  333,  334,  334,  334,  334,
      335,  336,  336,  337,  338,  339,  182,  497,  497,  497,
      497,  497,  276,  506,  506,  506,  506,  506,  506,  506,
      553,  553,  553,  501,  507,  507,  507,  507,  507,  507,
      507,  553,  553,  553,  553,   52,  508,  508,  508,  505,
      505,  501,  511,  511,  511,  511,  511,  511,  511,  513,
      514,  446,  446,  446,  446,  446,  553,  553,  553,  553,
       53,  516,  516,  516,  516,  528,  528,  528,  528,  528,
       54,  553,   55,   55,   55,   55,   55,   55,   56,   57,
       57,   57,   57,   58,   59,   59,   60,   61,   62,   64,

      506,  506,  506,  506,  506,  553,  553,  553,  553,   65,
      553,   66,   66,   66,   66,   66,   66,   67,   68,   68,
       68,   68,   69,   70,   70,   71,   72,   73,  349,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  547,
      547,  547,  547,  547,  350,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  351,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  352,
      553,  353,  353,  353,  353,  353,  353,  354,  355,  355,

      355,  355,  356,  357,  357,  358,  359,  360,  475,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  350,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  351,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  352,
      553,  353,  353,  353,  353,  353,  353,  354,  355,  355,
      355,  355,  356,  357,  357,  358,  359,  360,  202,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,   76,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,   77,
      553,  553,  553,  553,  553,  553,  553,  553,  553,   78,
      553,   79,   79,   79,   79,   79,   79,   80,   81,   81,
       81,   81,   82,   83,   83,   84,   85,   86,  224,  225,
      224,  553,  553,  553,  553,  553,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  553,  553,
      553,  553,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  553,  553,  553,  227,
      228,  229,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  231,  232,  232,  233,  553,  234,  235,  236,  553,
      237,  238,  239,  240,  241,  242,  243,  244,  553,  245,
      246,  247,  118,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  119,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  120,  553,  121,  121,  121,  121,  121,  121,

      122,  123,  123,  123,  123,  124,  125,  125,  126,  127,
      128,  131,  132,  131,  133,  553,  553,  553,  553,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  553,  553,  553,  553,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  553,
      553,  553,  135,  136,  137,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  139,  140,  140,  141,  553,  142,
      143,  144,  553,  145,  146,  147,  148,  149,  150,  151,
      152,  553,  153,  154,  155,  421,  422,  421,  553,  553,
      553,  553,  553,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  553,  553,  553,  553,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  553,  553,  553,  424,  425,  426,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  428,  429,
      429,  430,  553,  431,  432,  433,  553,  434,  435,  436,
      437,  438,  439,  440,  441,  553,  442,  443,  444,  131,
      132,  131,  133,  553,  553,  553,  553,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  553,
      553,  553,  553,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  553,  553,  553,

      135,  136,  137,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  139,  140,  140,  141,  553,  142,  143,  144,
      553,  145,  146,  147,  148,  149,  150,  151,  152,  553,
      153,  154,  155,  531,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  329,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  330,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  331,  553,  332,

      332,  332,  332,  332,  332,  333,  334,  334,  334,  334,
      335,  336,  336,  337,  338,  339,  536,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  350,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  351,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  352,  553,  353,
      353,  353,  353,  353,  353,  354,  355,  355,  355,  355,
      356,  357,  357,  358,  359,  360,  224,  225,  224,  553,

      553,  553,  553,  553,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  553,  553,  553,  553,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  553,  553,  553,  227,  228,  229,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  231,
      232,  232,  233,  553,  234,  235,  236,  553,  237,  238,
      239,  240,  241,  242,  243,  244,  553,  245,  246,  247,
      421,  422,  421,  553,  553,  553,  553,  553,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      553,  553,  553,  553,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  553,  553,
      553,  424,  425,  426,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  428,  429,  429,  430,  553,  431,  432,
      433,  553,  434,  435,  436,  437,  438,  439,  440,  441,
      553,  442,  443,  444,  328,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  329,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  330,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  331,  553,
      332,  332,  332,  332,  332,  332,  333,  334,  334,  334,
      334,  335,  336,  336,  337,  338,  339,  349,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  350,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  351,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  352,  553,
      353,  353,  353,  353,  353,  353,  354,  355,  355,  355,

      355,  356,  357,  357,  358,  359,  360,   50,  553,   50,
       50,   50,   50,  553,   50,  553,  553,   50,   63,  553,
       63,   63,   63,   63,  553,   63,  553,  553,   63,   74,
      553,   74,   74,   74,   74,  553,   74,  553,  553,   74,
      117,  117,  117,  117,  553,  117,  553,  553,  117,  162,
      162,  162,  162,  162,  163,  163,  163,  163,  163,  165,
      165,  165,  165,  165,  166,  166,  166,  166,  166,  167,
      167,  553,  167,  167,  168,  168,  168,  168,  168,  170,
      170,  170,  170,  170,  173,  173,  173,  173,  173,  176,
      176,  176,  176,  176,  181,  181,  181,  181,  181,  184,

      184,  184,  184,  185,  185,  185,   50,   50,   50,   50,
       50,  187,  187,  187,  187,  187,  189,  189,  189,  189,
      189,  191,  191,  191,  191,  191,   63,  553,   63,   63,
       63,   63,  553,   63,  553,  553,   63,  193,  193,  193,
      193,  194,  194,  194,   63,   63,   63,   63,   63,  196,
      196,  196,  196,  196,  198,  198,  198,  198,  198,  200,
      200,  200,  200,  200,   74,  553,   74,   74,   74,   74,
      553,   74,  553,  553,   74,  204,  204,  204,  204,  205,
      205,  205,   74,   74,   74,   74,   74,  207,  207,  207,
      207,  207,  209,  209,  209,  209,  209,  211,  211,  211,

      211,  211,  248,  248,  248,  248,  248,  249,  249,  249,
      249,  249,  251,  251,  251,  251,  251,  252,  252,  252,
      252,  252,   97,   97,  553,   97,   97,  253,  253,  253,
      253,  253,  255,  255,  255,  255,  255,  258,  258,  258,
      258,  258,  261,  261,  261,  261,  261,  266,  266,  266,
      266,  266,  117,  117,  117,  117,  553,  117,  553,  553,
      117,  267,  267,  267,  267,  268,  268,  268,  117,  117,
      117,  117,  117,  270,  270,  270,  270,  270,  272,  272,
      272,  272,  272,  274,  274,  274,  274,  274,  129,  553,
      129,  279,  279,  279,  279,  279,  280,  280,  280,  280,

      280,  282,  282,  282,  282,  282,  283,  283,  283,  283,
      283,  134,  134,  553,  134,  134,  131,  131,  131,  553,
      131,  284,  284,  284,  284,  284,  286,  286,  286,  286,
      286,  289,  289,  289,  289,  289,  292,  292,  292,  292,
      292,  297,  297,  297,  297,  297,  168,  168,  168,  168,
      168,  320,  320,  320,  320,  320,  162,  162,  162,  162,
      162,  321,  321,  321,  321,  321,  322,  322,  322,  322,
      322,  323,  323,  323,  323,  323,  325,  325,  325,  325,
      325,  326,  326,  326,  326,  326,  327,  327,  327,  327,
      327,  327,  553,  327,  553,  553,  327,  185,  185,  185,

      185,  185,   50,   50,   50,   50,   50,  340,  340,  340,
      340,  340,  341,  341,  341,  341,  341,  342,  342,  342,
      342,  342,  343,  343,  343,  343,  343,  194,  194,  194,
      194,  194,   63,   63,   63,   63,   63,  344,  344,  344,
      344,  344,  345,  345,  345,  345,  345,  346,  346,  346,
      346,  346,  347,  347,  347,  347,  347,  348,  348,  348,
      348,  348,  348,  553,  348,  553,  553,  348,  205,  205,
      205,  205,  205,   74,   74,   74,   74,   74,  361,  361,
      361,  361,  361,  362,  362,  362,  362,  362,  363,  363,
      363,  363,  363,  364,  364,  364,  364,  364,  380,  380,

      380,  380,  380,  381,  381,  381,  381,  381,  383,  383,
      383,  383,  383,  384,  384,  384,  384,  384,  226,  226,
      553,  226,  226,  224,  224,  224,  553,  224,  385,  385,
      385,  385,  385,  387,  387,  387,  387,  387,  390,  390,
      390,  390,  390,  393,  393,  393,  393,  393,  398,  398,
      398,  398,  398,  253,  253,  253,  253,  253,  399,  399,
      399,  399,  399,  248,  248,  248,  248,  248,  400,  400,
      400,  400,  400,  401,  401,  401,  401,  401,  402,  402,
      402,  402,  402,  404,  404,  404,  404,  404,  405,  405,
      405,  405,  405,  268,  268,  268,  268,  268,  117,  117,

      117,  117,  117,  406,  406,  406,  406,  406,  407,  407,
      407,  407,  407,  408,  408,  408,  408,  408,  409,  409,
      409,  409,  409,  410,  410,  129,  553,  129,  284,  284,
      284,  284,  284,  412,  412,  412,  412,  412,  279,  279,
      279,  279,  279,  413,  413,  413,  413,  413,  414,  414,
      414,  414,  414,  415,  415,  415,  415,  415,  417,  417,
      417,  417,  417,  418,  418,  418,  418,  418,  445,  445,
      445,  445,  445,  446,  446,  446,  446,  446,  448,  448,
      448,  448,  448,  449,  449,  449,  449,  449,  300,  300,
      553,  300,  300,  450,  450,  450,  450,  450,  452,  452,

      452,  452,  452,  455,  455,  455,  455,  455,  458,  458,
      458,  458,  458,  463,  463,  463,  463,  463,  464,  464,
      464,  464,  464,  327,  327,  327,  327,  327,  327,  553,
      327,  553,  553,  327,  466,  466,  466,  466,  467,  467,
      467,  327,  327,  327,  327,  327,  469,  469,  469,  469,
      469,  471,  471,  471,  471,  471,  473,  473,  473,  473,
      473,   50,  553,   50,   50,   50,   50,  553,   50,  553,
      553,   50,   50,   50,   50,   50,   50,  185,  185,  185,
      185,  185,   63,  553,   63,   63,   63,   63,  553,   63,
      553,  553,   63,   63,   63,   63,   63,   63,  194,  194,

      194,  194,  194,  348,  348,  348,  348,  348,  348,  553,
      348,  553,  553,  348,  476,  476,  476,  476,  477,  477,
      477,  348,  348,  348,  348,  348,  479,  479,  479,  479,
      479,  481,  481,  481,  481,  481,  483,  483,  483,  483,
      483,   74,  553,   74,   74,   74,   74,  553,   74,  553,
      553,   74,   74,   74,   74,   74,   74,  205,  205,  205,
      205,  205,  385,  385,  385,  385,  385,  493,  493,  493,
      493,  493,  380,  380,  380,  380,  380,  494,  494,  494,
      494,  494,  495,  495,  495,  495,  495,  496,  496,  496,
      496,  496,  498,  498,  498,  498,  498,  499,  499,  499,

      499,  499,  500,  500,  500,  500,  500,  117,  117,  117,
      117,  553,  117,  553,  553,  117,  117,  117,  117,  117,
      117,  268,  268,  268,  268,  268,  410,  410,  410,  129,
      553,  129,  502,  502,  502,  502,  502,  505,  505,  505,
      505,  505,  506,  506,  506,  506,  506,  508,  508,  508,
      508,  508,  509,  509,  509,  509,  509,  423,  423,  553,
      423,  423,  421,  421,  421,  553,  421,  510,  510,  510,
      510,  510,  512,  512,  512,  512,  512,  515,  515,  515,
      515,  515,  518,  518,  518,  518,  518,  523,  523,  523,
      523,  523,  450,  450,  450,  450,  450,  524,  524,  524,

      524,  524,  445,  445,  445,  445,  445,  525,  525,  525,
      525,  525,  526,  526,  526,  526,  526,  527,  527,  527,
      527,  527,  529,  529,  529,  529,  529,  530,  530,  530,
      530,  530,  327,  327,  327,  327,  327,  327,  553,  327,
      553,  553,  327,  467,  467,  467,  467,  467,  327,  327,
      327,  327,  327,  532,  532,  532,  532,  532,  533,  533,
      533,  533,  533,  534,  534,  534,  534,  534,  535,  535,
      535,  535,  535,  348,  348,  348,  348,  348,  348,  553,
      348,  553,  553,  348,  477,  477,  477,  477,  477,  348,
      348,  348,  348,  348,  537,  537,  537,  537,  537,  538,

      538,  538,  538,  538,  539,  539,  539,  539,  539,  540,
      540,  540,  540,  540,  541,  541,  541,  541,  541,  129,
      553,  129,  510,  510,  510,  510,  510,  543,  543,  543,
      543,  543,  505,  505,  505,  505,  505,  544,  544,  544,
      544,  544,  545,  545,  545,  545,  545,  546,  546,  546,
      546,  546,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  549,  550,  550,  550,  550,  550,  327,  327,  327,
      327,  327,  327,  553,  327,  553,  553,  327,  327,  327,
      327,  327,  327,  467,  467,  467,  467,  467,  348,  348,
      348,  348,  348,  348,  553,  348,  553,  553,  348,  348,

      348,  348,  348,  348,  477,  477,  477,  477,  477,  552,
      552,  552,  552,  552,    3,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553
    } ;

static yyconst flex_int16_t yy_chk[4204] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    6,    9,    9,    9,    9,   11,   11,   13,

       13,   19,    9,   15,   15,   21,   22,   23,   23,   23,
       23,  558,   15,   35,   35,   35,   35,   35,   37,   19,
      551,    6,   21,   37,   22,   38,   38,   38,  517,   38,
       15,   32,   32,   32,   32,   32,   32,   32,   46,   46,
       46,   23,   49,   49,   49,   49,    6,   33,   33,   33,
       33,   33,   33,   33,  492,  491,    6,  490,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    7,   40,   40,   40,   40,
       40,   40,   40,  489,  488,    7,  487,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    8,   42,   42,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   42,   42,   42,
       42,  486,  485,   52,  477,   96,   52,   96,  467,   96,
        8,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   56,   56,   56,   56,   56,   56,   56,  105,  114,
      114,  114,   52,  105,  144,    8,  457,   52,  453,  144,
       52,  153,  153,  153,   52,    8,   52,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,   16,  103,  103,  103,  103,  103,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,  156,  157,  298,  439,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      156,  157,  298,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,  431,
      424,   16,   16,  410,   16,   16,   16,   16,   16,   16,
       16,   16,  392,   16,   16,   16,   18,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   62,   62,   62,
       62,   62,   62,   67,   67,   67,   67,   67,   67,   67,
       73,   73,   73,   73,   73,   73,   18,   80,   80,   80,

       80,   80,   80,   80,  378,  377,   18,  376,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   20,   20,   20,   20,  375,
      130,  374,  373,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,  130,  245,  245,  245,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,  130,  299,  369,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,  299,   20,   20,   20,  368,   20,   20,   20,
       20,   20,   20,   20,   20,  314,   20,   20,   20,   50,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      291,   76,  268,  215,   76,  215,  260,  215,   50,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  287,
       76,  256,  218,   50,  218,   76,  218,  219,   76,  219,
      287,  219,   76,   50,   76,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   63,   86,   86,   86,   86,   86,   86,  106,
      106,  106,   63,  106,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   74,   87,   87,   87,   87,   90,   90,   92,   92,
       93,   87,   94,   95,   95,   90,  242,   92,   93,  221,
       94,  221,   95,  221,  317,  317,  317,   74,  141,  141,
      141,  141,  141,   90,  236,   92,   93,  388,   94,  236,
       95,  100,  100,  100,  100,  100,  100,  100,  388,  442,
      442,  442,   74,  101,  101,  101,  101,  101,  101,  101,
      234,  227,   74,  223,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   97,   97,   97,  145,  145,  145,  222,  145,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  419,  205,  194,  185,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  419,
      175,  171,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,  150,   97,
       97,   97,  142,   97,   97,   97,   97,   97,   97,   97,
       97,  135,   97,   97,   97,  108,  108,  108,  108,  108,
      108,  108,  110,  110,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  110,  110,  110,  110,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  117,  122,

      122,  122,  122,  122,  122,  122,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  128,  128,  128,  128,
      128,  128,  172,  172,  172,  172,  172,  132,  117,  137,
      137,  137,  137,  137,  137,  137,  129,  111,  117,   91,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  131,  131,  131,
      131,  158,  158,  158,  158,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  542,   89,   75,
       51,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  158,  542,   43,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  542,  131,  131,  131,   26,  131,
      131,  131,  131,  131,  131,  131,  131,   25,  131,  131,
      131,  133,  179,  179,  179,  179,  179,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,   14,
        3,    0,    0,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,    0,    0,    0,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,    0,    0,  133,  133,

        0,  133,  133,  133,  133,  133,  133,  133,  133,    0,
      133,  133,  133,  139,  139,  139,  139,  139,  139,  139,
      147,  147,  147,  147,  147,  147,  147,  149,  149,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  149,
      149,  149,  149,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  161,  233,  233,  233,  233,  233,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,    0,    0,    0,    0,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,    0,
        0,    0,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  161,  161,  161,  161,    0,    0,
      161,  161,    0,  161,  161,  161,  161,  161,  161,  161,
      161,  213,  161,  161,  161,  183,  214,  216,  308,  213,
      217,  220,    0,  308,  214,  216,  241,  241,  217,  220,
      229,  229,  229,  229,  229,  229,  229,  213,  241,  241,
      241,  241,  214,  216,  183,    0,  217,  220,  231,  231,
      231,  231,  231,  231,  231,  237,  237,  237,    0,  237,
      239,  239,  239,  239,  239,  239,  239,    0,    0,  183,
      257,  257,  257,  257,  257,    0,  309,  309,  309,  183,
      309,  183,  183,  183,  183,  183,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  203,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  264,
      264,  264,  264,  264,  203,  277,  288,  288,  288,  288,
      288,    0,    0,    0,    0,  277,  295,  295,  295,  295,
      295,  303,  303,  303,  303,  303,  303,  303,  365,  203,
      365,    0,  365,  277,  306,  306,  306,  306,  306,  203,
        0,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  224,  224,
      224,  367,    0,  367,    0,  367,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,    0,    0,
        0,    0,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,    0,    0,    0,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,    0,  224,  224,  224,    0,
      224,  224,  224,  224,  224,  224,  224,  224,  366,  224,
      224,  224,  278,  278,  278,  278,  366,    0,    0,    0,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,    0,    0,  366,    0,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

        0,    0,    0,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,    0,
      278,  278,  278,    0,  278,  278,  278,  278,  278,  278,
      278,  278,  371,  278,  278,  278,  300,  300,  300,  370,
      371,  370,    0,  370,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,    0,    0,  371,    0,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,    0,    0,    0,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,    0,  300,  300,  300,    0,  300,  300,

      300,  300,  300,  300,  300,  300,    0,  300,  300,  300,
      304,  304,  304,  304,  304,  304,  304,  311,  311,  311,
      311,  311,  311,  311,  313,  313,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  313,  313,  313,  313,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      327,  329,    0,    0,  329,  333,  333,  333,  333,  333,
      333,  333,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  339,  339,  339,  339,  339,  339,  433,  327,
      329,    0,  372,  433,  372,  329,  372,    0,  329,  434,
      434,  434,  329,  434,  329,  354,  354,  354,  354,  354,

      354,  354,  513,    0,  327,  360,  360,  360,  360,  360,
      360,    0,    0,  513,  327,    0,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  328,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,    0,  350,    0,  501,  350,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  501,
        0,    0,  328,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,    0,  350,    0,    0,  501,    0,  350,
        0,    0,  350,    0,    0,    0,  350,  328,  350,  389,
      389,  389,  389,  389,    0,    0,    0,  328,    0,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  340,  396,  396,  396,
      396,  396,  411,  426,  426,  426,  426,  426,  426,  426,
        0,    0,    0,  411,  428,  428,  428,  428,  428,  428,
      428,    0,    0,    0,    0,  340,  430,  430,  430,  430,
      430,  411,  436,  436,  436,  436,  436,  436,  436,  438,
      438,  454,  454,  454,  454,  454,    0,    0,    0,    0,
      340,  438,  438,  438,  438,  461,  461,  461,  461,  461,
      340,    0,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  344,

      514,  514,  514,  514,  514,    0,    0,    0,    0,  344,
        0,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  348,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  521,
      521,  521,  521,  521,  348,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  348,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  348,
        0,  348,  348,  348,  348,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  348,  348,  349,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  349,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  349,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  349,
        0,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  361,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  361,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
        0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  379,  379,
      379,    0,    0,    0,    0,    0,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,    0,    0,
        0,    0,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  379,  379,  379,  379,    0,    0,    0,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,    0,  379,  379,  379,    0,
      379,  379,  379,  379,  379,  379,  379,  379,    0,  379,
      379,  379,  406,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  406,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  406,    0,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  412,  412,  412,  412,    0,    0,    0,    0,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,    0,    0,    0,    0,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,    0,
        0,    0,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,    0,  412,
      412,  412,    0,  412,  412,  412,  412,  412,  412,  412,
      412,    0,  412,  412,  412,  421,  421,  421,    0,    0,
        0,    0,    0,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,    0,    0,    0,    0,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,    0,    0,    0,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,    0,  421,  421,  421,    0,  421,  421,  421,
      421,  421,  421,  421,  421,    0,  421,  421,  421,  464,
      464,  464,  464,    0,    0,    0,    0,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,    0,
        0,    0,    0,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,    0,    0,    0,

      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,    0,  464,  464,  464,
        0,  464,  464,  464,  464,  464,  464,  464,  464,    0,
      464,  464,  464,  465,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  465,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  465,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  465,    0,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  475,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  475,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  475,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  475,    0,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  493,  493,  493,    0,

        0,    0,    0,    0,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,    0,    0,    0,    0,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,    0,    0,    0,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,    0,  493,  493,  493,    0,  493,  493,
      493,  493,  493,  493,  493,  493,    0,  493,  493,  493,
      504,  504,  504,    0,    0,    0,    0,    0,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
        0,    0,    0,    0,  504,  504,  504,  504,  504,  504,

      504,  504,  504,  504,  504,  504,  504,  504,    0,    0,
        0,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,    0,  504,  504,
      504,    0,  504,  504,  504,  504,  504,  504,  504,  504,
        0,  504,  504,  504,  532,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  532,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  532,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  532,    0,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  537,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  537,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  537,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  537,    0,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  537,  554,    0,  554,
      554,  554,  554,    0,  554,    0,    0,  554,  555,    0,
      555,  555,  555,  555,    0,  555,    0,    0,  555,  556,
        0,  556,  556,  556,  556,    0,  556,    0,    0,  556,
      557,  557,  557,  557,    0,  557,    0,    0,  557,  559,
      559,  559,  559,  559,  560,  560,  560,  560,  560,  561,
      561,  561,  561,  561,  562,  562,  562,  562,  562,  563,
      563,    0,  563,  563,  564,  564,  564,  564,  564,  565,
      565,  565,  565,  565,  566,  566,  566,  566,  566,  567,
      567,  567,  567,  567,  568,  568,  568,  568,  568,  569,

      569,  569,  569,  570,  570,  570,  571,  571,  571,  571,
      571,  572,  572,  572,  572,  572,  573,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  575,    0,  575,  575,
      575,  575,    0,  575,    0,    0,  575,  576,  576,  576,
      576,  577,  577,  577,  578,  578,  578,  578,  578,  579,
      579,  579,  579,  579,  580,  580,  580,  580,  580,  581,
      581,  581,  581,  581,  582,    0,  582,  582,  582,  582,
        0,  582,    0,    0,  582,  583,  583,  583,  583,  584,
      584,  584,  585,  585,  585,  585,  585,  586,  586,  586,
      586,  586,  587,  587,  587,  587,  587,  588,  588,  588,

      588,  588,  589,  589,  589,  589,  589,  590,  590,  590,
      590,  590,  591,  591,  591,  591,  591,  592,  592,  592,
      592,  592,  593,  593,    0,  593,  593,  594,  594,  594,
      594,  594,  595,  595,  595,  595,  595,  596,  596,  596,
      596,  596,  597,  597,  597,  597,  597,  598,  598,  598,
      598,  598,  599,  599,  599,  599,    0,  599,    0,    0,
      599,  600,  600,  600,  600,  601,  601,  601,  602,  602,
      602,  602,  602,  603,  603,  603,  603,  603,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  606,    0,
      606,  607,  607,  607,  607,  607,  608,  608,  608,  608,

      608,  609,  609,  609,  609,  609,  610,  610,  610,  610,
      610,  611,  611,    0,  611,  611,  612,  612,  612,    0,
      612,  613,  613,  613,  613,  613,  614,  614,  614,  614,
      614,  615,  615,  615,  615,  615,  616,  616,  616,  616,
      616,  617,  617,  617,  617,  617,  618,  618,  618,  618,
      618,  619,  619,  619,  619,  619,  620,  620,  620,  620,
      620,  621,  621,  621,  621,  621,  622,  622,  622,  622,
      622,  623,  623,  623,  623,  623,  624,  624,  624,  624,
      624,  625,  625,  625,  625,  625,  626,  626,  626,  626,
      626,  626,    0,  626,    0,    0,  626,  627,  627,  627,

      627,  627,  628,  628,  628,  628,  628,  629,  629,  629,
      629,  629,  630,  630,  630,  630,  630,  631,  631,  631,
      631,  631,  632,  632,  632,  632,  632,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  635,  635,  635,
      635,  635,  636,  636,  636,  636,  636,  637,  637,  637,
      637,  637,  638,  638,  638,  638,  638,  639,  639,  639,
      639,  639,  639,    0,  639,    0,    0,  639,  640,  640,
      640,  640,  640,  641,  641,  641,  641,  641,  642,  642,
      642,  642,  642,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  645,  645,  645,  645,  645,  646,  646,

      646,  646,  646,  647,  647,  647,  647,  647,  648,  648,
      648,  648,  648,  649,  649,  649,  649,  649,  650,  650,
        0,  650,  650,  651,  651,  651,    0,  651,  652,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  654,  654,
      654,  654,  654,  655,  655,  655,  655,  655,  656,  656,
      656,  656,  656,  657,  657,  657,  657,  657,  658,  658,
      658,  658,  658,  659,  659,  659,  659,  659,  660,  660,
      660,  660,  660,  661,  661,  661,  661,  661,  662,  662,
      662,  662,  662,  663,  663,  663,  663,  663,  664,  664,
      664,  664,  664,  665,  665,  665,  665,  665,  666,  666,

      666,  666,  666,  667,  667,  667,  667,  667,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  670,  670,
      670,  670,  670,  671,  671,  672,    0,  672,  673,  673,
      673,  673,  673,  674,  674,  674,  674,  674,  675,  675,
      675,  675,  675,  676,  676,  676,  676,  676,  677,  677,
      677,  677,  677,  678,  678,  678,  678,  678,  679,  679,
      679,  679,  679,  680,  680,  680,  680,  680,  681,  681,
      681,  681,  681,  682,  682,  682,  682,  682,  683,  683,
      683,  683,  683,  684,  684,  684,  684,  684,  685,  685,
        0,  685,  685,  686,  686,  686,  686,  686,  687,  687,

      687,  687,  687,  688,  688,  688,  688,  688,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  692,  692,  692,  692,  692,  692,    0,
      692,    0,    0,  692,  693,  693,  693,  693,  694,  694,
      694,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  697,  697,  697,  697,  697,  698,  698,  698,  698,
      698,  699,    0,  699,  699,  699,  699,    0,  699,    0,
        0,  699,  700,  700,  700,  700,  700,  701,  701,  701,
      701,  701,  702,    0,  702,  702,  702,  702,    0,  702,
        0,    0,  702,  703,  703,  703,  703,  703,  704,  704,

      704,  704,  704,  705,  705,  705,  705,  705,  705,    0,
      705,    0,    0,  705,  706,  706,  706,  706,  707,  707,
      707,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  710,  710,  710,  710,  710,  711,  711,  711,  711,
      711,  712,    0,  712,  712,  712,  712,    0,  712,    0,
        0,  712,  713,  713,  713,  713,  713,  714,  714,  714,
      714,  714,  715,  715,  715,  715,  715,  716,  716,  716,
      716,  716,  717,  717,  717,  717,  717,  718,  718,  718,
      718,  718,  719,  719,  719,  719,  719,  720,  720,  720,
      720,  720,  721,  721,  721,  721,  721,  722,  722,  722,

      722,  722,  723,  723,  723,  723,  723,  724,  724,  724,
      724,    0,  724,    0,    0,  724,  725,  725,  725,  725,
      725,  726,  726,  726,  726,  726,  727,  727,  727,  728,
        0,  728,  729,  729,  729,  729,  729,  730,  730,  730,
      730,  730,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  734,  734,    0,
      734,  734,  735,  735,  735,    0,  735,  736,  736,  736,
      736,  736,  737,  737,  737,  737,  737,  738,  738,  738,
      738,  738,  739,  739,  739,  739,  739,  740,  740,  740,
      740,  740,  741,  741,  741,  741,  741,  742,  742,  742,

      742,  742,  743,  743,  743,  743,  743,  744,  744,  744,
      744,  744,  745,  745,  745,  745,  745,  746,  746,  746,
      746,  746,  747,  747,  747,  747,  747,  748,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  749,    0,  749,
        0,    0,  749,  750,  750,  750,  750,  750,  751,  751,
      751,  751,  751,  752,  752,  752,  752,  752,  753,  753,
      753,  753,  753,  754,  754,  754,  754,  754,  755,  755,
      755,  755,  755,  756,  756,  756,  756,  756,  756,    0,
      756,    0,    0,  756,  757,  757,  757,  757,  757,  758,
      758,  758,  758,  758,  759,  759,  759,  759,  759,  760,

      760,  760,  760,  760,  761,  761,  761,  761,  761,  762,
      762,  762,  762,  762,  763,  763,  763,  763,  763,  764,
        0,  764,  765,  765,  765,  765,  765,  766,  766,  766,
      766,  766,  767,  767,  767,  767,  767,  768,  768,  768,
      768,  768,  769,  769,  769,  769,  769,  770,  770,  770,
      770,  770,  771,  771,  771,  771,  771,  772,  772,  772,
      772,  772,  773,  773,  773,  773,  773,  774,  774,  774,
      774,  774,  774,    0,  774,    0,    0,  774,  775,  775,
      775,  775,  775,  776,  776,  776,  776,  776,  777,  777,
      777,  777,  777,  777,    0,  777,    0,    0,  777,  778,

      778,  778,  778,  778,  779,  779,  779,  779,  779,  780,
      780,  780,  780,  780,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553
    } ;

static yyconst flex_int16_t yy_rule_linenum[38] =
    {   0,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
      118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  144
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/TrigSScanner.lpp"
/* $Id: TrigSScanner.lpp,v 1.3 2008-10-03 07:06:04 eric Exp $ -*- mode: c++ -*- */
/** \file TrigSScanner.ll Define the Flex lexical scanner */
#line 5 "lib/TrigSScanner.lpp"

#include "TrigSParser/TrigSParser.hpp"
#include "TrigSScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::TrigSParser::token token;
typedef w3c_sw::TrigSParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TrigSFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 53 "lib/TrigSScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* START patterns for SPARQLfed terminals */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 1700 "lib/TrigSScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 107 "lib/TrigSScanner.lpp"

#line 1864 "lib/TrigSScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 554 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 553 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 38 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 38 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 39 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 108 "lib/TrigSScanner.lpp"
{ /* yylloc->step(); @@ needed? useful? */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 109 "lib/TrigSScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 110 "lib/TrigSScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 111 "lib/TrigSScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 112 "lib/TrigSScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 113 "lib/TrigSScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 114 "lib/TrigSScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 115 "lib/TrigSScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 116 "lib/TrigSScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 117 "lib/TrigSScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 118 "lib/TrigSScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "lib/TrigSScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 120 "lib/TrigSScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 121 "lib/TrigSScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 122 "lib/TrigSScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 123 "lib/TrigSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", yytext); return token::IT_true;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 124 "lib/TrigSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", yytext); return token::IT_false;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 125 "lib/TrigSScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lib/TrigSScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 136 "lib/TrigSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 137 "lib/TrigSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lib/TrigSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lib/TrigSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 140 "lib/TrigSScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 141 "lib/TrigSScanner.lpp"
{yylval->p_POS = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lib/TrigSScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lib/TrigSScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lib/TrigSScanner.lpp"
{yylval->p_POS = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 146 "lib/TrigSScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 147 "lib/TrigSScanner.lpp"
ECHO;
	YY_BREAK
#line 2172 "lib/TrigSScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TrigSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TrigSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TrigSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TrigSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 554 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 554 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 553);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TrigSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TrigSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TrigSfree((void *) b->yy_ch_buf  );

	TrigSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TrigSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TrigSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TrigSalloc(new_size  );

		else
			(yy_start_stack) = (int *) TrigSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TrigSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TrigSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TrigSfree (void * ptr )
{
	free( (char *) ptr );	/* see TrigSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 147 "lib/TrigSScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START TrigSScanner */
namespace w3c_sw {

TrigSScanner::TrigSScanner (TrigSDriver* driver, std::istream* in, std::ostream* out) : TrigSFlexLexer(in, out), driver(driver) {  }
TrigSScanner::~TrigSScanner () {  }

TrigSParser::token_type TrigSScanner::typedLiteral (TrigSParser::semantic_type*& yylval, TrigSParser::token_type tok) {
    std::istringstream is(yytext);
    std::ostringstream normalized;

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	normalized << i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	normalized << f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	normalized << d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

TrigSParser::token_type TrigSScanner::unescape (TrigSParser::semantic_type*& yylval, size_t skip, TrigSParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* TrigSScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index));
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << " asdf";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void TrigSScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END TrigSScanner */

const URI* TrigSScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}

} // END namespace w3c_sw

/* This implementation of TrigSFlexLexer::yylex() is required to fill the
 * vtable of the class TrigSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the TrigSScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TrigSFlexLexer::yylex()
{
    std::cerr << "in TrigSFlexLexer::yylex() !" << std::endl;
    return 0;
}


