#line 2 "lib/TrigSScanner.cpp"

#line 4 "lib/TrigSScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TrigSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TrigSalloc (yy_size_t  );
void *TrigSrealloc (void *,yy_size_t  );
void TrigSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[570] =
    {   0,
        0,    0,   42,   40,    2,    1,    1,   40,    2,   40,
        7,    8,   15,   10,   16,    9,   22,   37,   11,   40,
       40,   40,   40,   40,   13,   14,   40,   40,   12,    5,
        6,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
        2,    1,    0,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   33,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0,   24,    0,   26,   23,   23,   22,    0,   38,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,   21,   21,    0,    0,   37,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   36,   17,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   34,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   33,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   25,    0,
       27,   27,    0,    0,   23,    0,    0,   28,   38,    0,
       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   38,   38,   38,   38,   38,   38,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   21,   21,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   39,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   25,    0,    0,   30,    0,   27,
        0,    0,   29,    0,   28,    0,   28,   38,   38,   38,
       38,   38,   38,   38,   38,   38,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
       38,   38,   38,   38,    0,    0,    0,    0,    0,    0,
       21,   21,   21,    0,    0,    0,    0,    0,    0,    0,
        0,   18,   39,    0,   39,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   39,   39,   39,
       39,   39,   39,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   30,    0,

       30,    0,   29,    0,   29,   38,   38,   38,   38,   38,
        0,    0,   38,    4,   21,    0,   19,   39,   39,   39,
       39,   39,   39,   39,   39,   39,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   39,
       39,   39,   39,   39,    0,    0,   32,    0,    0,    0,
        0,   31,    0,    0,    0,    0,   38,   21,   39,   39,
       39,   39,   39,    0,    0,   39,    3,   39,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    9,   10,
       11,    8,   12,   13,   14,   15,    8,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
        8,   20,    8,   21,   22,   23,   24,   24,   25,   26,
       24,   24,   27,   24,   24,   28,   24,   24,   24,   29,
       24,   30,   31,   32,   33,   24,   24,   34,   24,   24,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   42,

       43,   44,   42,   42,   45,   42,   42,   46,   42,   47,
       42,   48,   42,   49,   50,   51,   52,   42,   42,   53,
       42,   42,   54,    1,   55,    8,    8,   56,   57,   58,
       58,   58,   58,   59,   60,   60,   60,   60,   60,   61,
       61,   60,   62,   63,   63,   63,   63,   63,   63,   63,
       64,   65,   65,   65,   65,   65,   65,   65,   65,   66,
       66,   66,   66,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   68,   68,   68,   68,   68,
       68,   68,   69,   70,   70,   70,   70,   70,   70,   71,
       72,   73,   73,   74,   75,   76,   76,   76,   76,   76,

       76,   76,   76,   77,   78,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   80,   81,   82,   83,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   85,   86,   87,   88,
       89,   89,   89,   90,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73
    } ;

static yyconst flex_int32_t yy_meta[91] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    4,    3,    5,    3,    3,    1,    3,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    3,    1,    3,    1,    3,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1,    7,    7,    7,    7,    7,
        7,    8,    7,    9,    7,    7,    7,    7,    9,    7,
       10,   11,   12,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[797] =
    {   0,
        0,    0,  991, 4194,   89, 4194,  986,   89,  118,  200,
       94, 4194,   77, 4194,   85,  957,   87,  275, 4194,  345,
       81,  422,   84,   77,  111, 4194,  934,  954,    0, 4194,
     4194,    0,    0,   75,   82,    0,   49,    0,   59,   77,
        0,   86,    0,  154,  891,    0,  156,  114,  163,    0,
      106, 4194,  506,  928,  343,    0,    0,    0,  171,    0,
      188,    0,  303,    0,  128,  535,    0,    0,    0,  188,
        0,  339,    0,  450,    0,  207,  617,  908,  518,    0,
        0,    0,  342,    0,  472,    0,  480,    0,  514,  378,
     4194,  900,  612,  899,  614,  615,  616,  618,  257,  694,

        0,    0,  542,  588,    0,  224,    0,  322,  488,    0,
      596,    0,  613,  843,    0,  728,  243,  731,    0,  784,
     4194,    0,    0,    0,  605,    0,  749,    0,  752,    0,
      769,  884,  539,  299,  861,  880,  935,    0,  840,    0,
      775,    0,  782,    0,  643,  813,    0,  324,  587,  779,
        0,  959,    0,  976,  798,    0,  978,  309,  985,    0,
       81,  407, 1056, 4194, 4194, 1078,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  791,  884,    0,    0,  789,
        0,    0,    0,  994,    0,    0, 4194, 1162,    0,  743,
        0,    0,    0,    0,    0,    0,    0,    0,  713,    0,

        0,    0,    0,    0,    0,    0, 4194, 1244,    0,  712,
        0,    0,    0,    0,    0,    0,    0, 1052, 1053,  674,
     1054, 1055,  841, 1060, 1139, 1069,  716,  714, 1321,    0,
        0,  673,    0, 1030,    0, 1113,    0, 1108,  618,    0,
      616, 1117, 1119,    0, 1133,    0, 1138,  622,    0, 1154,
      374, 1191,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  599, 1157,    0,    0,  598,    0,    0,    0, 1196,
        0,    0,    0,  615,    0,    0,    0,    0,    0,    0,
        0,    0,  717, 1256, 1397,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  344, 1203,    0,    0,  586,

        0,    0,    0, 1214,    0,    0,  426,  435, 1473,    0,
        0, 1231, 1251,    0, 1226,    0, 1128, 1163,    0, 1497,
        0, 1514,  582,    0, 1516,  471, 1523,    0,    0,    0,
        0,    0,    0,    0,    0, 1590, 1675, 1591,    0,    0,
        0, 1535,    0, 1552,    0, 1619,    0, 1244, 1760,    0,
        0,    0, 1789,    0,    0,    0, 1871, 1953, 1612,    0,
        0,    0, 1626,    0, 1643,    0, 1649,    0, 1666, 2035,
        0,    0,    0, 1326, 1391, 1478,  620,  619, 1608, 1603,
     1617,  592,  590,  589,  561,  560,  548, 2112,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  494, 1660,

        0,    0,  507,    0,    0,    0, 1670,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 2182,    0,    0,    0,
      527, 1611, 1753, 2259,    0,    0,    0,    0,    0,    0,
      452,    0, 2335,    0,    0,  470,    0, 1712,    0, 1724,
        0, 1719,  456,    0, 1570, 1580, 1730,    0, 1737,    0,
     1755,  467,    0, 1825,  812, 1828,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  447, 1745,    0,    0,  402,
        0,    0,    0, 1759,    0,    0, 2411, 2495,    0,  381,
        0,    0,    0,    0,    0,    0,    0, 2577,    0,  378,
        0,    0,    0,    0,    0,    0,    0,  390,  369,  345,

      315,  314,  254,  245,  175, 2654,    0,    0,    0,    0,
        0,    0,    0,  148, 1887,    0,    0, 2730,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1012, 1784,
        0,    0,  104,    0,    0,    0, 1834,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4194, 2814,    0,    0,
        0, 4194, 2896,    0,    0,    0,    0,  956,    0,    0,
        0,    0,    0,    0,    0,    0,  145,    0, 4194, 2986,
     2997, 3008, 3017,  144, 3022, 3027, 3032, 3037, 3042, 3047,
     3052, 3057, 3062, 3067, 3072, 3076, 3079, 3084, 3089, 3094,
     3105, 3110, 3114, 3117, 3122, 3127, 3132, 3143, 3148, 3152,

     3155, 3160, 3165, 3170, 3175, 3180, 3185, 3190, 3195, 3200,
     3205, 3210, 3215, 3220, 3229, 3234, 3238, 3241, 3246, 3251,
     3256, 3264, 3264, 3269, 3274, 3279, 3284, 3289, 3294, 3299,
     3304, 3309, 3314, 3319, 3324, 3329, 3334, 3339, 3344, 3349,
     3354, 3365, 3370, 3375, 3380, 3385, 3390, 3395, 3400, 3405,
     3410, 3415, 3420, 3425, 3436, 3441, 3446, 3451, 3456, 3461,
     3466, 3471, 3476, 3481, 3486, 3491, 3496, 3501, 3506, 3511,
     3516, 3521, 3526, 3531, 3536, 3541, 3546, 3551, 3556, 3561,
     3566, 3571, 3576, 3581, 3586, 3591, 3598, 3601, 3601, 3606,
     3611, 3616, 3621, 3626, 3631, 3636, 3641, 3646, 3651, 3656,

     3661, 3666, 3671, 3676, 3681, 3686, 3691, 3702, 3707, 3711,
     3714, 3719, 3724, 3729, 3740, 3745, 3750, 3761, 3766, 3771,
     3782, 3787, 3791, 3794, 3799, 3804, 3809, 3820, 3825, 3830,
     3835, 3840, 3845, 3850, 3855, 3860, 3865, 3870, 3875, 3884,
     3889, 3894, 3902, 3905, 3905, 3910, 3915, 3920, 3925, 3930,
     3935, 3940, 3945, 3950, 3955, 3960, 3965, 3970, 3975, 3980,
     3985, 3990, 3995, 4000, 4011, 4016, 4021, 4026, 4031, 4036,
     4041, 4052, 4057, 4062, 4067, 4072, 4077, 4082, 4087, 4095,
     4095, 4100, 4105, 4110, 4115, 4120, 4125, 4130, 4135, 4146,
     4151, 4156, 4167, 4172, 4177, 4182

    } ;

static yyconst flex_int16_t yy_def[797] =
    {   0,
      569,    1,  569,  569,  569,  569,  569,  570,  571,  572,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  573,
      574,  569,   22,   22,  569,  569,  569,  569,   22,  569,
      569,  575,  576,  575,  575,  577,  578,  579,  579,  569,
      580,  569,  581,  582,  582,  583,  569,  569,  569,  584,
      569,  569,  570,  569,  569,  585,  586,  587,  569,  588,
      569,  589,  569,  590,  569,  591,  592,  593,  594,  569,
      595,  569,  596,  569,  597,  569,  598,  569,  569,  599,
      600,  601,  569,  602,  569,  603,  569,  604,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      605,  606,  605,  605,  607,  608,  609,  609,  569,  610,
      569,  611,  612,  612,  613,  569,  569,  569,  614,  615,
      569,  616,  617,  618,  569,  619,  569,  620,  569,  621,
      569,  622,  622,  622,  569,  135,  569,  135,  623,  624,
      623,  623,  623,  625,  626,  569,  627,  627,  627,  628,
      629,  569,  630,  631,  631,  632,  569,  569,  569,  633,
      135,  135,  569,  569,  569,  569,  135,  135,  135,  135,
      135,  135,  135,  634,  635,  636,  636,  636,  637,  638,
      638,  636,  639,  569,  640,  641,  569,  642,  643,  569,
      644,  645,  644,  644,  646,  647,  648,  649,  569,  650,

      651,  650,  650,  652,  653,  654,  569,  655,  656,  569,
      657,  658,  657,  657,  659,  660,  661,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  229,
      229,  662,  663,  662,  662,  662,  664,  665,  569,  666,
      666,  666,  667,  668,  569,  669,  670,  670,  671,  569,
      569,  569,  672,  229,  229,  229,  229,  229,  229,  673,
      674,  675,  675,  675,  676,  677,  677,  675,  678,  569,
      679,  680,  681,  569,  682,  683,  682,  682,  684,  685,
      686,  687,  688,  688,  569,  285,  285,  285,  285,  285,
      285,  285,  285,  689,  690,  691,  691,  691,  692,  693,

      693,  691,  694,  569,  695,  696,  285,  285,  569,  697,
      698,  697,  697,  699,  700,  701,  701,  569,  702,  569,
      703,  704,  704,  705,  569,  569,  569,  706,  285,  285,
      285,  285,  285,  707,  707,  708,  708,  569,  709,  710,
      711,  569,  712,  569,  713,  569,  714,  569,  715,  716,
      716,  717,  718,  719,  719,  720,  721,  721,  569,  722,
      723,  724,  569,  725,  569,  726,  569,  727,  569,  728,
      729,  729,  730,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  388,  388,
      388,  388,  388,  388,  388,  388,  731,  732,  733,  733,

      733,  734,  735,  735,  733,  736,  569,  737,  738,  388,
      388,  388,  388,  388,  739,  739,  740,  741,  741,  742,
      743,  744,  744,  569,  424,  424,  424,  424,  745,  745,
      424,  424,  569,  433,  433,  746,  747,  746,  746,  746,
      748,  749,  569,  750,  750,  750,  751,  752,  569,  753,
      754,  754,  755,  569,  569,  569,  756,  433,  433,  433,
      433,  433,  433,  757,  758,  759,  759,  759,  760,  761,
      761,  759,  762,  569,  763,  764,  569,  765,  766,  569,
      767,  768,  767,  767,  769,  770,  771,  772,  773,  569,
      774,  775,  774,  774,  776,  777,  778,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  506,  506,  506,  506,
      779,  779,  506,  780,  780,  477,  477,  569,  518,  518,
      518,  518,  518,  518,  518,  518,  781,  782,  783,  783,
      783,  784,  785,  785,  783,  786,  569,  787,  788,  518,
      518,  518,  518,  518,  789,  789,  569,  790,  791,  791,
      792,  569,  793,  794,  794,  795,  506,  780,  518,  518,
      518,  518,  518,  796,  796,  518,  780,  518,    0,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569

    } ;

static yyconst flex_int16_t yy_nxt[4285] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,    4,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,    4,
       21,   22,   22,   22,   22,   23,   22,   22,   22,   22,
       22,   24,   22,   22,   25,    4,   26,   27,   28,   29,
       22,   22,   22,   23,   22,   22,   22,   22,   22,   22,
       24,   22,   22,   30,   31,    4,   32,   33,   34,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   35,   36,
       36,   37,    4,    4,   38,   39,    4,   40,   41,   42,
       43,   44,   45,   46,   47,    4,   48,   49,   50,    4,
       51,   92,   93,   51,   54,   90,   90,   90,   90,   94,

       95,   97,   98,  133,   91,  161,  162,   51,  307,  134,
       51,   99,  163,  163,  163,  163,  170,  170,  170,  167,
      167,  133,  172,  161,   55,  162,  307,  172,  134,   99,
      168,  168,  168,  168,  168,  168,  168,  169,  169,  169,
      169,  169,  169,  169,  173,  173,  173,  164,  173,  132,
       56,  174,  174,  174,  174,  174,  174,  174,  282,  519,
       57,  282,   58,   58,   58,   58,   58,   58,   59,   60,
       60,   60,   60,   61,   62,   62,   63,   64,   65,   67,
      183,  183,  184,  197,  197,  197,  197,  197,  197,   68,
      505,   69,   69,   69,   69,   69,   69,   70,   71,   71,

       71,   71,   72,   73,   73,   74,   75,   76,   78,  176,
      177,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  179,  179,  179,  179,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,   79,  191,  191,  191,  191,
      191,  191,  191,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  200,  200,  200,  200,  200,  200,  200,
      505,   80,  206,  206,  206,  206,  206,  206,  227,  503,
      227,   81,  228,   82,   82,   82,   82,   82,   82,   83,
       84,   84,   84,   84,   85,   86,   86,   87,   88,   89,
      100,  257,  257,  257,  254,  254,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  269,
      269,  270,  282,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  284,  503,
      501,  101,  102,  103,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  104,  105,  105,  106,  284,   53,  107,
      108,   53,  109,  110,  111,  112,  113,  114,  115,  116,
      501,  117,  118,  119,  121,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  303,  303,  304,   53,   90,
       90,   90,   90,   53,  499,  100,   53,  138,   91,   53,
      100,   53,  138,   53,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  287,  499,  122,  211,  211,  211,
      211,  211,  211,  211,  357,  285,  123,  336,  124,  124,
      124,  124,  124,  124,  125,  126,  126,  126,  126,  127,
      128,  128,  129,  130,  131,  135,  136,  135,  137,  308,
      406,  406,  407,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  431,  458,  308,  432,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  431,  517,  432,  139,  140,
      141,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      143,  144,  144,  145,  517,  146,  147,  148,  149,  150,

      151,  152,  153,  154,  155,  156,  157,  459,  158,  159,
      160,  187,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  533,   77,  433,  518,   77,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  473,  473,  474,
      282,   55,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  282,   77,  390,  259,  259,  259,   77,  259,
      283,   77,  389,  387,   77,  388,   77,   56,   77,  217,
      217,  217,  217,  217,  217,  387,  385,   57,  283,   58,
       58,   58,   58,   58,   58,   59,   60,   60,   60,   60,
       61,   62,   62,   63,   64,   65,   67,  255,  255,  255,

      255,  255,  255,  255,  385,  383,   68,  383,   69,   69,
       69,   69,   69,   69,   70,   71,   71,   71,   71,   72,
       73,   73,   74,   75,   76,  207,  219,   93,  222,   95,
       96,  225,   97,   98,  378,  378,  220,  470,  223,  224,
      226,  286,   99,  256,  256,  256,  256,  256,  256,  256,
      138,  120,   79,  254,  220,  138,  223,  224,  226,  255,
       99,  260,  260,  260,  260,  260,  260,  260,  262,  263,
      275,  275,  275,  275,  275,  275,  275,  403,   80,  231,
      265,  265,  265,  265,  231,  377,  229,  377,   81,  378,
       82,   82,   82,   82,   82,   82,   83,   84,   84,   84,

       84,   85,   86,   86,   87,   88,   89,  229,  230,  229,
      289,  289,  289,  286,  286,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  388,  228,
      282,  228,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  422,   77,   66,
      232,  233,  234,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  236,  237,  237,  238,  422,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  250,   53,
      251,  252,  253,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  121,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  281,  281,  281,  281,  281,  281,
      287,  287,  287,  287,  287,  287,  287,  288,  288,  288,
      288,  288,  288,  288,  167,  122,  292,  292,  292,  138,
      292,  168,  382,  300,  382,  123,  383,  124,  124,  124,
      124,  124,  124,  125,  126,  126,  126,  126,  127,  128,
      128,  129,  130,  131,  135,  136,  135,  137,  536,  536,
      537,  135,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  285,  569,  282,  266,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  221,  218,  208,  139,  140,  141,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  143,
      144,  144,  145,  188,  146,  147,  148,  149,  150,  151,
      152,  153,  154,  155,  156,  157,  180,  158,  159,  160,
      100,  168,  168,  168,  168,  168,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  282,
      166,  165,   96,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   52,  567,
      569,  101,  102,  103,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  104,  105,  105,  106,  569,  567,  107,
      108,  569,  109,  110,  111,  112,  113,  114,  115,  116,
      569,  117,  118,  119,  294,  294,  294,  294,  294,  294,
      294,  296,  297,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  299,  299,  299,  299,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  163,  163,  163,
      163,  333,  333,  333,  333,  333,  569,  218,  375,  221,
      380,  384,  520,  384,  569,  385,  374,  376,  379,  381,
      386,  569,  386,  518,  387,  390,  390,  390,  390,  390,
      390,  390,  164,  309,  374,  376,  379,  381,  569,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  569,  569,  569,  569,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  569,  569,  569,  310,  311,  312,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  313,  314,  314,  315,
      569,  569,  316,  317,  225,  318,  319,  320,  321,  322,
      323,  324,  325,  226,  326,  327,  328,  337,  391,  391,
      391,  391,  391,  391,  391,  392,  392,  392,  389,  389,
      231,  226,  569,  569,  569,  231,  395,  395,  395,  231,
      395,  309,  569,  399,  400,  569,  309,  338,  397,  397,

      397,  397,  397,  397,  397,  402,  402,  402,  402,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  569,
      569,  569,  569,  339,  255,  255,  255,  255,  255,  569,
      463,  463,  463,  340,  463,  341,  341,  341,  341,  341,
      341,  342,  343,  343,  343,  343,  344,  345,  345,  346,
      347,  348,  358,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  414,  414,  414,  414,  414,  569,  282,
      287,  287,  287,  287,  287,  569,  569,  569,  569,  359,
      423,  428,  428,  428,  428,  428,  459,  459,  459,  459,
      459,  459,  459,  461,  461,  461,  458,  458,  423,  487,

      487,  487,  487,  487,  487,  360,  460,  460,  460,  460,
      460,  460,  460,  569,  569,  361,  569,  362,  362,  362,
      362,  362,  362,  363,  364,  364,  364,  364,  365,  366,
      366,  367,  368,  369,  229,  230,  229,  498,  569,  498,
      569,  499,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  569,  569,  569,  569,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  569,  569,  569,  232,  233,  234,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  236,
      237,  237,  238,  569,  239,  240,  241,  242,  243,  244,

      245,  246,  247,  248,  249,  250,  375,  251,  252,  253,
      135,  136,  135,  137,  569,  376,  569,  569,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  569,  569,  376,  569,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      569,  569,  569,  139,  140,  141,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  143,  144,  144,  145,  569,
      146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
      156,  157,  569,  158,  159,  160,  433,  434,  433,  500,
      569,  500,  569,  501,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  569,  569,  569,
      569,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  569,  569,  569,  436,
      437,  438,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  441,  441,  442,  569,  443,  444,  445,  446,
      447,  448,  449,  450,  451,  452,  453,  454,  569,  455,
      456,  457,  464,  464,  464,  464,  464,  464,  464,  466,
      467,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  469,  469,  469,  469,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  337,  336,  569,  569,  336,

      481,  481,  481,  481,  481,  481,  481,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  357,  380,  502,
      357,  502,  569,  503,  282,  338,  336,  381,  504,  569,
      504,  336,  505,  435,  336,  514,  569,  336,  435,  336,
      569,  336,  569,  435,  569,  381,  569,  357,  435,  569,
      569,  339,  357,  514,  569,  357,  569,  569,  357,  569,
      357,  340,  357,  341,  341,  341,  341,  341,  341,  342,
      343,  343,  343,  343,  344,  345,  345,  346,  347,  348,
      478,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  491,  491,  491,  491,  491,  491,  491,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  569,  569,
      338,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  497,  497,  497,  497,  497,  497,  390,  390,  390,
      390,  390,  569,  569,  569,  569,  339,  510,  510,  510,
      510,  510,  569,  569,  569,  569,  340,  569,  341,  341,
      341,  341,  341,  341,  342,  343,  343,  343,  343,  344,
      345,  345,  346,  347,  348,  187,  282,  520,  520,  520,
      520,  520,  520,  520,  569,  569,  569,  569,  515,  521,
      521,  521,  521,  521,  521,  521,  522,  522,  522,  519,
      519,  569,  569,  569,  569,   55,  515,  525,  525,  525,

      435,  525,  527,  527,  527,  527,  527,  527,  527,  569,
      529,  530,  459,  459,  459,  459,  459,  569,  569,  569,
      569,   56,  532,  532,  532,  532,  544,  544,  544,  544,
      544,   57,  569,   58,   58,   58,   58,   58,   58,   59,
       60,   60,   60,   60,   61,   62,   62,   63,   64,   65,
       67,  520,  520,  520,  520,  520,  569,  569,  569,  569,
       68,  569,   69,   69,   69,   69,   69,   69,   70,   71,
       71,   71,   71,   72,   73,   73,   74,   75,   76,  358,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,

      282,  563,  563,  563,  563,  563,  359,  569,  569,  569,
      569,  569,  569,  558,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  558,  360,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  361,  569,  362,  362,  362,  362,  362,  362,
      363,  364,  364,  364,  364,  365,  366,  366,  367,  368,
      369,  488,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  359,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  360,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  361,  569,  362,  362,  362,  362,
      362,  362,  363,  364,  364,  364,  364,  365,  366,  366,
      367,  368,  369,  207,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
       79,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,   80,  569,  569,  569,

      569,  569,  569,  569,  569,  569,   81,  569,   82,   82,
       82,   82,   82,   82,   83,   84,   84,   84,   84,   85,
       86,   86,   87,   88,   89,  229,  230,  229,  569,  569,
      569,  569,  569,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  569,  569,  569,  569,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  569,  569,  569,  232,  233,
      234,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      236,  237,  237,  238,  569,  239,  240,  241,  242,  243,
      244,  245,  246,  247,  248,  249,  250,  569,  251,  252,

      253,  121,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  122,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  123,  569,  124,  124,  124,  124,  124,
      124,  125,  126,  126,  126,  126,  127,  128,  128,  129,
      130,  131,  135,  136,  135,  137,  569,  569,  569,  569,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  569,  569,  569,  569,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  569,  569,  569,  139,  140,  141,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  143,  144,  144,
      145,  569,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  569,  158,  159,  160,  433,  434,
      433,  569,  569,  569,  569,  569,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  569,
      569,  569,  569,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  569,  569,
      569,  436,  437,  438,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  440,  441,  441,  442,  569,  443,  444,
      445,  446,  447,  448,  449,  450,  451,  452,  453,  454,
      569,  455,  456,  457,  135,  136,  135,  137,  569,  569,
      569,  569,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  569,  569,  569,  569,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  569,  569,  569,  139,  140,  141,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  143,
      144,  144,  145,  569,  146,  147,  148,  149,  150,  151,
      152,  153,  154,  155,  156,  157,  569,  158,  159,  160,

      547,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      338,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  339,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  340,  569,  341,  341,
      341,  341,  341,  341,  342,  343,  343,  343,  343,  344,
      345,  345,  346,  347,  348,  552,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  359,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  360,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  361,  569,
      362,  362,  362,  362,  362,  362,  363,  364,  364,  364,
      364,  365,  366,  366,  367,  368,  369,  229,  230,  229,
      569,  569,  569,  569,  569,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  569,  569,
      569,  569,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  569,  569,  569,
      232,  233,  234,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  236,  237,  237,  238,  569,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  250,  569,
      251,  252,  253,  433,  434,  433,  569,  569,  569,  569,
      569,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  569,  569,  569,  569,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  569,  569,  569,  436,  437,  438,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  440,  441,

      441,  442,  569,  443,  444,  445,  446,  447,  448,  449,
      450,  451,  452,  453,  454,  569,  455,  456,  457,  337,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  338,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  339,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  340,  569,  341,  341,  341,
      341,  341,  341,  342,  343,  343,  343,  343,  344,  345,

      345,  346,  347,  348,  358,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  359,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  360,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  361,  569,  362,
      362,  362,  362,  362,  362,  363,  364,  364,  364,  364,
      365,  366,  366,  367,  368,  369,   53,  569,   53,   53,
       53,   53,  569,   53,  569,  569,   53,   66,  569,   66,

       66,   66,   66,  569,   66,  569,  569,   66,   77,  569,
       77,   77,   77,   77,  569,   77,  569,  569,   77,  120,
      120,  120,  120,  569,  120,  569,  569,  120,  167,  167,
      167,  167,  167,  168,  168,  168,  168,  168,  170,  170,
      170,  170,  170,  171,  171,  171,  171,  171,  172,  172,
      569,  172,  172,  173,  173,  173,  173,  173,  175,  175,
      175,  175,  175,  178,  178,  178,  178,  178,  181,  181,
      181,  181,  181,  186,  186,  186,  186,  186,  189,  189,
      189,  189,  190,  190,  190,   53,   53,   53,   53,   53,
      192,  192,  192,  192,  192,  194,  194,  194,  194,  194,

      196,  196,  196,  196,  196,   66,  569,   66,   66,   66,
       66,  569,   66,  569,  569,   66,  198,  198,  198,  198,
      199,  199,  199,   66,   66,   66,   66,   66,  201,  201,
      201,  201,  201,  203,  203,  203,  203,  203,  205,  205,
      205,  205,  205,   77,  569,   77,   77,   77,   77,  569,
       77,  569,  569,   77,  209,  209,  209,  209,  210,  210,
      210,   77,   77,   77,   77,   77,  212,  212,  212,  212,
      212,  214,  214,  214,  214,  214,  216,  216,  216,  216,
      216,  254,  254,  254,  254,  254,  255,  255,  255,  255,
      255,  257,  257,  257,  257,  257,  258,  258,  258,  258,

      258,  100,  100,  569,  100,  100,  259,  259,  259,  259,
      259,  261,  261,  261,  261,  261,  264,  264,  264,  264,
      264,  267,  267,  267,  267,  267,  272,  272,  272,  272,
      272,  120,  120,  120,  120,  569,  120,  569,  569,  120,
      273,  273,  273,  273,  274,  274,  274,  120,  120,  120,
      120,  120,  276,  276,  276,  276,  276,  278,  278,  278,
      278,  278,  280,  280,  280,  280,  280,  132,  569,  132,
      286,  286,  286,  286,  286,  287,  287,  287,  287,  287,
      289,  289,  289,  289,  289,  290,  290,  290,  290,  290,
      138,  138,  569,  138,  138,  291,  291,  291,  291,  291,

      293,  293,  293,  293,  293,  295,  295,  295,  295,  295,
      298,  298,  298,  298,  298,  301,  301,  301,  301,  301,
      306,  306,  306,  306,  306,  173,  173,  173,  173,  173,
      329,  329,  329,  329,  329,  167,  167,  167,  167,  167,
      330,  330,  330,  330,  330,  331,  331,  331,  331,  331,
      332,  332,  332,  332,  332,  334,  334,  334,  334,  334,
      335,  335,  335,  335,  335,  336,  336,  336,  336,  336,
      336,  569,  336,  569,  569,  336,  190,  190,  190,  190,
      190,   53,   53,   53,   53,   53,  349,  349,  349,  349,
      349,  350,  350,  350,  350,  350,  351,  351,  351,  351,

      351,  352,  352,  352,  352,  352,  199,  199,  199,  199,
      199,   66,   66,   66,   66,   66,  353,  353,  353,  353,
      353,  354,  354,  354,  354,  354,  355,  355,  355,  355,
      355,  356,  356,  356,  356,  356,  357,  357,  357,  357,
      357,  357,  569,  357,  569,  569,  357,  210,  210,  210,
      210,  210,   77,   77,   77,   77,   77,  370,  370,  370,
      370,  370,  371,  371,  371,  371,  371,  372,  372,  372,
      372,  372,  373,  373,  373,  373,  373,  389,  389,  389,
      389,  389,  390,  390,  390,  390,  390,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  231,  231,  569,

      231,  231,  394,  394,  394,  394,  394,  396,  396,  396,
      396,  396,  398,  398,  398,  398,  398,  401,  401,  401,
      401,  401,  404,  404,  404,  404,  404,  409,  409,  409,
      409,  409,  259,  259,  259,  259,  259,  410,  410,  410,
      410,  410,  254,  254,  254,  254,  254,  411,  411,  411,
      411,  411,  412,  412,  412,  412,  412,  413,  413,  413,
      413,  413,  415,  415,  415,  415,  415,  416,  416,  416,
      416,  416,  274,  274,  274,  274,  274,  120,  120,  120,
      120,  120,  417,  417,  417,  417,  417,  418,  418,  418,
      418,  418,  419,  419,  419,  419,  419,  420,  420,  420,

      420,  420,  421,  421,  132,  569,  132,  293,  293,  293,
      293,  293,  424,  424,  424,  424,  424,  286,  286,  286,
      286,  286,  425,  425,  425,  425,  425,  426,  426,  426,
      426,  426,  427,  427,  427,  427,  427,  429,  429,  429,
      429,  429,  430,  430,  430,  430,  430,  458,  458,  458,
      458,  458,  459,  459,  459,  459,  459,  461,  461,  461,
      461,  461,  462,  462,  462,  462,  462,  309,  309,  569,
      309,  309,  463,  463,  463,  463,  463,  465,  465,  465,
      465,  465,  468,  468,  468,  468,  468,  471,  471,  471,
      471,  471,  476,  476,  476,  476,  476,  477,  477,  477,

      477,  477,  336,  336,  336,  336,  336,  336,  569,  336,
      569,  569,  336,  479,  479,  479,  479,  480,  480,  480,
      336,  336,  336,  336,  336,  482,  482,  482,  482,  482,
      484,  484,  484,  484,  484,  486,  486,  486,  486,  486,
       53,  569,   53,   53,   53,   53,  569,   53,  569,  569,
       53,   53,   53,   53,   53,   53,  190,  190,  190,  190,
      190,   66,  569,   66,   66,   66,   66,  569,   66,  569,
      569,   66,   66,   66,   66,   66,   66,  199,  199,  199,
      199,  199,  357,  357,  357,  357,  357,  357,  569,  357,
      569,  569,  357,  489,  489,  489,  489,  490,  490,  490,

      357,  357,  357,  357,  357,  492,  492,  492,  492,  492,
      494,  494,  494,  494,  494,  496,  496,  496,  496,  496,
       77,  569,   77,   77,   77,   77,  569,   77,  569,  569,
       77,   77,   77,   77,   77,   77,  210,  210,  210,  210,
      210,  396,  396,  396,  396,  396,  506,  506,  506,  506,
      506,  389,  389,  389,  389,  389,  507,  507,  507,  507,
      507,  508,  508,  508,  508,  508,  509,  509,  509,  509,
      509,  511,  511,  511,  511,  511,  512,  512,  512,  512,
      512,  513,  513,  513,  513,  513,  120,  120,  120,  120,
      569,  120,  569,  569,  120,  120,  120,  120,  120,  120,

      274,  274,  274,  274,  274,  421,  421,  421,  132,  569,
      132,  516,  516,  516,  516,  516,  519,  519,  519,  519,
      519,  520,  520,  520,  520,  520,  522,  522,  522,  522,
      522,  523,  523,  523,  523,  523,  435,  435,  569,  435,
      435,  524,  524,  524,  524,  524,  526,  526,  526,  526,
      526,  528,  528,  528,  528,  528,  531,  531,  531,  531,
      531,  534,  534,  534,  534,  534,  539,  539,  539,  539,
      539,  463,  463,  463,  463,  463,  540,  540,  540,  540,
      540,  458,  458,  458,  458,  458,  541,  541,  541,  541,
      541,  542,  542,  542,  542,  542,  543,  543,  543,  543,

      543,  545,  545,  545,  545,  545,  546,  546,  546,  546,
      546,  336,  336,  336,  336,  336,  336,  569,  336,  569,
      569,  336,  480,  480,  480,  480,  480,  336,  336,  336,
      336,  336,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  549,  550,  550,  550,  550,  550,  551,  551,  551,
      551,  551,  357,  357,  357,  357,  357,  357,  569,  357,
      569,  569,  357,  490,  490,  490,  490,  490,  357,  357,
      357,  357,  357,  553,  553,  553,  553,  553,  554,  554,
      554,  554,  554,  555,  555,  555,  555,  555,  556,  556,
      556,  556,  556,  557,  557,  557,  557,  557,  132,  569,

      132,  526,  526,  526,  526,  526,  559,  559,  559,  559,
      559,  519,  519,  519,  519,  519,  560,  560,  560,  560,
      560,  561,  561,  561,  561,  561,  562,  562,  562,  562,
      562,  564,  564,  564,  564,  564,  565,  565,  565,  565,
      565,  566,  566,  566,  566,  566,  336,  336,  336,  336,
      336,  336,  569,  336,  569,  569,  336,  336,  336,  336,
      336,  336,  480,  480,  480,  480,  480,  357,  357,  357,
      357,  357,  357,  569,  357,  569,  569,  357,  357,  357,
      357,  357,  357,  490,  490,  490,  490,  490,  568,  568,
      568,  568,  568,    3,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569
    } ;

static yyconst flex_int16_t yy_chk[4285] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   13,   13,    5,    8,   11,   11,   11,   11,   15,

       15,   17,   17,   21,   11,   23,   24,   51,  161,   21,
       51,   17,   25,   25,   25,   25,   37,   37,   37,   37,
       37,   21,   39,   23,    8,   24,  161,   39,   21,   17,
       34,   34,   34,   34,   34,   34,   34,   35,   35,   35,
       35,   35,   35,   35,   40,   40,   40,   25,   40,  574,
        8,   42,   42,   42,   42,   42,   42,   42,  567,  533,
        8,  514,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
       48,   48,   48,   65,   65,   65,   65,   65,   65,    9,
      505,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,   10,   44,
       44,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   44,   44,   44,   44,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   10,   59,   59,   59,   59,
       59,   59,   59,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   70,   70,   70,   70,   70,   70,   70,
      504,   10,   76,   76,   76,   76,   76,   76,   99,  503,
       99,   10,   99,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       18,  106,  106,  106,  106,  106,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,  117,
      117,  117,  134,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,  134,  502,
      501,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,  134,   55,   18,
       18,   55,   18,   18,   18,   18,   18,   18,   18,   18,
      500,   18,   18,   18,   20,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,  158,  158,  158,   55,   90,
       90,   90,   90,   55,  499,  108,   55,  148,   90,   55,
      108,   55,  148,   55,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,  296,  498,   20,   83,   83,   83,
       83,   83,   83,   83,  490,  296,   20,  480,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   22,   22,   22,   22,  162,
      251,  251,  251,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,  307,  470,  162,  308,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,  307,  431,  308,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,  431,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,  466,   22,   22,
       22,   53,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,  452,   79,  443,  436,   79,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  326,  326,  326,
      421,   53,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,  133,   79,  399,  109,  109,  109,   79,  109,
      133,   79,  403,  387,   79,  399,   79,   53,   79,   89,
       89,   89,   89,   89,   89,  386,  385,   53,  133,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   66,  103,  103,  103,

      103,  103,  103,  103,  384,  383,   66,  382,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   77,   93,   93,   95,   95,
       96,   97,   98,   98,  378,  377,   93,  323,   95,   96,
       97,  300,   98,  104,  104,  104,  104,  104,  104,  104,
      149,  274,   77,  266,   93,  149,   95,   96,   97,  262,
       98,  111,  111,  111,  111,  111,  111,  111,  113,  113,
      125,  125,  125,  125,  125,  125,  125,  248,   77,  241,
      113,  113,  113,  113,  241,  220,  239,  220,   77,  220,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,  100,  100,  100,
      145,  145,  145,  145,  145,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  232,  228,
      283,  227,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  283,  210,  199,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  283,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  190,
      100,  100,  100,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  120,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  131,  131,  131,  131,  131,  131,
      141,  141,  141,  141,  141,  141,  141,  143,  143,  143,
      143,  143,  143,  143,  180,  120,  150,  150,  150,  150,
      150,  176,  223,  155,  223,  120,  223,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  135,  135,  135,  135,  455,  455,
      455,  146,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  139,  136,  132,  114,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,   94,   92,   78,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,   54,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   45,  135,  135,  135,
      137,  177,  177,  177,  177,  177,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  558,
       28,   27,   16,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,    7,  558,
        3,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,    0,  558,  137,
      137,    0,  137,  137,  137,  137,  137,  137,  137,  137,
        0,  137,  137,  137,  152,  152,  152,  152,  152,  152,
      152,  154,  154,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  154,  154,  154,  154,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  163,  163,  163,
      163,  184,  184,  184,  184,  184,    0,  218,  219,  221,
      222,  224,  529,  224,    0,  224,  218,  219,  221,  222,
      226,    0,  226,  529,  226,  234,  234,  234,  234,  234,
      234,  234,  163,  166,  218,  219,  221,  222,    0,  166,

      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,    0,    0,    0,    0,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,    0,    0,    0,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
        0,    0,  166,  166,  225,  166,  166,  166,  166,  166,
      166,  166,  166,  225,  166,  166,  166,  188,  236,  236,
      236,  236,  236,  236,  236,  238,  238,  238,  238,  238,
      242,  225,    0,    0,    0,  242,  243,  243,  243,  243,
      243,  317,    0,  247,  247,    0,  317,  188,  245,  245,

      245,  245,  245,  245,  245,  247,  247,  247,  247,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,    0,
        0,    0,    0,  188,  263,  263,  263,  263,  263,    0,
      318,  318,  318,  188,  318,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  208,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  270,  270,  270,  270,  270,    0,  284,
      297,  297,  297,  297,  297,    0,    0,    0,    0,  208,
      284,  304,  304,  304,  304,  304,  312,  312,  312,  312,
      312,  312,  312,  315,  315,  315,  315,  315,  284,  348,

      348,  348,  348,  348,  348,  208,  313,  313,  313,  313,
      313,  313,  313,    0,    0,  208,    0,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  229,  229,  229,  374,    0,  374,
        0,  374,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,    0,    0,    0,    0,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,    0,    0,    0,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,    0,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  375,  229,  229,  229,
      285,  285,  285,  285,    0,  375,    0,    0,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,    0,    0,  375,    0,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
        0,    0,    0,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,    0,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,    0,  285,  285,  285,  309,  309,  309,  376,
        0,  376,    0,  376,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,    0,    0,    0,
        0,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,    0,    0,    0,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,    0,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,    0,  309,
      309,  309,  320,  320,  320,  320,  320,  320,  320,  322,
      322,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  322,  322,  322,  322,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  336,  338,    0,    0,  338,

      342,  342,  342,  342,  342,  342,  342,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  359,  380,  379,
      359,  379,    0,  379,  422,  336,  338,  380,  381,    0,
      381,  338,  381,  445,  338,  422,    0,  338,  445,  338,
        0,  338,    0,  446,    0,  380,    0,  359,  446,    0,
        0,  336,  359,  422,    0,  359,    0,    0,  359,    0,
      359,  336,  359,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      337,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  363,  363,  363,  363,  363,  363,  363,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,    0,    0,
      337,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  369,  369,  369,  369,  369,  369,  400,  400,  400,
      400,  400,    0,    0,    0,    0,  337,  407,  407,  407,
      407,  407,    0,    0,    0,    0,  337,    0,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  349,  423,  438,  438,  438,
      438,  438,  438,  438,    0,    0,    0,    0,  423,  440,
      440,  440,  440,  440,  440,  440,  442,  442,  442,  442,
      442,    0,    0,    0,    0,  349,  423,  447,  447,  447,

      447,  447,  449,  449,  449,  449,  449,  449,  449,    0,
      451,  451,  467,  467,  467,  467,  467,    0,    0,    0,
        0,  349,  451,  451,  451,  451,  474,  474,  474,  474,
      474,  349,    0,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      353,  530,  530,  530,  530,  530,    0,    0,    0,    0,
      353,    0,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  357,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,

      515,  537,  537,  537,  537,  537,  357,    0,    0,    0,
        0,    0,    0,  515,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  515,  357,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  357,    0,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  358,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  358,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  358,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  358,    0,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  370,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  370,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  370,    0,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  388,  388,  388,    0,    0,
        0,    0,    0,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,    0,    0,    0,    0,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,    0,    0,    0,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,    0,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,    0,  388,  388,

      388,  417,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  417,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  417,    0,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  424,  424,  424,  424,    0,    0,    0,    0,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,    0,    0,    0,    0,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,    0,    0,    0,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,    0,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,    0,  424,  424,  424,  433,  433,
      433,    0,    0,    0,    0,    0,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,    0,
        0,    0,    0,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,    0,    0,
        0,  433,  433,  433,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,    0,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
        0,  433,  433,  433,  477,  477,  477,  477,    0,    0,
        0,    0,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,    0,    0,    0,    0,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,    0,    0,    0,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,    0,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,    0,  477,  477,  477,

      478,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      478,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  478,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  478,    0,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  488,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  488,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  488,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  488,    0,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  506,  506,  506,
        0,    0,    0,    0,    0,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,    0,    0,
        0,    0,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  506,    0,    0,    0,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,    0,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,    0,
      506,  506,  506,  518,  518,  518,    0,    0,    0,    0,
        0,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,    0,    0,    0,    0,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,    0,    0,    0,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,    0,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,    0,  518,  518,  518,  548,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  548,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  548,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  548,    0,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  553,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  553,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  553,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  553,    0,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  570,    0,  570,  570,
      570,  570,    0,  570,    0,    0,  570,  571,    0,  571,

      571,  571,  571,    0,  571,    0,    0,  571,  572,    0,
      572,  572,  572,  572,    0,  572,    0,    0,  572,  573,
      573,  573,  573,    0,  573,    0,    0,  573,  575,  575,
      575,  575,  575,  576,  576,  576,  576,  576,  577,  577,
      577,  577,  577,  578,  578,  578,  578,  578,  579,  579,
        0,  579,  579,  580,  580,  580,  580,  580,  581,  581,
      581,  581,  581,  582,  582,  582,  582,  582,  583,  583,
      583,  583,  583,  584,  584,  584,  584,  584,  585,  585,
      585,  585,  586,  586,  586,  587,  587,  587,  587,  587,
      588,  588,  588,  588,  588,  589,  589,  589,  589,  589,

      590,  590,  590,  590,  590,  591,    0,  591,  591,  591,
      591,    0,  591,    0,    0,  591,  592,  592,  592,  592,
      593,  593,  593,  594,  594,  594,  594,  594,  595,  595,
      595,  595,  595,  596,  596,  596,  596,  596,  597,  597,
      597,  597,  597,  598,    0,  598,  598,  598,  598,    0,
      598,    0,    0,  598,  599,  599,  599,  599,  600,  600,
      600,  601,  601,  601,  601,  601,  602,  602,  602,  602,
      602,  603,  603,  603,  603,  603,  604,  604,  604,  604,
      604,  605,  605,  605,  605,  605,  606,  606,  606,  606,
      606,  607,  607,  607,  607,  607,  608,  608,  608,  608,

      608,  609,  609,    0,  609,  609,  610,  610,  610,  610,
      610,  611,  611,  611,  611,  611,  612,  612,  612,  612,
      612,  613,  613,  613,  613,  613,  614,  614,  614,  614,
      614,  615,  615,  615,  615,    0,  615,    0,    0,  615,
      616,  616,  616,  616,  617,  617,  617,  618,  618,  618,
      618,  618,  619,  619,  619,  619,  619,  620,  620,  620,
      620,  620,  621,  621,  621,  621,  621,  622,    0,  622,
      623,  623,  623,  623,  623,  624,  624,  624,  624,  624,
      625,  625,  625,  625,  625,  626,  626,  626,  626,  626,
      627,  627,    0,  627,  627,  628,  628,  628,  628,  628,

      629,  629,  629,  629,  629,  630,  630,  630,  630,  630,
      631,  631,  631,  631,  631,  632,  632,  632,  632,  632,
      633,  633,  633,  633,  633,  634,  634,  634,  634,  634,
      635,  635,  635,  635,  635,  636,  636,  636,  636,  636,
      637,  637,  637,  637,  637,  638,  638,  638,  638,  638,
      639,  639,  639,  639,  639,  640,  640,  640,  640,  640,
      641,  641,  641,  641,  641,  642,  642,  642,  642,  642,
      642,    0,  642,    0,    0,  642,  643,  643,  643,  643,
      643,  644,  644,  644,  644,  644,  645,  645,  645,  645,
      645,  646,  646,  646,  646,  646,  647,  647,  647,  647,

      647,  648,  648,  648,  648,  648,  649,  649,  649,  649,
      649,  650,  650,  650,  650,  650,  651,  651,  651,  651,
      651,  652,  652,  652,  652,  652,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  655,  655,  655,  655,
      655,  655,    0,  655,    0,    0,  655,  656,  656,  656,
      656,  656,  657,  657,  657,  657,  657,  658,  658,  658,
      658,  658,  659,  659,  659,  659,  659,  660,  660,  660,
      660,  660,  661,  661,  661,  661,  661,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  664,  664,  664,
      664,  664,  665,  665,  665,  665,  665,  666,  666,    0,

      666,  666,  667,  667,  667,  667,  667,  668,  668,  668,
      668,  668,  669,  669,  669,  669,  669,  670,  670,  670,
      670,  670,  671,  671,  671,  671,  671,  672,  672,  672,
      672,  672,  673,  673,  673,  673,  673,  674,  674,  674,
      674,  674,  675,  675,  675,  675,  675,  676,  676,  676,
      676,  676,  677,  677,  677,  677,  677,  678,  678,  678,
      678,  678,  679,  679,  679,  679,  679,  680,  680,  680,
      680,  680,  681,  681,  681,  681,  681,  682,  682,  682,
      682,  682,  683,  683,  683,  683,  683,  684,  684,  684,
      684,  684,  685,  685,  685,  685,  685,  686,  686,  686,

      686,  686,  687,  687,  688,    0,  688,  689,  689,  689,
      689,  689,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  692,  692,  692,  692,  692,  693,  693,  693,
      693,  693,  694,  694,  694,  694,  694,  695,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  697,  697,  697,
      697,  697,  698,  698,  698,  698,  698,  699,  699,  699,
      699,  699,  700,  700,  700,  700,  700,  701,  701,    0,
      701,  701,  702,  702,  702,  702,  702,  703,  703,  703,
      703,  703,  704,  704,  704,  704,  704,  705,  705,  705,
      705,  705,  706,  706,  706,  706,  706,  707,  707,  707,

      707,  707,  708,  708,  708,  708,  708,  708,    0,  708,
        0,    0,  708,  709,  709,  709,  709,  710,  710,  710,
      711,  711,  711,  711,  711,  712,  712,  712,  712,  712,
      713,  713,  713,  713,  713,  714,  714,  714,  714,  714,
      715,    0,  715,  715,  715,  715,    0,  715,    0,    0,
      715,  716,  716,  716,  716,  716,  717,  717,  717,  717,
      717,  718,    0,  718,  718,  718,  718,    0,  718,    0,
        0,  718,  719,  719,  719,  719,  719,  720,  720,  720,
      720,  720,  721,  721,  721,  721,  721,  721,    0,  721,
        0,    0,  721,  722,  722,  722,  722,  723,  723,  723,

      724,  724,  724,  724,  724,  725,  725,  725,  725,  725,
      726,  726,  726,  726,  726,  727,  727,  727,  727,  727,
      728,    0,  728,  728,  728,  728,    0,  728,    0,    0,
      728,  729,  729,  729,  729,  729,  730,  730,  730,  730,
      730,  731,  731,  731,  731,  731,  732,  732,  732,  732,
      732,  733,  733,  733,  733,  733,  734,  734,  734,  734,
      734,  735,  735,  735,  735,  735,  736,  736,  736,  736,
      736,  737,  737,  737,  737,  737,  738,  738,  738,  738,
      738,  739,  739,  739,  739,  739,  740,  740,  740,  740,
        0,  740,    0,    0,  740,  741,  741,  741,  741,  741,

      742,  742,  742,  742,  742,  743,  743,  743,  744,    0,
      744,  745,  745,  745,  745,  745,  746,  746,  746,  746,
      746,  747,  747,  747,  747,  747,  748,  748,  748,  748,
      748,  749,  749,  749,  749,  749,  750,  750,    0,  750,
      750,  751,  751,  751,  751,  751,  752,  752,  752,  752,
      752,  753,  753,  753,  753,  753,  754,  754,  754,  754,
      754,  755,  755,  755,  755,  755,  756,  756,  756,  756,
      756,  757,  757,  757,  757,  757,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  760,  760,  760,  760,
      760,  761,  761,  761,  761,  761,  762,  762,  762,  762,

      762,  763,  763,  763,  763,  763,  764,  764,  764,  764,
      764,  765,  765,  765,  765,  765,  765,    0,  765,    0,
        0,  765,  766,  766,  766,  766,  766,  767,  767,  767,
      767,  767,  768,  768,  768,  768,  768,  769,  769,  769,
      769,  769,  770,  770,  770,  770,  770,  771,  771,  771,
      771,  771,  772,  772,  772,  772,  772,  772,    0,  772,
        0,    0,  772,  773,  773,  773,  773,  773,  774,  774,
      774,  774,  774,  775,  775,  775,  775,  775,  776,  776,
      776,  776,  776,  777,  777,  777,  777,  777,  778,  778,
      778,  778,  778,  779,  779,  779,  779,  779,  780,    0,

      780,  781,  781,  781,  781,  781,  782,  782,  782,  782,
      782,  783,  783,  783,  783,  783,  784,  784,  784,  784,
      784,  785,  785,  785,  785,  785,  786,  786,  786,  786,
      786,  787,  787,  787,  787,  787,  788,  788,  788,  788,
      788,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      790,  790,    0,  790,    0,    0,  790,  791,  791,  791,
      791,  791,  792,  792,  792,  792,  792,  793,  793,  793,
      793,  793,  793,    0,  793,    0,    0,  793,  794,  794,
      794,  794,  794,  795,  795,  795,  795,  795,  796,  796,
      796,  796,  796,  569,  569,  569,  569,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569
    } ;

static yyconst flex_int16_t yy_rule_linenum[41] =
    {   0,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      146,  147,  148,  149,  150,  151,  152,  153,  154,  157
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/TrigSScanner.lpp"
/* $Id: TrigSScanner.lpp,v 1.3 2008-10-03 07:06:04 eric Exp $ -*- mode: c++ -*- */
/** \file TrigSScanner.ll Define the Flex lexical scanner */
#line 5 "lib/TrigSScanner.lpp"

#include "TrigSParser/TrigSParser.hpp"
#include "TrigSScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::TrigSParser::token token;
typedef w3c_sw::TrigSParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TrigSFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "lib/TrigSScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 1726 "lib/TrigSScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 115 "lib/TrigSScanner.lpp"

#line 1890 "lib/TrigSScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 570 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 569 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 41 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 41 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 42 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "lib/TrigSScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 117 "lib/TrigSScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "lib/TrigSScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 119 "lib/TrigSScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 "lib/TrigSScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 121 "lib/TrigSScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 122 "lib/TrigSScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 123 "lib/TrigSScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 124 "lib/TrigSScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 125 "lib/TrigSScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 126 "lib/TrigSScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 127 "lib/TrigSScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 128 "lib/TrigSScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 129 "lib/TrigSScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 130 "lib/TrigSScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 131 "lib/TrigSScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 132 "lib/TrigSScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "lib/TrigSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", yytext); return token::IT_true;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "lib/TrigSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", yytext); return token::IT_false;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 135 "lib/TrigSScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 136 "lib/TrigSScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 137 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 138 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 139 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 140 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 141 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 142 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 143 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 144 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 145 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 146 "lib/TrigSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 147 "lib/TrigSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 148 "lib/TrigSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 149 "lib/TrigSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 150 "lib/TrigSScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 151 "lib/TrigSScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 152 "lib/TrigSScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 153 "lib/TrigSScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 154 "lib/TrigSScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 156 "lib/TrigSScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 157 "lib/TrigSScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 163 "lib/TrigSScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2217 "lib/TrigSScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TrigSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TrigSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TrigSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TrigSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 570 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 570 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 569);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TrigSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TrigSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TrigSfree((void *) b->yy_ch_buf  );

	TrigSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TrigSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TrigSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TrigSalloc(new_size  );

		else
			(yy_start_stack) = (int *) TrigSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TrigSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TrigSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TrigSfree (void * ptr )
{
	free( (char *) ptr );	/* see TrigSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 163 "lib/TrigSScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START TrigSScanner */
namespace w3c_sw {

TrigSScanner::TrigSScanner (TrigSDriver* driver, std::istream* in, std::ostream* out) : TrigSFlexLexer(in, out), driver(driver) {  }
TrigSScanner::~TrigSScanner () {  }

TrigSParser::token_type TrigSScanner::typedLiteral (TrigSParser::semantic_type*& yylval, TrigSParser::token_type tok) {
    std::istringstream is(yytext);
    std::ostringstream normalized;

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	normalized << i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	normalized << f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	normalized << d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

TrigSParser::token_type TrigSScanner::unescape (TrigSParser::semantic_type*& yylval, size_t skip, TrigSParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* TrigSScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index));
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void TrigSScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END TrigSScanner */

const URI* TrigSScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}

} // END namespace w3c_sw

/* This implementation of TrigSFlexLexer::yylex() is required to fill the
 * vtable of the class TrigSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the TrigSScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TrigSFlexLexer::yylex()
{
    std::cerr << "in TrigSFlexLexer::yylex() !" << std::endl;
    return 0;
}


