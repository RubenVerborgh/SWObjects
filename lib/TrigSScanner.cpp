#line 2 "lib/TrigSScanner.cpp"

#line 4 "lib/TrigSScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TrigSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TrigSalloc (yy_size_t  );
void *TrigSrealloc (void *,yy_size_t  );
void TrigSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[566] =
    {   0,
        0,    0,   41,   39,    2,    1,    1,   39,    2,   39,
        6,    7,   14,    9,   15,    8,   21,   36,   10,   39,
       39,   39,   39,   39,   12,   13,   39,   39,   11,    4,
        5,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
        2,    1,    0,   33,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   32,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       34,    0,   23,    0,   25,   22,   22,   21,    0,   37,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   20,   20,    0,    0,   36,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   35,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   24,   24,    0,   26,
       26,    0,    0,   22,    0,    0,   27,   37,    0,   37,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,   37,   37,   37,   37,   37,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   20,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   24,    0,    0,   29,    0,   26,    0,    0,
       28,    0,   27,    0,   27,   37,   37,   37,   37,   37,
       37,   37,   37,   37,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   37,   37,   37,
       37,   37,    0,    0,    0,    0,    0,    0,   20,   20,
        0,    0,    0,    0,    0,    0,    0,    0,   17,   38,
        0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   38,   38,   38,   38,   38,   38,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   29,    0,   29,    0,   28,

        0,   28,   37,   37,   37,   37,   37,    0,    0,   37,
       20,    0,   18,   38,   38,   38,   38,   38,   38,   38,
       38,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   38,   38,   38,   38,   38,
        0,    0,   31,    0,    0,    0,    0,   30,    0,    0,
        0,    0,   37,   20,   38,   38,   38,   38,   38,    0,
        0,   38,    3,   38,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    9,   10,
       11,    8,   12,   13,   14,   15,    8,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
        8,   20,    8,   21,   22,   23,   23,   23,   24,   25,
       23,   23,   26,   23,   23,   27,   23,   23,   23,   28,
       23,   29,   30,   31,   32,   23,   23,   33,   23,   23,
       34,   35,   36,   37,   38,    1,   39,   40,   41,   41,

       42,   43,   41,   41,   44,   41,   41,   45,   41,   40,
       41,   46,   41,   47,   48,   49,   50,   41,   41,   51,
       41,   41,   52,    1,   53,    8,    8,   54,   55,   56,
       56,   56,   56,   57,   58,   58,   58,   58,   58,   59,
       59,   58,   60,   61,   61,   61,   61,   61,   61,   61,
       62,   63,   63,   63,   63,   63,   63,   63,   63,   64,
       64,   64,   64,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   66,   66,   66,   66,   66,
       66,   66,   67,   68,   68,   68,   68,   68,   68,   69,
       70,   71,   71,   72,   73,   74,   74,   74,   74,   74,

       74,   74,   74,   75,   76,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   78,   79,   80,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   83,   84,   85,   86,
       87,   87,   87,   88,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71
    } ;

static yyconst flex_int32_t yy_meta[89] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    4,    3,    5,    3,    3,    1,    3,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    3,    1,    3,    1,    3,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    7,    7,    7,    7,    7,    7,    8,
        7,    9,    7,    7,    7,    7,    9,    7,   10,   11,
       12,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[793] =
    {   0,
        0,    0, 1073, 4115,   87, 4115, 1069,   87,  116,  196,
       92, 4115,   75, 4115,   83,  994,   85,  269, 4115,  337,
       74,  412,   82,   76,  108, 4115,  964,  981,    0, 4115,
     4115,    0,    0,   74,   81,    0,   48,    0,   57,   82,
        0,  113,    0,  152,  943,    0,  154,   41,  171,    0,
      140, 4115,  494,  974,  218,    0,    0,    0,  178,    0,
      304,    0,  307,    0,  324,  523,    0,    0,    0,  320,
        0,  447,    0,  450,    0,  337,  603,  970,  516,    0,
        0,    0,  334,    0,  476,    0,  479,    0,  530,  611,
     4115,  962,  602,  947,  604,  605,  607,  609,  139,  678,

        0,    0,  598,  610,    0,  220,    0,  161,  184,    0,
      702,    0,  719,  908,    0,  721,  197,  728,    0,  779,
     4115,    0,    0,    0,  736,    0,  753,    0,  756,    0,
      773,  947,  417,  854,  943,  926,    0,  884,    0,  786,
        0,  960,    0,  573,  841,    0,  163,  193,  629,    0,
      957,    0,  974,  837,    0,  976,  238,  983,    0,   98,
      290,  870, 4115, 4115, 1038,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  831,  767,    0,    0,  835,    0,
        0,    0,  877,    0,    0, 4115, 1120,    0,  814,    0,
        0,    0,    0,    0,    0,    0,    0,  812,    0,    0,

        0,    0,    0,    0,    0, 4115, 1200,    0,  811,    0,
        0,    0,    0,    0,    0,    0, 1106, 1111,  142, 1112,
     1115,  512,  541, 1116,  546,  822,  746, 1275,    0,    0,
      695,    0, 1087,    0, 1105,    0,  989,  665,    0,  565,
      568, 1100,    0, 1107,    0, 1083,  677,    0, 1156,  382,
     1159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      615, 1115,    0,    0,  618,    0,    0,    0, 1164,    0,
        0,    0,  635,    0,    0,    0,    0,    0,    0,    0,
        0, 1222, 1349,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  491, 1171,    0,    0,  608,    0,    0,

        0, 1181,    0,    0,  293,  441, 1423,    0,    0, 1198,
     1457,    0, 1199,    0,  583,  524,    0, 1454,    0, 1471,
      582,    0, 1473,  594, 1480,    0,    0,    0,    0,    0,
        0,    0,    0, 1545, 1628, 1546,    0,    0,    0, 1492,
        0, 1509,    0, 1574,    0, 1519, 1711,    0,    0,    0,
     1740,    0,    0,    0, 1820, 1900, 1640,    0,    0,    0,
     1532,    0, 1596,    0, 1603,    0, 1552, 1980,    0,    0,
        0, 1175, 1343, 1247,  618,  536, 1280, 1417, 1428,  511,
      507,  505,  480,  450,  417, 2055,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  578, 1624,    0,    0,

      378,    0,    0,    0, 1652,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2123,    0,    0,    0,  416, 1569,
     2198,    0,    0,    0,    0,    0,    0,  688,    0, 2272,
        0,    0,  354,    0, 1669,    0, 1676,    0, 1671,  339,
        0, 1067, 1517, 1681,    0, 1688,    0, 1706,  351,    0,
     1776,  648, 1779,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  294, 1696,    0,    0,  290,    0,    0,    0,
     1710,    0,    0, 2346, 2428,    0,  285,    0,    0,    0,
        0,    0,    0,    0, 2508,    0,  270,    0,    0,    0,
        0,    0,    0,    0,  243,  241,  233,  213,  210,  206,

      171,  169, 2583,    0,    0,    0,    0,    0,    0,    0,
     1634,    0,    0, 2657,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1533, 1735,    0,    0,  130,    0,
        0,    0, 1784,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4115, 2739,    0,    0,    0, 4115, 2819,    0,
        0,    0,    0,  874,    0,    0,    0,    0,    0,    0,
        0,    0,  132,    0, 4115, 2907, 2918, 2929, 2938,  120,
     2943, 2948, 2953, 2958, 2963, 2968, 2973, 2978, 2983, 2988,
     2993, 2997, 3000, 3005, 3010, 3015, 3026, 3031, 3035, 3038,
     3043, 3048, 3053, 3064, 3069, 3073, 3076, 3081, 3086, 3091,

     3096, 3101, 3106, 3111, 3116, 3121, 3126, 3131, 3136, 3141,
     3150, 3155, 3159, 3162, 3167, 3172, 3177, 3185, 3185, 3190,
     3195, 3200, 3205, 3210, 3215, 3220, 3225, 3230, 3235, 3240,
     3245, 3250, 3255, 3260, 3265, 3270, 3275, 3286, 3291, 3296,
     3301, 3306, 3311, 3316, 3321, 3326, 3331, 3336, 3341, 3346,
     3357, 3362, 3367, 3372, 3377, 3382, 3387, 3392, 3397, 3402,
     3407, 3412, 3417, 3422, 3427, 3432, 3437, 3442, 3447, 3452,
     3457, 3462, 3467, 3472, 3477, 3482, 3487, 3492, 3497, 3502,
     3507, 3512, 3519, 3522, 3522, 3527, 3532, 3537, 3542, 3547,
     3552, 3557, 3562, 3567, 3572, 3577, 3582, 3587, 3592, 3597,

     3602, 3607, 3612, 3623, 3628, 3632, 3635, 3640, 3645, 3650,
     3661, 3666, 3671, 3682, 3687, 3692, 3703, 3708, 3712, 3715,
     3720, 3725, 3730, 3741, 3746, 3751, 3756, 3761, 3766, 3771,
     3776, 3781, 3786, 3791, 3796, 3805, 3810, 3815, 3823, 3826,
     3826, 3831, 3836, 3841, 3846, 3851, 3856, 3861, 3866, 3871,
     3876, 3881, 3886, 3891, 3896, 3901, 3906, 3911, 3916, 3921,
     3932, 3937, 3942, 3947, 3952, 3957, 3962, 3973, 3978, 3983,
     3988, 3993, 3998, 4003, 4008, 4016, 4016, 4021, 4026, 4031,
     4036, 4041, 4046, 4051, 4056, 4067, 4072, 4077, 4088, 4093,
     4098, 4103

    } ;

static yyconst flex_int16_t yy_def[793] =
    {   0,
      565,    1,  565,  565,  565,  565,  565,  566,  567,  568,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  569,
      570,  565,   22,   22,  565,  565,  565,  565,   22,  565,
      565,  571,  572,  571,  571,  573,  574,  575,  575,  565,
      576,  565,  577,  578,  578,  579,  565,  565,  565,  580,
      565,  565,  566,  565,  565,  581,  582,  583,  565,  584,
      565,  585,  565,  586,  565,  587,  588,  589,  590,  565,
      591,  565,  592,  565,  593,  565,  594,  565,  565,  595,
      596,  597,  565,  598,  565,  599,  565,  600,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      601,  602,  601,  601,  603,  604,  605,  605,  565,  606,
      565,  607,  608,  608,  609,  565,  565,  565,  610,  611,
      565,  612,  613,  614,  565,  615,  565,  616,  565,  617,
      565,  618,  618,  565,  134,  565,  134,  619,  620,  619,
      619,  619,  621,  622,  565,  623,  623,  623,  624,  625,
      565,  626,  627,  627,  628,  565,  565,  565,  629,  134,
      134,  565,  565,  565,  565,  134,  134,  134,  134,  134,
      134,  134,  630,  631,  632,  632,  632,  633,  634,  634,
      632,  635,  565,  636,  637,  565,  638,  639,  565,  640,
      641,  640,  640,  642,  643,  644,  645,  565,  646,  647,

      646,  646,  648,  649,  650,  565,  651,  652,  565,  653,
      654,  653,  653,  655,  656,  657,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  228,  228,
      658,  659,  658,  658,  658,  660,  661,  565,  662,  662,
      662,  663,  664,  565,  665,  666,  666,  667,  565,  565,
      565,  668,  228,  228,  228,  228,  228,  228,  669,  670,
      671,  671,  671,  672,  673,  673,  671,  674,  565,  675,
      676,  677,  565,  678,  679,  678,  678,  680,  681,  682,
      683,  684,  565,  283,  283,  283,  283,  283,  283,  283,
      283,  685,  686,  687,  687,  687,  688,  689,  689,  687,

      690,  565,  691,  692,  283,  283,  565,  693,  694,  693,
      693,  695,  696,  697,  697,  565,  698,  565,  699,  700,
      700,  701,  565,  565,  565,  702,  283,  283,  283,  283,
      283,  703,  703,  704,  704,  565,  705,  706,  707,  565,
      708,  565,  709,  565,  710,  565,  711,  712,  712,  713,
      714,  715,  715,  716,  717,  717,  565,  718,  719,  720,
      565,  721,  565,  722,  565,  723,  565,  724,  725,  725,
      726,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  386,  386,  386,  386,
      386,  386,  386,  386,  727,  728,  729,  729,  729,  730,

      731,  731,  729,  732,  565,  733,  734,  386,  386,  386,
      386,  386,  735,  735,  736,  737,  737,  738,  739,  740,
      565,  421,  421,  421,  421,  741,  741,  421,  421,  565,
      430,  430,  742,  743,  742,  742,  742,  744,  745,  565,
      746,  746,  746,  747,  748,  565,  749,  750,  750,  751,
      565,  565,  565,  752,  430,  430,  430,  430,  430,  430,
      753,  754,  755,  755,  755,  756,  757,  757,  755,  758,
      565,  759,  760,  565,  761,  762,  565,  763,  764,  763,
      763,  765,  766,  767,  768,  769,  565,  770,  771,  770,
      770,  772,  773,  774,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  503,  503,  503,  503,  775,  775,  503,
      776,  474,  474,  565,  514,  514,  514,  514,  514,  514,
      514,  514,  777,  778,  779,  779,  779,  780,  781,  781,
      779,  782,  565,  783,  784,  514,  514,  514,  514,  514,
      785,  785,  565,  786,  787,  787,  788,  565,  789,  790,
      790,  791,  503,  776,  514,  514,  514,  514,  514,  792,
      792,  514,  776,  514,    0,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565

    } ;

static yyconst flex_int16_t yy_nxt[4204] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,    4,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,    4,
       21,   22,   22,   22,   23,   22,   22,   22,   22,   22,
       24,   22,   22,   25,    4,   26,   27,   28,   29,   22,
       22,   22,   23,   22,   22,   22,   22,   22,   24,   22,
       22,   30,   31,    4,   32,   33,   34,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   35,   36,   36,   37,
        4,    4,   38,   39,    4,   40,   41,   42,   43,   44,
       45,   46,   47,    4,   48,   49,   50,    4,   51,   92,
       93,   51,   54,   90,   90,   90,   90,   94,   95,   97,

       98,  133,   91,  160,  161,  182,  182,  183,   99,  162,
      162,  162,  162,  169,  169,  169,  166,  166,  171,  133,
      160,   55,  161,  171,  305,  132,   99,  167,  167,  167,
      167,  167,  167,  167,  168,  168,  168,  168,  168,  168,
      168,   51,  305,  163,   51,  281,   56,  172,  172,  172,
      226,  172,  226,  375,  227,  375,   57,  376,   58,   58,
       58,   58,   58,   58,   59,   60,   60,   60,   60,   61,
       62,   62,   63,   64,   65,   67,  173,  173,  173,  173,
      173,  173,  173,  515,  502,   68,  502,   69,   69,   69,
       69,   69,   69,   70,   71,   71,   71,   71,   72,   73,

       73,   74,   75,   76,   78,  175,  176,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  178,  178,  178,
      178,  500,  100,   53,  137,  500,   53,  100,  498,  137,
       79,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  190,  190,  190,  190,  190,  190,  190,  498,  258,
      258,  258,   53,  258,  137,   80,  496,   53,  496,  137,
       53,  268,  268,  269,   53,   81,   53,   82,   82,   82,
       82,   82,   82,   83,   84,   84,   84,   84,   85,   86,
       86,   87,   88,   89,  100,  256,  256,  256,  253,  253,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  301,  301,  302,  355,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      334,  306,  428,  101,  102,  103,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  104,  105,  105,  106,  306,
      428,  107,  108,  455,  109,  110,  111,  112,  113,  114,
      115,  116,  456,  117,  118,  119,  121,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  196,  196,  196,
      196,  196,  196,  199,  199,  199,  199,  199,  199,  199,
      205,  205,  205,  205,  205,  205,  122,  210,  210,  210,

      210,  210,  210,  210,  529,  430,  123,  514,  124,  124,
      124,  124,  124,  124,  125,  126,  126,  126,  126,  127,
      128,  128,  129,  130,  131,  134,  135,  134,  136,  281,
      281,  387,  385,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  282,  404,  404,  405,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  282,  429,  385,  138,  139,  140,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  142,  143,
      143,  144,  429,  145,  146,  147,  148,  149,  150,  151,
      152,  153,  154,  155,  156,  383,  157,  158,  159,  186,

      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      383,   77,  381,  380,   77,  380,  381,  381,   55,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  285,
       77,  376,  382,   56,  382,   77,  383,  384,   77,  384,
      283,  385,   77,   57,   77,   58,   58,   58,   58,   58,
       58,   59,   60,   60,   60,   60,   61,   62,   62,   63,
       64,   65,   67,  216,  216,  216,  216,  216,  216,  460,
      460,  460,   68,  460,   69,   69,   69,   69,   69,   69,

       70,   71,   71,   71,   71,   72,   73,   73,   74,   75,
       76,  206,   90,   90,   90,   90,  218,   93,  221,   95,
       96,   91,  224,   97,   98,  219,  230,  222,  223,  230,
      225,  230,   99,  376,  230,  467,  388,   79,  287,  287,
      287,  284,  284,  219,  307,  222,  223,  386,  225,  307,
       99,  254,  254,  254,  254,  254,  254,  254,  470,  470,
      471,  284,   80,  255,  255,  255,  255,  255,  255,  255,
      120,  253,   81,  254,   82,   82,   82,   82,   82,   82,
       83,   84,   84,   84,   84,   85,   86,   86,   87,   88,
       89,  228,  229,  228,  290,  290,  290,  137,  290,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  513,  532,  532,  533,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  513,
      401,  228,  231,  232,  233,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  235,  236,  236,  237,  386,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  227,  250,  251,  252,  259,  259,  259,  259,  259,
      259,  259,  261,  262,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  264,  264,  264,  264,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  121,  274,

      274,  274,  274,  274,  274,  274,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  280,  280,  280,  280,
      280,  280,  167,  167,  167,  167,  167,  227,  122,  285,
      285,  285,  285,  285,  285,  285,   77,   66,  123,   53,
      124,  124,  124,  124,  124,  124,  125,  126,  126,  126,
      126,  127,  128,  128,  129,  130,  131,  134,  135,  134,
      136,  162,  162,  162,  162,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  281,  166,  167,
      298,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  163,  563,  134,  138,  139,
      140,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      142,  143,  143,  144,  563,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  283,  157,  158,
      159,  100,  331,  331,  331,  331,  331,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  565,
      281,  265,  220,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  217,  207,  187,
      101,  102,  103,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  104,  105,  105,  106,  179,  165,  107,  108,

      164,  109,  110,  111,  112,  113,  114,  115,  116,   96,
      117,  118,  119,  286,  286,  286,  286,  286,  286,  286,
      292,  292,  292,  292,  292,  292,  292,  294,  295,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  297,
      297,  297,  297,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  307,  390,  390,  390,  387,  387,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,   52,  565,  565,  565,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  565,
      565,  565,  308,  309,  310,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  311,  312,  312,  313,  565,  565,
      314,  315,  565,  316,  317,  318,  319,  320,  321,  322,
      323,  217,  324,  325,  326,  335,  373,  220,  432,  372,
      378,  224,  565,  432,  374,  377,  397,  398,  379,  225,
      388,  388,  388,  388,  388,  388,  388,  372,  400,  400,
      400,  400,  374,  377,  336,  565,  379,  225,  389,  389,
      389,  389,  389,  389,  389,  393,  393,  393,  230,  393,
      395,  395,  395,  395,  395,  395,  395,  565,  565,  337,
      254,  254,  254,  254,  254,  565,  495,  565,  495,  338,
      496,  339,  339,  339,  339,  339,  339,  340,  341,  341,

      341,  341,  342,  343,  343,  344,  345,  346,  356,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  412,
      412,  412,  412,  412,  357,  281,  285,  285,  285,  285,
      285,  565,  565,  565,  565,  420,  425,  425,  425,  425,
      425,  456,  456,  456,  456,  456,  456,  456,  497,  358,
      497,  565,  498,  420,  458,  458,  458,  455,  455,  359,
      565,  360,  360,  360,  360,  360,  360,  361,  362,  362,
      362,  362,  363,  364,  364,  365,  366,  367,  228,  229,
      228,  499,  565,  499,  565,  500,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  565,  565,
      565,  565,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  565,  565,  565,  231,
      232,  233,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  235,  236,  236,  237,  565,  238,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  373,  250,
      251,  252,  134,  135,  134,  136,  374,  565,  565,  565,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  565,  565,  374,  565,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      565,  565,  565,  138,  139,  140,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  142,  143,  143,  144,  565,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
      155,  156,  378,  157,  158,  159,  430,  431,  430,  501,
      379,  501,  565,  502,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  565,  565,  379,  565,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  565,  565,  565,  433,  434,  435,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  437,
      438,  438,  439,  565,  440,  441,  442,  443,  444,  445,

      446,  447,  448,  449,  450,  451,  565,  452,  453,  454,
      457,  457,  457,  457,  457,  457,  457,  461,  461,  461,
      461,  461,  461,  461,  463,  464,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  466,  466,  466,  466,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      335,  334,  565,  565,  334,  478,  478,  478,  478,  478,
      478,  478,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  484,  484,  484,  484,  484,  484,  432,  336,
      334,  565,  281,  432,  565,  334,  565,  565,  334,  565,
      565,  516,  334,  511,  334,  488,  488,  488,  488,  488,

      488,  488,  514,  565,  337,  494,  494,  494,  494,  494,
      494,  511,  565,  565,  338,  565,  339,  339,  339,  339,
      339,  339,  340,  341,  341,  341,  341,  342,  343,  343,
      344,  345,  346,  475,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  565,  355,  565,  281,  355,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  554,
      565,  565,  336,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  565,  355,  565,  565,  554,  565,  355,
      565,  565,  355,  565,  565,  565,  355,  337,  355,  388,
      388,  388,  388,  388,  565,  565,  565,  338,  565,  339,

      339,  339,  339,  339,  339,  340,  341,  341,  341,  341,
      342,  343,  343,  344,  345,  346,  186,  507,  507,  507,
      507,  507,  516,  516,  516,  516,  516,  516,  516,  517,
      517,  517,  517,  517,  517,  517,  518,  518,  518,  515,
      515,  565,  565,  565,  565,   55,  521,  521,  521,  432,
      521,  523,  523,  523,  523,  523,  523,  523,  565,  525,
      526,  456,  456,  456,  456,  456,  565,  565,  565,  565,
       56,  528,  528,  528,  528,  540,  540,  540,  540,  540,
       57,  565,   58,   58,   58,   58,   58,   58,   59,   60,
       60,   60,   60,   61,   62,   62,   63,   64,   65,   67,

      516,  516,  516,  516,  516,  565,  565,  565,  565,   68,
      565,   69,   69,   69,   69,   69,   69,   70,   71,   71,
       71,   71,   72,   73,   73,   74,   75,   76,  356,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  559,
      559,  559,  559,  559,  357,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  358,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  359,
      565,  360,  360,  360,  360,  360,  360,  361,  362,  362,

      362,  362,  363,  364,  364,  365,  366,  367,  485,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  357,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  358,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  359,
      565,  360,  360,  360,  360,  360,  360,  361,  362,  362,
      362,  362,  363,  364,  364,  365,  366,  367,  206,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,   79,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,   80,
      565,  565,  565,  565,  565,  565,  565,  565,  565,   81,
      565,   82,   82,   82,   82,   82,   82,   83,   84,   84,
       84,   84,   85,   86,   86,   87,   88,   89,  228,  229,
      228,  565,  565,  565,  565,  565,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  565,  565,
      565,  565,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  565,  565,  565,  231,
      232,  233,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  235,  236,  236,  237,  565,  238,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  565,  250,
      251,  252,  121,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  122,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  123,  565,  124,  124,  124,  124,  124,  124,

      125,  126,  126,  126,  126,  127,  128,  128,  129,  130,
      131,  134,  135,  134,  136,  565,  565,  565,  565,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  565,  565,  565,  565,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  565,
      565,  565,  138,  139,  140,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  142,  143,  143,  144,  565,  145,
      146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
      156,  565,  157,  158,  159,  430,  431,  430,  565,  565,
      565,  565,  565,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  565,  565,  565,  565,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  565,  565,  565,  433,  434,  435,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  437,  438,
      438,  439,  565,  440,  441,  442,  443,  444,  445,  446,
      447,  448,  449,  450,  451,  565,  452,  453,  454,  134,
      135,  134,  136,  565,  565,  565,  565,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  565,
      565,  565,  565,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  565,  565,  565,

      138,  139,  140,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  142,  143,  143,  144,  565,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  565,
      157,  158,  159,  543,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  336,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  337,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  338,  565,  339,

      339,  339,  339,  339,  339,  340,  341,  341,  341,  341,
      342,  343,  343,  344,  345,  346,  548,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  357,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  358,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  359,  565,  360,
      360,  360,  360,  360,  360,  361,  362,  362,  362,  362,
      363,  364,  364,  365,  366,  367,  228,  229,  228,  565,

      565,  565,  565,  565,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  565,  565,  565,  565,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  565,  565,  565,  231,  232,  233,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  235,
      236,  236,  237,  565,  238,  239,  240,  241,  242,  243,
      244,  245,  246,  247,  248,  249,  565,  250,  251,  252,
      430,  431,  430,  565,  565,  565,  565,  565,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      565,  565,  565,  565,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  565,  565,
      565,  433,  434,  435,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  437,  438,  438,  439,  565,  440,  441,
      442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
      565,  452,  453,  454,  335,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  336,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  337,  565,

      565,  565,  565,  565,  565,  565,  565,  565,  338,  565,
      339,  339,  339,  339,  339,  339,  340,  341,  341,  341,
      341,  342,  343,  343,  344,  345,  346,  356,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  357,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  358,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  359,  565,
      360,  360,  360,  360,  360,  360,  361,  362,  362,  362,

      362,  363,  364,  364,  365,  366,  367,   53,  565,   53,
       53,   53,   53,  565,   53,  565,  565,   53,   66,  565,
       66,   66,   66,   66,  565,   66,  565,  565,   66,   77,
      565,   77,   77,   77,   77,  565,   77,  565,  565,   77,
      120,  120,  120,  120,  565,  120,  565,  565,  120,  166,
      166,  166,  166,  166,  167,  167,  167,  167,  167,  169,
      169,  169,  169,  169,  170,  170,  170,  170,  170,  171,
      171,  565,  171,  171,  172,  172,  172,  172,  172,  174,
      174,  174,  174,  174,  177,  177,  177,  177,  177,  180,
      180,  180,  180,  180,  185,  185,  185,  185,  185,  188,

      188,  188,  188,  189,  189,  189,   53,   53,   53,   53,
       53,  191,  191,  191,  191,  191,  193,  193,  193,  193,
      193,  195,  195,  195,  195,  195,   66,  565,   66,   66,
       66,   66,  565,   66,  565,  565,   66,  197,  197,  197,
      197,  198,  198,  198,   66,   66,   66,   66,   66,  200,
      200,  200,  200,  200,  202,  202,  202,  202,  202,  204,
      204,  204,  204,  204,   77,  565,   77,   77,   77,   77,
      565,   77,  565,  565,   77,  208,  208,  208,  208,  209,
      209,  209,   77,   77,   77,   77,   77,  211,  211,  211,
      211,  211,  213,  213,  213,  213,  213,  215,  215,  215,

      215,  215,  253,  253,  253,  253,  253,  254,  254,  254,
      254,  254,  256,  256,  256,  256,  256,  257,  257,  257,
      257,  257,  100,  100,  565,  100,  100,  258,  258,  258,
      258,  258,  260,  260,  260,  260,  260,  263,  263,  263,
      263,  263,  266,  266,  266,  266,  266,  271,  271,  271,
      271,  271,  120,  120,  120,  120,  565,  120,  565,  565,
      120,  272,  272,  272,  272,  273,  273,  273,  120,  120,
      120,  120,  120,  275,  275,  275,  275,  275,  277,  277,
      277,  277,  277,  279,  279,  279,  279,  279,  132,  565,
      132,  284,  284,  284,  284,  284,  285,  285,  285,  285,

      285,  287,  287,  287,  287,  287,  288,  288,  288,  288,
      288,  137,  137,  565,  137,  137,  289,  289,  289,  289,
      289,  291,  291,  291,  291,  291,  293,  293,  293,  293,
      293,  296,  296,  296,  296,  296,  299,  299,  299,  299,
      299,  304,  304,  304,  304,  304,  172,  172,  172,  172,
      172,  327,  327,  327,  327,  327,  166,  166,  166,  166,
      166,  328,  328,  328,  328,  328,  329,  329,  329,  329,
      329,  330,  330,  330,  330,  330,  332,  332,  332,  332,
      332,  333,  333,  333,  333,  333,  334,  334,  334,  334,
      334,  334,  565,  334,  565,  565,  334,  189,  189,  189,

      189,  189,   53,   53,   53,   53,   53,  347,  347,  347,
      347,  347,  348,  348,  348,  348,  348,  349,  349,  349,
      349,  349,  350,  350,  350,  350,  350,  198,  198,  198,
      198,  198,   66,   66,   66,   66,   66,  351,  351,  351,
      351,  351,  352,  352,  352,  352,  352,  353,  353,  353,
      353,  353,  354,  354,  354,  354,  354,  355,  355,  355,
      355,  355,  355,  565,  355,  565,  565,  355,  209,  209,
      209,  209,  209,   77,   77,   77,   77,   77,  368,  368,
      368,  368,  368,  369,  369,  369,  369,  369,  370,  370,
      370,  370,  370,  371,  371,  371,  371,  371,  387,  387,

      387,  387,  387,  388,  388,  388,  388,  388,  390,  390,
      390,  390,  390,  391,  391,  391,  391,  391,  230,  230,
      565,  230,  230,  392,  392,  392,  392,  392,  394,  394,
      394,  394,  394,  396,  396,  396,  396,  396,  399,  399,
      399,  399,  399,  402,  402,  402,  402,  402,  407,  407,
      407,  407,  407,  258,  258,  258,  258,  258,  408,  408,
      408,  408,  408,  253,  253,  253,  253,  253,  409,  409,
      409,  409,  409,  410,  410,  410,  410,  410,  411,  411,
      411,  411,  411,  413,  413,  413,  413,  413,  414,  414,
      414,  414,  414,  273,  273,  273,  273,  273,  120,  120,

      120,  120,  120,  415,  415,  415,  415,  415,  416,  416,
      416,  416,  416,  417,  417,  417,  417,  417,  418,  418,
      418,  418,  418,  419,  419,  132,  565,  132,  291,  291,
      291,  291,  291,  421,  421,  421,  421,  421,  284,  284,
      284,  284,  284,  422,  422,  422,  422,  422,  423,  423,
      423,  423,  423,  424,  424,  424,  424,  424,  426,  426,
      426,  426,  426,  427,  427,  427,  427,  427,  455,  455,
      455,  455,  455,  456,  456,  456,  456,  456,  458,  458,
      458,  458,  458,  459,  459,  459,  459,  459,  307,  307,
      565,  307,  307,  460,  460,  460,  460,  460,  462,  462,

      462,  462,  462,  465,  465,  465,  465,  465,  468,  468,
      468,  468,  468,  473,  473,  473,  473,  473,  474,  474,
      474,  474,  474,  334,  334,  334,  334,  334,  334,  565,
      334,  565,  565,  334,  476,  476,  476,  476,  477,  477,
      477,  334,  334,  334,  334,  334,  479,  479,  479,  479,
      479,  481,  481,  481,  481,  481,  483,  483,  483,  483,
      483,   53,  565,   53,   53,   53,   53,  565,   53,  565,
      565,   53,   53,   53,   53,   53,   53,  189,  189,  189,
      189,  189,   66,  565,   66,   66,   66,   66,  565,   66,
      565,  565,   66,   66,   66,   66,   66,   66,  198,  198,

      198,  198,  198,  355,  355,  355,  355,  355,  355,  565,
      355,  565,  565,  355,  486,  486,  486,  486,  487,  487,
      487,  355,  355,  355,  355,  355,  489,  489,  489,  489,
      489,  491,  491,  491,  491,  491,  493,  493,  493,  493,
      493,   77,  565,   77,   77,   77,   77,  565,   77,  565,
      565,   77,   77,   77,   77,   77,   77,  209,  209,  209,
      209,  209,  394,  394,  394,  394,  394,  503,  503,  503,
      503,  503,  387,  387,  387,  387,  387,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  506,  506,  506,
      506,  506,  508,  508,  508,  508,  508,  509,  509,  509,

      509,  509,  510,  510,  510,  510,  510,  120,  120,  120,
      120,  565,  120,  565,  565,  120,  120,  120,  120,  120,
      120,  273,  273,  273,  273,  273,  419,  419,  419,  132,
      565,  132,  512,  512,  512,  512,  512,  515,  515,  515,
      515,  515,  516,  516,  516,  516,  516,  518,  518,  518,
      518,  518,  519,  519,  519,  519,  519,  432,  432,  565,
      432,  432,  520,  520,  520,  520,  520,  522,  522,  522,
      522,  522,  524,  524,  524,  524,  524,  527,  527,  527,
      527,  527,  530,  530,  530,  530,  530,  535,  535,  535,
      535,  535,  460,  460,  460,  460,  460,  536,  536,  536,

      536,  536,  455,  455,  455,  455,  455,  537,  537,  537,
      537,  537,  538,  538,  538,  538,  538,  539,  539,  539,
      539,  539,  541,  541,  541,  541,  541,  542,  542,  542,
      542,  542,  334,  334,  334,  334,  334,  334,  565,  334,
      565,  565,  334,  477,  477,  477,  477,  477,  334,  334,
      334,  334,  334,  544,  544,  544,  544,  544,  545,  545,
      545,  545,  545,  546,  546,  546,  546,  546,  547,  547,
      547,  547,  547,  355,  355,  355,  355,  355,  355,  565,
      355,  565,  565,  355,  487,  487,  487,  487,  487,  355,
      355,  355,  355,  355,  549,  549,  549,  549,  549,  550,

      550,  550,  550,  550,  551,  551,  551,  551,  551,  552,
      552,  552,  552,  552,  553,  553,  553,  553,  553,  132,
      565,  132,  522,  522,  522,  522,  522,  555,  555,  555,
      555,  555,  515,  515,  515,  515,  515,  556,  556,  556,
      556,  556,  557,  557,  557,  557,  557,  558,  558,  558,
      558,  558,  560,  560,  560,  560,  560,  561,  561,  561,
      561,  561,  562,  562,  562,  562,  562,  334,  334,  334,
      334,  334,  334,  565,  334,  565,  565,  334,  334,  334,
      334,  334,  334,  477,  477,  477,  477,  477,  355,  355,
      355,  355,  355,  355,  565,  355,  565,  565,  355,  355,

      355,  355,  355,  355,  487,  487,  487,  487,  487,  564,
      564,  564,  564,  564,    3,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565
    } ;

static yyconst flex_int16_t yy_chk[4204] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,   13,
       13,    5,    8,   11,   11,   11,   11,   15,   15,   17,

       17,   21,   11,   23,   24,   48,   48,   48,   17,   25,
       25,   25,   25,   37,   37,   37,   37,   37,   39,   21,
       23,    8,   24,   39,  160,  570,   17,   34,   34,   34,
       34,   34,   34,   34,   35,   35,   35,   35,   35,   35,
       35,   51,  160,   25,   51,  563,    8,   40,   40,   40,
       99,   40,   99,  219,   99,  219,    8,  219,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    9,   42,   42,   42,   42,
       42,   42,   42,  529,  502,    9,  501,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,   10,   44,   44,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   44,   44,   44,
       44,  500,  108,   55,  147,  499,   55,  108,  498,  147,
       10,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   59,   59,   59,   59,   59,   59,   59,  497,  109,
      109,  109,   55,  109,  148,   10,  496,   55,  495,  148,
       55,  117,  117,  117,   55,   10,   55,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   18,  106,  106,  106,  106,  106,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,  157,  157,  157,  487,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
      477,  161,  305,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,  161,
      305,   18,   18,  467,   18,   18,   18,   18,   18,   18,
       18,   18,  463,   18,   18,   18,   20,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   65,   65,   65,
       65,   65,   65,   70,   70,   70,   70,   70,   70,   70,
       76,   76,   76,   76,   76,   76,   20,   83,   83,   83,

       83,   83,   83,   83,  449,  440,   20,  433,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   22,   22,   22,   22,  419,
      133,  401,  385,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,  133,  250,  250,  250,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,  133,  306,  384,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  306,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,  383,   22,   22,   22,   53,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
      382,   79,  381,  222,   79,  222,  380,  222,   53,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,  294,
       79,  376,  223,   53,  223,   79,  223,  225,   79,  225,
      294,  225,   79,   53,   79,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   66,   89,   89,   89,   89,   89,   89,  316,
      316,  316,   66,  316,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   77,   90,   90,   90,   90,   93,   93,   95,   95,
       96,   90,   97,   98,   98,   93,  240,   95,   96,  241,
       97,  240,   98,  375,  241,  321,  397,   77,  144,  144,
      144,  144,  144,   93,  315,   95,   96,  397,   97,  315,
       98,  103,  103,  103,  103,  103,  103,  103,  324,  324,
      324,  298,   77,  104,  104,  104,  104,  104,  104,  104,
      273,  265,   77,  261,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  100,  100,  100,  149,  149,  149,  149,  149,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  428,  452,  452,  452,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  428,
      247,  238,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  231,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  227,  100,  100,  100,  111,  111,  111,  111,  111,
      111,  111,  113,  113,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  113,  113,  113,  113,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  120,  125,

      125,  125,  125,  125,  125,  125,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  131,  131,  131,  131,
      131,  131,  176,  176,  176,  176,  176,  226,  120,  140,
      140,  140,  140,  140,  140,  140,  209,  198,  120,  189,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  134,  134,  134,
      134,  162,  162,  162,  162,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  554,  179,  175,
      154,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  162,  554,  145,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  554,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  138,  134,  134,
      134,  136,  183,  183,  183,  183,  183,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  135,
      132,  114,   94,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,   92,   78,   54,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,   45,   28,  136,  136,

       27,  136,  136,  136,  136,  136,  136,  136,  136,   16,
      136,  136,  136,  142,  142,  142,  142,  142,  142,  142,
      151,  151,  151,  151,  151,  151,  151,  153,  153,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  153,
      153,  153,  153,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  165,  237,  237,  237,  237,  237,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,    7,    3,    0,    0,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,    0,
        0,    0,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,    0,    0,
      165,  165,    0,  165,  165,  165,  165,  165,  165,  165,
      165,  217,  165,  165,  165,  187,  218,  220,  442,  217,
      221,  224,    0,  442,  218,  220,  246,  246,  221,  224,
      233,  233,  233,  233,  233,  233,  233,  217,  246,  246,
      246,  246,  218,  220,  187,    0,  221,  224,  235,  235,
      235,  235,  235,  235,  235,  242,  242,  242,  242,  242,
      244,  244,  244,  244,  244,  244,  244,    0,    0,  187,
      262,  262,  262,  262,  262,    0,  372,    0,  372,  187,
      372,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  207,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  269,
      269,  269,  269,  269,  207,  282,  295,  295,  295,  295,
      295,    0,    0,    0,    0,  282,  302,  302,  302,  302,
      302,  310,  310,  310,  310,  310,  310,  310,  374,  207,
      374,    0,  374,  282,  313,  313,  313,  313,  313,  207,
        0,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  228,  228,
      228,  377,    0,  377,    0,  377,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,    0,    0,
        0,    0,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,    0,    0,    0,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,    0,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  373,  228,
      228,  228,  283,  283,  283,  283,  373,    0,    0,    0,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,    0,    0,  373,    0,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

        0,    0,    0,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,    0,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  378,  283,  283,  283,  307,  307,  307,  379,
      378,  379,    0,  379,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,    0,    0,  378,    0,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,    0,    0,    0,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,    0,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,    0,  307,  307,  307,
      311,  311,  311,  311,  311,  311,  311,  318,  318,  318,
      318,  318,  318,  318,  320,  320,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  320,  320,  320,  320,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      334,  336,    0,    0,  336,  340,  340,  340,  340,  340,
      340,  340,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  346,  346,  346,  346,  346,  346,  443,  334,
      336,    0,  420,  443,    0,  336,    0,    0,  336,    0,
        0,  525,  336,  420,  336,  361,  361,  361,  361,  361,

      361,  361,  525,    0,  334,  367,  367,  367,  367,  367,
      367,  420,    0,    0,  334,    0,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  335,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,    0,  357,    0,  511,  357,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  511,
        0,    0,  335,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,    0,  357,    0,    0,  511,    0,  357,
        0,    0,  357,    0,    0,    0,  357,  335,  357,  398,
      398,  398,  398,  398,    0,    0,    0,  335,    0,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  347,  405,  405,  405,
      405,  405,  435,  435,  435,  435,  435,  435,  435,  437,
      437,  437,  437,  437,  437,  437,  439,  439,  439,  439,
      439,    0,    0,    0,    0,  347,  444,  444,  444,  444,
      444,  446,  446,  446,  446,  446,  446,  446,    0,  448,
      448,  464,  464,  464,  464,  464,    0,    0,    0,    0,
      347,  448,  448,  448,  448,  471,  471,  471,  471,  471,
      347,    0,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  351,

      526,  526,  526,  526,  526,    0,    0,    0,    0,  351,
        0,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  355,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  533,
      533,  533,  533,  533,  355,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  355,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  355,
        0,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  356,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  356,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  356,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  356,
        0,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  368,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  368,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  368,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  368,
        0,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  386,  386,
      386,    0,    0,    0,    0,    0,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,    0,    0,
        0,    0,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  386,  386,  386,    0,    0,    0,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,    0,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,    0,  386,
      386,  386,  415,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  415,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  415,    0,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  421,  421,  421,  421,    0,    0,    0,    0,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,    0,    0,    0,    0,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,    0,
        0,    0,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,    0,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,    0,  421,  421,  421,  430,  430,  430,    0,    0,
        0,    0,    0,  430,  430,  430,  430,  430,  430,  430,

      430,  430,  430,  430,  430,    0,    0,    0,    0,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,    0,    0,    0,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,    0,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,    0,  430,  430,  430,  474,
      474,  474,  474,    0,    0,    0,    0,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,    0,
        0,    0,    0,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,    0,    0,    0,

      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,    0,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,    0,
      474,  474,  474,  475,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  475,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  475,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  475,    0,  475,

      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  485,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  485,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  485,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  485,    0,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  503,  503,  503,    0,

        0,    0,    0,    0,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,    0,    0,    0,    0,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,    0,    0,    0,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,    0,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,    0,  503,  503,  503,
      514,  514,  514,    0,    0,    0,    0,    0,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
        0,    0,    0,    0,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,    0,    0,
        0,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,    0,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
        0,  514,  514,  514,  544,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  544,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  544,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  544,    0,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  549,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  549,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  549,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  549,    0,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  549,  549,  566,    0,  566,
      566,  566,  566,    0,  566,    0,    0,  566,  567,    0,
      567,  567,  567,  567,    0,  567,    0,    0,  567,  568,
        0,  568,  568,  568,  568,    0,  568,    0,    0,  568,
      569,  569,  569,  569,    0,  569,    0,    0,  569,  571,
      571,  571,  571,  571,  572,  572,  572,  572,  572,  573,
      573,  573,  573,  573,  574,  574,  574,  574,  574,  575,
      575,    0,  575,  575,  576,  576,  576,  576,  576,  577,
      577,  577,  577,  577,  578,  578,  578,  578,  578,  579,
      579,  579,  579,  579,  580,  580,  580,  580,  580,  581,

      581,  581,  581,  582,  582,  582,  583,  583,  583,  583,
      583,  584,  584,  584,  584,  584,  585,  585,  585,  585,
      585,  586,  586,  586,  586,  586,  587,    0,  587,  587,
      587,  587,    0,  587,    0,    0,  587,  588,  588,  588,
      588,  589,  589,  589,  590,  590,  590,  590,  590,  591,
      591,  591,  591,  591,  592,  592,  592,  592,  592,  593,
      593,  593,  593,  593,  594,    0,  594,  594,  594,  594,
        0,  594,    0,    0,  594,  595,  595,  595,  595,  596,
      596,  596,  597,  597,  597,  597,  597,  598,  598,  598,
      598,  598,  599,  599,  599,  599,  599,  600,  600,  600,

      600,  600,  601,  601,  601,  601,  601,  602,  602,  602,
      602,  602,  603,  603,  603,  603,  603,  604,  604,  604,
      604,  604,  605,  605,    0,  605,  605,  606,  606,  606,
      606,  606,  607,  607,  607,  607,  607,  608,  608,  608,
      608,  608,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  611,  611,  611,  611,    0,  611,    0,    0,
      611,  612,  612,  612,  612,  613,  613,  613,  614,  614,
      614,  614,  614,  615,  615,  615,  615,  615,  616,  616,
      616,  616,  616,  617,  617,  617,  617,  617,  618,    0,
      618,  619,  619,  619,  619,  619,  620,  620,  620,  620,

      620,  621,  621,  621,  621,  621,  622,  622,  622,  622,
      622,  623,  623,    0,  623,  623,  624,  624,  624,  624,
      624,  625,  625,  625,  625,  625,  626,  626,  626,  626,
      626,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  629,  629,  629,  629,  629,  630,  630,  630,  630,
      630,  631,  631,  631,  631,  631,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  634,  634,  634,  634,
      634,  635,  635,  635,  635,  635,  636,  636,  636,  636,
      636,  637,  637,  637,  637,  637,  638,  638,  638,  638,
      638,  638,    0,  638,    0,    0,  638,  639,  639,  639,

      639,  639,  640,  640,  640,  640,  640,  641,  641,  641,
      641,  641,  642,  642,  642,  642,  642,  643,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  645,  645,  645,
      645,  645,  646,  646,  646,  646,  646,  647,  647,  647,
      647,  647,  648,  648,  648,  648,  648,  649,  649,  649,
      649,  649,  650,  650,  650,  650,  650,  651,  651,  651,
      651,  651,  651,    0,  651,    0,    0,  651,  652,  652,
      652,  652,  652,  653,  653,  653,  653,  653,  654,  654,
      654,  654,  654,  655,  655,  655,  655,  655,  656,  656,
      656,  656,  656,  657,  657,  657,  657,  657,  658,  658,

      658,  658,  658,  659,  659,  659,  659,  659,  660,  660,
      660,  660,  660,  661,  661,  661,  661,  661,  662,  662,
        0,  662,  662,  663,  663,  663,  663,  663,  664,  664,
      664,  664,  664,  665,  665,  665,  665,  665,  666,  666,
      666,  666,  666,  667,  667,  667,  667,  667,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  670,  670,
      670,  670,  670,  671,  671,  671,  671,  671,  672,  672,
      672,  672,  672,  673,  673,  673,  673,  673,  674,  674,
      674,  674,  674,  675,  675,  675,  675,  675,  676,  676,
      676,  676,  676,  677,  677,  677,  677,  677,  678,  678,

      678,  678,  678,  679,  679,  679,  679,  679,  680,  680,
      680,  680,  680,  681,  681,  681,  681,  681,  682,  682,
      682,  682,  682,  683,  683,  684,    0,  684,  685,  685,
      685,  685,  685,  686,  686,  686,  686,  686,  687,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  692,  692,  692,  692,  692,  693,  693,
      693,  693,  693,  694,  694,  694,  694,  694,  695,  695,
      695,  695,  695,  696,  696,  696,  696,  696,  697,  697,
        0,  697,  697,  698,  698,  698,  698,  698,  699,  699,

      699,  699,  699,  700,  700,  700,  700,  700,  701,  701,
      701,  701,  701,  702,  702,  702,  702,  702,  703,  703,
      703,  703,  703,  704,  704,  704,  704,  704,  704,    0,
      704,    0,    0,  704,  705,  705,  705,  705,  706,  706,
      706,  707,  707,  707,  707,  707,  708,  708,  708,  708,
      708,  709,  709,  709,  709,  709,  710,  710,  710,  710,
      710,  711,    0,  711,  711,  711,  711,    0,  711,    0,
        0,  711,  712,  712,  712,  712,  712,  713,  713,  713,
      713,  713,  714,    0,  714,  714,  714,  714,    0,  714,
        0,    0,  714,  715,  715,  715,  715,  715,  716,  716,

      716,  716,  716,  717,  717,  717,  717,  717,  717,    0,
      717,    0,    0,  717,  718,  718,  718,  718,  719,  719,
      719,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      721,  722,  722,  722,  722,  722,  723,  723,  723,  723,
      723,  724,    0,  724,  724,  724,  724,    0,  724,    0,
        0,  724,  725,  725,  725,  725,  725,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  728,  728,  728,
      728,  728,  729,  729,  729,  729,  729,  730,  730,  730,
      730,  730,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  734,  734,  734,

      734,  734,  735,  735,  735,  735,  735,  736,  736,  736,
      736,    0,  736,    0,    0,  736,  737,  737,  737,  737,
      737,  738,  738,  738,  738,  738,  739,  739,  739,  740,
        0,  740,  741,  741,  741,  741,  741,  742,  742,  742,
      742,  742,  743,  743,  743,  743,  743,  744,  744,  744,
      744,  744,  745,  745,  745,  745,  745,  746,  746,    0,
      746,  746,  747,  747,  747,  747,  747,  748,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  750,  750,  750,
      750,  750,  751,  751,  751,  751,  751,  752,  752,  752,
      752,  752,  753,  753,  753,  753,  753,  754,  754,  754,

      754,  754,  755,  755,  755,  755,  755,  756,  756,  756,
      756,  756,  757,  757,  757,  757,  757,  758,  758,  758,
      758,  758,  759,  759,  759,  759,  759,  760,  760,  760,
      760,  760,  761,  761,  761,  761,  761,  761,    0,  761,
        0,    0,  761,  762,  762,  762,  762,  762,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,  765,  765,
      765,  765,  765,  766,  766,  766,  766,  766,  767,  767,
      767,  767,  767,  768,  768,  768,  768,  768,  768,    0,
      768,    0,    0,  768,  769,  769,  769,  769,  769,  770,
      770,  770,  770,  770,  771,  771,  771,  771,  771,  772,

      772,  772,  772,  772,  773,  773,  773,  773,  773,  774,
      774,  774,  774,  774,  775,  775,  775,  775,  775,  776,
        0,  776,  777,  777,  777,  777,  777,  778,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  780,  780,  780,
      780,  780,  781,  781,  781,  781,  781,  782,  782,  782,
      782,  782,  783,  783,  783,  783,  783,  784,  784,  784,
      784,  784,  785,  785,  785,  785,  785,  786,  786,  786,
      786,  786,  786,    0,  786,    0,    0,  786,  787,  787,
      787,  787,  787,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,    0,  789,    0,    0,  789,  790,

      790,  790,  790,  790,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  792,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565
    } ;

static yyconst flex_int16_t yy_rule_linenum[40] =
    {   0,
      115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
      135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  155
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/TrigSScanner.lpp"
/* $Id: TrigSScanner.lpp,v 1.3 2008-10-03 07:06:04 eric Exp $ -*- mode: c++ -*- */
/** \file TrigSScanner.ll Define the Flex lexical scanner */
#line 5 "lib/TrigSScanner.lpp"

#include "TrigSParser/TrigSParser.hpp"
#include "TrigSScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::TrigSParser::token token;
typedef w3c_sw::TrigSParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TrigSFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "lib/TrigSScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 1710 "lib/TrigSScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 114 "lib/TrigSScanner.lpp"

#line 1874 "lib/TrigSScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 566 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 565 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 40 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 40 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 41 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 115 "lib/TrigSScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 116 "lib/TrigSScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 117 "lib/TrigSScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 118 "lib/TrigSScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 119 "lib/TrigSScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 120 "lib/TrigSScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 121 "lib/TrigSScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 122 "lib/TrigSScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 123 "lib/TrigSScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 124 "lib/TrigSScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 125 "lib/TrigSScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 126 "lib/TrigSScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 127 "lib/TrigSScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 128 "lib/TrigSScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 129 "lib/TrigSScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "lib/TrigSScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "lib/TrigSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", yytext); return token::IT_true;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 132 "lib/TrigSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", yytext); return token::IT_false;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 133 "lib/TrigSScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 134 "lib/TrigSScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 135 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 136 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 137 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 138 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 139 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 140 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 141 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 142 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 143 "lib/TrigSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 144 "lib/TrigSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 145 "lib/TrigSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 146 "lib/TrigSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 147 "lib/TrigSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 148 "lib/TrigSScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 149 "lib/TrigSScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 150 "lib/TrigSScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 151 "lib/TrigSScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 152 "lib/TrigSScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 154 "lib/TrigSScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 155 "lib/TrigSScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 161 "lib/TrigSScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2196 "lib/TrigSScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TrigSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TrigSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TrigSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TrigSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 566 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 566 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 565);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TrigSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TrigSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TrigSfree((void *) b->yy_ch_buf  );

	TrigSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TrigSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TrigSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TrigSalloc(new_size  );

		else
			(yy_start_stack) = (int *) TrigSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TrigSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TrigSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TrigSfree (void * ptr )
{
	free( (char *) ptr );	/* see TrigSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 161 "lib/TrigSScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START TrigSScanner */
namespace w3c_sw {

TrigSScanner::TrigSScanner (TrigSDriver* driver, std::istream* in, std::ostream* out) : TrigSFlexLexer(in, out), driver(driver) {  }
TrigSScanner::~TrigSScanner () {  }

TrigSParser::token_type TrigSScanner::typedLiteral (TrigSParser::semantic_type*& yylval, TrigSParser::token_type tok) {
    std::istringstream is(yytext);
    std::ostringstream normalized;

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	normalized << i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	normalized << f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	normalized << d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

TrigSParser::token_type TrigSScanner::unescape (TrigSParser::semantic_type*& yylval, size_t skip, TrigSParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* TrigSScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index));
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << " asdf";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void TrigSScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END TrigSScanner */

const URI* TrigSScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}

} // END namespace w3c_sw

/* This implementation of TrigSFlexLexer::yylex() is required to fill the
 * vtable of the class TrigSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the TrigSScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TrigSFlexLexer::yylex()
{
    std::cerr << "in TrigSFlexLexer::yylex() !" << std::endl;
    return 0;
}


