#line 2 "lib/SQLScanner.cpp"

#line 4 "lib/SQLScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SQLFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SQLalloc (yy_size_t  );
void *SQLrealloc (void *,yy_size_t  );
void SQLfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 53
#define YY_END_OF_BUFFER 54
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[259] =
    {   0,
        0,    0,   54,   52,    2,    1,    1,   32,   52,   52,
       33,   34,    9,   29,   10,   30,   12,   31,   39,   22,
       20,   23,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,    2,    1,   21,    0,
       49,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   48,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,    0,   45,   40,
       40,   39,    0,   24,   25,   38,   38,   11,   38,   38,
       38,   26,   38,   38,   38,   38,   38,   38,   16,   18,
       38,   38,   38,   38,   38,   38,   49,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   48,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   43,   43,
        0,   46,   46,    0,    0,   40,    0,    0,   41,   19,
       38,   38,   38,   38,   38,   38,   28,   38,   38,   38,
       38,   38,   38,   38,   38,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       43,    0,    0,   44,    0,   46,    0,    0,   47,    0,
       41,    0,   41,   38,    6,   38,   17,   14,   38,   27,

       38,   38,   38,   38,   38,   38,   36,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   44,    0,
       44,    0,   47,    0,   47,   38,   13,    7,   38,   15,
       38,    4,    5,   37,   51,    0,    0,    0,    0,   50,
        0,    0,    0,    0,   35,    8,    3,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,    1,   17,
       18,   19,    1,    1,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   28,   21,   29,   30,   31,   32,   21,
       21,   33,   34,   35,   36,   21,   37,   21,   21,   21,
        1,   38,   39,    1,   21,    1,   40,   41,   22,   23,

       42,   43,   21,   26,   27,   28,   21,   44,   30,   45,
       32,   21,   21,   46,   47,   48,   49,   21,   37,   21,
       21,   21,    1,    1,    1,    1,    1,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   54,
       55,   56,   56,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   60,   61,   61,   62,
       63,   63,   63,   64,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        1,    4,    4,    4,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[264] =
    {   0,
        0,    0,  859,  860,  856,  860,  854,  838,   59,  117,
      860,  860,  860,   52,  860,   53,  839,  860,   56,  836,
      860,  835,   40,    0,  820,   40,   44,  819,   52,   52,
      100,   53,   51,  824,   59,  803,  846,  860,  860,  176,
      841,   96,   76,   56,  106,   58,  112,  100,  133,  137,
      143,  796,  234,  838,  163,  165,  170,  192,  171,  198,
      178,  204,  208,  214,  794,  827,  257,  826,  260,  259,
      262,  263,  189,  860,  860,    0,  818,    0,   59,  808,
      109,    0,  812,  110,  808,  164,   71,  245,    0,    0,
      255,  103,  810,  258,  792,  786,  860,  300,  257,  788,

      263,  269,  275,  281,  289,  295,  315,  860,  364,  322,
      785,  328,  334,  340,  346,  353,  359,  379,  419,  420,
      426,  422,  424,  434,  438,  436,  442,  665,  664,    0,
      657,  648,  417,  425,  428,  649,    0,  308,  433,  433,
      441,  641,  435,  625,  576,  478,  611,  465,  435,  440,
      444,  363,  467,  450,  473,  491,  497,  566,    0,  503,
      509,  515,  564,  606,  566,  524,  529,  533,  477,  539,
      545,  579,  546,  585,  560,    0,  591,  597,  603,  466,
      643,  496,  499,  489,  592,  644,  650,  488,  458,  457,
      453,  404,  340,  494,    0,  629,    0,    0,  629,    0,

      641,  636,  332,  575,  646,  311,    0,  274,  639,  193,
      645,  651,  657,  663,  669,  675,  681,  206,  687,  171,
      693,  699,  705,  711,  717,  723,  729,  191,  187,  157,
      155,  132,  122,   77,   67,  636,    0,    0,  639,    0,
      750,    0,    0,    0,  860,    0,  736,  742,  749,  860,
        0,  755,  761,  767,    0,    0,    0,  860,  822,  825,
       78,  828,  831
    } ;

static yyconst flex_int16_t yy_def[264] =
    {   0,
      258,    1,  258,  258,  258,  258,  258,  258,  259,  260,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  258,  258,  258,  259,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  260,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  258,  262,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  263,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  262,  146,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,   40,  258,
      258,  258,  263,  163,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,   53,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  146,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  163,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  258,  146,  258,  258,  258,  258,
      163,  258,  258,  258,  261,  261,  261,    0,  258,  258,
      258,  258,  258
    } ;

static yyconst flex_int16_t yy_nxt[925] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   24,   24,   26,   24,   27,   28,   29,   24,
       30,   31,   24,   32,   24,   33,   34,    4,    4,   23,
       24,   24,   35,   29,   30,   24,   32,   36,   33,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   41,   66,   68,   67,   69,   71,
       77,   72,   80,   78,   81,   84,   92,   82,   85,   73,
       76,   93,  235,   86,   77,   80,   78,   87,   81,  131,
       82,   80,  235,   84,   92,   93,   42,   73,   95,  138,

       87,   40,   40,  131,   80,  100,  100,  100,  100,   43,
      101,  101,  101,   44,  138,   45,   46,   47,   48,   49,
       50,   51,   52,   54,   88,   99,   99,   99,   99,   99,
       89,  141,   90,   40,  135,   91,   40,  233,   40,  133,
       40,   40,   88,   40,   89,   90,  141,  233,   91,  103,
      103,  103,  135,  133,   55,   40,   40,   40,   40,   40,
       40,  102,  102,  102,  102,  102,  102,   56,   53,   53,
      231,   57,  231,   58,   59,   60,   61,   62,   63,   64,
       65,   97,  104,  104,  104,  104,  104,  104,  105,  105,
      105,  105,  106,  106,  106,  106,  106,  106,  137,  128,

       53,  128,  229,   53,  129,   53,  229,   53,   53,  163,
       53,  137,  250,   42,  110,  110,  110,  110,  110,  111,
      111,  111,  111,  112,  112,  112,   43,  114,  114,  114,
       44,  146,   45,   46,   47,   48,   49,   50,   51,   52,
      108,   53,   53,   53,   53,   53,   53,  113,  113,  113,
      113,  113,  113,  115,  115,  115,  115,  115,  115,  116,
      116,  116,  116,  117,  117,  117,  117,  117,  117,  139,
      120,   55,   67,  123,   70,   69,   71,  126,   72,  245,
      121,  143,  125,  124,   56,  127,   73,  139,   57,  140,
       58,   59,   60,   61,   62,   63,   64,   65,  121,  143,

      125,  124,  140,  127,   73,  147,  100,  100,  100,  100,
      100,  100,   40,   40,   40,   40,   40,   40,  159,  159,
      159,  159,  159,  159,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,  200,  148,  160,  160,
      160,  160,  160,  160,  161,  161,  161,  161,  161,  161,
      149,  200,  244,  241,  150,  193,  151,  152,  153,  154,
      155,  156,  157,  158,  162,  162,  162,  162,  162,  162,
      164,  111,  111,  111,  111,  111,  111,   53,   53,   53,
       53,   53,   53,  176,  176,  176,  176,  176,  176,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,  165,  177,  177,  177,  177,  177,  177,  178,  178,
      178,  178,  178,  178,  166,  211,  211,  211,  167,  193,
      168,  169,  170,  171,  172,  173,  174,  175,  179,  179,
      179,  179,  179,  179,  119,  181,  183,  122,  183,  186,
      196,  184,  180,  182,  188,  185,  188,  187,  190,  189,
      190,  126,  192,  191,  192,  197,  202,  193,  196,  127,
      180,  182,  198,  185,  203,  187,  201,  205,  191,  197,
      146,  146,  191,  189,  202,  198,  228,  127,  228,  201,
      205,  229,  203,  147,  209,  209,  209,  209,  209,  210,
      210,  210,  210,  146,  146,  146,  146,  146,  146,  213,

      213,  213,  146,  189,  184,  146,  230,  146,  230,  146,
      146,  231,  146,  236,  184,  148,  212,  212,  212,  212,
      212,  212,  214,  214,  214,  214,  214,  214,  149,  221,
      221,  221,  150,  236,  151,  152,  153,  154,  155,  156,
      157,  158,  215,  215,  215,  215,  216,  216,  216,  216,
      216,  216,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,  100,  100,  100,  100,  100,  100,
      164,  163,  163,  219,  219,  219,  219,  219,  220,  220,
      220,  220,  163,  163,  163,  163,  163,  163,  222,  222,
      222,  222,  222,  222,  223,  223,  223,  225,  225,  225,

      225,  165,  232,  163,  232,  242,  163,  233,  163,  227,
      163,  163,  218,  163,  166,  217,  208,  207,  167,  242,
      168,  169,  170,  171,  172,  173,  174,  175,  224,  224,
      224,  224,  224,  224,  226,  226,  226,  226,  226,  226,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  111,  111,  111,  111,  111,  111,  181,  186,
      234,  237,  234,  238,  239,  235,  182,  187,  240,  243,
      255,  206,  204,  256,  237,  199,  238,  195,  194,  129,
      129,  240,  239,  255,  182,  187,  256,  243,  210,  210,
      210,  210,  210,  210,  146,  146,  146,  146,  146,  146,

      246,  246,  246,  246,  246,  246,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  247,  247,
      247,  247,  247,  247,  248,  248,  248,  248,  248,  248,
      249,  249,  249,  249,  249,  249,  220,  220,  220,  220,
      220,  220,  163,  163,  163,  163,  163,  163,  251,  251,
      251,  251,  251,  251,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  252,  252,  252,  252,
      252,  252,  253,  253,  253,  253,  253,  253,  254,  254,
      254,  254,  254,  254,  257,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  257,  210,  210,

      210,  210,  210,  210,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  220,  220,  220,  220,
      220,  220,   40,   53,   40,   53,   40,   53,  146,  146,
      146,  163,  163,  163,  145,  144,  142,  136,  134,  132,
      130,  122,  119,  118,  109,  107,   98,   37,   96,   94,
       83,   79,   75,   74,   70,   39,   38,   37,  258,    3,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258
    } ;

static yyconst flex_int16_t yy_chk[925] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,   14,   16,   14,   16,   19,
       23,   19,   26,   23,   27,   29,   32,   27,   29,   19,
      261,   33,  235,   30,   23,   26,   23,   30,   27,   79,
       27,   35,  234,   29,   32,   33,    9,   19,   35,   87,

       30,   42,   42,   79,   35,   44,   44,   44,   44,    9,
       46,   46,   46,    9,   87,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   31,   43,   43,   43,   43,   43,
       31,   92,   31,   42,   84,   31,   42,  233,   42,   81,
       42,   42,   31,   42,   31,   31,   92,  232,   31,   48,
       48,   48,   84,   81,   10,   45,   45,   45,   45,   45,
       45,   47,   47,   47,   47,   47,   47,   10,   55,   55,
      231,   10,  230,   10,   10,   10,   10,   10,   10,   10,
       10,   40,   49,   49,   49,   49,   49,   49,   50,   50,
       50,   50,   51,   51,   51,   51,   51,   51,   86,   73,

       55,   73,  229,   55,   73,   55,  228,   55,   55,  220,
       55,   86,  218,   40,   56,   56,   56,   56,   56,   57,
       57,   57,   57,   59,   59,   59,   40,   61,   61,   61,
       40,  210,   40,   40,   40,   40,   40,   40,   40,   40,
       53,   58,   58,   58,   58,   58,   58,   60,   60,   60,
       60,   60,   60,   62,   62,   62,   62,   62,   62,   63,
       63,   63,   63,   64,   64,   64,   64,   64,   64,   88,
       67,   53,   67,   69,   70,   69,   72,   71,   72,  208,
       67,   94,   70,   69,   53,   71,   72,   88,   53,   91,
       53,   53,   53,   53,   53,   53,   53,   53,   67,   94,

       70,   69,   91,   71,   72,   98,   99,   99,   99,   99,
       99,   99,  101,  101,  101,  101,  101,  101,  102,  102,
      102,  102,  102,  102,  103,  103,  103,  103,  103,  103,
      104,  104,  104,  104,  104,  104,  138,   98,  105,  105,
      105,  105,  105,  105,  106,  106,  106,  106,  106,  106,
       98,  138,  206,  203,   98,  193,   98,   98,   98,   98,
       98,   98,   98,   98,  107,  107,  107,  107,  107,  107,
      109,  110,  110,  110,  110,  110,  110,  112,  112,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  114,
      114,  114,  114,  114,  114,  115,  115,  115,  115,  115,

      115,  109,  116,  116,  116,  116,  116,  116,  117,  117,
      117,  117,  117,  117,  109,  152,  152,  152,  109,  192,
      109,  109,  109,  109,  109,  109,  109,  109,  118,  118,
      118,  118,  118,  118,  119,  120,  121,  122,  121,  123,
      133,  121,  119,  120,  124,  122,  124,  123,  125,  124,
      125,  126,  127,  125,  127,  134,  140,  127,  133,  126,
      119,  120,  135,  122,  141,  123,  139,  143,  191,  134,
      148,  148,  190,  189,  140,  135,  180,  126,  180,  139,
      143,  180,  141,  146,  149,  149,  149,  149,  149,  150,
      150,  150,  150,  151,  151,  151,  151,  151,  151,  154,

      154,  154,  148,  188,  184,  148,  182,  148,  182,  148,
      148,  182,  148,  194,  183,  146,  153,  153,  153,  153,
      153,  153,  155,  155,  155,  155,  155,  155,  146,  169,
      169,  169,  146,  194,  146,  146,  146,  146,  146,  146,
      146,  146,  156,  156,  156,  156,  157,  157,  157,  157,
      157,  157,  160,  160,  160,  160,  160,  160,  161,  161,
      161,  161,  161,  161,  162,  162,  162,  162,  162,  162,
      163,  165,  165,  166,  166,  166,  166,  166,  167,  167,
      167,  167,  168,  168,  168,  168,  168,  168,  170,  170,
      170,  170,  170,  170,  171,  171,  171,  173,  173,  173,

      173,  163,  185,  165,  185,  204,  165,  185,  165,  175,
      165,  165,  164,  165,  163,  158,  147,  145,  163,  204,
      163,  163,  163,  163,  163,  163,  163,  163,  172,  172,
      172,  172,  172,  172,  174,  174,  174,  174,  174,  174,
      177,  177,  177,  177,  177,  177,  178,  178,  178,  178,
      178,  178,  179,  179,  179,  179,  179,  179,  181,  186,
      187,  196,  187,  199,  201,  187,  181,  186,  202,  205,
      236,  144,  142,  239,  196,  136,  199,  132,  131,  129,
      128,  202,  201,  236,  181,  186,  239,  205,  209,  209,
      209,  209,  209,  209,  211,  211,  211,  211,  211,  211,

      212,  212,  212,  212,  212,  212,  213,  213,  213,  213,
      213,  213,  214,  214,  214,  214,  214,  214,  215,  215,
      215,  215,  215,  215,  216,  216,  216,  216,  216,  216,
      217,  217,  217,  217,  217,  217,  219,  219,  219,  219,
      219,  219,  221,  221,  221,  221,  221,  221,  222,  222,
      222,  222,  222,  222,  223,  223,  223,  223,  223,  223,
      224,  224,  224,  224,  224,  224,  225,  225,  225,  225,
      225,  225,  226,  226,  226,  226,  226,  226,  227,  227,
      227,  227,  227,  227,  241,  247,  247,  247,  247,  247,
      247,  248,  248,  248,  248,  248,  248,  241,  249,  249,

      249,  249,  249,  249,  252,  252,  252,  252,  252,  252,
      253,  253,  253,  253,  253,  253,  254,  254,  254,  254,
      254,  254,  259,  111,  259,  260,  100,  260,  262,  262,
      262,  263,  263,  263,   96,   95,   93,   85,   83,   80,
       77,   68,   66,   65,   54,   52,   41,   37,   36,   34,
       28,   25,   22,   20,   17,    8,    7,    5,    3,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258
    } ;

static yyconst flex_int16_t yy_rule_linenum[53] =
    {   0,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
      161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
      181,  184
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SQLScanner.lpp"
/* $Id: Langname_Scanner.ll,v 1.1 2008/04/06 17:10:46 eric Exp SQLScanner.ll 28 2007-08-20 10:27:39Z tb $ -*- mode: c++ -*- */
/** \file SQLScanner.ll Define the Flex lexical scanner */
#line 5 "lib/SQLScanner.lpp"

#include <vector>
#include <sstream>


#include "SQL.hpp"
#include "SQLParser/SQLParser.hpp"
#include "SQLScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SQLParser::token token;
typedef w3c_sw::SQLParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SQLFlexLexer" */
/* consider using class instead
 * %option yyclass="SQLScanner"
 * void SQLFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 65 "lib/SQLScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SQL terminals */
/*" for syntax hilighting */
/* END patterns for SQL terminals */
/* START semantic actions for SQL terminals */
#line 846 "lib/SQLScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 130 "lib/SQLScanner.lpp"

#line 1010 "lib/SQLScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 259 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 258 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 53 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 53 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 54 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 131 "lib/SQLScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 132 "lib/SQLScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 133 "lib/SQLScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "lib/SQLScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 135 "lib/SQLScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 136 "lib/SQLScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 137 "lib/SQLScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "lib/SQLScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 139 "lib/SQLScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 140 "lib/SQLScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 141 "lib/SQLScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 142 "lib/SQLScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 143 "lib/SQLScanner.lpp"
{return token::IT_INNER;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 144 "lib/SQLScanner.lpp"
{return token::IT_LEFT;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "lib/SQLScanner.lpp"
{return token::IT_OUTER;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 146 "lib/SQLScanner.lpp"
{return token::IT_ON;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 147 "lib/SQLScanner.lpp"
{return token::IT_JOIN;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "lib/SQLScanner.lpp"
{return token::IT_OR;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 149 "lib/SQLScanner.lpp"
{return token::IT_AND;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "lib/SQLScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 151 "lib/SQLScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "lib/SQLScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "lib/SQLScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 154 "lib/SQLScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 155 "lib/SQLScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 156 "lib/SQLScanner.lpp"
{return token::IT_IS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 157 "lib/SQLScanner.lpp"
{return token::IT_NULL;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 158 "lib/SQLScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 159 "lib/SQLScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 160 "lib/SQLScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 161 "lib/SQLScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 162 "lib/SQLScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 163 "lib/SQLScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 164 "lib/SQLScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 165 "lib/SQLScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 166 "lib/SQLScanner.lpp"
{return token::IT_true;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 167 "lib/SQLScanner.lpp"
{return token::IT_false;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 168 "lib/SQLScanner.lpp"
{yylval->p_NAME = new std::string(yytext); return token::NAME;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 169 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 170 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 171 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 172 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 173 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 174 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 175 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 176 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 177 "lib/SQLScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 178 "lib/SQLScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 179 "lib/SQLScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 180 "lib/SQLScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 181 "lib/SQLScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 183 "lib/SQLScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 184 "lib/SQLScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 190 "lib/SQLScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1395 "lib/SQLScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SQLfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SQLfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SQLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SQLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 259 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 259 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 258);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SQLalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SQLalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SQLfree((void *) b->yy_ch_buf  );

	SQLfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SQLrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SQLalloc(new_size  );

		else
			(yy_start_stack) = (int *) SQLrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SQLalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SQLrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SQLfree (void * ptr )
{
	free( (char *) ptr );	/* see SQLrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 190 "lib/SQLScanner.lpp"


/* END semantic actions for SQL terminals */

/* START SQLScanner */
namespace w3c_sw {

SQLScanner::SQLScanner(SQLDriver* driver, std::istream* in,
		 std::ostream* out)
    : SQLFlexLexer(in, out), driver(driver)
{
}

SQLScanner::~SQLScanner()
{
}

SQLParser::token_type SQLScanner::typedLiteral (SQLParser::semantic_type*& yylval, SQLParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_Expression = new sql::IntConstraint(i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_Expression = new sql::FloatConstraint(i);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_Expression = new sql::DoubleConstraint(i);
	return tok;
    default: throw(new std::exception());
    }
}

    SQLParser::token_type SQLScanner::unescape (SQLParser::semantic_type*& yylval, w3c_sw::location* yylloc, size_t skip, SQLParser::token_type tok){
    std::string space;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't':  space += '\t'; break;
	    case 'n':  space += '\n'; break;
	    case 'r':  space += '\r'; break;
	    case 'b':  space += '\b'; break;
	    case 'f':  space += '\f'; break;
	    case '"':  space += '\"'; break;
	    case '\'': space += '\''; break;
	    case '\\': space += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    if (yytext[i] == '\r')
		yylloc->end.lines(1); 
	    else if (yytext[i] == '\n'
		     && !(i > skip && yytext[i-1] == '\r'))
		yylloc->end.lines(1); 
	    space += yytext[i];
	}
    }
    yylval->p_Expression = new sql::LiteralConstraint(space);
    return tok;
}


void SQLScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

} /* END SQLScanner */

/* This implementation of SQLFlexLexer::yylex() is required to fill the
 * vtable of the class SQLFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SQLScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SQLFlexLexer::yylex()
{
    std::cerr << "in SQLFlexLexer::yylex() !" << std::endl;
    return 0;
}


