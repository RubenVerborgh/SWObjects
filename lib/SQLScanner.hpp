// $Id: Langname_Scanner.hh,v 1.1 2008/04/06 17:10:46 eric Exp $

#ifndef sqlScanner_H
#define sqlScanner_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    sql_parser::sqlParser::token_type				\
    sql_parser::sqlScanner::lex(				\
	sql_parser::sqlParser::semantic_type* yylval,		\
	sql_parser::sqlParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer sqlFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "SQLParser/SQLParser.hpp"

namespace sql_parser {

/** sqlScanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to sqlFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the sqlScanner class. This is required
 * because the yylex() defined in sqlFlexLexer has no parameters. */
class sqlScanner : public sqlFlexLexer
{
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    sqlScanner(std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~sqlScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual sqlParser::token_type lex(
	sqlParser::semantic_type* yylval,
	sqlParser::location_type* yylloc
	);

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    sqlParser::token_type typedLiteral(sqlParser::semantic_type*&, sqlParser::token_type tok);
    sqlParser::token_type unescape(sqlParser::semantic_type*&, sql_parser::location* yylloc, size_t skip, sqlParser::token_type tok);
};

} // namespace sql_parser

#endif // sqlScanner_H
