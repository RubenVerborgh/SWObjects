// $Id: Langname_Scanner.hh,v 1.1 2008/04/06 17:10:46 eric Exp $

#ifndef SQLScanner_H
#define SQLScanner_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    w3c_sw::SQLParser::token_type				\
    w3c_sw::SQLScanner::lex(				\
	w3c_sw::SQLParser::semantic_type* yylval,		\
	w3c_sw::SQLParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer SQLFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "SQLParser/SQLParser.hpp"

namespace w3c_sw {

/** SQLScanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to SQLFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the SQLScanner class. This is required
 * because the yylex() defined in SQLFlexLexer has no parameters. */
class SQLScanner : public SQLFlexLexer
{
private:
    SQLDriver* driver;
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    SQLScanner(SQLDriver* driver, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~SQLScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual SQLParser::token_type lex(
	SQLParser::semantic_type* yylval,
	SQLParser::location_type* yylloc
	);
    SQLParser::token_type lexWrapper(
	   SQLParser::semantic_type* yylval,
	   SQLParser::location_type* yylloc
					   ) {
	try {
	    return lex(yylval, yylloc);
	} catch (const char* e) {
	    std::stringstream s;
	    s << *yylloc << ": " << e;
	    throw s.str();
	}
    }

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    SQLParser::token_type typedLiteral(SQLParser::semantic_type*&, SQLParser::token_type tok);
    SQLParser::token_type unescape(SQLParser::semantic_type*&, w3c_sw::location* yylloc, size_t skip, SQLParser::token_type tok);
    SQLParser::token_type makeHexConstraint(SQLParser::semantic_type*& yylval, size_t front, size_t back);
};

} // namespace w3c_sw

#endif // SQLScanner_H
