/* $Id: Langname_Scanner.ll,v 1.1 2008/04/06 17:10:46 eric Exp SQLScanner.ll 28 2007-08-20 10:27:39Z tb $ -*- mode: c++ -*- */
/** \file SQLScanner.ll Define the Flex lexical scanner */

%{ /*** C/C++ Declarations ***/

#include <vector>
#include <sstream>


#include "SQL.hpp"
#include "SQLParser/SQLParser.hpp"
#include "SQLScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SQLParser::token token;
typedef w3c_sw::SQLParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

%}

/*** Flex Declarations and Options ***/

/* enable c++ scanner class generation */
%option c++

/* change the name of the scanner class. results in "SQLFlexLexer" */
%option prefix="SQL"
/* consider using class instead
 * %option yyclass="SQLScanner"
 * void SQLFlexLexer::LexerError( yyconst char msg[] )
 */

/* the manual says "somewhat more optimized" */
%option batch

/* enable scanner to generate debug output. disable this for release
 * versions. */
%option debug

%option nodefault
%option warn

/* no support for include files is planned */
%option noyywrap nounput

/* enables the use of start condition stacks */
%option stack

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
%{
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
%}

/* START patterns for SQL terminals */
GT_SEMI		";"
IT_DROP		[Dd][Rr][Oo][Pp]
IT_TABLE		[Tt][Aa][Bb][Ll][Ee]
IT_IF		[Ii][Ff]
IT_EXISTS		[Ee][Xx][Ii][Ss][Tt][Ss]
IT_LOCK		[Ll][Oo][Cc][Kk]
IT_TABLES		[Tt][Aa][Bb][Ll][Ee][Ss]
IT_UNLOCK		[Uu][Nn][Ll][Oo][Cc][Kk]
IT_READ		[Rr][Ee][Aa][Dd]
IT_WRITE		[Ww][Rr][Ii][Tt][Ee]
IT_CREATE		[Cc][Rr][Ee][Aa][Tt][Ee]
GT_LPAREN		"("
GT_RPAREN		")"
GT_COMMA		","
IT_INSERT		[Ii][Nn][Ss][Ee][Rr][Tt]
IT_INTO		[Ii][Nn][Tt][Oo]
IT_VALUES		[Vv][Aa][Ll][Uu][Ee][Ss]
IT_DEFAULT		[Dd][Ee][Ff][Aa][Uu][Ll][Tt]
GT_EQUAL		"="
IT_FOREIGN		[Ff][Oo][Rr][Ee][Ii][Gg][Nn]
IT_KEY		[Kk][Ee][Yy]
IT_REFERENCES		[Rr][Ee][Ff][Ee][Rr][Ee][Nn][Cc][Ee][Ss]
IT_PRIMARY		[Pp][Rr][Ii][Mm][Aa][Rr][Yy]
IT_CONSTRAINT		[Cc][Oo][Nn][Ss][Tt][Rr][Aa][Ii][Nn][Tt]
IT_UNIQUE		[Uu][Nn][Ii][Qq][Uu][Ee]
IT_CHARACTER		[Cc][Hh][Aa][Rr][Aa][Cc][Tt][Ee][Rr]
IT_VARCHAR		[Vv][Aa][Rr][Cc][Hh][Aa][Rr]
IT_BINARY		[Bb][Ii][Nn][Aa][Rr][Yy]
IT_NUMERIC		[Nn][Uu][Mm][Ee][Rr][Ii][Cc]
IT_DECIMAL		[Dd][Ee][Cc][Ii][Mm][Aa][Ll]
IT_SMALLINT		[Ss][Mm][Aa][Ll][Ll][Ii][Nn][Tt]
IT_BIGINT		[Bb][Ii][Gg][Ii][Nn][Tt]
IT_FLOAT		[Ff][Ll][Oo][Aa][Tt]
IT_REAL		[Rr][Ee][Aa][Ll]
IT_DOUBLE		[Dd][Oo][Uu][Bb][Ll][Ee]
IT_PRECISION		[Pp][Rr][Ee][Cc][Ii][Ss][Ii][Oo][Nn]
IT_BOOLEAN		[Bb][Oo][Oo][Ll][Ee][Aa][Nn]
IT_DATE		[Dd][Aa][Tt][Ee]
IT_TIME		[Tt][Ii][Mm][Ee]
IT_TIMESTAMP		[Tt][Ii][Mm][Ee][Ss][Tt][Aa][Mm][Pp]
IT_DATETIME		[Dd][Aa][Tt][Ee][Tt][Ii][Mm][Ee]
IT_INTERVAL		[Ii][Nn][Tt][Ee][Rr][Vv][Aa][Ll]
IT_NATIONAL		[Nn][Aa][Tt][Ii][Oo][Nn][Aa][Ll]
IT_VARYING		[Vv][Aa][Rr][Yy][Ii][Nn][Gg]
IT_LARGE		[Ll][Aa][Rr][Gg][Ee]
IT_OBJECT		[Oo][Bb][Jj][Ee][Cc][Tt]
IT_INTEGER		[Ii][Nn][Tt][Ee][Gg][Ee][Rr]
IT_INT		[Ii][Nn][Tt]
IT_NOT		[Nn][Oo][Tt]
IT_NULL		[Nn][Uu][Ll][Ll]
IT_CAST		[Cc][Aa][Ss][Tt]
IT_AS		[Aa][Ss]
IT_UNION		[Uu][Nn][Ii][Oo][Nn]
IT_SELECT		[Ss][Ee][Ll][Ee][Cc][Tt]
IT_WHERE		[Ww][Hh][Ee][Rr][Ee]
IT_FROM		[Ff][Rr][Oo][Mm]
IT_LIMIT		[Ll][Ii][Mm][Ii][Tt]
IT_ROWNUM		[Rr][Oo][Ww][Nn][Uu][Mm]
GT_LE		"<="
IT_OFFSET		[Oo][Ff][Ff][Ss][Ee][Tt]
GT_TIMES		"*"
GT_DOT		"."
IT_INNER		[Ii][Nn][Nn][Ee][Rr]
IT_LEFT		[Ll][Ee][Ff][Tt]
IT_OUTER		[Oo][Uu][Tt][Ee][Rr]
IT_ON		[Oo][Nn]
IT_JOIN		[Jj][Oo][Ii][Nn]
IT_OR		[Oo][Rr]
IT_AND		[Aa][Nn][Dd]
GT_NEQUAL		"!="
GT_LT		"<"
GT_GT		">"
GT_GE		">="
IT_IS		[Ii][Ss]
GT_PLUS		"+"
GT_MINUS		"-"
GT_DIVIDE		"/"
GT_NOT		"!"
IT_CONCAT		[Cc][Oo][Nn][Cc][Aa][Tt]
IT_LCASE		[Ll][Cc][Aa][Ss][Ee]
IT_UCASE		[Uu][Cc][Aa][Ss][Ee]
IT_REGEX		[Rr][Ee][Gg][Ee][Xx]
IT_TRUE		[Tr][Rr][Uu][Ee]
IT_FALSE		[Ff][Aa][Ll][Ss][Ee]
NAME		[A-Za-z_][A-Za-z0-9_]*
INTEGER		[0-9]+
DECIMAL		([0-9]+"."[0-9]*)|("."[0-9]+)
INTEGER_POSITIVE		"+"{INTEGER}
DECIMAL_POSITIVE		"+"{DECIMAL}
INTEGER_NEGATIVE		"-"{INTEGER}
DECIMAL_NEGATIVE		"-"{DECIMAL}
EXPONENT		[Ee]([+-])?([0-9])+
DOUBLE		(([0-9])+"."([0-9])*({EXPONENT}))|(("."(([0-9]))+({EXPONENT}))|((([0-9]))+({EXPONENT})))
DOUBLE_NEGATIVE		"-"({DOUBLE})
DOUBLE_POSITIVE		"+"({DOUBLE})
ECHAR		"\\"[\"'\\bfnrt]
STRING_LITERAL_LONG2		"\"\"\""((((("\"")|("\"\"")))?(([\x00-!#-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])|(({ECHAR})))))*"\"\"\""
STRING_LITERAL_LONG1		"'''"((((("'")|("''")))?(([\x00-&(-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])|(({ECHAR})))))*"'''"
STRING_LITERAL2		"\""(((([\x00-\t\x0B-\x0C\x0E-!#-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))]))|(({ECHAR}))))*"\""
STRING_LITERAL1		"'"(((([\x00-\t\x0B-\x0C\x0E-&(-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))]))|(({ECHAR}))))*"'"
/*" for syntax hilighting */
PASSED_TOKENS		(([\t\n\r ])+)|(("--"([\x00-\t\x0B-\x0C\x0E-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])*)|("/""*"((([\x00-)+-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])|("*"[\x00-.0-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])))*"*""/"(";")?))
LINEFEED		(\r\n|\r|\n)

/* END patterns for SQL terminals */

/* START semantic actions for SQL terminals */
%%
{LINEFEED}		{ yylloc->end.lines(1); }
{PASSED_TOKENS}		{ /* yylloc->step(); @@ needed? useful? */ }
{GT_SEMI}		{return token::GT_SEMI;}
{IT_DROP}		{return token::IT_DROP;}
{IT_TABLE}		{return token::IT_TABLE;}
{IT_IF}		{return token::IT_IF;}
{IT_EXISTS}		{return token::IT_EXISTS;}
{IT_LOCK}		{return token::IT_LOCK;}
{IT_TABLES}		{return token::IT_TABLES;}
{IT_UNLOCK}		{return token::IT_UNLOCK;}
{IT_READ}		{return token::IT_READ;}
{IT_WRITE}		{return token::IT_WRITE;}
{IT_CREATE}		{return token::IT_CREATE;}
{GT_LPAREN}		{return token::GT_LPAREN;}
{GT_RPAREN}		{return token::GT_RPAREN;}
{GT_COMMA}		{return token::GT_COMMA;}
{IT_INSERT}		{return token::IT_INSERT;}
{IT_INTO}		{return token::IT_INTO;}
{IT_VALUES}		{return token::IT_VALUES;}
{IT_DEFAULT}		{return token::IT_DEFAULT;}
{GT_EQUAL}		{return token::GT_EQUAL;}
{IT_FOREIGN}		{return token::IT_FOREIGN;}
{IT_KEY}		{return token::IT_KEY;}
{IT_REFERENCES}		{return token::IT_REFERENCES;}
{IT_PRIMARY}		{return token::IT_PRIMARY;}
{IT_CONSTRAINT}		{return token::IT_CONSTRAINT;}
{IT_UNIQUE}		{return token::IT_UNIQUE;}
{IT_CHARACTER}		{return token::IT_CHARACTER;}
{IT_VARCHAR}		{return token::IT_VARCHAR;}
{IT_BINARY}		{return token::IT_BINARY;}
{IT_NUMERIC}		{return token::IT_NUMERIC;}
{IT_DECIMAL}		{return token::IT_DECIMAL;}
{IT_SMALLINT}		{return token::IT_SMALLINT;}
{IT_BIGINT}		{return token::IT_BIGINT;}
{IT_FLOAT}		{return token::IT_FLOAT;}
{IT_REAL}		{return token::IT_REAL;}
{IT_DOUBLE}		{return token::IT_DOUBLE;}
{IT_PRECISION}		{return token::IT_PRECISION;}
{IT_BOOLEAN}		{return token::IT_BOOLEAN;}
{IT_DATE}		{return token::IT_DATE;}
{IT_TIME}		{return token::IT_TIME;}
{IT_TIMESTAMP}		{return token::IT_TIMESTAMP;}
{IT_DATETIME}		{return token::IT_DATETIME;}
{IT_INTERVAL}		{return token::IT_INTERVAL;}
{IT_NATIONAL}		{return token::IT_NATIONAL;}
{IT_VARYING}		{return token::IT_VARYING;}
{IT_LARGE}		{return token::IT_LARGE;}
{IT_OBJECT}		{return token::IT_OBJECT;}
{IT_INTEGER}		{return token::IT_INTEGER;}
{IT_INT}		{return token::IT_INT;}
{IT_NOT}		{return token::IT_NOT;}
{IT_NULL}		{return token::IT_NULL;}
{IT_CAST}		{return token::IT_CAST;}
{IT_AS}		{return token::IT_AS;}
{IT_UNION}		{return token::IT_UNION;}
{IT_SELECT}		{return token::IT_SELECT;}
{IT_WHERE}		{return token::IT_WHERE;}
{IT_FROM}		{return token::IT_FROM;}
{IT_LIMIT}		{return token::IT_LIMIT;}
{IT_ROWNUM}		{return token::IT_ROWNUM;}
{GT_LE}		{return token::GT_LE;}
{IT_OFFSET}		{return token::IT_OFFSET;}
{GT_TIMES}		{return token::GT_TIMES;}
{GT_DOT}		{return token::GT_DOT;}
{IT_INNER}		{return token::IT_INNER;}
{IT_LEFT}		{return token::IT_LEFT;}
{IT_OUTER}		{return token::IT_OUTER;}
{IT_ON}		{return token::IT_ON;}
{IT_JOIN}		{return token::IT_JOIN;}
{IT_OR}		{return token::IT_OR;}
{IT_AND}		{return token::IT_AND;}
{GT_NEQUAL}		{return token::GT_NEQUAL;}
{GT_LT}		{return token::GT_LT;}
{GT_GT}		{return token::GT_GT;}
{GT_GE}		{return token::GT_GE;}
{IT_IS}		{return token::IT_IS;}
{GT_PLUS}		{return token::GT_PLUS;}
{GT_MINUS}		{return token::GT_MINUS;}
{GT_DIVIDE}		{return token::GT_DIVIDE;}
{GT_NOT}		{return token::GT_NOT;}
{IT_CONCAT}		{return token::IT_CONCAT;}
{IT_LCASE}		{return token::IT_LCASE;}
{IT_UCASE}		{return token::IT_UCASE;}
{IT_REGEX}		{return token::IT_REGEX;}
{IT_TRUE}		{yylval->p_Expression = new sql::BoolConstraint(true); return token::IT_TRUE;}
{IT_FALSE}		{yylval->p_Expression = new sql::BoolConstraint(false); return token::IT_FALSE;}
{NAME}			{yylval->p_NAME = new std::string(yytext); return token::NAME;}
{INTEGER}		{return typedLiteral(yylval, token::INTEGER);}
{DECIMAL}		{return typedLiteral(yylval, token::DECIMAL);}
{DOUBLE}		{return typedLiteral(yylval, token::DOUBLE);}
{INTEGER_POSITIVE}		{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
{DECIMAL_POSITIVE}		{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
{DOUBLE_POSITIVE}		{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
{INTEGER_NEGATIVE}		{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
{DECIMAL_NEGATIVE}		{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
{DOUBLE_NEGATIVE}		{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
{STRING_LITERAL1}		{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
{STRING_LITERAL2}		{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
{STRING_LITERAL_LONG1}		{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
{STRING_LITERAL_LONG2}		{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}

<<EOF>>			{ yyterminate();}
.			{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}

%%
/* END semantic actions for SQL terminals */

/* START SQLScanner */
namespace w3c_sw {

SQLScanner::SQLScanner(SQLDriver* driver, std::istream* in,
		 std::ostream* out)
    : SQLFlexLexer(in, out), driver(driver)
{
}

SQLScanner::~SQLScanner()
{
}

SQLParser::token_type SQLScanner::typedLiteral (SQLParser::semantic_type*& yylval, SQLParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_Expression = new sql::IntConstraint(i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_Expression = new sql::FloatConstraint(f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_Expression = new sql::DoubleConstraint(d);
	return tok;
    default: throw(new std::exception());
    }
}

    SQLParser::token_type SQLScanner::unescape (SQLParser::semantic_type*& yylval, w3c_sw::location* yylloc, size_t skip, SQLParser::token_type tok) {
    std::string space;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't':  space += '\t'; break;
	    case 'n':  space += '\n'; break;
	    case 'r':  space += '\r'; break;
	    case 'b':  space += '\b'; break;
	    case 'f':  space += '\f'; break;
	    case '"':  space += '\"'; break;
	    case '\'': space += '\''; break;
	    case '\\': space += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    if (yytext[i] == '\r')
		yylloc->end.lines(1); 
	    else if (yytext[i] == '\n'
		     && !(i > skip && yytext[i-1] == '\r'))
		yylloc->end.lines(1); 
	    space += yytext[i];
	}
    }
    yylval->p_NAME = new std::string(space);
    // yylval->p_Expression = new sql::LiteralConstraint(space);
    return tok;
}


void SQLScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

} /* END SQLScanner */

/* This implementation of SQLFlexLexer::yylex() is required to fill the
 * vtable of the class SQLFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SQLScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SQLFlexLexer::yylex()
{
    std::cerr << "in SQLFlexLexer::yylex() !" << std::endl;
    return 0;
}

