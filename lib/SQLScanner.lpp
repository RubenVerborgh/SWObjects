/* $Id: Langname_Scanner.ll,v 1.1 2008/04/06 17:10:46 eric Exp sqlScanner.ll 28 2007-08-20 10:27:39Z tb $ -*- mode: c++ -*- */
/** \file sqlScanner.ll Define the Flex lexical scanner */

%{ /*** C/C++ Declarations ***/

#include <vector>
#include <sstream>


#include "SQL.hpp"
#include "SQLParser/SQLParser.hpp"
#include "SQLScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::sqlParser::token token;
typedef w3c_sw::sqlParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

%}

/*** Flex Declarations and Options ***/

/* enable c++ scanner class generation */
%option c++

/* change the name of the scanner class. results in "sqlFlexLexer" */
%option prefix="sql"

/* the manual says "somewhat more optimized" */
%option batch

/* enable scanner to generate debug output. disable this for release
 * versions. */
%option debug

%option nodefault
%option warn

/* no support for include files is planned */
%option noyywrap nounput 

/* enables the use of start condition stacks */
%option stack

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
%{
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
%}

/* START patterns for sql terminals */
IT_SELECT		[Ss][Ee][Ll][Ee][Cc][Tt]
IT_UNION		[Uu][Nn][Ii][Oo][Nn]
IT_WHERE		[Ww][Hh][Ee][Rr][Ee]
IT_FROM		[Ff][Rr][Oo][Mm]
GT_TIMES		"*"
GT_COMMA		","
IT_AS		[Aa][Ss]
GT_DOT		"."
IT_INNER		[Ii][Nn][Nn][Ee][Rr]
IT_JOIN		[Jj][Oo][Ii][Nn]
IT_ON		[Oo][Nn]
GT_OR		"OR"
GT_AND		"AND"
GT_EQUAL		"="
GT_NEQUAL		"!="
GT_LT		"<"
GT_GT		">"
GT_LE		"<="
GT_GE		">="
GT_PLUS		"+"
GT_MINUS		"-"
GT_DIVIDE		"/"
GT_NOT		"!"
GT_LPAREN		"("
GT_RPAREN		")"
IT_CONCAT		[Cc][Oo][Nn][Cc][Aa][Tt]
IT_true		"true"
IT_false		"false"
NAME		[A-Za-z_][A-Za-z0-9_]*
INTEGER		[0-9]+
DECIMAL		([0-9]+"."[0-9]*)|("."[0-9]+)
INTEGER_POSITIVE		"+"{INTEGER}
DECIMAL_POSITIVE		"+"{DECIMAL}
INTEGER_NEGATIVE		"-"{INTEGER}
DECIMAL_NEGATIVE		"-"{DECIMAL}
EXPONENT		[Ee]([+-])?([0-9])+
DOUBLE		(([0-9])+"."([0-9])*({EXPONENT}))|(("."(([0-9]))+({EXPONENT}))|((([0-9]))+({EXPONENT})))
DOUBLE_NEGATIVE		"-"({DOUBLE})
DOUBLE_POSITIVE		"+"({DOUBLE})
ECHAR		"\\"[\"'\\bfnrt]
STRING_LITERAL_LONG2		"\"\"\""((((("\"")|("\"\"")))?(([\x00-!#-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])|(({ECHAR})))))*"\"\"\""
STRING_LITERAL_LONG1		"'''"((((("'")|("''")))?(([\x00-&(-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])|(({ECHAR})))))*"'''"
STRING_LITERAL2		"\""(((([\x00-\t\x0B-\x0C\x0E-!#-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))]))|(({ECHAR}))))*"\""
STRING_LITERAL1		"'"(((([\x00-\t\x0B-\x0C\x0E-&(-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))]))|(({ECHAR}))))*"'"
/*" for syntax hilighting */
PASSED_TOKENS		([\t ])+
LINEFEED		(\r\n|\r|\n)

/* END patterns for sql terminals */

/* START semantic actions for sql terminals */
%%
{LINEFEED}		{ yylloc->end.lines(1); }
{PASSED_TOKENS}		{ yylloc->step(); /* @@ needed? useful? */ }
{IT_SELECT}		{return token::IT_SELECT;}
{IT_UNION}		{return token::IT_UNION;}
{IT_WHERE}		{return token::IT_WHERE;}
{IT_FROM}		{return token::IT_FROM;}
{GT_TIMES}		{return token::GT_TIMES;}
{GT_COMMA}		{return token::GT_COMMA;}
{IT_AS}		{return token::IT_AS;}
{GT_DOT}		{return token::GT_DOT;}
{IT_INNER}		{return token::IT_INNER;}
{IT_JOIN}		{return token::IT_JOIN;}
{IT_ON}		{return token::IT_ON;}
{GT_OR}		{return token::GT_OR;}
{GT_AND}		{return token::GT_AND;}
{GT_EQUAL}		{return token::GT_EQUAL;}
{GT_NEQUAL}		{return token::GT_NEQUAL;}
{GT_LT}		{return token::GT_LT;}
{GT_GT}		{return token::GT_GT;}
{GT_LE}		{return token::GT_LE;}
{GT_GE}		{return token::GT_GE;}
{GT_PLUS}		{return token::GT_PLUS;}
{GT_MINUS}		{return token::GT_MINUS;}
{GT_DIVIDE}		{return token::GT_DIVIDE;}
{GT_NOT}		{return token::GT_NOT;}
{GT_LPAREN}		{return token::GT_LPAREN;}
{GT_RPAREN}		{return token::GT_RPAREN;}
{IT_CONCAT}		{return token::IT_CONCAT;}
{IT_true}		{return token::IT_true;}
{IT_false}		{return token::IT_false;}
{NAME}			{yylval->p_NAME = new std::string(yytext); return token::NAME;}
{INTEGER}		{return typedLiteral(yylval, token::INTEGER);}
{DECIMAL}		{return typedLiteral(yylval, token::DECIMAL);}
{DOUBLE}		{return typedLiteral(yylval, token::DOUBLE);}
{INTEGER_POSITIVE}		{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
{DECIMAL_POSITIVE}		{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
{DOUBLE_POSITIVE}		{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
{INTEGER_NEGATIVE}		{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
{DECIMAL_NEGATIVE}		{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
{DOUBLE_NEGATIVE}		{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
{STRING_LITERAL1}		{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
{STRING_LITERAL2}		{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
{STRING_LITERAL_LONG1}		{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
{STRING_LITERAL_LONG2}		{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}

<<EOF>>			{ yyterminate();}
.			{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}

%%
/* END semantic actions for sql terminals */

/* START sqlScanner */
namespace w3c_sw {

sqlScanner::sqlScanner(std::istream* in,
		 std::ostream* out)
    : sqlFlexLexer(in, out)
{
}

sqlScanner::~sqlScanner()
{
}

sqlParser::token_type sqlScanner::typedLiteral (sqlParser::semantic_type*& yylval, sqlParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_Expression = new sql::IntConstraint(i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_Expression = new sql::FloatConstraint(i);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_Expression = new sql::DoubleConstraint(i);
	return tok;
    default: throw(new std::exception());
    }
}

    sqlParser::token_type sqlScanner::unescape (sqlParser::semantic_type*& yylval, w3c_sw::location* yylloc, size_t skip, sqlParser::token_type tok){
    std::string space;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't':  space += '\t'; break;
	    case 'n':  space += '\n'; break;
	    case 'r':  space += '\r'; break;
	    case 'b':  space += '\b'; break;
	    case 'f':  space += '\f'; break;
	    case '"':  space += '\"'; break;
	    case '\'': space += '\''; break;
	    case '\\': space += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    if (yytext[i] == '\r')
		yylloc->end.lines(1); 
	    else if (yytext[i] == '\n'
		     && !(i > skip && yytext[i-1] == '\r'))
		yylloc->end.lines(1); 
	    space += yytext[i];
	}
    }
    yylval->p_Expression = new sql::LiteralConstraint(space);
    return tok;
}


void sqlScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

} /* END sqlScanner */

/* This implementation of sqlFlexLexer::yylex() is required to fill the
 * vtable of the class sqlFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the sqlScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int sqlFlexLexer::yylex()
{
    std::cerr << "in sqlFlexLexer::yylex() !" << std::endl;
    return 0;
}

