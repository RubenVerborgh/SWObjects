#line 2 "lib/TrigScanner.cpp"

#line 4 "lib/TrigScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TrigFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Trigalloc (yy_size_t  );
void *Trigrealloc (void *,yy_size_t  );
void Trigfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[583] =
    {   0,
        0,    0,   42,   40,    2,    1,    1,   40,    2,   40,
       10,   11,   40,   13,   40,   12,   23,   37,   14,   40,
       40,   40,   40,   40,   40,   40,   40,   16,   17,   40,
       40,   15,    8,    9,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,    2,    1,    0,   35,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   25,    0,   27,   24,   24,   23,    0,

       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   22,   22,   22,    0,    0,   37,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   36,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   26,   26,    0,   28,   28,    0,    0,   24,    0,
        0,   29,   38,    0,   38,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   38,   38,   38,
       38,   38,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   22,   22,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   39,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   26,    0,    0,   31,    0,   28,    0,    0,   30,
        0,   29,    0,   29,   38,   38,   38,   38,   38,   38,

       38,   38,   38,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   38,   38,   38,   38,
       38,    0,    0,    0,    0,    0,    0,   22,   22,   22,
        0,    0,    0,    0,    0,    0,    0,    6,    0,    0,
        0,   19,   39,    0,   39,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   39,   39,   39,
       39,   39,   39,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   31,    0,
       31,    0,   30,    0,   30,   38,   38,   38,   38,   38,
        0,    0,   38,    4,   22,    0,   20,    7,    0,   39,
       39,   39,   39,   39,   39,   39,   39,   39,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   39,   39,   39,   39,   39,    0,    0,   33,    0,
        0,    0,    0,   32,    0,    0,    0,    0,   38,   22,
        5,   39,   39,   39,   39,   39,    0,    0,   39,    3,
       39,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    9,   10,
       11,    8,   12,   13,   14,   15,    8,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
        8,   20,    8,   21,   22,   23,   24,   24,   25,   26,
       27,   28,   29,   24,   24,   30,   24,   24,   24,   31,
       24,   32,   33,   34,   35,   24,   24,   36,   24,   24,
       37,   38,   39,   40,   41,    1,   42,   43,   44,   44,

       45,   46,   47,   48,   49,   44,   44,   50,   44,   51,
       44,   52,   44,   53,   54,   55,   56,   44,   44,   57,
       44,   44,   58,    1,   59,    8,    8,   60,   61,   62,
       62,   62,   62,   63,   64,   64,   64,   64,   64,   65,
       65,   64,   66,   67,   67,   67,   67,   67,   67,   67,
       68,   69,   69,   69,   69,   69,   69,   69,   69,   70,
       70,   70,   70,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   72,   72,   72,   72,   72,
       72,   72,   73,   74,   74,   74,   74,   74,   74,   75,
       76,   77,   77,   78,   79,   80,   80,   80,   80,   80,

       80,   80,   80,   81,   82,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   84,   85,   86,   87,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   89,   90,   91,   92,
       93,   93,   93,   94,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77
    } ;

static yyconst flex_int32_t yy_meta[95] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    4,    3,    5,    3,    3,    1,    3,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    3,    1,    3,    1,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    7,
        7,    7,    7,    7,    7,    8,    7,    9,    7,    7,
        7,    7,    9,    7,   10,   11,   12,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3

    } ;

static yyconst flex_int16_t yy_base[810] =
    {   0,
        0,    0, 1193, 4278,   93, 4278, 1189,   93,  122,  208,
     4278, 4278,   81, 4278,   85, 1160,   87,  287, 4278,  361,
       82,  442,   82,   84,   75,   76,   77,  112, 4278, 1133,
     1130,    0, 4278, 4278,    0,    0,   75,   82,    0,   46,
        0,   81,   84,    0,   91,    0,  158, 1070,    0,  160,
      118,  167,    0,  148, 4278,  530, 1123,  359,    0,    0,
        0,  177,    0,  194,    0,  197,    0,  132,  559,    0,
        0,    0,  205,    0,  322,    0,  348,    0,  368,  645,
     1119,  531,    0,    0,    0,  471,    0,  488,    0,  491,
        0,  527, 1094,  555, 1074,  560,  556,  582,  640,  292,

      726,    0,    0,  568,  597,    0,  320,    0,  330,  335,
        0,  596,    0,  614, 1028,    0,  630,  253,  633,    0,
      800, 4278,    0,    0,    0,  606,    0,  761,    0,  764,
        0,  652, 1035,  827,  447,  881, 1023,  959,    0,  977,
        0,  782,    0,  790,    0,  671,  963,    0,  331,  333,
      785,    0,  983,    0, 1000,  958,    0, 1002,  274, 1009,
        0,  380,  255,  285,  435,  446,  860, 4278, 4278, 1070,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  952,
      798,    0,    0,  911,    0,    0,    0,  904,    0,    0,
     4278, 1158,    0,  919,    0,    0,    0,    0,    0,    0,

        0,    0,  902,    0,    0,    0,    0,    0,    0,    0,
     4278, 1244,    0,  881,    0,    0,    0,    0,    0,    0,
        0, 1135, 1149,  581, 1150, 1152,  706, 1075, 1153, 1167,
      886,  861, 1325,    0,    0,  815,    0, 1124,    0, 1139,
        0, 1134,  795,    0,  505,  526, 1139,    0, 1146,    0,
     1194,  807,    0, 1196,  531, 1203,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  751, 1153,    0,    0,  743,
        0,    0,    0, 1211,    0,    0,    0,  726,    0,    0,
        0,    0,    0,    0,    0,    0,  886, 1266, 1405,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  360,

     1220,    0,    0,  659,    0,    0,    0, 1225,    0,    0,
      437,  730,  733,  493,  639, 1485,    0,    0, 1242, 1252,
        0, 1270,    0, 1099, 1159,    0, 1509,    0, 1526,  650,
        0, 1528,  925, 1535,    0,    0,    0,    0,    0,    0,
        0,    0, 1606, 1695, 1607,    0,    0,    0, 1547,    0,
     1564,    0, 1567,    0, 1603, 1784,    0,    0,    0, 1813,
        0,    0,    0, 1899, 1985, 1664,    0,    0,    0, 1604,
        0, 1660,    0, 1667,    0, 1684, 2071,    0,    0,    0,
     1490, 1399, 1635,  657,  620, 1640, 1687, 1643,  610,  567,
      563,  522,  516,  485, 2152,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1106, 1678,    0,    0,  403,
        0,    0,    0, 1683,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 2226,    0,    0,    0,  424, 1778, 1779,
     2307,    0,    0,    0,    0,    0,    0,    0,  741,  873,
      970,    0, 2387,    0,    0,  375,    0, 1702,    0, 1734,
        0, 1734,  353,    0, 1636, 1638, 1739,    0, 1756,    0,
     1773,  340,    0, 1775, 1036, 1842,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  312, 1744,    0,    0,  304,
        0,    0,    0, 1779,    0,    0, 2467, 2555,    0,  244,
        0,    0,    0,    0,    0,    0,    0, 2641,    0,  243,

        0,    0,    0,    0,    0,    0,    0,  229,  228,  183,
      154,  152,  139,  136,  117, 2722,    0,    0,    0,    0,
        0,    0,    0,  113, 1632,    0,    0,    0,  882, 2802,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1640, 1808,    0,    0,   63,    0,    0,    0, 1847,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4278, 2890,
        0,    0,    0, 4278, 2976,    0,    0,    0,    0, 1134,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
        0, 4278, 3070, 3081, 3092, 3101,  104, 3106, 3111, 3116,
     3121, 3126, 3131, 3136, 3141, 3146, 3151, 3156, 3160, 3163,

     3168, 3173, 3178, 3189, 3194, 3198, 3201, 3206, 3211, 3216,
     3227, 3232, 3236, 3239, 3244, 3249, 3254, 3259, 3264, 3269,
     3274, 3279, 3284, 3289, 3294, 3299, 3304, 3313, 3318, 3322,
     3325, 3330, 3335, 3340, 3348, 3348, 3353, 3358, 3363, 3368,
     3373, 3378, 3383, 3388, 3393, 3398, 3403, 3408, 3413, 3418,
     3423, 3428, 3433, 3438, 3449, 3454, 3459, 3464, 3469, 3474,
     3479, 3484, 3489, 3494, 3499, 3504, 3509, 3520, 3525, 3530,
     3535, 3540, 3545, 3550, 3555, 3560, 3565, 3570, 3575, 3580,
     3585, 3590, 3595, 3600, 3605, 3610, 3615, 3620, 3625, 3630,
     3635, 3640, 3645, 3650, 3655, 3660, 3665, 3670, 3675, 3682,

     3685, 3685, 3690, 3695, 3700, 3705, 3710, 3715, 3720, 3725,
     3730, 3735, 3740, 3745, 3750, 3755, 3760, 3765, 3770, 3775,
     3786, 3791, 3795, 3798, 3803, 3808, 3813, 3824, 3829, 3834,
     3845, 3850, 3855, 3866, 3871, 3875, 3878, 3883, 3888, 3893,
     3904, 3909, 3914, 3919, 3924, 3929, 3934, 3939, 3944, 3949,
     3954, 3959, 3968, 3973, 3978, 3986, 3989, 3989, 3994, 3999,
     4004, 4009, 4014, 4019, 4024, 4029, 4034, 4039, 4044, 4049,
     4054, 4059, 4064, 4069, 4074, 4079, 4084, 4095, 4100, 4105,
     4110, 4115, 4120, 4125, 4136, 4141, 4146, 4151, 4156, 4161,
     4166, 4171, 4179, 4179, 4184, 4189, 4194, 4199, 4204, 4209,

     4214, 4219, 4230, 4235, 4240, 4251, 4256, 4261, 4266
    } ;

static yyconst flex_int16_t yy_def[810] =
    {   0,
      582,    1,  582,  582,  582,  582,  582,  583,  584,  585,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  586,
      587,  582,   22,   22,   22,   22,   22,  582,  582,  582,
      582,   22,  582,  582,  588,  589,  588,  588,  590,  591,
      592,  592,  582,  593,  582,  594,  595,  595,  596,  582,
      582,  582,  597,  582,  582,  583,  582,  582,  598,  599,
      600,  582,  601,  582,  602,  582,  603,  582,  604,  605,
      606,  607,  582,  608,  582,  609,  582,  610,  582,  611,
      582,  582,  612,  613,  614,  582,  615,  582,  616,  582,
      617,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  618,  619,  618,  618,  620,  621,  622,  622,  582,
      623,  582,  624,  625,  625,  626,  582,  582,  582,  627,
      628,  582,  629,  630,  631,  582,  632,  582,  633,  582,
      634,  582,  635,  635,  635,  582,  136,  582,  136,  636,
      637,  636,  636,  636,  638,  639,  582,  640,  640,  640,
      641,  642,  582,  643,  644,  644,  645,  582,  582,  582,
      646,  136,  136,  136,  136,  136,  582,  582,  582,  582,
      136,  136,  136,  136,  136,  136,  136,  647,  648,  649,
      649,  649,  650,  651,  651,  649,  652,  582,  653,  654,
      582,  655,  656,  582,  657,  658,  657,  657,  659,  660,

      661,  662,  582,  663,  664,  663,  663,  665,  666,  667,
      582,  668,  669,  582,  670,  671,  670,  670,  672,  673,
      674,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  233,  233,  675,  676,  675,  675,  675,
      677,  678,  582,  679,  679,  679,  680,  681,  582,  682,
      683,  683,  684,  582,  582,  582,  685,  233,  233,  233,
      233,  233,  233,  686,  687,  688,  688,  688,  689,  690,
      690,  688,  691,  582,  692,  693,  694,  582,  695,  696,
      695,  695,  697,  698,  699,  700,  701,  701,  582,  289,
      289,  289,  289,  289,  289,  289,  289,  702,  703,  704,

      704,  704,  705,  706,  706,  704,  707,  582,  708,  709,
      289,  289,  289,  289,  289,  582,  710,  711,  710,  710,
      712,  713,  714,  714,  582,  715,  582,  716,  717,  717,
      718,  582,  582,  582,  719,  289,  289,  289,  289,  289,
      720,  720,  721,  721,  582,  722,  723,  724,  582,  725,
      582,  726,  582,  727,  582,  728,  729,  729,  730,  731,
      732,  732,  733,  734,  734,  582,  735,  736,  737,  582,
      738,  582,  739,  582,  740,  582,  741,  742,  742,  743,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  395,  395,  395,  395,  395,

      395,  395,  395,  744,  745,  746,  746,  746,  747,  748,
      748,  746,  749,  582,  750,  751,  395,  395,  395,  395,
      395,  752,  752,  753,  754,  754,  755,  756,  757,  757,
      582,  431,  431,  431,  431,  758,  758,  431,  431,  431,
      431,  431,  582,  443,  443,  759,  760,  759,  759,  759,
      761,  762,  582,  763,  763,  763,  764,  765,  582,  766,
      767,  767,  768,  582,  582,  582,  769,  443,  443,  443,
      443,  443,  443,  770,  771,  772,  772,  772,  773,  774,
      774,  772,  775,  582,  776,  777,  582,  778,  779,  582,
      780,  781,  780,  780,  782,  783,  784,  785,  786,  582,

      787,  788,  787,  787,  789,  790,  791,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  516,  516,  516,  516,
      792,  792,  516,  793,  793,  487,  487,  487,  487,  582,
      530,  530,  530,  530,  530,  530,  530,  530,  794,  795,
      796,  796,  796,  797,  798,  798,  796,  799,  582,  800,
      801,  530,  530,  530,  530,  530,  802,  802,  582,  803,
      804,  804,  805,  582,  806,  807,  807,  808,  516,  793,
      487,  530,  530,  530,  530,  530,  809,  809,  530,  793,
      530,    0,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582
    } ;

static yyconst flex_int16_t yy_nxt[4373] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,    4,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,    4,
       21,   22,   23,   22,   22,   24,   25,   22,   22,   22,
       26,   22,   22,   27,   22,   22,   28,    4,   29,   30,
       31,   32,   23,   22,   22,   24,   25,   22,   22,   22,
       22,   26,   22,   22,   27,   22,   22,   33,   34,    4,
       35,   36,   37,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   38,   39,   39,   40,    4,    4,   41,   42,
        4,   43,   44,   45,   46,   47,   48,   49,   50,    4,
       51,   52,   53,    4,   54,   93,   94,   54,   57,   95,

       96,   98,   99,  162,  134,  163,  164,  165,  166,  133,
      286,  100,  135,  167,  167,  167,  167,  174,  174,  174,
      171,  171,  531,  162,  134,  163,  286,  164,  165,  166,
       58,  100,  515,  135,  172,  172,  172,  172,  172,  172,
      172,  173,  173,  173,  173,  173,  173,  173,  176,   54,
      168,  515,   54,  176,  513,  177,  177,  177,   59,  177,
      178,  178,  178,  178,  178,  178,  178,  513,   60,  511,
       61,   61,   61,   61,   61,   61,   62,   63,   63,   63,
       63,   64,   65,   65,   66,   67,   68,   70,  187,  187,
      188,  201,  201,  201,  201,  201,  201,   71,  511,   72,

       72,   72,   72,   72,   72,   73,   74,   74,   74,   74,
       75,   76,   76,   77,   78,   79,   81,  180,  181,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  183,
      183,  183,  183,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  509,  509,   82,  195,  195,  195,  195,
      195,  195,  195,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,   83,  204,  204,  204,  204,  204,  204,
      204,  364,  343,   84,  312,   85,   85,   85,   85,   85,
       85,   86,   87,   87,   87,   87,   88,   89,   89,   90,

       91,   92,  101,  231,  312,  231,  313,  232,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  273,  273,  274,  313,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  307,  307,  308,  102,  103,  104,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  105,
      106,  106,  107,  468,   56,  108,  109,   56,  110,  111,
      112,  113,  114,  115,  116,  117,  469,  118,  119,  120,
      122,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  261,  261,  261,  258,  258,   56,  101,  139,  545,

      139,   56,  101,  139,   56,  139,  263,  263,  263,   56,
      263,   56,  311,   56,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  291,  443,  123,  210,  210,  210,
      210,  210,  210,  311,  530,  289,  124,  286,  125,  125,
      125,  125,  125,  125,  126,  127,  127,  127,  127,  128,
      129,  129,  130,  131,  132,  136,  137,  136,  138,  314,
      286,  438,  396,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  288,  314,
      315,  438,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  288,

      394,  315,  140,  141,  142,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  144,  145,  145,  146,  441,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  394,  159,  160,  161,  191,   80,  392,  441,   80,
      215,  215,  215,  215,  215,  215,  215,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,   58,   80,  223,
       94,   97,  235,   80,  226,   96,   80,  235,  392,  224,
      228,   80,  390,   80,  227,   80,  221,  221,  221,  221,
      221,  221,  384,  235,  384,   59,  385,  229,  235,  224,

      228,  413,  413,  414,  227,   60,  230,   61,   61,   61,
       61,   61,   61,   62,   63,   63,   63,   63,   64,   65,
       65,   66,   67,   68,   70,  390,  230,  259,  259,  259,
      259,  259,  259,  259,   71,  385,   72,   72,   72,   72,
       72,   72,   73,   74,   74,   74,   74,   75,   76,   76,
       77,   78,   79,  211,   98,   99,  260,  260,  260,  260,
      260,  260,  260,  442,  100,  264,  264,  264,  264,  264,
      264,  264,  385,  266,  267,  279,  279,  279,  279,  279,
      279,  279,   82,  442,  100,  269,  269,  269,  269,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  480,
       83,  285,  285,  285,  285,  285,  285,  389,  290,  389,
       84,  390,   85,   85,   85,   85,   85,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   90,   91,   92,  233,
      234,  233,  293,  293,  293,  290,  290,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  439,  440,  121,  527,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  439,  440,  527,  236,  237,  238,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  240,  241,

      241,  242,  258,  243,  244,  245,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  259,  255,  256,  257,  122,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      286,  291,  291,  291,  291,  291,  291,  291,  287,  292,
      292,  292,  292,  292,  292,  292,  296,  296,  296,  139,
      296,  167,  167,  167,  167,  123,  410,  233,  287,  172,
      172,  172,  172,  172,  395,  124,  232,  125,  125,  125,
      125,  125,  125,  126,  127,  127,  127,  127,  128,  129,
      129,  130,  131,  132,  136,  137,  136,  138,  168,  286,

      528,  232,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  571,  429,   80,
      528,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  571,  429,
       69,  140,  141,  142,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  144,  145,  145,  146,   56,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
      171,  159,  160,  161,  101,  340,  340,  340,  340,  340,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  483,  483,  484,  529,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  172,  304,  529,  102,
      103,  104,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  105,  106,  106,  107,  136,  289,  108,  109,  582,
      110,  111,  112,  113,  114,  115,  116,  117,  286,  118,
      119,  120,  298,  298,  298,  298,  298,  298,  298,  300,
      301,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  303,  303,  303,  303,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  316,  391,  270,  391,  225,
      392,  316,  316,  316,  316,  316,  316,  316,  316,  316,

      316,  316,  316,  316,  316,  316,  548,  548,  549,  222,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  212,  192,  184,
      317,  318,  319,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  320,  321,  321,  322,  170,  286,  323,  324,
      222,  325,  326,  327,  328,  329,  330,  331,  332,  381,
      333,  334,  335,  344,  382,  225,  316,  387,  229,  580,
      397,  316,  169,  383,  386,   97,  388,  230,  393,  381,
      393,  395,  394,  397,  397,  397,  397,  397,  397,  397,
      580,   55,  582,  383,  386,  345,  388,  230,  398,  398,

      398,  398,  398,  398,  398,  399,  399,  399,  396,  396,
      402,  402,  402,  235,  402,  404,  404,  404,  404,  404,
      404,  404,  582,  346,  259,  259,  259,  259,  259,  582,
      473,  473,  473,  347,  473,  348,  348,  348,  348,  348,
      348,  349,  350,  350,  350,  350,  351,  352,  352,  353,
      354,  355,  365,  406,  407,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  409,  409,  409,  409,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  286,
      582,  366,  421,  421,  421,  421,  421,  582,  582,  582,
      430,  291,  291,  291,  291,  291,  435,  435,  435,  435,

      435,  469,  469,  469,  469,  469,  469,  469,  582,  367,
      430,  470,  470,  470,  470,  470,  470,  470,  582,  368,
      582,  369,  369,  369,  369,  369,  369,  370,  371,  371,
      371,  371,  372,  373,  373,  374,  375,  376,  233,  234,
      233,  471,  471,  471,  468,  468,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  582,  582,  582,  582,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  582,  582,  582,  236,  237,  238,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  240,  241,  241,

      242,  582,  243,  244,  245,  246,  247,  248,  249,  250,
      251,  252,  253,  254,  382,  255,  256,  257,  136,  137,
      136,  138,  582,  383,  582,  582,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  582,  582,  383,  582,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  582,  582,  582,  140,  141,  142,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  144,  145,  145,
      146,  582,  147,  148,  149,  150,  151,  152,  153,  154,
      155,  156,  157,  158,  582,  159,  160,  161,  443,  444,

      443,  508,  582,  508,  582,  509,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  582,  582,  582,  582,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  582,  582,  582,  446,  447,  448,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  450,  451,  451,
      452,  582,  453,  454,  455,  456,  457,  458,  459,  460,
      461,  462,  463,  464,  582,  465,  466,  467,  474,  474,
      474,  474,  474,  474,  474,  476,  477,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  479,  479,  479,

      479,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  344,  343,  582,  582,  343,  491,  491,  491,  491,
      491,  491,  491,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  345,  343,  286,  510,  582,  510,  343,
      511,  512,  343,  512,  514,  513,  514,  343,  515,  343,
      570,  343,  497,  497,  497,  497,  497,  497,  582,  364,
      582,  346,  364,  501,  501,  501,  501,  501,  501,  501,
      570,  347,  582,  348,  348,  348,  348,  348,  348,  349,
      350,  350,  350,  350,  351,  352,  352,  353,  354,  355,

      488,  364,  387,  445,  532,  445,  364,  582,  445,  364,
      445,  388,  582,  582,  364,  530,  364,  582,  364,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  582,
      582,  388,  345,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  507,  507,  507,  507,  507,  507,  397,
      397,  397,  397,  397,  520,  520,  520,  520,  520,  582,
      346,  532,  532,  532,  532,  532,  532,  532,  582,  582,
      347,  582,  348,  348,  348,  348,  348,  348,  349,  350,
      350,  350,  350,  351,  352,  352,  353,  354,  355,  191,
      582,  286,  286,  533,  533,  533,  533,  533,  533,  533,

      582,  582,  524,  582,  525,  534,  534,  534,  531,  531,
      537,  537,  537,  445,  537,  469,  469,  469,  469,  469,
      582,   58,  524,  582,  525,  539,  539,  539,  539,  539,
      539,  539,  541,  542,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  544,  544,  544,  544,  582,   59,
      556,  556,  556,  556,  556,  582,  582,  582,  582,   60,
      582,   61,   61,   61,   61,   61,   61,   62,   63,   63,
       63,   63,   64,   65,   65,   66,   67,   68,   70,  532,
      532,  532,  532,  532,  582,  582,  582,  582,   71,  582,
       72,   72,   72,   72,   72,   72,   73,   74,   74,   74,

       74,   75,   76,   76,   77,   78,   79,  365,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  576,  576,
      576,  576,  576,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  366,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  367,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  368,  582,  369,  369,  369,  369,
      369,  369,  370,  371,  371,  371,  371,  372,  373,  373,
      374,  375,  376,  498,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  366,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      367,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      368,  582,  369,  369,  369,  369,  369,  369,  370,  371,
      371,  371,  371,  372,  373,  373,  374,  375,  376,  211,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,   82,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,   83,  582,  582,  582,
      582,  582,  582,  582,  582,  582,   84,  582,   85,   85,
       85,   85,   85,   85,   86,   87,   87,   87,   87,   88,
       89,   89,   90,   91,   92,  233,  234,  233,  582,  582,
      582,  582,  582,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  582,  582,
      582,  582,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  582,
      582,  582,  236,  237,  238,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  240,  241,  241,  242,  582,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  582,  255,  256,  257,  122,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  123,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  124,  582,  125,  125,  125,  125,  125,  125,  126,
      127,  127,  127,  127,  128,  129,  129,  130,  131,  132,
      136,  137,  136,  138,  582,  582,  582,  582,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  582,  582,  582,  582,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  582,  582,  582,  140,  141,  142,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  144,
      145,  145,  146,  582,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  156,  157,  158,  582,  159,  160,  161,

      443,  444,  443,  582,  582,  582,  582,  582,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  582,  582,  582,  582,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  582,  582,  582,  446,  447,  448,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,
      451,  451,  452,  582,  453,  454,  455,  456,  457,  458,
      459,  460,  461,  462,  463,  464,  582,  465,  466,  467,
      136,  137,  136,  138,  582,  582,  582,  582,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  582,  582,  582,  582,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  582,  582,  582,  140,  141,  142,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  144,
      145,  145,  146,  582,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  156,  157,  158,  582,  159,  160,  161,
      559,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  345,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      346,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      347,  582,  348,  348,  348,  348,  348,  348,  349,  350,
      350,  350,  350,  351,  352,  352,  353,  354,  355,  564,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  366,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  367,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  368,  582,  369,  369,
      369,  369,  369,  369,  370,  371,  371,  371,  371,  372,
      373,  373,  374,  375,  376,  233,  234,  233,  582,  582,
      582,  582,  582,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  582,  582,
      582,  582,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  582,
      582,  582,  236,  237,  238,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  240,  241,  241,  242,  582,  243,

      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  582,  255,  256,  257,  443,  444,  443,  582,  582,
      582,  582,  582,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  582,  582,
      582,  582,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  582,
      582,  582,  446,  447,  448,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  450,  451,  451,  452,  582,  453,
      454,  455,  456,  457,  458,  459,  460,  461,  462,  463,
      464,  582,  465,  466,  467,  344,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  345,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  346,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  347,  582,  348,  348,  348,
      348,  348,  348,  349,  350,  350,  350,  350,  351,  352,
      352,  353,  354,  355,  365,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  366,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  367,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  368,  582,  369,  369,  369,  369,  369,  369,  370,
      371,  371,  371,  371,  372,  373,  373,  374,  375,  376,
       56,  582,   56,   56,   56,   56,  582,   56,  582,  582,
       56,   69,  582,   69,   69,   69,   69,  582,   69,  582,
      582,   69,   80,  582,   80,   80,   80,   80,  582,   80,

      582,  582,   80,  121,  121,  121,  121,  582,  121,  582,
      582,  121,  171,  171,  171,  171,  171,  172,  172,  172,
      172,  172,  174,  174,  174,  174,  174,  175,  175,  175,
      175,  175,  176,  176,  582,  176,  176,  177,  177,  177,
      177,  177,  179,  179,  179,  179,  179,  182,  182,  182,
      182,  182,  185,  185,  185,  185,  185,  190,  190,  190,
      190,  190,  193,  193,  193,  193,  194,  194,  194,   56,
       56,   56,   56,   56,  196,  196,  196,  196,  196,  198,
      198,  198,  198,  198,  200,  200,  200,  200,  200,   69,
      582,   69,   69,   69,   69,  582,   69,  582,  582,   69,

      202,  202,  202,  202,  203,  203,  203,   69,   69,   69,
       69,   69,  205,  205,  205,  205,  205,  207,  207,  207,
      207,  207,  209,  209,  209,  209,  209,   80,  582,   80,
       80,   80,   80,  582,   80,  582,  582,   80,  213,  213,
      213,  213,  214,  214,  214,   80,   80,   80,   80,   80,
      216,  216,  216,  216,  216,  218,  218,  218,  218,  218,
      220,  220,  220,  220,  220,  258,  258,  258,  258,  258,
      259,  259,  259,  259,  259,  261,  261,  261,  261,  261,
      262,  262,  262,  262,  262,  101,  101,  582,  101,  101,
      263,  263,  263,  263,  263,  265,  265,  265,  265,  265,

      268,  268,  268,  268,  268,  271,  271,  271,  271,  271,
      276,  276,  276,  276,  276,  121,  121,  121,  121,  582,
      121,  582,  582,  121,  277,  277,  277,  277,  278,  278,
      278,  121,  121,  121,  121,  121,  280,  280,  280,  280,
      280,  282,  282,  282,  282,  282,  284,  284,  284,  284,
      284,  133,  582,  133,  290,  290,  290,  290,  290,  291,
      291,  291,  291,  291,  293,  293,  293,  293,  293,  294,
      294,  294,  294,  294,  139,  139,  582,  139,  139,  295,
      295,  295,  295,  295,  297,  297,  297,  297,  297,  299,
      299,  299,  299,  299,  302,  302,  302,  302,  302,  305,

      305,  305,  305,  305,  310,  310,  310,  310,  310,  177,
      177,  177,  177,  177,  336,  336,  336,  336,  336,  171,
      171,  171,  171,  171,  337,  337,  337,  337,  337,  338,
      338,  338,  338,  338,  339,  339,  339,  339,  339,  341,
      341,  341,  341,  341,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  343,  582,  343,  582,  582,  343,
      194,  194,  194,  194,  194,   56,   56,   56,   56,   56,
      356,  356,  356,  356,  356,  357,  357,  357,  357,  357,
      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,
      203,  203,  203,  203,  203,   69,   69,   69,   69,   69,

      360,  360,  360,  360,  360,  361,  361,  361,  361,  361,
      362,  362,  362,  362,  362,  363,  363,  363,  363,  363,
      364,  364,  364,  364,  364,  364,  582,  364,  582,  582,
      364,  214,  214,  214,  214,  214,   80,   80,   80,   80,
       80,  377,  377,  377,  377,  377,  378,  378,  378,  378,
      378,  379,  379,  379,  379,  379,  380,  380,  380,  380,
      380,  396,  396,  396,  396,  396,  397,  397,  397,  397,
      397,  399,  399,  399,  399,  399,  400,  400,  400,  400,
      400,  235,  235,  582,  235,  235,  401,  401,  401,  401,
      401,  403,  403,  403,  403,  403,  405,  405,  405,  405,

      405,  408,  408,  408,  408,  408,  411,  411,  411,  411,
      411,  416,  416,  416,  416,  416,  263,  263,  263,  263,
      263,  417,  417,  417,  417,  417,  258,  258,  258,  258,
      258,  418,  418,  418,  418,  418,  419,  419,  419,  419,
      419,  420,  420,  420,  420,  420,  422,  422,  422,  422,
      422,  423,  423,  423,  423,  423,  278,  278,  278,  278,
      278,  121,  121,  121,  121,  121,  424,  424,  424,  424,
      424,  425,  425,  425,  425,  425,  426,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  428,  428,  133,  582,
      133,  297,  297,  297,  297,  297,  431,  431,  431,  431,

      431,  290,  290,  290,  290,  290,  432,  432,  432,  432,
      432,  433,  433,  433,  433,  433,  434,  434,  434,  434,
      434,  436,  436,  436,  436,  436,  437,  437,  437,  437,
      437,  468,  468,  468,  468,  468,  469,  469,  469,  469,
      469,  471,  471,  471,  471,  471,  472,  472,  472,  472,
      472,  316,  316,  582,  316,  316,  473,  473,  473,  473,
      473,  475,  475,  475,  475,  475,  478,  478,  478,  478,
      478,  481,  481,  481,  481,  481,  486,  486,  486,  486,
      486,  487,  487,  487,  487,  487,  343,  343,  343,  343,
      343,  343,  582,  343,  582,  582,  343,  489,  489,  489,

      489,  490,  490,  490,  343,  343,  343,  343,  343,  492,
      492,  492,  492,  492,  494,  494,  494,  494,  494,  496,
      496,  496,  496,  496,   56,  582,   56,   56,   56,   56,
      582,   56,  582,  582,   56,   56,   56,   56,   56,   56,
      194,  194,  194,  194,  194,   69,  582,   69,   69,   69,
       69,  582,   69,  582,  582,   69,   69,   69,   69,   69,
       69,  203,  203,  203,  203,  203,  364,  364,  364,  364,
      364,  364,  582,  364,  582,  582,  364,  499,  499,  499,
      499,  500,  500,  500,  364,  364,  364,  364,  364,  502,
      502,  502,  502,  502,  504,  504,  504,  504,  504,  506,

      506,  506,  506,  506,   80,  582,   80,   80,   80,   80,
      582,   80,  582,  582,   80,   80,   80,   80,   80,   80,
      214,  214,  214,  214,  214,  403,  403,  403,  403,  403,
      516,  516,  516,  516,  516,  396,  396,  396,  396,  396,
      517,  517,  517,  517,  517,  518,  518,  518,  518,  518,
      519,  519,  519,  519,  519,  521,  521,  521,  521,  521,
      522,  522,  522,  522,  522,  523,  523,  523,  523,  523,
      121,  121,  121,  121,  582,  121,  582,  582,  121,  121,
      121,  121,  121,  121,  278,  278,  278,  278,  278,  428,
      428,  428,  133,  582,  133,  526,  526,  526,  526,  526,

      531,  531,  531,  531,  531,  532,  532,  532,  532,  532,
      534,  534,  534,  534,  534,  535,  535,  535,  535,  535,
      445,  445,  582,  445,  445,  536,  536,  536,  536,  536,
      538,  538,  538,  538,  538,  540,  540,  540,  540,  540,
      543,  543,  543,  543,  543,  546,  546,  546,  546,  546,
      551,  551,  551,  551,  551,  473,  473,  473,  473,  473,
      552,  552,  552,  552,  552,  468,  468,  468,  468,  468,
      553,  553,  553,  553,  553,  554,  554,  554,  554,  554,
      555,  555,  555,  555,  555,  557,  557,  557,  557,  557,
      558,  558,  558,  558,  558,  343,  343,  343,  343,  343,

      343,  582,  343,  582,  582,  343,  490,  490,  490,  490,
      490,  343,  343,  343,  343,  343,  560,  560,  560,  560,
      560,  561,  561,  561,  561,  561,  562,  562,  562,  562,
      562,  563,  563,  563,  563,  563,  364,  364,  364,  364,
      364,  364,  582,  364,  582,  582,  364,  500,  500,  500,
      500,  500,  364,  364,  364,  364,  364,  565,  565,  565,
      565,  565,  566,  566,  566,  566,  566,  567,  567,  567,
      567,  567,  568,  568,  568,  568,  568,  569,  569,  569,
      569,  569,  133,  582,  133,  538,  538,  538,  538,  538,
      572,  572,  572,  572,  572,  531,  531,  531,  531,  531,

      573,  573,  573,  573,  573,  574,  574,  574,  574,  574,
      575,  575,  575,  575,  575,  577,  577,  577,  577,  577,
      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      343,  343,  343,  343,  343,  343,  582,  343,  582,  582,
      343,  343,  343,  343,  343,  343,  490,  490,  490,  490,
      490,  364,  364,  364,  364,  364,  364,  582,  364,  582,
      582,  364,  364,  364,  364,  364,  364,  500,  500,  500,
      500,  500,  581,  581,  581,  581,  581,    3,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582
    } ;

static yyconst flex_int16_t yy_chk[4373] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,   13,   13,    5,    8,   15,

       15,   17,   17,   23,   21,   24,   25,   26,   27,  587,
      580,   17,   21,   28,   28,   28,   28,   40,   40,   40,
       40,   40,  545,   23,   21,   24,  524,   25,   26,   27,
        8,   17,  515,   21,   37,   37,   37,   37,   37,   37,
       37,   38,   38,   38,   38,   38,   38,   38,   42,   54,
       28,  514,   54,   42,  513,   43,   43,   43,    8,   43,
       45,   45,   45,   45,   45,   45,   45,  512,    8,  511,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    9,   51,   51,
       51,   68,   68,   68,   68,   68,   68,    9,  510,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   47,   47,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   47,
       47,   47,   47,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  509,  508,   10,   62,   62,   62,   62,
       62,   62,   62,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   10,   73,   73,   73,   73,   73,   73,
       73,  500,  490,   10,  163,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   18,  100,  163,  100,  164,  100,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,  118,  118,  118,  164,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,  159,  159,  159,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,  480,   58,   18,   18,   58,   18,   18,
       18,   18,   18,   18,   18,   18,  476,   18,   18,   18,
       20,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  107,  107,  107,  107,  107,   58,  109,  149,  462,

      150,   58,  109,  149,   58,  150,  110,  110,  110,   58,
      110,   58,  162,   58,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  300,  453,   20,   79,   79,   79,
       79,   79,   79,  162,  446,  300,   20,  428,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   22,   22,   22,   22,  165,
      135,  311,  410,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,  135,  165,
      166,  311,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,  135,

      394,  166,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,  314,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,  393,   22,   22,   22,   56,   82,  392,  314,   82,
       86,   86,   86,   86,   86,   86,   86,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   56,   82,   94,
       94,   97,  245,   82,   96,   96,   82,  245,  391,   94,
       97,   82,  390,   82,   96,   82,   92,   92,   92,   92,
       92,   92,  224,  246,  224,   56,  224,   98,  246,   94,

       97,  255,  255,  255,   96,   56,   98,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   69,  389,   98,  104,  104,  104,
      104,  104,  104,  104,   69,  385,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   80,   99,   99,  105,  105,  105,  105,
      105,  105,  105,  315,   99,  112,  112,  112,  112,  112,
      112,  112,  384,  114,  114,  126,  126,  126,  126,  126,
      126,  126,   80,  315,   99,  114,  114,  114,  114,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  330,
       80,  132,  132,  132,  132,  132,  132,  227,  304,  227,
       80,  227,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,  101,
      101,  101,  146,  146,  146,  146,  146,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  312,  313,  278,  439,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  312,  313,  439,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  270,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  266,  101,  101,  101,  121,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      134,  142,  142,  142,  142,  142,  142,  142,  134,  144,
      144,  144,  144,  144,  144,  144,  151,  151,  151,  151,
      151,  167,  167,  167,  167,  121,  252,  243,  134,  181,
      181,  181,  181,  181,  236,  121,  232,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  136,  136,  136,  136,  167,  287,

      440,  231,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  529,  287,  214,
      440,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  529,  287,
      203,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  194,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      184,  136,  136,  136,  138,  188,  188,  188,  188,  188,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  333,  333,  333,  441,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  180,  156,  441,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  147,  140,  138,  138,  137,
      138,  138,  138,  138,  138,  138,  138,  138,  133,  138,
      138,  138,  153,  153,  153,  153,  153,  153,  153,  155,
      155,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  155,  155,  155,  155,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  170,  228,  115,  228,   95,
      228,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  465,  465,  465,   93,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,   81,   57,   48,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,   31,  570,  170,  170,
      222,  170,  170,  170,  170,  170,  170,  170,  170,  222,
      170,  170,  170,  192,  223,  225,  324,  226,  229,  570,
      406,  324,   30,  223,  225,   16,  226,  229,  230,  222,
      230,  406,  230,  238,  238,  238,  238,  238,  238,  238,
      570,    7,    3,  223,  225,  192,  226,  229,  240,  240,

      240,  240,  240,  240,  240,  242,  242,  242,  242,  242,
      247,  247,  247,  247,  247,  249,  249,  249,  249,  249,
      249,  249,    0,  192,  267,  267,  267,  267,  267,    0,
      325,  325,  325,  192,  325,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  212,  251,  251,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  251,  251,  251,  251,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  288,
        0,  212,  274,  274,  274,  274,  274,    0,    0,    0,
      288,  301,  301,  301,  301,  301,  308,  308,  308,  308,

      308,  319,  319,  319,  319,  319,  319,  319,    0,  212,
      288,  320,  320,  320,  320,  320,  320,  320,    0,  212,
        0,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  233,  233,
      233,  322,  322,  322,  322,  322,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,    0,    0,    0,    0,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,    0,    0,    0,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

      233,    0,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  382,  233,  233,  233,  289,  289,
      289,  289,    0,  382,    0,    0,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,    0,    0,  382,    0,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,    0,    0,    0,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,    0,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,    0,  289,  289,  289,  316,  316,

      316,  381,    0,  381,    0,  381,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,    0,    0,    0,    0,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,    0,    0,    0,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,    0,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,    0,  316,  316,  316,  327,  327,
      327,  327,  327,  327,  327,  329,  329,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  329,  329,  329,

      329,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  343,  345,    0,    0,  345,  349,  349,  349,  349,
      349,  349,  349,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  343,  345,  525,  383,    0,  383,  345,
      383,  386,  345,  386,  388,  386,  388,  345,  388,  345,
      525,  345,  355,  355,  355,  355,  355,  355,    0,  366,
        0,  343,  366,  370,  370,  370,  370,  370,  370,  370,
      525,  343,    0,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,

      344,  366,  387,  455,  541,  456,  366,    0,  455,  366,
      456,  387,    0,    0,  366,  541,  366,    0,  366,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,    0,
        0,  387,  344,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  376,  376,  376,  376,  376,  376,  407,
      407,  407,  407,  407,  414,  414,  414,  414,  414,    0,
      344,  448,  448,  448,  448,  448,  448,  448,    0,    0,
      344,    0,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  356,
        0,  429,  430,  450,  450,  450,  450,  450,  450,  450,

        0,    0,  429,    0,  430,  452,  452,  452,  452,  452,
      457,  457,  457,  457,  457,  477,  477,  477,  477,  477,
        0,  356,  429,    0,  430,  459,  459,  459,  459,  459,
      459,  459,  461,  461,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  461,  461,  461,  461,    0,  356,
      484,  484,  484,  484,  484,    0,    0,    0,    0,  356,
        0,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  360,  542,
      542,  542,  542,  542,    0,    0,    0,    0,  360,    0,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  360,  360,  360,  360,  364,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  549,  549,
      549,  549,  549,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  364,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  364,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  364,    0,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  365,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  365,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      365,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      365,    0,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  377,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  377,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  377,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  377,    0,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  395,  395,  395,    0,    0,
        0,    0,    0,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,    0,    0,
        0,    0,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  395,    0,
        0,    0,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,    0,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,    0,  395,  395,  395,  424,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  424,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  424,    0,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      431,  431,  431,  431,    0,    0,    0,    0,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,    0,    0,    0,    0,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,    0,    0,    0,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,    0,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,    0,  431,  431,  431,

      443,  443,  443,    0,    0,    0,    0,    0,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,    0,    0,    0,    0,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,    0,    0,    0,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,    0,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,    0,  443,  443,  443,
      487,  487,  487,  487,    0,    0,    0,    0,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,    0,    0,    0,    0,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,    0,    0,    0,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,    0,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,    0,  487,  487,  487,
      488,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  488,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      488,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      488,    0,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  498,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  498,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  498,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  498,    0,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  516,  516,  516,    0,    0,
        0,    0,    0,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,    0,    0,
        0,    0,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,    0,
        0,    0,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,    0,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,    0,  516,  516,  516,  530,  530,  530,    0,    0,
        0,    0,    0,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,    0,    0,
        0,    0,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,    0,
        0,    0,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,    0,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,    0,  530,  530,  530,  560,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  560,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  560,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  560,    0,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  565,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  565,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  565,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  565,    0,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      583,    0,  583,  583,  583,  583,    0,  583,    0,    0,
      583,  584,    0,  584,  584,  584,  584,    0,  584,    0,
        0,  584,  585,    0,  585,  585,  585,  585,    0,  585,

        0,    0,  585,  586,  586,  586,  586,    0,  586,    0,
        0,  586,  588,  588,  588,  588,  588,  589,  589,  589,
      589,  589,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  592,  592,    0,  592,  592,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  594,  595,  595,  595,
      595,  595,  596,  596,  596,  596,  596,  597,  597,  597,
      597,  597,  598,  598,  598,  598,  599,  599,  599,  600,
      600,  600,  600,  600,  601,  601,  601,  601,  601,  602,
      602,  602,  602,  602,  603,  603,  603,  603,  603,  604,
        0,  604,  604,  604,  604,    0,  604,    0,    0,  604,

      605,  605,  605,  605,  606,  606,  606,  607,  607,  607,
      607,  607,  608,  608,  608,  608,  608,  609,  609,  609,
      609,  609,  610,  610,  610,  610,  610,  611,    0,  611,
      611,  611,  611,    0,  611,    0,    0,  611,  612,  612,
      612,  612,  613,  613,  613,  614,  614,  614,  614,  614,
      615,  615,  615,  615,  615,  616,  616,  616,  616,  616,
      617,  617,  617,  617,  617,  618,  618,  618,  618,  618,
      619,  619,  619,  619,  619,  620,  620,  620,  620,  620,
      621,  621,  621,  621,  621,  622,  622,    0,  622,  622,
      623,  623,  623,  623,  623,  624,  624,  624,  624,  624,

      625,  625,  625,  625,  625,  626,  626,  626,  626,  626,
      627,  627,  627,  627,  627,  628,  628,  628,  628,    0,
      628,    0,    0,  628,  629,  629,  629,  629,  630,  630,
      630,  631,  631,  631,  631,  631,  632,  632,  632,  632,
      632,  633,  633,  633,  633,  633,  634,  634,  634,  634,
      634,  635,    0,  635,  636,  636,  636,  636,  636,  637,
      637,  637,  637,  637,  638,  638,  638,  638,  638,  639,
      639,  639,  639,  639,  640,  640,    0,  640,  640,  641,
      641,  641,  641,  641,  642,  642,  642,  642,  642,  643,
      643,  643,  643,  643,  644,  644,  644,  644,  644,  645,

      645,  645,  645,  645,  646,  646,  646,  646,  646,  647,
      647,  647,  647,  647,  648,  648,  648,  648,  648,  649,
      649,  649,  649,  649,  650,  650,  650,  650,  650,  651,
      651,  651,  651,  651,  652,  652,  652,  652,  652,  653,
      653,  653,  653,  653,  654,  654,  654,  654,  654,  655,
      655,  655,  655,  655,  655,    0,  655,    0,    0,  655,
      656,  656,  656,  656,  656,  657,  657,  657,  657,  657,
      658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  661,  661,  661,  661,  661,
      662,  662,  662,  662,  662,  663,  663,  663,  663,  663,

      664,  664,  664,  664,  664,  665,  665,  665,  665,  665,
      666,  666,  666,  666,  666,  667,  667,  667,  667,  667,
      668,  668,  668,  668,  668,  668,    0,  668,    0,    0,
      668,  669,  669,  669,  669,  669,  670,  670,  670,  670,
      670,  671,  671,  671,  671,  671,  672,  672,  672,  672,
      672,  673,  673,  673,  673,  673,  674,  674,  674,  674,
      674,  675,  675,  675,  675,  675,  676,  676,  676,  676,
      676,  677,  677,  677,  677,  677,  678,  678,  678,  678,
      678,  679,  679,    0,  679,  679,  680,  680,  680,  680,
      680,  681,  681,  681,  681,  681,  682,  682,  682,  682,

      682,  683,  683,  683,  683,  683,  684,  684,  684,  684,
      684,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  687,  687,  687,  687,  687,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  690,  690,  690,  690,
      690,  691,  691,  691,  691,  691,  692,  692,  692,  692,
      692,  693,  693,  693,  693,  693,  694,  694,  694,  694,
      694,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  697,  697,  697,  697,  697,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  700,  700,  701,    0,
      701,  702,  702,  702,  702,  702,  703,  703,  703,  703,

      703,  704,  704,  704,  704,  704,  705,  705,  705,  705,
      705,  706,  706,  706,  706,  706,  707,  707,  707,  707,
      707,  708,  708,  708,  708,  708,  709,  709,  709,  709,
      709,  710,  710,  710,  710,  710,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  713,  713,  713,  713,
      713,  714,  714,    0,  714,  714,  715,  715,  715,  715,
      715,  716,  716,  716,  716,  716,  717,  717,  717,  717,
      717,  718,  718,  718,  718,  718,  719,  719,  719,  719,
      719,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      721,  721,    0,  721,    0,    0,  721,  722,  722,  722,

      722,  723,  723,  723,  724,  724,  724,  724,  724,  725,
      725,  725,  725,  725,  726,  726,  726,  726,  726,  727,
      727,  727,  727,  727,  728,    0,  728,  728,  728,  728,
        0,  728,    0,    0,  728,  729,  729,  729,  729,  729,
      730,  730,  730,  730,  730,  731,    0,  731,  731,  731,
      731,    0,  731,    0,    0,  731,  732,  732,  732,  732,
      732,  733,  733,  733,  733,  733,  734,  734,  734,  734,
      734,  734,    0,  734,    0,    0,  734,  735,  735,  735,
      735,  736,  736,  736,  737,  737,  737,  737,  737,  738,
      738,  738,  738,  738,  739,  739,  739,  739,  739,  740,

      740,  740,  740,  740,  741,    0,  741,  741,  741,  741,
        0,  741,    0,    0,  741,  742,  742,  742,  742,  742,
      743,  743,  743,  743,  743,  744,  744,  744,  744,  744,
      745,  745,  745,  745,  745,  746,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  748,  748,  748,  748,  748,
      749,  749,  749,  749,  749,  750,  750,  750,  750,  750,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      753,  753,  753,  753,    0,  753,    0,    0,  753,  754,
      754,  754,  754,  754,  755,  755,  755,  755,  755,  756,
      756,  756,  757,    0,  757,  758,  758,  758,  758,  758,

      759,  759,  759,  759,  759,  760,  760,  760,  760,  760,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      763,  763,    0,  763,  763,  764,  764,  764,  764,  764,
      765,  765,  765,  765,  765,  766,  766,  766,  766,  766,
      767,  767,  767,  767,  767,  768,  768,  768,  768,  768,
      769,  769,  769,  769,  769,  770,  770,  770,  770,  770,
      771,  771,  771,  771,  771,  772,  772,  772,  772,  772,
      773,  773,  773,  773,  773,  774,  774,  774,  774,  774,
      775,  775,  775,  775,  775,  776,  776,  776,  776,  776,
      777,  777,  777,  777,  777,  778,  778,  778,  778,  778,

      778,    0,  778,    0,    0,  778,  779,  779,  779,  779,
      779,  780,  780,  780,  780,  780,  781,  781,  781,  781,
      781,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  784,  784,  784,  784,  784,  785,  785,  785,  785,
      785,  785,    0,  785,    0,    0,  785,  786,  786,  786,
      786,  786,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  789,  789,  789,  789,  789,  790,  790,  790,
      790,  790,  791,  791,  791,  791,  791,  792,  792,  792,
      792,  792,  793,    0,  793,  794,  794,  794,  794,  794,
      795,  795,  795,  795,  795,  796,  796,  796,  796,  796,

      797,  797,  797,  797,  797,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  800,  800,  800,  800,  800,
      801,  801,  801,  801,  801,  802,  802,  802,  802,  802,
      803,  803,  803,  803,  803,  803,    0,  803,    0,    0,
      803,  804,  804,  804,  804,  804,  805,  805,  805,  805,
      805,  806,  806,  806,  806,  806,  806,    0,  806,    0,
        0,  806,  807,  807,  807,  807,  807,  808,  808,  808,
      808,  808,  809,  809,  809,  809,  809,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582
    } ;

static yyconst flex_int16_t yy_rule_linenum[41] =
    {   0,
      118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  159
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/TrigScanner.lpp"
/* $Id: TrigScanner.lpp,v 1.3 2008-10-03 07:06:04 eric Exp $ -*- mode: c++ -*- */
/** \file TrigScanner.ll Define the Flex lexical scanner */
#line 5 "lib/TrigScanner.lpp"

#include "TrigParser.hpp"
#include "TrigScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::TrigParser::token token;
typedef w3c_sw::TrigParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TrigFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "lib/TrigScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQL terminals */
/* END patterns for SPARQL terminals */
/* START semantic actions for SPARQL terminals */
#line 1752 "lib/TrigScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 117 "lib/TrigScanner.lpp"

#line 1916 "lib/TrigScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 583 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 582 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 41 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 41 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 42 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 118 "lib/TrigScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 119 "lib/TrigScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 120 "lib/TrigScanner.lpp"
{return token::PREFIX;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 121 "lib/TrigScanner.lpp"
{return token::BASE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "lib/TrigScanner.lpp"
{return token::SPARQL_PREFIX;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 123 "lib/TrigScanner.lpp"
{return token::SPARQL_BASE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 124 "lib/TrigScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 125 "lib/TrigScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 126 "lib/TrigScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 127 "lib/TrigScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 128 "lib/TrigScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 129 "lib/TrigScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 130 "lib/TrigScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 131 "lib/TrigScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 132 "lib/TrigScanner.lpp"
{return token::RDF_TYPE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "lib/TrigScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "lib/TrigScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 135 "lib/TrigScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 136 "lib/TrigScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", true); return token::IT_true;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 137 "lib/TrigScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", false); return token::IT_false;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 138 "lib/TrigScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRIREF;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 139 "lib/TrigScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 140 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 141 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 142 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 143 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 144 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 145 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 148 "lib/TrigScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 149 "lib/TrigScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 150 "lib/TrigScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 151 "lib/TrigScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 152 "lib/TrigScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 153 "lib/TrigScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 154 "lib/TrigScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 155 "lib/TrigScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 156 "lib/TrigScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 158 "lib/TrigScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 159 "lib/TrigScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 165 "lib/TrigScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2242 "lib/TrigScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Trigfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Trigfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Trigrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Trigrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 583 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 583 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 582);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Trigalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Trigalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Trigfree((void *) b->yy_ch_buf  );

	Trigfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Trigalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Trigrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Trigalloc(new_size  );

		else
			(yy_start_stack) = (int *) Trigrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Trigalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Trigrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Trigfree (void * ptr )
{
	free( (char *) ptr );	/* see Trigrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 165 "lib/TrigScanner.lpp"


/* END semantic actions for SPARQL terminals */

/* START TrigScanner */
namespace w3c_sw {

TrigScanner::TrigScanner (TrigDriver* driver, std::istream* in, std::ostream* out) : TrigFlexLexer(in, out), driver(driver) {  }
TrigScanner::~TrigScanner () {  }

TrigParser::token_type TrigScanner::typedLiteral (TrigParser::semantic_type*& yylval, TrigParser::token_type tok) {
    std::istringstream is(yytext);
    std::ostringstream normalized;

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	normalized << i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	normalized << f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	normalized << d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

TrigParser::token_type TrigScanner::unescape (TrigParser::semantic_type*& yylval, size_t skip, TrigParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* TrigScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index));
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void TrigScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END TrigScanner */

const URI* TrigScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}

} // END namespace w3c_sw

/* This implementation of TrigFlexLexer::yylex() is required to fill the
 * vtable of the class TrigFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the TrigScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TrigFlexLexer::yylex()
{
    std::cerr << "in TrigFlexLexer::yylex() !" << std::endl;
    return 0;
}


