#line 2 "lib/SPARQLalgebraScanner.cpp"

#line 4 "lib/SPARQLalgebraScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLalgebraFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLalgebraalloc (yy_size_t  );
void *SPARQLalgebrarealloc (void *,yy_size_t  );
void SPARQLalgebrafree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 154
#define YY_END_OF_BUFFER 155
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1202] =
    {   0,
        0,    0,  155,  154,    1,   71,  154,    1,  154,  154,
      154,    2,    3,   69,   67,   48,   68,  154,   70,  139,
      133,   62,   60,   63,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,   16,   56,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,    1,   61,
        0,  149,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    1,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  137,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   59,    0,  148,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  152,
        0,  142,    0,  145,  140,  140,  139,    0,  134,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   64,
      132,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   65,  136,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  138,    0,    0,  133,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  153,  129,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  108,   66,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   58,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  149,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
      137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  137,  137,  137,  137,  137,  137,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  148,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  143,  143,    0,  146,  146,    0,    0,  140,

        0,    0,  141,  134,    0,  134,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  134,  134,  134,
      134,  134,  134,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  136,  136,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  136,  136,
      136,  136,  136,  136,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  125,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  124,  123,    0,    0,  122,  135,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   81,   22,   33,
       49,   13,    0,   35,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  101,  123,   52,    0,    0,    0,    0,  100,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   50,    0,    0,    0,    0,   72,    0,    0,    0,
        0,    0,    0,    0,   78,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    0,    0,    0,  137,  137,  137,  137,  137,  137,
      137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  137,  137,  137,  137,  137,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  143,

        0,    0,  144,    0,  146,    0,    0,  147,    0,  141,
        0,  141,  134,  134,  134,  134,  134,  134,  134,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  134,  134,  134,  134,  134,    0,    0,    0,
        0,    0,    0,  136,  136,  136,  136,  136,  136,  136,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  136,  136,  136,  136,  136,    0,    0,
      138,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   80,    0,  135,    0,  135,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  135,  135,  135,
      135,  135,  135,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,    0,    0,   82,
        0,    0,    0,    0,   24,    0,    0,    0,    0,   14,
        0,   20,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   39,   73,
        0,    0,   17,    0,    0,    0,   23,    0,    0,    0,
       38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  102,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  130,    0,    0,

       37,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  137,  137,  137,  137,  137,    0,    0,
      137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  144,    0,  144,    0,  147,    0,  147,  134,
      134,  134,  134,  134,    0,    0,  134,  136,  136,  136,
      136,  136,    0,    0,  136,    0,  120,    0,    0,    0,
      135,  135,  135,  135,  135,  135,  135,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      135,  135,  135,  135,  135,    0,    0,   79,   76,   18,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  131,    0,   83,   44,   10,   96,    0,    0,
      112,    0,    0,  113,    0,   88,    0,   46,    0,    0,
       94,   32,    0,   12,   54,   55,   53,    0,    0,   34,
        0,  117,    0,   84,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,  110,    0,    0,    0,    0,
        0,   36,    0,    0,   87,   47,  151,    0,    0,    0,
        0,  137,  150,    0,    0,    0,    0,  134,  136,    0,
        0,  126,  135,  135,  135,  135,  135,    0,    0,  135,
        0,   85,    0,   21,    0,    0,   29,    0,    0,  119,
        0,    7,   11,   30,    0,    0,    0,    0,    0,    0,

       28,    0,    5,    0,    0,    0,    0,    0,    0,    0,
        0,  103,  104,  105,  106,   19,    0,    0,   86,    0,
      118,    0,   42,    0,    0,  135,    0,    0,    0,   31,
        0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
        0,   97,    0,    6,    9,   51,    0,   98,    0,    0,
       45,   92,  109,    0,    0,  121,    0,  107,   90,   75,
        0,    0,    8,    0,   41,    0,    0,    0,    0,   43,
       57,  111,    0,   40,    0,   99,    0,    0,    0,    0,
        0,  115,  116,    0,  128,   91,    0,   26,    0,    0,
       25,    0,    0,   27,    0,   74,  127,    0,    0,   89,

        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   10,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   36,
       40,   36,   41,   36,   36,   42,   43,   44,   45,   46,
       36,   47,   48,   49,   50,   51,   36,   52,   36,   36,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,    1,   84,    1,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    3,    1,
        3,    3,    3,    3,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    6,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    7,    8,    8,    8,    8,    8,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        6,    7,    3,    6,    6,    3,    6,    6,    6,    6,
        6,    6,    6,    6,    3,    6,    6,    6,    3
    } ;

static yyconst flex_int16_t yy_base[1218] =
    {   0,
        0,    0,  363,10599,  118,  326,  117,  146,  180,  342,
      287,  123,10599,10599,  117,10599,  127,  135,10599,  151,
      321,  409,10599,  320,  443,    0,  544,  113,  135,  140,
      118,  260,  131,  265,  128,  284,  303,  126,  256,  280,
      271,  117,  255,  164,  133,  285,  166,  307,  401,  296,
      165,  287,  231,  392,  410,  419,  430,  395,  246,  578,
      595,  612,  629,  646,  663,  680,  697,  102,  714,  721,
      738,  755,  772,  789,  806,  206,  809,  826,  368,10599,
      921,  312,  922,  850,  866,  956,  871,  973,  915,  990,
     1000, 1017,  295, 1028, 1063, 1079, 1094,  891, 1111, 1128,

     1138, 1148, 1165,  928, 1246, 1280, 1297, 1314, 1331, 1348,
     1365, 1382, 1399,  350, 1416, 1025, 1433, 1450, 1467, 1484,
     1501,  386, 1504, 1521,10599, 1611,  305, 1617, 1545, 1561,
     1646, 1586, 1663, 1680, 1690, 1700, 1717, 1190, 1659,10599,
     1682, 1800, 1808, 1819, 1827, 1846, 1871, 1891, 1916, 1950,
     1967, 1984, 2001, 2018, 2035, 2052, 2069,  394, 2086, 1600,
     2103, 2120, 2137, 2154, 1835,  406, 2164, 2181, 2251,    0,
    10599, 2199, 2215, 2230, 1805, 2286, 2247, 2303, 2313, 2330,
     1790,10599, 2411, 2445, 2462, 2479, 2496, 2513, 2530, 2547,
     2564,  477, 2581, 2248, 2598, 2615, 2632, 2649, 2666,  410,

     2669, 2686,  290,  407,  944, 2702,  418, 2777, 2772, 2789,
     2806, 2823, 2840, 2857, 2874,  207, 2748, 2891, 2908, 2925,
     2726, 2942, 2959, 2976, 2993, 3010,  501, 3013, 3030,  932,
     1808, 1812, 3081, 3090, 3092, 3094, 3095, 1297,10599,10599,
     3089, 2753, 3088, 3089,  498, 3140, 1809, 3141, 1786, 3091,
     3093, 3159, 3160, 3144, 3164, 3177, 3157, 3184, 3191, 3180,
     3183, 3194, 3197, 3196,  549, 3203, 3199, 3221, 3230, 3226,
     3209, 3232, 3233, 1921, 3242, 3243, 3238, 3247, 3255, 3251,
     3267, 3252, 3272, 3264, 3289, 3287, 3286, 3256, 3290, 3297,
     3312, 3294, 3307, 3301, 3299, 3319, 3323, 3330,10599, 1832,

     2416, 3167, 3313, 3324, 3332, 3333, 3328, 3345, 3362, 3379,
     3396, 3413, 3430, 3447, 3464, 3481, 1569, 3498, 3515,10599,
     3610, 3533,  231, 3550, 3580, 3597, 3645, 3662, 3679, 3696,
     3713,  228, 3730, 3747, 3764, 3781, 3798, 3815, 3832,    0,
        0, 3849, 3866, 3883, 3900, 3917, 3934, 3951,  150, 3968,
     3985, 4002, 4019, 3557, 4036, 4053, 4070, 4087, 4104,  834,
     4107, 4124,    0,    0,    0,    0,    0,    0, 4141, 4158,
     4175, 4192, 4209, 4226, 4243, 4260, 4277, 4294, 2343, 4311,
     4328,10599, 4418, 4346,  191, 4363, 4388, 4405, 4453, 4470,
     4487, 4504, 4585, 4593, 4612, 4635, 4643, 4662, 4685, 4693,

     4712, 3681, 4489,    0,    0,    0, 4671, 4688, 4705, 4722,
     4739, 4756, 4773,  144, 4790, 4807, 4824, 4841, 4370, 4858,
     4875, 4892, 4909, 4656,  881, 4919, 4936,    0,    0,    0,
        0,    0,    0, 4953, 4970, 4987, 5004, 5021, 5038, 5055,
     5072, 5089, 5106, 2753, 5123, 5140, 5157,  186, 5174, 5191,
     5208, 5225, 5242, 5259, 5276,    0,    0, 5293, 5310, 5327,
     5344, 5361, 5378, 5395,  113, 5412, 5429, 5446, 5463, 4553,
     5480, 5497, 5514, 5531, 5548,  923, 5551, 5568,    0,    0,
        0,    0,    0,    0, 5585, 5602, 5619, 5636, 5653, 5670,
     5687, 5704, 5721, 5738, 3053, 5755, 5772,    0, 4593, 4594,

     4625, 4643, 4644, 4645, 4647, 4648, 5789, 5806, 5823, 5840,
     5857, 5874, 5891, 5908, 5925, 5942, 3296, 5959, 5976, 6034,
     6030, 6032, 4674, 6029, 6049, 6042, 6033, 6111, 6145, 6162,
     6179, 6196, 6213, 6230, 6247, 6264, 1592, 6281, 6288, 6305,
     6322, 6339, 6356, 6373, 1529, 6376, 6393, 6035, 6038, 6039,
     6040, 6041, 6044, 6043, 6065, 6444, 6445, 6045, 6447, 6448,
     6449, 6046, 6451, 6048, 6453, 6450, 6459, 6456, 6466, 6462,
     6467, 6469, 6485, 6486, 6489, 6470, 6499, 6501, 6502, 6505,
     6116, 6504, 6507, 6508, 6510, 6518, 6519, 6512, 6520, 6524,
     6534, 6541, 6543, 6549, 6553, 6554, 6555, 6557, 6556, 6561,

     6559, 6563, 6558, 6580, 6567, 6588, 6592, 6576, 6602, 6593,
     6598, 6600, 6601, 6660, 6606, 6609, 6636, 6615, 6623, 6611,
     6644, 6642, 6648, 6656, 6610, 6650, 6652, 6655, 6657, 6658,
     6659, 6655, 6672, 6767,  202, 6768, 6696, 6712, 6802, 6717,
     6819, 6761, 6836, 6846, 6863, 6747, 6958, 6881, 6898, 6928,
     6987, 6945, 7022, 7039,    0,    0,    0,    0,    0,    0,
        0, 7056, 7073, 7090, 7107, 7124, 7141, 7158, 7175, 7192,
     7209, 3307, 7226, 7243,    0,    0,    0,    0,    0, 7260,
     7277, 7367,  192, 7373, 7301, 7317, 7402, 6764, 7419, 6915,
     7436, 7446, 7463, 6965, 7553, 7481, 7498, 7523, 7438, 7611,

     7658, 7058, 7666, 7679, 7687, 7706, 7714, 7729, 7737, 7745,
     7753, 7761,    0,    0,    0,    0,    0,    0,    0, 7705,
     7722, 7739, 7756, 7773, 7790, 7807, 7824, 7841, 7858, 3562,
     7875, 7892,    0,    0,    0,    0,    0, 7909, 7926, 7996,
     7944, 7961, 7978,    0,    0,    0,    0,    0,    0,    0,
     8031, 8048, 8065, 8082, 8099, 8116, 8133, 8150, 8167, 8184,
     7325, 8201, 8218,    0,    0,    0,    0,    0, 8235, 8252,
      176, 6777, 6778, 6787, 6790, 7366, 8269, 8286, 7390, 8347,
     7596, 7367, 7378,    0,    0,    0, 8342, 8359, 8376, 8393,
     8410, 8427, 8444,   95, 8305, 8461, 8478, 8495, 7505, 8512,

     8529, 8546, 8563, 8329, 1581, 8573, 8590,    0,    0,    0,
        0,    0,    0, 8607, 8624, 8641, 8658, 8675, 8692, 8709,
     8726, 8743, 8760, 7528, 8777, 8794, 7598, 8845, 8847, 7665,
     7668, 8848, 7667, 8846, 7666, 8851, 8852, 8854, 8858, 7669,
     8870, 8855, 8861, 8862, 8869, 8872, 8891, 8893, 8894, 8895,
     8903, 8899, 8905, 8906, 8911, 8910, 8916, 8915, 8868, 8928,
     8937, 8941, 8912, 8942, 8946, 8945, 8932, 8951, 8952, 8953,
     9011, 8963, 8955, 8962, 8985, 8954, 8964, 8986, 8971, 8989,
     8995, 9001, 9000, 8998, 9030, 9027, 9032, 9016, 9007, 9020,
     9021, 9031, 9024, 9025, 9034, 9033, 9054, 9040, 9056, 9043,

     9047, 9057, 9064,  160, 9059,   92, 9076, 9093, 9110, 9127,
     9144, 9161, 9178,    0,    0,    0,    0,    0, 9195, 9212,
        0,  123, 9229,   79, 9246, 9263, 9280, 9297, 9314, 9331,
     9348, 8067, 9429, 9437, 9445, 9453, 9461, 9469, 9477,    0,
        0,    0,    0,    0, 9421, 9438,    0,    0,    0,    0,
        0,    0, 9455, 9472,    0, 9523, 9524, 9533, 9528, 9537,
        0,    0,    0,    0,    0,    0,    0, 9532, 9549, 9566,
     9583, 9600, 9617, 9634, 9651, 9668, 9685, 7983, 9702, 9719,
        0,    0,    0,    0,    0, 9736, 9753, 9527, 9529, 9530,
     9535, 9536, 9531, 9804, 9805, 9806, 9807, 9817, 9811, 9813,

     9812, 9816, 9814, 9819, 9820, 9821, 9823, 9825, 9828, 9830,
     9829, 9852, 9855, 9831, 9860, 9846, 9861, 9862, 9864, 9865,
     9869, 9870, 9873, 9871,10599,10599,10599, 9872, 9876, 9877,
     9895, 9879, 9886, 9881, 9908, 9903, 9887, 9910, 9912, 9917,
     9942, 9946, 9944, 9922, 9924, 9925, 9927, 9929, 9934, 9928,
     9939, 9932, 9943, 9947, 9933, 9941,10599,    0, 9942, 9959,
     9976,    0,10599,    0, 9993,10010,10027,    0,    0,10092,
    10093,10080,    0,    0,    0,    0,    0,10088,10105,    0,
    10081,10082,10083,10084,10085,10088,10089,10170,10091,10087,
    10157,10158,10159,10161,10160,10166,10167,10173,10165,10172,

    10164,10175,10174,10178,10205,10207,10184,10209,10210,10211,
    10213,10214,10216,10217,10219,10221,10223,10227,10222,10228,
    10225,10226,10229,10232,10265,    0,10261,10243,10262,10263,
    10267,10264,10277,10269,10270,10276,10266,10279,10284,10300,
    10282,10280,10301,10287,10288,10306,10311,10314,10317,10320,
    10318,10319,10321,10324,10325,10323,10333,10327,10332,10335,
    10340,10343,10337,10341,10344,10356,10357,10358,10359,10364,
    10370,10374,10376,10377,10378,10379,10394,10381,10389,10390,
    10401,10383,10391,10399,10393,10395,10412,10397,10415,10424,
    10416,10420,10433,10428,10432,10434,10435,10441,10436,10438,

    10599,10520,10526,10529,10537,10540,10546,10549,  124,10554,
    10562,10568,10571,10576,10582,10588,10592
    } ;

static yyconst flex_int16_t yy_def[1218] =
    {   0,
     1201,    1, 1201, 1201, 1201, 1201, 1202, 1203, 1204, 1201,
     1205, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1206, 1207, 1201, 1201, 1208, 1209, 1201,   27,   27,   27,
       27,   27,   27,   27, 1201, 1201, 1201,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1202, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1203, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1205, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1207,  169,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1209,   27,   27, 1206,   27,   27, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,   27,
       27,   27,   27,   27,   27,   27,   27, 1201, 1201, 1201,
     1210,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27, 1201,   27,

       27,   27,   27,   27,   27,   27, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1211, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,  105,
      105, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201,  105,  105,  105,  105,  105,  105, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1212, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201,  149,  149,  149, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201,  149,  149,  149,
      149,  149,  149, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201,  183,  183, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,  183,  183,
      183,  183,  183,  183, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1213,   27,   27,

       27,   27,   27,   27,   27,   27, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,   27,
       27,   27,   27,   27,   27,   27,   27, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27, 1201, 1201, 1211,  634, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1214, 1201, 1201, 1201,
     1215, 1201, 1201, 1201,  105,  105,  105,  105,  105,  105,
      105, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201,  105,  105,  105,  105,  105, 1201,
     1201, 1212,  682, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1216, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201,  149,  149,  149,  149,  149,  149,  149, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201,  149,  149,  149,  149,  149, 1201, 1201, 1217,
     1201, 1201, 1201,  183,  183,  183,  183,  183,  183,  183,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201,  183,  183,  183,  183,  183, 1201, 1201,
     1213,   27,   27,   27,   27,   27, 1201, 1201,   27,   27,
       27,   27,   27,  528,  528,  528, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201,  528,  528,  528,
      528,  528,  528, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,  634, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201,  105,  105,  105,  105,  105, 1201, 1201,
      105,  682, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,  149,
      149,  149,  149,  149, 1201, 1201,  149,  183,  183,  183,
      183,  183, 1201, 1201,  183,   27,   27,   27,   27,   27,
      528,  528,  528,  528,  528,  528,  528, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
      528,  528,  528,  528,  528, 1201, 1201,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27, 1201, 1201, 1201,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27, 1201,  634, 1201, 1201,
     1201,  105, 1201,  682, 1201, 1201, 1201,  149,  183,   27,
       27,   27,  528,  528,  528,  528,  528, 1201, 1201,  528,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,  528,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

        0, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201
    } ;

static yyconst flex_int16_t yy_nxt[10719] =
    {   0,
        4,    5,    5,    5,    5,    6,    7,    8,    9,    4,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   20,   20,   20,   20,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   28,   31,
       28,   28,   32,   28,   28,   28,   33,   34,   28,   28,
       28,   28,   35,    4,    4,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   28,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   28,   28,
       28,   58,   28,   59,    4,   60,   61,   62,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   63,   64,   64,

       65,    4,    4,   66,   67,    4,   68,   69,   70,   71,
       72,   73,   74,   75,    4,   76,   77,   78,    4,   79,
       79,   79,   79,   82,  139,  139,  139,  139,  203,  238,
      238,  238,  238,  682, 1063,  141,  140,  142,  142,  142,
      142,  142,  142,  142,  142,  143,  634,  144,  144,  144,
      144,  144,  144,  144,  144,  145,  145,  145,  145,  145,
      145,  145,  145,  207,  232,  235, 1057,  207,  207,  146,
       83,  147,  147,  147,  147,  147,  147,  147,  147,  230,
      231,  207,  239,  207,  242,  207,  243,  258,  235,  148,
      207,  207,  784,  498,  244,  207,  207,  259,  306,  306,

      306,  245,  306,  922,  264,  231,  230,   84,  904,  207,
      456,  207,  148,  207,  207,  207,  207,   85,  207,   86,
       86,   86,   86,   86,   86,   87,   88,   88,   88,   88,
       89,   90,   90,   91,   92,   93,   95,  269,  263,  279,
      169,  404,  207,  207,  207,  126,   96,  340,   97,   97,
       97,   97,   97,   97,   98,   99,   99,   99,   99,  100,
      101,  101,  102,  103,  104,  106,  107,  108,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  109,  110,  110,
      111,  207,   94,  112,  113,   81,  114,  115,  116,  117,
      118,  119,  120,  121,  233,  122,  123,  124,  127,  236,

      234,  316,  316,  317,  204,  207,  207,  498,  282,  207,
      207,  231,  260,  246,  237,  207,  383,  233,  321,  247,
      261,  207,  236,  262,  230,  234,  248,  249,  254,  299,
      207,  241,  255,  207,  207,  207,  256,  207,  207,  240,
      128,  250,  237,  207,  280,  257,  207,  265,  251,  207,
      182,  252,  125,  277,  253,  266,   80,  207,  207,  267,
      268,  281, 1201,  207,  270,  207,  271,  278,  272,   79,
       79,   79,   79, 1201,  207, 1201, 1201,  129,  273,  330,
      330,  330,  330,  330,  330,  207, 1201,  130, 1201,  131,
      131,  131,  131,  131,  131,  132,  133,  133,  133,  133,

      134,  135,  135,  136,  137,  138,  150,  151,  152,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  153,  154,
      154,  155, 1201, 1201,  156,  157,  235,  158,  159,  160,
      161,  162,  163,  164,  165,  233,  166,  167,  168,  170,
      171,  234,  207, 1201,  236,  207,  368,  368,  368,  235,
      368,  207, 1201,  283, 1201, 1201,  298,  207,  233,  237,
      207,  274, 1201,  284, 1201, 1201,  275,  285,  207,  207,
      207,  286,  276,  207,  287,  288,  292, 1201,  289,  207,
      207,  378,  378,  379,  293,  207,  290,  291,  207,  295,
      433,  433,  433,  294,  433, 1201,  207,  207, 1201,  172,

      296,  443,  443,  444,  297,  494,  494,  495,  207,  173,
     1201,  174,  174,  174,  174,  174,  174,  175,  176,  176,
      176,  176,  177,  178,  178,  179,  180,  181,  184,  185,
      186,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      187,  188,  188,  189, 1201, 1201,  190,  191,  207,  192,
      193,  194,  195,  196,  197,  198,  199,  552,  200,  201,
      202,  204,  205, 1201,  204,  204,  204,  204,  204,  204,
      204,  204,  206,  484,  484,  484,  207,  484,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  208,  207,  516,  516,  517,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  208,  207,  207,  207,  207,  207, 1201,  209,
      210,  211,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  213,  214,  214,  215, 1201,  216,  217,  218, 1201,
      219,  220,  221,  222,  223,  224,  225,  226, 1201,  227,
      228,  229,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  302,  302,  302,  302,  302,  302,  302,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  303,
      303,  303,  300,  300,  305,  305,  305,  305,  305,  305,
      305,  305, 1201,  305,  305,  305,  305, 1201,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  307,  307,  307,  307,  307,
      307,  307,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  309,
      310,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  312,  312,  312,  312,  311,  313,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  320,   81,  671,
      671,  672, 1201,   81,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  324,  324,  324,  324,  324,
      324,  324, 1201, 1201,   83,   81,  729,  729,  730, 1201,
       81,  520,  207, 1201,   81,  333,  333,  333,  333,  333,
      333,  333,   81, 1201,  207, 1201,   81, 1201,   81,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  520,
      207,   84,  339,  339,  339,  339,  339,  339,  760,  760,
      761,   85,  207,   86,   86,   86,   86,   86,   86,   87,
       88,   88,   88,   88,   89,   90,   90,   91,   92,   93,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,   95,  369,
      369,  369,  369,  369,  369,  369, 1201, 1201,   96, 1201,
       97,   97,   97,   97,   97,   97,   98,   99,   99,   99,
       99,  100,  101,  101,  102,  103,  104,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  334,  334,  334,  334,  334,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  340,  340,  340,  340,
      340,  340,  340,  340,  392,  392,  392,  392,  392,  392,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  238,  238,

      238,  238,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341, 1201,
     1201,  342,  343,  344,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  346,  347,  347,  348, 1201,  349,  350,
      351,  239,  352,  353,  354,  355,  356,  357,  358,  359,
     1201,  360,  361,  362,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  364,  364,  364,  364,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  365,  365,  365,  365,  365,
      365,  365,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  366,  366,  366,  363,  363,  105,  105,  105,  105,
      105,  105,  105,  105, 1201,  105,  105,  105,  105, 1201,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  371,  372,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  374,  374,  374,  374,
      373,  375,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  382,  126,  823,  823,  824, 1201,  126,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      139,  139,  139,  139,  128,  631,  631,  631,  631,  631,
      126, 1201,  140, 1201, 1201,  126,  977,  977,  978,  126,
      386,  386,  386,  386,  386,  386,  386,  126,  813,  813,
      813,  126,  813,  126,  434,  434,  434,  434,  434,  434,

      434,  129,  393,  393,  393,  393,  393,  393,  393,  393,
     1201,  130, 1201,  131,  131,  131,  131,  131,  131,  132,
      133,  133,  133,  133,  134,  135,  135,  136,  137,  138,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  394, 1201,
      142,  142,  142,  142,  142,  142,  142,  142,  396,  396,
      396,  396,  396,  396,  396,  396,  207,  397,  395,  144,
      144,  144,  144,  144,  144,  144,  144,  145,  145,  145,
      145,  145,  145,  145,  145,  521,  522,  398,  207,  207,
     1201,  395,  207,  556,  207,  399,  400,  400,  400,  400,
      400,  400,  400,  400,  455,  455,  455,  455,  455,  455,
      398,  554,  207,  521,  401, 1201,  207,  207,  399,  146,
      207,  147,  147,  147,  147,  147,  147,  147,  147,  449,

      449,  449,  449,  449,  449,  449,  402,  401,  402,  148,
      207,  403,  403,  403,  403,  403,  403,  403,  403,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442, 1201,
     1201, 1201,  148,  404,  405, 1201,  404,  404,  404,  404,
      404,  404,  404,  404, 1201, 1201,  592, 1201, 1201, 1201,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406, 1201, 1201,
     1201,  207,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  207,

     1201,  407,  408,  409,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  411,  412,  412,  413, 1201,  414,  415,
      416, 1201,  417,  418,  419,  420,  421,  422,  423,  424,
     1201,  425,  426,  427,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  430,  430,  430,  430,  430,
      430,  430,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  431,  431,  431,  428,  428,  149,  149,  149,  149,
      149,  149,  149,  149, 1201,  149,  149,  149,  149, 1201,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  436,  437,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  439,  439,  439,  439,
      438,  440,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  171,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  172,  485,  485,  485,  485,  485,  485,  485, 1201,
     1201,  173, 1201,  174,  174,  174,  174,  174,  174,  175,
      176,  176,  176,  176,  177,  178,  178,  179,  180,  181,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  456,  456,  456,  456,  456,  456,  456,  456,  679,
      679,  679,  679,  679, 1201,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457, 1201, 1201, 1201,  207,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  207, 1201,  458,  459,  460,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  462,  463,
      463,  464, 1201,  465,  466,  467, 1201,  468,  469,  470,
      471,  472,  473,  474,  475, 1201,  476,  477,  478,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      481,  481,  481,  481,  481,  481,  481,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  482,  482,  482,  479,
      479,  183,  183,  183,  183,  183,  183,  183,  183, 1201,
      183,  183,  183,  183, 1201,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  487,

      488,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  490,  490,  490,  490,  489,  491,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  150,  151,  152,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  153,

      154,  154,  155,  207, 1201,  156,  157, 1201,  158,  159,
      160,  161,  162,  163,  164,  165,  499,  166,  167,  168,
      507,  507,  507,  507,  507,  507,  507,  207,  548, 1201,
     1201,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      499,  207,  207,  207,  207, 1201,  207,  207,  207,  737,
      737,  737,  737,  737, 1201,  207,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  501,  501,  501,

      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  503,  503,  503,  503,  503,  503,
      503,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      504,  504,  504,  501,  501,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  506,  506,  506, 1201,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  509,  510,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  512,  512,  512,  512,  511,
      513,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  515,  515,  515,  515,  515,  515,

      515,  515,  515,  515,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  207,  523,  524, 1201,  525,  526,  527,  207,  207,
      207,  207,  207,  207,  207,  207, 1201, 1201,  549,  768,
      768,  768,  768,  768,  558, 1201,  557,  550, 1201,  207,
      524,  523,  525,  526,  527,  551,  207,  207,  207,  207,
      207,  207,  207,  207,  529,  530,  531,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  532,  533,  533,  534,
      207,  207,  535,  536,  207,  537,  538,  539,  540,  541,

      542,  543,  544, 1201,  545,  546,  547,  207,  520,  207,
      207, 1201,  555, 1201,  207,  553,  559,  207,  207,  207,
      563,  562,  207, 1201,  521,  564,  565,  207,  569,  560,
      207,  561,  566,  207,  207,  207,  520,  207,  207,  567,
     1201,  207,  207,  570,  207,  207,  207,  207,  574,  207,
     1201,  575,  568,  207,  577,  207,  571, 1201,  207,  207,
     1201,  207,  207,  572,  581,  576,  589,  573,  578,  207,
     1201,  207,  207,  579,  207,  207,  207,  207,  580,  582,
      207,  207,  207,  207, 1201,  524,  583,  207,  207,  584,
      591,  585,  207,  207,  590,  587,  588,  207,  586,  207,

     1201,  207,  207,  594,  207,  207,  207,  597,  207,  604,
      207,  207,  593,  595,  207,  600,  207,  207, 1201, 1201,
      207,  596,  207,  598,  615,  207,  599,  601,  602,  207,
      207,  526,  605,  207,  207,  606,  207,  207,  603,  207,
      207,  608,  207,  614,  207,  207,  610,  207, 1201,  207,
      607,  207,  619, 1201,  527,  616,  623,  207,  609,  611,
      612,  613,  207,  207,  207,  207,  621,  207,  207,  207,
      618,  617,  207,  207,  207,  207,  620,  207,  622,  207,
      207,  527,  207,  207,  624,  207, 1201,  626,  625, 1201,
      207,  207,  776,  776,  776,  776,  776,  207, 1201, 1201,

     1201,  207,  207,  918,  918,  918,  918,  918,  207, 1201,
      207,  207,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  300,  300,  300,  300,
      300,  301,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  301,  301,  301,  301,  301,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  628,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  300,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  633,

      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  635,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,  662,  662,  662,  662,  662,  662,  662,  944,  944,
      944,  944,  944,  636,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81, 1201, 1201,

      637,  403,  403,  403,  403,  403,  403,  403,  403, 1201,
      638, 1201,  639,  639,  639,  639,  639,  639,  640,  641,
      641,  641,  641,  642,  643,  643,  644,  645,  646,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  653,

      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  655,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  658,  658,  658,  658,  658,  658,  658,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  659,  659,  659,
      656,  656,  341,  341,  341,  341,  341,  341,  341,  341,
     1201,  341,  341,  341,  341, 1201,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  661,  661,

      661, 1201,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  664,  665,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  667,
      667,  667,  667,  666,  668,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  363,
      363,  363,  363,  363,  364,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  364,  364,
      364,  364,  364,  363,  363,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  363,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  683,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  720,  720,  720,  720,  720,  720,
      720,  684,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126, 1201, 1201,  685,  403,
      403,  403,  403,  403,  403,  403,  403, 1201,  686, 1201,
      687,  687,  687,  687,  687,  687,  688,  689,  689,  689,
      689,  690,  691,  691,  692,  693,  694,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  393,  393,  393,  393,  393,
      393,  393,  393,  700,  700,  700,  700,  700,  700,  700,
      700, 1201, 1201,  699, 1201, 1201, 1201,  702, 1201,  702,
     1201,  701,  703,  703,  703,  703,  703,  703,  703,  703,
     1201, 1201, 1201,  207,  207, 1201,  699,  751,  751,  751,
      751,  751,  751,  751,  701,  396,  396,  396,  396,  396,
      396,  396,  396,  705,  705,  705,  705,  705,  705,  705,
      705,  207,  207,  704, 1201,  207, 1201,  707, 1201,  707,
     1201,  706,  708,  708,  708,  708,  708,  708,  708,  708,
     1201, 1201, 1201,  207,  207,  207,  704,  207,  207, 1201,

      709, 1201,  709,  207,  706,  710,  710,  710,  710,  710,
      710,  710,  710,  400,  400,  400,  400,  400,  400,  400,
      400,  207,  207,  207,  207,  207,  207,  711, 1201,  711,
     1201,  401,  712,  712,  712,  712,  712,  712,  712,  712,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
     1201, 1201,  207, 1201,  401,  713,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  716,  716,  716,  716,  716,  716,  716,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  717,
      717,  717,  714,  714,  406,  406,  406,  406,  406,  406,
      406,  406, 1201,  406,  406,  406,  406, 1201,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      719,  719,  719, 1201,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  722,
      723,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  725,  725,  725,  725,  724,  726,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  428,  428,  428,  428,  428,  429,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      429,  429,  429,  429,  429,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  428,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  736,  736,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  744,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  747,  747,  747,  747,  747,
      747,  747,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  748,  748,  748,  745,  745,  457,  457,  457,  457,

      457,  457,  457,  457, 1201,  457,  457,  457,  457, 1201,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  750,  750,  750, 1201,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  753,  754,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  756,  756,  756,  756,  755,  757,  755,

      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  764,  479,  479,  479,  479,  479,  480,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  480,  480,  480,  480,  480,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  479,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  501,  501,  501,
      501,  501,  502,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  500,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  502,  502,  502,  502,
      502,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  501,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  779,  780,  207,
      207,  781,  207,  207,  207,  207,  782,  783,  207,  207,
      207,  207,  207,  207,  207,  207,  207, 1201,  207,  207,

     1201, 1201,  831,  836,  779,  827,  780,  207,  207,  782,
      207,  207,  207,  207,  783,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  828,  207,  207,  784,  785,
     1201,  784,  784,  784,  784,  784,  784,  784,  784, 1201,
     1201, 1201, 1201,  207, 1201,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786, 1201, 1201, 1201,  207,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  207, 1201,  787,  788,  789,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  791,  792,
      792,  793, 1201,  794,  795,  796, 1201,  797,  798,  799,
      800,  801,  802,  803,  804, 1201,  805,  806,  807,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      810,  810,  810,  810,  810,  810,  810,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  811,  811,  811,  808,
      808,  528,  528,  528,  528,  528,  528,  528,  528, 1201,
      528,  528,  528,  528, 1201,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  814,  814,  814,  814,  814,  814,  814,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,

      815,  815,  815,  815,  815,  815,  816,  817,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  819,  819,
      819,  819,  818,  820,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  207,  207, 1201,  207,  207,  207,

      207,  207, 1201,  207,  780, 1201,  207,  833,  837,  207,
      838,  839,  207,  830,  829,  832,  207,  207,  840,  207,
      207, 1201,  207,  207,  834,  207,  207,  207,  207,  207,
      835,  207,  841,  843,  207,  207,  207,  207,  842,  207,
      207,  849,  844,  845,  207,  207,  846,  207,  207,  207,
     1201,  207,  207, 1201,  207,  207, 1201,  207,  207, 1201,
      207,  847,  207,  207,  207,  848,  853,  207,  207,  207,
      207,  850,  854,  856,  207,  860,  852,  207,  851,  207,
      207,  855,  207,  207,  207,  207,  207,  857,  207,  859,
      207,  207,  858,  207,  863,  861,  207,  207,  207,  207,

      862, 1201,  207,  207,  207,  207,  207,  207,  207,  207,
     1201,  207,  207,  207,  865,  867,  868,  207, 1201,  207,
      864,  207,  870,  871,  873,  872,  207,  207,  869,  866,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      874,  207,  207,  207,  875,  207,  878,  783,  207,  876,
      207,  207,  207,  877,  207,  881,  207, 1201,  207,  207,
      207,  207, 1201,  879,  880,  207,  207,  888,  889, 1201,
      207,  207,  896,  207,  783, 1201,  207,  882,  207,  883,
      207,  884,  885,  886,  207,  887,  207,  207,  207,  207,
      894,  895,  207,  207,  207, 1201,  890,  891,  207, 1201,

      207,  207,  207,  898,  892,  207,  207,  207,  207,  207,
      207,  893, 1201, 1201,  207, 1201,  897, 1201, 1201, 1201,
      207, 1201,  207,  899,  902, 1201,  207,  900,  207, 1201,
      207, 1201,  901,  207,  207,  207,  207,  207,  207,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  635,  634, 1201, 1201, 1201, 1201,  634,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  907,  907,  907,  907,  907,  907,  907, 1201, 1201,
      636,  634, 1201, 1201, 1201, 1201,  634,  207,  207, 1201,
      634,  913,  913,  913,  913,  913,  913,  207,  634, 1201,
      207, 1201,  634, 1201,  634,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  207,  207,  637,  925,  925,
      925,  925,  925,  925,  925,  207, 1201,  638,  207,  639,
      639,  639,  639,  639,  639,  640,  641,  641,  641,  641,
      642,  643,  643,  644,  645,  646,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  320,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927, 1201,
     1201,   83,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94, 1201, 1201,   84,  931,
      931,  931,  931,  931,  931, 1201, 1201, 1201,   85, 1201,
       86,   86,   86,   86,   86,   86,   87,   88,   88,   88,
       88,   89,   90,   90,   91,   92,   93,   95,  703,  703,
      703,  703,  703,  703,  703,  703, 1201,   96, 1201,   97,
       97,   97,   97,   97,   97,   98,   99,   99,   99,   99,

      100,  101,  101,  102,  103,  104,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  656,  656,  656,  656,  656,  657,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      655,  656,  656,  656,  656,  656,  656,  656,  656,  656,

      656,  656,  656,  657,  657,  657,  657,  657,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  656,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  917,  917,  917,  917,  917,  917,  917,

      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  683,  682,
     1201, 1201, 1201, 1201,  682,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,

      923,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  207,  207, 1201,  960,
      684,  952,  952,  952,  952,  952,  682, 1201,  207, 1201,
     1201,  682, 1201, 1201, 1201,  682, 1201, 1201,  957, 1201,
      207, 1201, 1201,  682,  207,  207,  960,  682, 1201,  682,
     1201, 1201, 1201,  932, 1201,  932,  207,  685,  933,  933,
      933,  933,  933,  933,  933,  933,  957,  686,  207,  687,
      687,  687,  687,  687,  687,  688,  689,  689,  689,  689,
      690,  691,  691,  692,  693,  694,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  929,  929,  929,
      929,  929,  929,  929,  929,  929,  929,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  382,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  968,

      968,  968,  968,  968,  968,  968,  128,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  985,  985,  985,  985,  985, 1201,
     1201,  700,  700,  700,  700,  700,  700,  700,  700, 1201,
     1201,  959, 1201,  129, 1201, 1201,  207, 1201,  207,  701,
     1201, 1201, 1201,  130, 1201,  131,  131,  131,  131,  131,
      131,  132,  133,  133,  133,  133,  134,  135,  135,  136,
      137,  138,  701,  934,  207,  934,  207, 1201,  935,  935,
      935,  935,  935,  935,  935,  935,  703,  703,  703,  703,
      703,  703,  703,  703,  936, 1201,  936, 1201, 1201,  937,

      937,  937,  937,  937,  937,  937,  937,  705,  705,  705,
      705,  705,  705,  705,  705,  207,  207,  207,  207,  207,
     1201,  938, 1201,  938,  992,  706,  939,  939,  939,  939,
      939,  939,  939,  939,  708,  708,  708,  708,  708,  708,
      708,  708,  990,  207,  207,  207,  207,  207,  706,  708,
      708,  708,  708,  708,  708,  708,  708,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  714,  714,  714,  714,  714,  715,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  713,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  715,  715,  715,  715,  715,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  714,  942,  942,  942,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  947,  947,  947,  947,  947,  947,  947,

      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  171,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448, 1077,
     1077, 1077, 1077, 1077, 1201, 1201,  172,  933,  933,  933,
      933,  933,  933,  933,  933, 1201,  173, 1201,  174,  174,

      174,  174,  174,  174,  175,  176,  176,  176,  176,  177,
      178,  178,  179,  180,  181,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  745,
      745,  745,  745,  745,  746,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  744,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  746,  746,
      746,  746,  746,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  745,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,

      953,  953,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  958, 1201,  786,
      786,  786,  786,  786,  786,  786,  786,  207,  786,  786,

      786,  786, 1201,  786,  786,  786, 1201, 1201, 1201, 1201,
     1201, 1201,  958,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976, 1201, 1201,  207,  961,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  964,  964,  964,  964,  964,  964,

      964,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      965,  965,  965,  962,  962,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  967,  967,  967, 1201,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  969,  969,  969,  969,

      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  970,  971,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  973,  973,  973,  973,  972,
      974,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  813,  813,  813,  813,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  813,  813,  813,  813,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  808,  808,  808,  808,  808,
      809,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  808,  983,  983,  983,  983,  983,  983,

      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  207,  207,  207,  207, 1201,

     1201,  207,  207,  993,  207,  207,  988,  989,  207,  991,
      958,  207,  207, 1201, 1201, 1201, 1201, 1201,  207,  207,
      207,  999,  207,  207,  207,  207,  207,  994,  995,  207,
      207,  996,  207,  207,  997,  998,  207, 1001, 1000,  207,
      207,  207, 1002,  207,  207,  207,  207,  207,  207,  207,
      207, 1201, 1003,  207, 1004,  207,  207, 1201, 1201, 1006,
      207,  207,  207, 1010, 1201,  207,  207, 1201, 1005,  207,
     1201,  207,  207,  207, 1008, 1007, 1011,  207,  207, 1009,
     1014,  207,  207,  207,  207, 1013, 1012,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207, 1015, 1016, 1201,

     1201,  207,  207,  207,  207,  207,  207, 1017, 1020, 1021,
      207, 1022,  207,  207,  207,  207, 1029, 1018, 1019,  207,
      207,  207, 1023,  207,  207, 1025, 1026, 1024, 1028,  207,
      207,  207,  207,  207, 1032,  207,  207, 1030, 1033,  207,
      207,  207,  207, 1027, 1031,  207, 1034, 1035,  207,  207,
      207,  207, 1040, 1043, 1042, 1041, 1201,  207, 1201, 1036,
     1201,  207, 1038,  207,  207, 1039,  207,  207, 1045, 1037,
      207,  207, 1201,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207, 1044, 1201, 1048,  207,
      207, 1047, 1049,  207,  207, 1052, 1046,  207,  207,  207,

     1050, 1051,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207, 1056,  207, 1053, 1201, 1055,  207, 1201,
     1201,  207, 1054, 1201, 1201,  207, 1201, 1201, 1201, 1201,
     1201, 1201,  207, 1201,  207,  207, 1201, 1201, 1201, 1201,
     1201, 1201,  207,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682, 1065, 1065,

     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1066, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  933,
      933,  933,  933,  933,  933,  933,  933,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,

      939,  939,  939,  939,  939, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069,  207,  207, 1072, 1070,  207,  207,  207,
      207,  207, 1201,  207, 1071,  207,  207,  207, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1083, 1201, 1072, 1201,

     1201,  207,  207, 1070, 1201,  207,  207,  207,  207,  207,
     1081,  207, 1082,  207,  207,  207,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
      962,  962,  962,  962,  962,  963,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  961,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  963,
      963,  963,  963,  963,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,

      962, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,  962, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,

     1078, 1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080,  207,  207,  207,  207, 1201, 1201,
     1070,  207,  207,  207,  207, 1084,  207,  207, 1087,  207,
      207,  207, 1089,  207, 1086,  207, 1092, 1091,  207,  207,
      207,  207,  207,  207,  207,  207, 1085, 1088, 1090,  207,
      207,  207,  207, 1093,  207,  207,  207,  207,  207,  207,

     1095,  207,  207,  207, 1094,  207,  207,  207,  207,  207,
      207,  207,  207, 1096,  207,  207, 1097, 1098, 1201,  207,
      207,  207,  207,  207,  207, 1100,  207,  207, 1201,  207,
      207,  207, 1099,  207, 1102, 1104,  207,  207,  207,  207,
      207, 1112,  207,  207, 1109,  207, 1101,  207,  207,  207,
      207,  207, 1103,  207,  207,  207, 1105,  207,  207,  207,
      207, 1106,  207, 1108,  207,  207, 1115,  207, 1113, 1107,
     1114, 1111,  207,  207,  207,  207, 1201,  207,  207,  207,
     1110,  207,  207,  207,  207, 1120,  207, 1117,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207, 1116, 1118,

      207, 1201,  207,  207, 1119,  207,  207,  207, 1123, 1201,
      207,  207,  207, 1121, 1122, 1201, 1201,  207, 1201,  207,
      207,  207,  207, 1201,  207,  207,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924, 1124, 1125,
      207,  207,  207,  207,  207,  207, 1201,  207,  207,  207,
     1127,  207,  207,  207, 1201, 1201, 1201, 1134, 1201, 1131,
     1201, 1124, 1201, 1128, 1201, 1201, 1201, 1129,  207,  207,
      207,  207,  207,  207, 1130,  207,  207,  207, 1132,  207,
      207,  207, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1126, 1126, 1124,  207,  207,  207,
      207,  207, 1201, 1201,  207,  207,  207,  207, 1201, 1201,
      207, 1136,  207,  207,  207,  207, 1201, 1137,  207, 1133,
     1141, 1201, 1135, 1201,  207,  207,  207,  207,  207,  207,
     1138, 1139,  207,  207,  207,  207, 1143, 1142,  207, 1140,
      207,  207,  207,  207, 1144,  207,  207,  207, 1147,  207,
      207,  207,  207,  207,  207, 1145,  207,  207, 1146,  207,
     1150,  207,  207,  207, 1151,  207,  207,  207,  207,  207,
     1156, 1201,  207,  207, 1148,  207, 1149,  207,  207,  207,
     1153,  207,  207,  207,  207,  207, 1155,  207, 1152,  207,

      207,  207, 1154,  207,  207,  207,  207,  207, 1156, 1157,
      207,  207,  207,  207,  207,  207,  207,  207, 1159,  207,
      207,  207, 1158, 1160, 1161, 1156,  207,  207, 1162,  207,
      207, 1164,  207, 1166,  207, 1201, 1167,  207,  207,  207,
      207,  207,  207,  207,  207,  207, 1165,  207,  207, 1168,
      207,  207, 1170, 1163,  207,  207,  207,  207,  207, 1169,
      207,  207,  207, 1171,  207,  207,  207,  207,  207,  207,
      207,  207, 1201,  207,  207,  207, 1177,  207,  207,  207,
     1172, 1174,  207,  207,  207,  207, 1176,  207, 1173,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

     1175,  207,  207,  207, 1179,  207,  207,  207,  207,  207,
      207,  207, 1180,  207,  207,  207, 1178, 1183,  207,  207,
      207,  207,  207, 1184,  207, 1182,  207,  207,  207,  207,
     1187,  207, 1181,  207,  207,  207,  207,  207, 1188,  207,
      207,  207,  207,  207,  207,  207, 1193,  207,  207,  207,
     1185,  207,  207, 1186,  207,  207,  207,  207, 1191,  207,
     1192,  207,  207, 1189, 1190,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207, 1194,  207,  207,  207,
     1195, 1197,  207,  207,  207,  207,  207, 1201,  207, 1201,
      207,  207, 1201,  207,  207, 1196, 1201, 1201,  207, 1201,

     1201, 1200,  207, 1201, 1201, 1201,  207, 1201, 1201, 1198,
      207,  207,  207,  207,  207, 1199,  207, 1201, 1201,  207,
       81, 1201,   81,   81,   81,   81,   94, 1201,   94,   94,
       94,   94,  105,  105,  105, 1201,  105,  126, 1201,  126,
      126,  126,  126,  149,  149,  149, 1201,  149,  169,  169,
      169,  169,  183,  183,  183, 1201,  183,  528,  528,  528,
     1201,  528,  634,  634,  634,  634,  634,  634,  682,  682,
      682,  682,  682,  682,  771,  771,   81, 1201,   81,   81,
       81,   81,   94, 1201,   94,   94,   94,   94,  126, 1201,
      126,  126,  126,  126,  169,  169,  169,  169,    3, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201
    } ;

static yyconst flex_int16_t yy_chk[10719] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    7,   12,   12,   12,   12, 1209,   35,
       35,   35,   35,  924,  922,   15,   12,   15,   15,   15,
       15,   15,   15,   15,   15,   17,  906,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   28,   31,   33,  904,   42,   31,   20,
        7,   20,   20,   20,   20,   20,   20,   20,   20,   29,
       30,   33,   35,   45,   38,   29,   38,   42,   33,   20,
       30,   28,  794,  771,   38,   42,   31,   42,   68,   68,

       68,   38,   68,  683,   45,   30,   29,    7,  635,   33,
      465,   45,   20,   29,   44,   51,   47,    7,   30,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,   47,   44,   51,
      448,  414,   44,   51,   47,  385,    8,  349,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   53,  332,    9,    9,  323,    9,    9,    9,    9,
        9,    9,    9,    9,   32,    9,    9,    9,   11,   34,

       32,   76,   76,   76,  216,   43,   39,  203,   53,   53,
       32,   41,   43,   39,   34,   34,  127,   32,   82,   39,
       43,   41,   34,   43,   40,   32,   39,   39,   41,   59,
       40,   37,   41,   43,   39,   46,   41,   52,   32,   36,
       11,   40,   34,   34,   52,   41,   50,   46,   40,   41,
       24,   40,   10,   50,   40,   46,    6,   48,   40,   46,
       46,   52,    3,   46,   48,   52,   48,   50,   48,   79,
       79,   79,   79,    0,   50,    0,    0,   11,   48,   93,
       93,   93,   93,   93,   93,   48,    0,   11,    0,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,    0,    0,   21,   21,   54,   21,   21,   21,
       21,   21,   21,   21,   21,   49,   21,   21,   21,   22,
       22,   49,   54,    0,   55,   58,  114,  114,  114,   54,
      114,   49,    0,   54,    0,    0,   58,  204,   49,   55,
       55,   49,    0,   54,    0,    0,   49,   55,  207,   56,
       54,   55,   49,   58,   55,   55,   56,    0,   55,   49,
       57,  122,  122,  122,   56,  204,   55,   55,   55,   57,
      158,  158,  158,   56,  158,    0,  207,   56,    0,   22,

       57,  166,  166,  166,   57,  200,  200,  200,   57,   22,
        0,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,    0,    0,   25,   25,  245,   25,
       25,   25,   25,   25,   25,   25,   25,  245,   25,   25,
       25,   27,   27,    0,   27,   27,   27,   27,   27,   27,
       27,   27,   27,  192,  192,  192,  245,  192,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  227,  227,  227,  265,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,  265,    0,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,    0,   27,   27,   27,    0,
       27,   27,   27,   27,   27,   27,   27,   27,    0,   27,
       27,   27,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   66,   66,   66,   66,   66,   66,
       66,   66,    0,   66,   66,   66,   66,    0,   66,   66,
       66,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   70,   70,   70,   70,   70,
       70,   70,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   81,   83,  360,
      360,  360,    0,   83,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   87,   87,   87,   87,   87,
       87,   87,  205,    0,   81,   83,  425,  425,  425,    0,
       83,  230,  230,    0,   83,   98,   98,   98,   98,   98,
       98,   98,   83,    0,  205,    0,   83,    0,   83,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,  230,
      230,   81,  104,  104,  104,  104,  104,  104,  476,  476,
      476,   81,  205,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   94,  116,
      116,  116,  116,  116,  116,  116,    0,    0,   94,    0,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  105,  105,  105,  105,
      105,  105,  105,  105,  138,  138,  138,  138,  138,  138,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  238,  238,

      238,  238,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,    0,
        0,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,    0,  105,  105,
      105,  238,  105,  105,  105,  105,  105,  105,  105,  105,
        0,  105,  105,  105,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  112,  112,  112,  112,
      112,  112,  112,  112,    0,  112,  112,  112,  112,    0,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  126,  128,  545,  545,  545,    0,  128,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      139,  139,  139,  139,  126,  317,  317,  317,  317,  317,
      128,    0,  139,    0,    0,  128,  805,  805,  805,  128,
      132,  132,  132,  132,  132,  132,  132,  128,  537,  537,
      537,  128,  537,  128,  160,  160,  160,  160,  160,  160,

      160,  126,  141,  141,  141,  141,  141,  141,  141,  141,
        0,  126,    0,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  142,    0,
      142,  142,  142,  142,  142,  142,  142,  142,  143,  143,
      143,  143,  143,  143,  143,  143,  249,  144,  142,  144,
      144,  144,  144,  144,  144,  144,  144,  145,  145,  145,
      145,  145,  145,  145,  145,  231,  232,  144,  231,  247,
        0,  142,  232,  249,  249,  145,  146,  146,  146,  146,
      146,  146,  146,  146,  181,  181,  181,  181,  181,  181,
      144,  247,  300,  231,  146,    0,  231,  247,  145,  147,
      232,  147,  147,  147,  147,  147,  147,  147,  147,  175,

      175,  175,  175,  175,  175,  175,  148,  146,  148,  147,
      300,  148,  148,  148,  148,  148,  148,  148,  148,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,    0,
        0,    0,  147,  149,  149,    0,  149,  149,  149,  149,
      149,  149,  149,  149,    0,    0,  274,    0,    0,    0,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,    0,    0,
        0,  274,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  274,

        0,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,    0,  149,  149,
      149,    0,  149,  149,  149,  149,  149,  149,  149,  149,
        0,  149,  149,  149,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  156,  156,  156,    0,  156,  156,  156,  156,    0,
      156,  156,  156,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      161,  161,  161,  161,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  169,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  169,  194,  194,  194,  194,  194,  194,  194,    0,
        0,  169,    0,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  183,  183,  183,  183,  183,  183,  183,  183,  379,
      379,  379,  379,  379,    0,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,    0,    0,    0,  301,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  301,    0,  183,  183,  183,  183,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,    0,  183,  183,  183,    0,  183,  183,  183,
      183,  183,  183,  183,  183,    0,  183,  183,  183,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  190,  190,  190,  190,  190,  190,  190,  190,    0,
      190,  190,  190,  190,    0,  190,  190,  190,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  242,    0,  206,  206,    0,  206,  206,
      206,  206,  206,  206,  206,  206,  208,  206,  206,  206,
      221,  221,  221,  221,  221,  221,  221,  208,  242,    0,
        0,  242,  217,  217,  217,  217,  217,  217,  217,  217,
      208,  217,  217,  217,  217,    0,  217,  217,  217,  444,
      444,  444,  444,  444,    0,  208,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,    0,  219,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  233,  233,  234,    0,  235,  236,  237,  243,  244,
      234,  250,  235,  251,  236,  237,    0,    0,  243,  495,
      495,  495,  495,  495,  251,    0,  250,  244,    0,  233,
      234,  233,  235,  236,  237,  244,  243,  244,  234,  250,
      235,  251,  236,  237,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      246,  248,  241,  241,  254,  241,  241,  241,  241,  241,

      241,  241,  241,    0,  241,  241,  241,  257,  252,  252,
      253,    0,  248,    0,  255,  246,  252,  302,  246,  248,
      254,  253,  254,    0,  256,  254,  255,  256,  257,  252,
      260,  252,  255,  261,  258,  257,  252,  252,  253,  255,
        0,  259,  255,  258,  262,  302,  264,  263,  260,  267,
        0,  261,  256,  266,  263,  256,  259,    0,  260,  271,
        0,  261,  258,  259,  267,  262,  271,  259,  263,  259,
        0,  268,  262,  264,  264,  263,  270,  267,  266,  268,
      269,  266,  272,  273,    0,  275,  268,  271,  277,  268,
      273,  268,  275,  276,  272,  269,  270,  278,  268,  268,

        0,  280,  282,  276,  270,  279,  288,  277,  269,  282,
      272,  273,  275,  276,  284,  279,  277,  281,    0,    0,
      275,  276,  283,  278,  288,  278,  278,  280,  281,  280,
      282,  285,  283,  279,  288,  283,  287,  286,  281,  285,
      289,  284,  284,  287,  292,  281,  286,  290,    0,  295,
      283,  294,  292,    0,  291,  289,  295,  293,  285,  286,
      286,  286,  291,  303,  287,  286,  294,  285,  289,  296,
      291,  290,  292,  297,  304,  290,  293,  295,  294,  294,
      298,  291,  305,  306,  296,  293,    0,  298,  297,    0,
      291,  303,  517,  517,  517,  517,  517,  296,    0,    0,

        0,  297,  304,  672,  672,  672,  672,  672,  298,    0,
      305,  306,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  312,  312,  312,

      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  319,

      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  321,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  354,  354,  354,  354,  354,  354,  354,  730,  730,
      730,  730,  730,  321,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,    0,    0,

      321,  402,  402,  402,  402,  402,  402,  402,  402,    0,
      321,    0,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  331,  331,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  350,  350,  350,  350,  350,  350,  350,  350,
        0,  350,  350,  350,  350,    0,  350,  350,  350,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,

      352,    0,  352,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  361,  361,

      361,  361,  361,  361,  361,  361,  361,  361,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  383,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  419,  419,  419,  419,  419,  419,
      419,  383,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,    0,    0,  383,  403,
      403,  403,  403,  403,  403,  403,  403,    0,  383,    0,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  393,  393,  393,  393,  393,
      393,  393,  393,  394,  394,  394,  394,  394,  394,  394,
      394,    0,    0,  393,    0,    0,    0,  395,    0,  395,
        0,  394,  395,  395,  395,  395,  395,  395,  395,  395,
        0,    0,    0,  499,  500,    0,  393,  470,  470,  470,
      470,  470,  470,  470,  394,  396,  396,  396,  396,  396,
      396,  396,  396,  397,  397,  397,  397,  397,  397,  397,
      397,  499,  500,  396,    0,  501,    0,  398,    0,  398,
        0,  397,  398,  398,  398,  398,  398,  398,  398,  398,
        0,    0,    0,  502,  503,  504,  396,  505,  506,    0,

      399,    0,  399,  501,  397,  399,  399,  399,  399,  399,
      399,  399,  399,  400,  400,  400,  400,  400,  400,  400,
      400,  502,  503,  504,  523,  505,  506,  401,    0,  401,
        0,  400,  401,  401,  401,  401,  401,  401,  401,  401,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
        0,    0,  523,    0,  400,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  415,  415,  415,  415,  415,  415,
      415,  415,    0,  415,  415,  415,  415,    0,  415,  415,
      415,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,    0,  417,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  466,  466,  466,  466,

      466,  466,  466,  466,    0,  466,  466,  466,  466,    0,
      466,  466,  466,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,    0,  468,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  473,  473,

      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  492,  492,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  520,  521,  524,
      521,  522,  522,  527,  520,  548,  525,  526,  549,  550,
      551,  552,  526,  554,  553,  558,  562,    0,  564,  525,

        0,    0,  558,  562,  520,  553,  521,  524,  521,  525,
      522,  527,  520,  548,  526,  555,  549,  550,  551,  552,
      526,  554,  553,  558,  562,  555,  564,  525,  528,  528,
        0,  528,  528,  528,  528,  528,  528,  528,  528,    0,
        0,    0,    0,  555,    0,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,    0,    0,    0,  581,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  581,    0,  528,  528,  528,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,    0,  528,  528,  528,    0,  528,  528,  528,
      528,  528,  528,  528,  528,    0,  528,  528,  528,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  535,  535,  535,  535,  535,  535,  535,  535,    0,
      535,  535,  535,  535,    0,  535,  535,  535,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  539,  539,  539,  539,  539,  539,  539,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  556,  557,    0,  559,  560,  561,

      566,  563,    0,  565,  568,    0,  568,  560,  563,  567,
      565,  566,  570,  557,  556,  559,  569,  571,  567,  572,
      576,    0,  556,  557,  560,  559,  560,  561,  566,  563,
      561,  565,  568,  570,  568,  573,  574,  567,  569,  575,
      570,  576,  571,  572,  569,  571,  573,  572,  576,  577,
        0,  578,  579,    0,  582,  580,    0,  583,  584,    0,
      585,  574,  588,  573,  574,  575,  580,  575,  586,  587,
      589,  577,  582,  584,  590,  588,  579,  577,  578,  578,
      579,  583,  582,  580,  591,  583,  584,  585,  585,  587,
      588,  592,  586,  593,  591,  589,  586,  587,  589,  594,

      590,    0,  590,  595,  596,  597,  599,  598,  603,  601,
        0,  600,  591,  602,  594,  596,  597,  605,    0,  592,
      593,  593,  600,  601,  603,  602,  608,  594,  598,  595,
      604,  595,  596,  597,  599,  598,  603,  601,  606,  600,
      604,  602,  607,  610,  605,  605,  608,  609,  611,  606,
      612,  613,  609,  607,  608,  611,  615,    0,  604,  616,
      625,  620,    0,  609,  610,  618,  606,  615,  616,    0,
      607,  610,  620,  619,  609,    0,  611,  612,  612,  613,
      609,  614,  614,  614,  615,  614,  617,  616,  625,  620,
      618,  619,  622,  618,  621,    0,  617,  617,  623,    0,

      626,  619,  627,  622,  617,  628,  624,  629,  630,  631,
      614,  617,    0,    0,  617,    0,  621,    0,    0,    0,
      622,    0,  621,  623,  626,    0,  623,  624,  626,    0,
      627,    0,  624,  628,  624,  629,  630,  631,  614,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  634,  636,    0,    0,    0,    0,  636,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  638,  638,  638,  638,

      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  640,  640,  640,  640,  640,  640,  640,    0,    0,
      634,  636,    0,    0,    0,    0,  636,  772,  773,    0,
      636,  646,  646,  646,  646,  646,  646,  774,  636,    0,
      775,    0,  636,    0,  636,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  772,  773,  634,  688,  688,
      688,  688,  688,  688,  688,  774,    0,  634,  775,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  647,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,    0,
        0,  647,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,    0,    0,  647,  694,
      694,  694,  694,  694,  694,    0,    0,    0,  647,    0,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  651,  702,  702,
      702,  702,  702,  702,  702,  702,    0,  651,    0,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  665,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  665,  665,  665,  665,  665,  665,  665,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  671,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  682,  684,
        0,    0,    0,    0,  684,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  776,  782,    0,  783,
      682,  761,  761,  761,  761,  761,  684,    0,  783,    0,
        0,  684,    0,    0,    0,  684,    0,    0,  779,    0,
      779,    0,    0,  684,  776,  782,  783,  684,    0,  684,
        0,    0,    0,  699,    0,  699,  783,  682,  699,  699,
      699,  699,  699,  699,  699,  699,  779,  682,  779,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  695,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  799,

      799,  799,  799,  799,  799,  799,  695,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  824,  824,  824,  824,  824,    0,
        0,  700,  700,  700,  700,  700,  700,  700,  700,    0,
        0,  781,    0,  695,    0,    0,  781,    0,  827,  700,
        0,    0,    0,  695,    0,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  700,  701,  781,  701,  827,    0,  701,  701,
      701,  701,  701,  701,  701,  701,  703,  703,  703,  703,
      703,  703,  703,  703,  704,    0,  704,    0,    0,  704,

      704,  704,  704,  704,  704,  704,  704,  705,  705,  705,
      705,  705,  705,  705,  705,  830,  835,  833,  831,  840,
        0,  706,    0,  706,  833,  705,  706,  706,  706,  706,
      706,  706,  706,  706,  707,  707,  707,  707,  707,  707,
      707,  707,  831,  830,  835,  833,  831,  840,  705,  708,
      708,  708,  708,  708,  708,  708,  708,  709,  709,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
      710,  710,  710,  711,  711,  711,  711,  711,  711,  711,
      711,  712,  712,  712,  712,  712,  712,  712,  712,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,

      720,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  726,  726,  726,  726,  726,  726,  726,  726,  726,

      726,  726,  726,  726,  726,  726,  726,  726,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  740,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  978,
      978,  978,  978,  978,    0,    0,  740,  932,  932,  932,
      932,  932,  932,  932,  932,    0,  740,    0,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,

      762,  762,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  780,    0,  795,
      795,  795,  795,  795,  795,  795,  795,  780,  795,  795,

      795,  795,    0,  795,  795,  795,    0,    0,    0,    0,
        0,    0,  780,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,    0,    0,  780,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,    0,  797,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  820,  820,  820,  820,  820,  820,  820,

      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  828,  834,  829,  832,    0,

        0,  836,  837,  834,  838,  842,  828,  829,  839,  832,
      841,  843,  844,    0,    0,    0,    0,    0,  859,  845,
      841,  843,  846,  828,  834,  829,  832,  836,  837,  836,
      837,  838,  838,  842,  839,  841,  839,  845,  844,  843,
      844,  847,  846,  848,  849,  850,  859,  845,  841,  852,
      846,    0,  847,  851,  848,  853,  854,    0,    0,  850,
      856,  855,  863,  854,    0,  858,  857,    0,  849,  847,
        0,  848,  849,  850,  852,  851,  855,  852,  860,  853,
      858,  851,  867,  853,  854,  857,  856,  861,  856,  855,
      863,  862,  864,  858,  857,  866,  865,  860,  861,    0,

        0,  868,  869,  870,  876,  873,  860,  862,  865,  866,
      867,  868,  874,  872,  877,  861,  873,  864,  864,  862,
      864,  879,  869,  866,  865,  871,  871,  870,  872,  868,
      869,  870,  876,  873,  876,  875,  878,  874,  877,  880,
      874,  872,  877,  871,  875,  881,  878,  879,  884,  879,
      883,  882,  885,  887,  886,  885,    0,  889,    0,  880,
        0,  871,  882,  875,  878,  883,  888,  880,  889,  881,
      890,  891,    0,  881,  893,  894,  884,  886,  883,  882,
      885,  892,  887,  896,  895,  889,  888,    0,  892,  871,
      898,  891,  892,  900,  888,  895,  890,  901,  890,  891,

      893,  894,  893,  894,  897,  886,  899,  902,  885,  892,
      887,  896,  895,  900,  903,  896,    0,  899,  898,    0,
        0,  900,  897,    0,    0,  901,    0,    0,    0,    0,
        0,    0,  897,    0,  899,  902,    0,    0,    0,    0,
        0,    0,  903,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  909,  909,  909,  909,  909,  909,

      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  920,  920,  920,  920,

      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  929,  929,

      929,  929,  929,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  933,
      933,  933,  933,  933,  933,  933,  933,  934,  934,  934,
      934,  934,  934,  934,  934,  935,  935,  935,  935,  935,
      935,  935,  935,  936,  936,  936,  936,  936,  936,  936,
      936,  937,  937,  937,  937,  937,  937,  937,  937,  938,
      938,  938,  938,  938,  938,  938,  938,  939,  939,  939,

      939,  939,  939,  939,  939,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  956,  957,  960,  958,  988,  959,  989,
      990,  993,    0,  958,  959,  991,  992,  960,    0,    0,
        0,    0,    0,    0,    0,    0,  993,    0,  960,    0,

        0,  956,  957,  958,    0,  988,  959,  989,  990,  993,
      991,  958,  992,  991,  992,  960,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,

      972,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,

      979,  979,  979,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  994,  995,  996,  997,    0,    0,
      998,  999, 1001, 1000, 1003,  994, 1002,  998,  997, 1004,
     1005, 1006,  999, 1007,  996, 1008, 1002, 1001, 1009, 1011,
     1010, 1014,  994,  995,  996,  997,  995,  998, 1000,  999,
     1001, 1000, 1003, 1004, 1002,  998, 1016, 1004, 1005, 1006,

     1010, 1007, 1012, 1008, 1009, 1013, 1009, 1011, 1010, 1014,
     1015, 1017, 1018, 1012, 1019, 1020, 1013, 1015,    0, 1021,
     1022, 1024, 1028, 1023, 1016, 1019, 1029, 1030,    0, 1032,
     1012, 1034, 1017, 1013, 1023, 1029, 1033, 1037, 1015, 1017,
     1018, 1040, 1019, 1020, 1037, 1031, 1020, 1021, 1022, 1024,
     1028, 1023, 1028, 1036, 1029, 1030, 1031, 1032, 1035, 1034,
     1038, 1033, 1039, 1036, 1033, 1037, 1043, 1040, 1041, 1035,
     1042, 1039, 1044, 1031, 1045, 1046,    0, 1047, 1050, 1048,
     1038, 1036, 1052, 1055, 1049, 1050, 1035, 1047, 1038, 1051,
     1039, 1056, 1041, 1053, 1043, 1040, 1042, 1054, 1044, 1048,

     1044,    0, 1045, 1046, 1049, 1047, 1050, 1048, 1054,    0,
     1052, 1055, 1049, 1051, 1053,    0,    0, 1051,    0, 1056,
     1041, 1053, 1043,    0, 1042, 1054, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1066, 1066, 1066, 1066, 1066, 1066,

     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1070, 1071,
     1072, 1081, 1082, 1083, 1084, 1085,    0, 1090, 1086, 1087,
     1081, 1089, 1070, 1071,    0,    0,    0, 1089,    0, 1087,
        0, 1070,    0, 1083,    0,    0,    0, 1085, 1072, 1081,
     1082, 1083, 1084, 1085, 1086, 1090, 1086, 1087, 1087, 1089,
     1070, 1071, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1088, 1091, 1092, 1093,
     1095, 1094,    0,    0, 1101, 1099, 1096, 1097,    0,    0,
     1088, 1094, 1100, 1098, 1103, 1102,    0, 1095, 1104, 1088,
     1099,    0, 1091,    0, 1107, 1091, 1092, 1093, 1095, 1094,
     1096, 1097, 1101, 1099, 1096, 1097, 1102, 1100, 1088, 1098,
     1100, 1098, 1103, 1102, 1104, 1105, 1104, 1106, 1107, 1108,
     1109, 1110, 1107, 1111, 1112, 1105, 1113, 1114, 1106, 1115,
     1110, 1116, 1119, 1117, 1111, 1121, 1122, 1118, 1120, 1123,
     1124,    0, 1124, 1105, 1108, 1106, 1109, 1108, 1109, 1110,
     1118, 1111, 1112, 1128, 1113, 1114, 1122, 1115, 1117, 1116,

     1119, 1117, 1120, 1121, 1122, 1118, 1120, 1123, 1124, 1125,
     1124, 1127, 1129, 1130, 1132, 1125, 1137, 1131, 1128, 1134,
     1135, 1128, 1127, 1129, 1131, 1133, 1136, 1133, 1132, 1138,
     1142, 1134, 1141, 1136, 1139,    0, 1138, 1144, 1145, 1127,
     1129, 1130, 1132, 1125, 1137, 1131, 1135, 1134, 1135, 1139,
     1140, 1143, 1141, 1133, 1136, 1133, 1146, 1138, 1142, 1140,
     1141, 1147, 1139, 1143, 1148, 1144, 1145, 1149, 1151, 1152,
     1150, 1153,    0, 1156, 1154, 1155, 1157, 1158, 1140, 1143,
     1147, 1150, 1159, 1157, 1146, 1160, 1155, 1163, 1149, 1147,
     1161, 1164, 1148, 1162, 1165, 1149, 1151, 1152, 1150, 1153,

     1154, 1156, 1154, 1155, 1162, 1158, 1166, 1167, 1168, 1169,
     1159, 1157, 1164, 1160, 1170, 1163, 1161, 1168, 1161, 1164,
     1171, 1162, 1165, 1169, 1172, 1167, 1173, 1174, 1175, 1176,
     1177, 1178, 1166, 1182, 1166, 1167, 1168, 1169, 1178, 1179,
     1180, 1183, 1170, 1185, 1177, 1186, 1187, 1188, 1171, 1184,
     1173, 1181, 1172, 1175, 1173, 1174, 1175, 1176, 1181, 1178,
     1184, 1182, 1187, 1179, 1180, 1189, 1191, 1179, 1180, 1183,
     1192, 1185, 1177, 1186, 1190, 1188, 1189, 1184, 1194, 1181,
     1190, 1193, 1195, 1193, 1196, 1197, 1199,    0, 1200,    0,
     1187, 1198,    0, 1189, 1191, 1192,    0,    0, 1192,    0,

        0, 1199, 1190,    0,    0,    0, 1194,    0,    0, 1195,
     1195, 1193, 1196, 1197, 1199, 1198, 1200,    0,    0, 1198,
     1202,    0, 1202, 1202, 1202, 1202, 1203,    0, 1203, 1203,
     1203, 1203, 1204, 1204, 1204,    0, 1204, 1205,    0, 1205,
     1205, 1205, 1205, 1206, 1206, 1206,    0, 1206, 1207, 1207,
     1207, 1207, 1208, 1208, 1208,    0, 1208, 1210, 1210, 1210,
        0, 1210, 1211, 1211, 1211, 1211, 1211, 1211, 1212, 1212,
     1212, 1212, 1212, 1212, 1213, 1213, 1214,    0, 1214, 1214,
     1214, 1214, 1215,    0, 1215, 1215, 1215, 1215, 1216,    0,
     1216, 1216, 1216, 1216, 1217, 1217, 1217, 1217, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,

     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201
    } ;

static yyconst flex_int16_t yy_rule_linenum[154] =
    {   0,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
      246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
      256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
      286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
      296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
      306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
      316,  317,  318,  319,  320,  321,  322,  323,  324,  325,
      326,  327,  328,  329,  330,  331,  332,  333,  334,  335,

      336,  337,  338,  339,  340,  341,  342,  343,  344,  345,
      346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
      356,  357,  358,  359,  360,  361,  362,  363,  364,  365,
      366,  367,  368,  369,  370,  371,  372,  373,  374,  375,
      376,  377,  378,  379,  380,  381,  382,  383,  384,  385,
      386,  387,  388
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLalgebraScanner.lpp"
/* $Id: SPARQLalgebraScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL algebra */
#line 6 "lib/SPARQLalgebraScanner.lpp"

#include "SPARQLalgebraParser/SPARQLalgebraParser.hpp"
#include "SPARQLalgebraScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLalgebraParser::token token;
typedef w3c_sw::SPARQLalgebraParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLalgebraFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLalgebraScanner"
 * void SPARQLalgebraFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLalgebraScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLalgebra terminals */
/* END patterns for SPARQLalgebra terminals */
/* START semantic actions for SPARQLalgebra terminals */
#line 3327 "lib/SPARQLalgebraScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 235 "lib/SPARQLalgebraScanner.lpp"

#line 3491 "lib/SPARQLalgebraScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1202 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1201 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 154 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 154 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 155 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 236 "lib/SPARQLalgebraScanner.lpp"
{ /* yylloc->step(); @@ needed? useful? */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 237 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 238 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 239 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_base;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 240 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_prefix;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 241 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_project;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 242 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_extend;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 243 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_distinct;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 244 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_reduced;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 245 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_group;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 246 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_filter;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 247 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_order;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 248 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_asc;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 249 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_desc;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 250 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_slice;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 251 "lib/SPARQLalgebraScanner.lpp"
{return token::IT__;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 252 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_load;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 253 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_clear;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 254 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_silent;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 255 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_drop;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 256 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_create;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 257 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_add;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 258 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_move;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 259 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_copy;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 260 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_insertdata;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 261 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_deletedata;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 262 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_deletewhere;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 263 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_modify;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 264 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_delete;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 265 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_insert;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 266 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_default;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 267 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_named;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 268 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_all;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 269 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_quads;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 270 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_bgp;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 271 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_table;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 272 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_unit;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 273 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_path;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 274 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_join;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 275 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sequence;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 276 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_exprlist;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 277 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_triple;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 278 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_leftjoin;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 279 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_graph;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 280 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_service;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 281 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_minus;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 282 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_union;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 283 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 284 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_alt;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 285 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_seq;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 286 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_reverse;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 287 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_mod;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 288 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_path_OPT;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 289 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_path_TIMES;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 290 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_path_PLUS;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 291 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 292 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_notoneof;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 293 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 294 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 295 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 296 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 297 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 298 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 299 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 300 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 301 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_in;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 302 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 303 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 304 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 305 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 306 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 307 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_str;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 308 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_lang;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 309 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_langmatches;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 310 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_datatype;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 311 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_bound;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 312 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_iri;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 313 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_uri;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 314 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_bnode;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 315 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 316 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_abs;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 317 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_ceil;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 318 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_floor;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 319 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_round;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 320 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_concat;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 321 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strlen;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 322 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_ucase;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 323 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_lcase;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 324 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_encode_for_uri;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 325 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_contains;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 326 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strstarts;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 327 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strends;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 328 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_year;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 329 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_month;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 330 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_day;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 331 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_hours;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 332 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_minutes;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 333 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_seconds;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 334 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_timezone;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 335 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_now;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 336 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_md5;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 337 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha1;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 338 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha224;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 339 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha256;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 340 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha384;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 341 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sha512;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 342 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_coalesce;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 343 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_if;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 344 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strlang;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 345 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_strdt;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 346 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_sameterm;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 347 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isiri;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 348 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isuri;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 349 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isblank;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 350 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isliteral;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 351 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_isnumeric;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 352 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_regex;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 353 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_substr;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 354 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_exists;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 355 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 356 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 357 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 358 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 359 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 360 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 361 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 362 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 363 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_separator;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 364 "lib/SPARQLalgebraScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 365 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_true;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 366 "lib/SPARQLalgebraScanner.lpp"
{return token::IT_false;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 367 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 368 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 369 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 370 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 371 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 372 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 373 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 374 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 375 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 376 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 377 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 378 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 379 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 380 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 381 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 382 "lib/SPARQLalgebraScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 383 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 384 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 385 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 386 "lib/SPARQLalgebraScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 387 "lib/SPARQLalgebraScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 388 "lib/SPARQLalgebraScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 390 "lib/SPARQLalgebraScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 391 "lib/SPARQLalgebraScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4379 "lib/SPARQLalgebraScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLalgebrafree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLalgebrafree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLalgebrarealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLalgebrarealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1202 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1202 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1201);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLalgebraalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLalgebraalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLalgebrafree((void *) b->yy_ch_buf  );

	SPARQLalgebrafree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLalgebraalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLalgebrarealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLalgebraalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLalgebrarealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLalgebraalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLalgebrarealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLalgebrafree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLalgebrarealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 391 "lib/SPARQLalgebraScanner.lpp"


/* END semantic actions for SPARQLalgebra terminals */

/* START SPARQLalgebraScanner */
namespace w3c_sw {

SPARQLalgebraScanner::SPARQLalgebraScanner (SPARQLalgebraDriver* driver, std::istream* in, std::ostream* out) : SPARQLalgebraFlexLexer(in, out), driver(driver) {  }
SPARQLalgebraScanner::~SPARQLalgebraScanner () {  }

SPARQLalgebraParser::token_type SPARQLalgebraScanner::typedLiteral (SPARQLalgebraParser::semantic_type*& yylval, SPARQLalgebraParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLalgebraParser::token_type SPARQLalgebraScanner::unescape (SPARQLalgebraParser::semantic_type*& yylval, size_t skip, SPARQLalgebraParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLalgebraScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLalgebraScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLalgebraScanner */

const URI* SPARQLalgebraScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLalgebraFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLalgebraFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLalgebraScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLalgebraFlexLexer::yylex()
{
    std::cerr << "in SPARQLalgebraFlexLexer::yylex() !" << std::endl;
    return 0;
}


