#line 2 "lib/TurtleSScanner.cpp"

#line 4 "lib/TurtleSScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TurtleSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TurtleSalloc (yy_size_t  );
void *TurtleSrealloc (void *,yy_size_t  );
void TurtleSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 32
#define YY_END_OF_BUFFER 33
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[626] =
    {   0,
        0,    0,   33,   31,    2,    1,    1,   31,    2,   31,
        8,    9,   31,    5,    3,   23,   19,    4,   31,   31,
       31,   31,   31,   31,   31,    6,    7,   31,   31,   17,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,    2,
        1,    0,   27,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   23,
       24,    0,    0,    0,   20,   20,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   18,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   22,
       22,   22,    0,    0,   19,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   30,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   27,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,    0,    0,   25,    0,    0,   20,
        0,   20,   20,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,   20,   20,   20,
       20,   20,   20,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   22,   22,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,    0,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   20,   20,   20,   20,   20,    0,    0,    0,    0,
        0,    0,    0,    0,   22,   22,   22,    0,    0,    0,
        0,    0,    0,    0,   14,    0,    0,   11,   21,    0,
       21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   21,   21,   21,   21,   21,   21,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   20,   20,   20,   20,   20,    0,    0,
       20,    0,    0,   15,   22,    0,   12,    0,   21,   21,
       21,   21,   21,   21,   21,   21,   21,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       21,   21,   21,   21,   21,    0,    0,   29,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
        0,    0,    0,    0,    0,   20,    0,    0,   22,   13,
       21,   21,   21,   21,   21,    0,    0,   21,    0,    0,
        0,    0,    0,    0,    0,    0,   16,   21,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   31,   32,   33,
       34,   34,   35,   34,   34,   36,   34,   34,   34,   37,
       34,   38,   39,   40,   41,   34,   34,   42,   34,   34,
       43,   44,   45,   46,   47,    1,   48,   49,   50,   50,

       51,   52,   53,   53,   54,   53,   53,   55,   53,   56,
       53,   57,   53,   58,   59,   60,   61,   53,   53,   62,
       53,   53,    1,    1,    1,   63,   64,   65,   66,   67,
       67,   67,   67,   68,   69,   69,   69,   69,   69,   70,
       70,   69,   71,   72,   72,   72,   72,   72,   72,   72,
       73,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   77,   77,   77,   77,   77,
       77,   77,   78,   79,   79,   79,   79,   79,   79,   80,
       81,   82,   82,   83,   84,   85,   85,   85,   85,   85,

       85,   85,   85,   86,   87,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   89,   90,   91,   92,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   94,   95,   96,   97,
       98,   98,   98,   99,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82
    } ;

static yyconst flex_int32_t yy_meta[100] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    3,    3,
        5,    3,    3,    1,    3,    3,    3,    3,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    3,    3,    3,    1,    3,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    3,    3,    7,    7,    7,    7,    7,    7,
        8,    7,    9,    7,    7,    7,    7,    9,    7,   10,
       11,   12,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3

    } ;

static yyconst flex_int16_t yy_base[858] =
    {   0,
        0,    0,  918, 5816,   98,  102,  106,  105,  134,  222,
     5816, 5816,   94, 5816,  896,   95,  312, 5816,  385,   87,
      467,   89,   90,   82,   83,  126, 5816,  859,  861,    0,
        0,    0,   85,   92,    0,   87,    0,   61,   96,    0,
      103,    0,  170,  816,    0,  172,  130,  179,    0,  207,
      259,  559,  823,  555,    0,    0,    0,  192,    0,  209,
        0,  251,    0,  219,  588,    0,    0,    0,  219,    0,
      347,    0,  358,    0,  270,  676,  797,  565,    0,    0,
        0,  347,    0,  375,    0,  506,    0,  385,  771,  569,
      568,  573,  127,  673,  766,    0,  859,    0,    0,  392,

      566,    0,  413,    0,   69,  492,    0,  585,    0,  630,
      681,    0,  661,  214,  664,    0,  897, 5816,  314,    0,
        0,    0,  636,    0,  823,    0,  835,    0,  683,  701,
      579,  580,  979,  696, 1068,    0,  605,    0,  712,    0,
      833,    0,  612,  590,    0,  713,  716,  620,    0,  849,
        0,  854,  602,    0,  877,  434,  880,    0,  318,  340,
      481,  426,  934, 5816, 5816, 1146,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  559,  885,    0,    0,  537,
        0,    0,    0,  892,    0,    0, 5816, 1238, 1331, 1220,
     1225,    0,  550,    0,    0,    0,    0,    0,    0,    0,

        0,  548,    0,    0,    0,    0,    0,    0,    0, 5816,
     1419, 1507, 1262, 1318,    0,  523,    0,    0,    0,    0,
        0,    0,    0, 1060,  986,  510,  474, 1331, 1355, 1597,
        0,    0,    0, 1690,  400,    0, 1017,    0, 1103,    0,
     1182,  386,    0,  788,  807, 1207,    0, 1221,    0, 1201,
      342,    0, 1324,  498, 1360,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  328, 1226,    0,    0,  329,
        0,    0,    0, 1263,    0,    0, 1421, 1426,    0,  313,
        0,    0,    0,    0,    0,    0,    0,    0,  772, 1062,
     1736,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   52, 1276,    0,    0,  239,    0,    0,    0, 1387,
        0,    0,  498,  553,  558,  590, 1817,    0,    0, 1414,
     1426,    0, 1443,    0,  862,  677,    0, 1450,    0, 1467,
      237,    0, 1469,  898, 1480,    0,    0,    0,    0,    0,
        0,    0,    0, 1909, 2002, 1905,    0,    0,    0, 1487,
        0, 1654,    0, 1666,    0, 1504, 1989, 2002, 2095,    0,
        0,    0, 2124,    0,    0,    0, 2212, 2300, 1915,    0,
        0,    0, 1504,    0, 1863,    0, 1983,    0, 1543, 2082,
     2095, 2388,    0,    0,    0,  280,  244, 2119, 2478,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      558, 1543,    0,    0,  151,    0,    0,    0, 1652,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 2209, 2214,
     2551,    0,    0,    0,  196, 1327, 1730, 2633,    0,    0,
        0,    0,    0,    0,    0,  761,  794,    0, 2714,    0,
        0,  148,    0, 1774,    0, 1873,    0, 1904,  109,    0,
     1001, 1018, 1934,    0, 1949,    0, 2000,  120,    0, 2088,
      946, 2195,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  102, 1990,    0,    0,  105,    0,    0,    0, 2027,
        0,    0, 2795, 2887, 2980, 2297, 2302,    0,  124,    0,
        0,    0,    0,    0,    0,    0, 2385, 2390, 3068, 3156,

     2552, 2557,    0,   90,    0,    0,    0,    0,    0,    0,
        0, 2869, 2874, 3246,    0,    0,    0,    0,    0,    0,
        0, 2911, 2967,  114, 1007,    0,    0, 1089, 3327,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1329,
     2040,    0,    0,   61,    0,    0,    0, 2119,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5816, 2980, 3004,
     3419,    0,    0,    0, 3065, 3070, 5816, 3153, 3158, 3507,
        0,    0,    0, 3401, 3406,    0, 3443, 3504, 1674,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3509, 3586,
     3591, 3623, 3628, 3660, 3665, 3692,  107,    0, 3698, 3771,

     3776, 3808, 3813, 3845, 3850, 3882, 3887, 3919, 3924, 3956,
     3961, 3993, 3998, 4030, 4035, 4067, 4113, 4073, 4201, 4275,
     4080, 4112, 4368, 4456, 5816, 4555, 4566, 4577, 4586,  117,
     4591, 4596, 4601, 4606, 4611, 4616, 4621, 4626, 4631, 4636,
     4641, 4645, 4648, 4653, 4658, 4663, 4674, 4679, 4683, 4686,
     4691, 4696, 4701, 4712, 4717, 4721, 4724, 4729, 4734, 4739,
     4744, 4749, 4754, 4759, 4764, 4769, 4774, 4779, 4784, 4789,
     4798, 4803, 4807, 4810, 4815, 4820, 4825, 4833, 4833, 4838,
     4843, 4848, 4853, 4858, 4863, 4868, 4873, 4878, 4883, 4888,
     4893, 4898, 4903, 4908, 4913, 4918, 4923, 4934, 4945, 4950,

     4955, 4960, 4965, 4970, 4975, 4980, 4985, 4990, 4995, 5000,
     5005, 5016, 5027, 5032, 5037, 5042, 5047, 5052, 5057, 5062,
     5067, 5072, 5077, 5082, 5087, 5092, 5097, 5102, 5107, 5112,
     5117, 5122, 5127, 5132, 5137, 5142, 5147, 5152, 5157, 5162,
     5167, 5172, 5177, 5182, 5189, 5192, 5192, 5197, 5202, 5207,
     5212, 5217, 5222, 5227, 5232, 5237, 5242, 5247, 5252, 5257,
     5262, 5267, 5272, 5277, 5282, 5293, 5298, 5302, 5305, 5310,
     5315, 5320, 5331, 5336, 5341, 5352, 5357, 5362, 5373, 5378,
     5382, 5385, 5390, 5395, 5400, 5411, 5416, 5421, 5426, 5431,
     5436, 5441, 5446, 5451, 5456, 5461, 5466, 5475, 5480, 5485,

     5493, 5496, 5496, 5501, 5506, 5511, 5516, 5521, 5526, 5531,
     5536, 5541, 5546, 5551, 5556, 5561, 5566, 5571, 5576, 5581,
     5586, 5591, 5602, 5607, 5612, 5617, 5622, 5627, 5632, 5643,
     5648, 5653, 5658, 5663, 5668, 5673, 5678, 5686, 5686, 5691,
     5696, 5701, 5706, 5711, 5716, 5721, 5726, 5737, 5742, 5747,
     5758, 5763, 5768, 5773, 5782, 5793, 5804
    } ;

static yyconst flex_int16_t yy_def[858] =
    {   0,
      625,    1,  625,  625,  625,  625,  625,  626,  627,  628,
      625,  625,  625,  625,  625,  625,  625,  625,  629,  630,
      625,   21,   21,   21,   21,  625,  625,  625,  625,   21,
      631,  632,  631,  631,  633,  634,  635,  635,  625,  636,
      625,  637,  638,  638,  639,  625,  625,  625,  640,  625,
      625,  626,  625,  625,  641,  642,  643,  625,  644,  625,
      645,  625,  646,  625,  647,  648,  649,  650,  625,  651,
      625,  652,  625,  653,  625,  654,  625,  625,  655,  656,
      657,  625,  658,  625,  659,  625,  660,  625,  625,  625,
      625,  625,  625,  625,  625,   95,  625,  661,  662,  661,

      661,  663,  664,  665,  665,  625,  666,  625,  667,  668,
      668,  669,  625,  625,  625,  670,  671,  625,  625,  672,
      673,  674,  625,  675,  625,  676,  625,  677,  625,  678,
      678,  678,  625,  133,  625,  133,  679,  680,  679,  679,
      679,  681,  682,  625,  683,  683,  683,  684,  685,  625,
      686,  687,  687,  688,  625,  625,  625,  689,  133,  133,
      133,  133,  625,  625,  625,  625,  133,  133,  133,  133,
      133,  133,  133,  690,  691,  692,  692,  692,  693,  694,
      694,  692,  695,  625,  696,  697,  625,  698,  699,  625,
      625,  700,  625,  701,  702,  701,  701,  703,  704,  705,

      706,  625,  707,  708,  707,  707,  709,  710,  711,  625,
      712,  713,  625,  625,  714,  625,  715,  716,  715,  715,
      717,  718,  719,  625,  625,  625,  625,  625,  625,  625,
      230,  230,  230,  625,  720,  721,  720,  720,  720,  722,
      723,  625,  724,  724,  724,  725,  726,  625,  727,  728,
      728,  729,  625,  625,  625,  730,  230,  230,  230,  230,
      230,  230,  230,  731,  732,  733,  733,  733,  734,  735,
      735,  733,  736,  625,  737,  738,  625,  625,  739,  625,
      740,  741,  740,  740,  742,  743,  744,  745,  746,  746,
      625,  291,  291,  291,  291,  291,  291,  291,  291,  747,

      748,  749,  749,  749,  750,  751,  751,  749,  752,  625,
      753,  754,  291,  291,  291,  291,  625,  755,  756,  755,
      755,  757,  758,  759,  759,  625,  760,  625,  761,  762,
      762,  763,  625,  625,  625,  764,  291,  291,  291,  291,
      291,  765,  765,  766,  766,  625,  767,  768,  769,  625,
      770,  625,  771,  625,  772,  625,  625,  625,  773,  774,
      774,  775,  776,  777,  777,  778,  779,  779,  625,  780,
      781,  782,  625,  783,  625,  784,  625,  785,  625,  625,
      625,  786,  787,  787,  788,  625,  625,  625,  625,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  789,  790,

      791,  791,  791,  792,  793,  793,  791,  794,  625,  795,
      796,  389,  389,  389,  389,  389,  797,  797,  625,  625,
      798,  799,  799,  800,  801,  802,  802,  625,  428,  428,
      428,  428,  803,  803,  428,  428,  428,  428,  625,  439,
      439,  804,  805,  804,  804,  804,  806,  807,  625,  808,
      808,  808,  809,  810,  625,  811,  812,  812,  813,  625,
      625,  625,  814,  439,  439,  439,  439,  439,  439,  815,
      816,  817,  817,  817,  818,  819,  819,  817,  820,  625,
      821,  822,  625,  823,  823,  625,  625,  824,  625,  825,
      826,  825,  825,  827,  828,  829,  625,  625,  830,  830,

      625,  625,  831,  625,  832,  833,  832,  832,  834,  835,
      836,  625,  625,  625,  514,  514,  514,  514,  837,  837,
      514,  625,  625,  838,  838,  483,  483,  483,  625,  529,
      529,  529,  529,  529,  529,  529,  529,  839,  840,  841,
      841,  841,  842,  843,  843,  841,  844,  625,  845,  846,
      529,  529,  529,  529,  529,  847,  847,  625,  625,  625,
      848,  849,  849,  850,  625,  625,  625,  625,  625,  851,
      852,  852,  853,  625,  625,  514,  625,  625,  838,  483,
      529,  529,  529,  529,  529,  854,  854,  529,  625,  625,
      625,  625,  625,  625,  625,  855,  838,  529,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  856,  625,  857,  855,
      625,  625,  848,  851,    0,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625
    } ;

static yyconst flex_int16_t yy_nxt[5916] =
    {   0,
        4,    5,    6,    7,    5,    4,    8,    9,    4,    4,
        4,   10,   11,   12,    4,   13,   14,   13,   15,    4,
       16,   17,   18,   19,    4,    4,    4,   20,   21,   22,
       21,   21,   23,   21,   21,   21,   24,   21,   21,   25,
       21,   21,   26,    4,   27,   28,   29,   30,   22,   21,
       21,   23,   21,   21,   21,   21,   24,   21,   21,   25,
       21,   21,    4,    4,    4,   31,   32,   33,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   34,   35,   35,
       36,    4,    4,   37,   38,    4,   39,   40,   41,   42,
       43,   44,   45,   46,    4,   47,   48,   49,    4,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   51,   50,
       50,   53,   89,   92,   90,   90,  131,  159,  160,  161,
      162,  293,  130,  132,  288,  530,   93,  163,  163,  163,
      163,  288,  291,  172,  367,  131,  159,  160,  172,  161,
      162,   96,  226,  132,  226,   93,   96,  227,   54,  168,
      168,  168,  168,  168,  168,  168,  169,  169,  169,  169,
      169,  169,  169,  170,  170,  170,  167,  167,  344,  464,
      164,  465,  173,  173,  173,   55,  173,  174,  174,  174,
      174,  174,  174,  174,  544,   56,  439,   57,   57,   57,
       57,   57,   57,   58,   59,   59,   59,   59,   60,   61,

       61,   62,   63,   64,   66,  183,  183,  184,   50,   50,
       50,   50,  529,  288,   67,  391,   68,   68,   68,   68,
       68,   68,   69,   70,   70,   70,   70,   71,   72,   72,
       73,   74,   75,   77,  176,  177,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  179,  179,  179,  179,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
       50,   50,   50,   50,  387,   78,  194,  194,  194,  194,
      194,  194,  194,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  200,  200,  200,  200,  200,  200,  273,
      273,  274,   79,  203,  203,  203,  203,  203,  203,  203,

      387,  476,   80,  292,   81,   81,   81,   81,   81,   81,
       82,   83,   83,   83,   83,   84,   85,   85,   86,   87,
       88,   94,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,   95,   95,  209,  209,  209,  209,  209,  209,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  277,   97,  313,  117,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  278,  314,  313,   98,   99,  100,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  101,
      102,  102,  103,  258,  314,  104,  105,  259,  106,  107,

      108,  109,  110,  111,  112,  113,  405,  114,  115,  116,
      118,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  217,  217,  217,  217,  217,  217,  217,  119,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  223,
      223,  223,  223,  223,  223,  120,  259,  259,  259,  259,
      259,  259,  259,  230,  390,  121,  316,  122,  122,  122,
      122,  122,  122,  123,  124,  124,  124,  124,  125,  126,
      126,  127,  128,  129,  133,  134,  316,  133,  135,  261,
      261,  261,  258,  258,  227,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  309,
      309,  310,  315,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  435,
      227,  315,  137,  138,  139,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  141,  142,  142,  143,  435,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
      155,  189,  156,  157,  158,  187,  189,   76,  263,  263,
      263,  212,  263,  408,  408,  409,  212,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,   92,   91,   90,
      437,  436,   65,  224,   52,  190,  288,  288,  189,   93,

       93,  167,   54,  189,  225,  213,  189,  289,  212,  437,
      189,  436,  189,  212,  189,  191,  212,  290,   93,   93,
      212,  438,  212,  225,  212,  214,  289,  392,  168,   55,
      260,  260,  260,  260,  260,  260,  260,  290,  390,   56,
      438,   57,   57,   57,   57,   57,   57,   58,   59,   59,
       59,   59,   60,   61,   61,   62,   63,   64,   66,  264,
      264,  264,  264,  264,  264,  264,  306,  133,   67,  291,
       68,   68,   68,   68,   68,   68,   69,   70,   70,   70,
       70,   71,   72,   72,   73,   74,   75,  210,  295,  295,
      295,  292,  292,  228,  266,  267,  298,  298,  298,  136,

      298,  228,  228,  228,  228,  228,  269,  269,  269,  269,
      281,  281,  281,  281,  281,  281,  281,  625,  288,   78,
      228,  228,  228,  228,  228,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  270,   79,  287,  287,  287,
      287,  287,  287,  469,  469,  469,   80,  469,   81,   81,
       81,   81,   81,   81,   82,   83,   83,   83,   83,   84,
       85,   85,   86,   87,   88,  229,  293,  293,  293,  293,
      293,  293,  293,  230,  231,  136,  230,  232,  136,  288,
      136,   91,  527,  136,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  211,  234,
      426,  527,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  528,  188,
      426,  235,  236,  237,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  239,  240,  240,  241,  528,  242,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      233,  254,  255,  256,  257,  233,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  233,
      180,  257,  166,  257,  233,  257,  257,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  294,  294,  294,

      294,  294,  294,  294,  165,  257,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,   91,  625,  302,  303,
      625,  257,  118,  300,  300,  300,  300,  300,  300,  300,
      305,  305,  305,  305,  317,  163,  163,  163,  163,  317,
      119,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  168,  168,  168,  168,  168,  625,  120,  341,  341,
      341,  341,  341,  479,  479,  480,  625,  121,  164,  122,
      122,  122,  122,  122,  122,  123,  124,  124,  124,  124,
      125,  126,  126,  127,  128,  129,  133,  134,  625,  133,

      135,  386,  625,  386,  625,  625,  387,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  547,  547,  548,  288,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  579,  625,  625,  137,  138,  139,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  141,  142,  142,  143,
      579,  144,  145,  146,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  441,  156,  157,  158,   94,  441,  288,
      224,  392,  392,  392,  392,  392,  392,  392,   95,   95,
      441,  225,  625,  427,  625,  441,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      225,   97,  427,  625,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      580,  625,  625,   98,   99,  100,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  101,  102,  102,  103,  625,
      580,  104,  105,  625,  106,  107,  108,  109,  110,  111,
      112,  113,  625,  114,  115,  116,  317,  393,  393,  393,
      393,  393,  393,  393,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  625,  625,
      625,  625,  317,  317,  317,  317,  317,  317,  317,  317,

      317,  317,  317,  317,  317,  317,  317,  317,  625,  625,
      625,  318,  319,  320,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  321,  322,  322,  323,  625,  625,  324,
      325,  625,  326,  327,  328,  329,  330,  331,  332,  333,
      357,  334,  335,  336,  345,  358,  625,  625,  357,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  394,  394,
      394,  391,  391,  625,  625,  401,  402,  357,  357,  357,
      357,  357,  358,  358,  358,  358,  358,  404,  404,  404,
      404,  346,  380,  397,  397,  397,  233,  397,  625,  625,
      380,  380,  380,  380,  380,  399,  399,  399,  399,  399,

      399,  399,  259,  259,  259,  259,  259,  625,  347,  380,
      380,  380,  380,  380,  625,  625,  625,  625,  348,  625,
      349,  349,  349,  349,  349,  349,  350,  351,  351,  351,
      351,  352,  353,  353,  354,  355,  356,  187,  381,  416,
      416,  416,  416,  416,  288,  625,  381,  381,  381,  381,
      381,   95,  293,  293,  293,  293,  293,  625,  524,   95,
       95,   95,   95,   95,  625,  381,  381,  381,  381,  381,
      625,  625,  625,  625,   54,  388,  625,  524,   95,   95,
       95,   95,   95,  388,  388,  388,  388,  388,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  531,  625,

      625,   55,  388,  388,  388,  388,  388,  625,  625,  529,
      625,   56,  625,   57,   57,   57,   57,   57,   57,   58,
       59,   59,   59,   59,   60,   61,   61,   62,   63,   64,
      368,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  419,  625,  625,  625,  625,  420,  625,  625,  419,
      419,  419,  419,  419,  420,  420,  420,  420,  420,  625,
      625,  625,  369,  432,  432,  432,  432,  432,  419,  419,
      419,  419,  419,  420,  420,  420,  420,  420,  465,  465,
      465,  465,  465,  465,  465,  625,  625,  625,  625,  370,
      466,  466,  466,  466,  466,  466,  466,  625,  625,  371,

      625,  372,  372,  372,  372,  372,  372,  373,  374,  374,
      374,  374,  375,  376,  376,  377,  378,  379,  210,  467,
      467,  467,  464,  464,  470,  470,  470,  470,  470,  470,
      470,  472,  473,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  475,  475,  475,  475,  625,  625,  625,
       78,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  490,  490,  490,  490,  490,  490,  490,  496,  496,
      496,  496,  496,  496,  625,  625,  625,   79,  505,  505,
      505,  505,  505,  505,  505,  625,  625,   80,  625,   81,
       81,   81,   81,   81,   81,   82,   83,   83,   83,   83,

       84,   85,   85,   86,   87,   88,  229,  511,  511,  511,
      511,  511,  511,  625,  230,  231,  625,  230,  232,  392,
      392,  392,  392,  392,  625,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  625,
      234,  625,  625,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  625,
      625,  625,  235,  236,  237,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  239,  240,  240,  241,  625,  242,
      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      253,  288,  254,  255,  256,  389,  625,  389,  389,  389,

      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      625,  625,  389,  625,  389,  597,  389,  389,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  518,  518,
      518,  518,  518,  625,  625,  597,  389,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  288,  625,  625,
      625,  625,  389,  133,  134,  625,  133,  135,  625,  625,
      625,  625,  525,  625,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  625,  625,
      625,  525,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  625,  625,

      625,  137,  138,  139,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  141,  142,  142,  143,  625,  144,  145,
      146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
      625,  156,  157,  158,  439,  440,  625,  439,  531,  531,
      531,  531,  531,  531,  531,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  625,
      625,  625,  625,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  625,
      625,  625,  442,  443,  444,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  446,  447,  447,  448,  625,  449,

      450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
      460,  485,  461,  462,  463,  345,  485,  625,  625,  625,
      625,  500,  625,  625,  625,  625,  500,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  532,  532,  532,
      532,  532,  532,  532,  625,  486,  625,  625,  485,  625,
      625,  625,  346,  485,  625,  501,  485,  625,  500,  625,
      485,  625,  485,  500,  485,  487,  500,  625,  625,  625,
      500,  625,  500,  625,  500,  502,  625,  625,  625,  347,
      533,  533,  533,  530,  530,  625,  625,  625,  625,  348,
      625,  349,  349,  349,  349,  349,  349,  350,  351,  351,

      351,  351,  352,  353,  353,  354,  355,  356,  484,  497,
      536,  536,  536,  441,  536,  625,  625,  497,  497,  497,
      497,  497,  498,  538,  538,  538,  538,  538,  538,  538,
      498,  498,  498,  498,  498,  625,  497,  497,  497,  497,
      497,  625,  625,  625,  625,  346,  625,  625,  625,  498,
      498,  498,  498,  498,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  540,  541,  465,  465,  465,  465,
      465,  625,  347,  625,  625,  625,  543,  543,  543,  543,
      625,  625,  348,  625,  349,  349,  349,  349,  349,  349,
      350,  351,  351,  351,  351,  352,  353,  353,  354,  355,

      356,  187,  512,  555,  555,  555,  555,  555,  625,  625,
      512,  512,  512,  512,  512,  513,  531,  531,  531,  531,
      531,  625,  625,  513,  513,  513,  513,  513,  625,  512,
      512,  512,  512,  512,  625,  625,  625,  625,   54,  232,
      625,  625,  513,  513,  513,  513,  513,  232,  232,  232,
      232,  232,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  625,  625,  625,   55,  232,  232,  232,  232,
      232,  625,  625,  625,  625,   56,  625,   57,   57,   57,
       57,   57,   57,   58,   59,   59,   59,   59,   60,   61,
       61,   62,   63,   64,   66,  585,  585,  585,  585,  585,

      625,  625,  625,  625,   67,  625,   68,   68,   68,   68,
       68,   68,   69,   70,   70,   70,   70,   71,   72,   72,
       73,   74,   75,  368,  625,  625,  625,  625,  625,  522,
      625,  625,  625,  625,  523,  625,  625,  522,  522,  522,
      522,  522,  523,  523,  523,  523,  523,  625,  625,  625,
      625,  625,  625,  625,  625,  369,  522,  522,  522,  522,
      522,  523,  523,  523,  523,  523,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  625,  625,  625,  625,
      625,  625,  370,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  371,  625,  372,  372,  372,  372,  372,  372,

      373,  374,  374,  374,  374,  375,  376,  376,  377,  378,
      379,  499,  625,  625,  625,  625,  625,  559,  625,  625,
      625,  625,  560,  625,  625,  559,  559,  559,  559,  559,
      560,  560,  560,  560,  560,  625,  625,  625,  625,  625,
      625,  625,  625,  369,  559,  559,  559,  559,  559,  560,
      560,  560,  560,  560,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      370,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      371,  625,  372,  372,  372,  372,  372,  372,  373,  374,
      374,  374,  374,  375,  376,  376,  377,  378,  379,  210,

      625,  625,  625,  625,  625,  565,  625,  625,  625,  625,
      566,  625,  625,  565,  565,  565,  565,  565,  566,  566,
      566,  566,  566,  625,  625,  625,  625,  625,  625,  625,
      625,   78,  565,  565,  565,  565,  565,  566,  566,  566,
      566,  566,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,   79,  625,
      625,  625,  625,  625,  625,  625,  625,  625,   80,  625,
       81,   81,   81,   81,   81,   81,   82,   83,   83,   83,
       83,   84,   85,   85,   86,   87,   88,  229,  625,  625,
      625,  625,  625,  625,  625,  230,  231,  625,  230,  232,

      625,  625,  625,  625,  625,  625,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      625,  234,  625,  625,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      625,  625,  625,  235,  236,  237,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  239,  240,  240,  241,  625,
      242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
      252,  253,  568,  254,  255,  256,  118,  569,  625,  625,
      568,  568,  568,  568,  568,  569,  569,  569,  569,  569,
      625,  625,  625,  625,  119,  625,  625,  625,  625,  568,

      568,  568,  568,  568,  569,  569,  569,  569,  569,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  120,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  121,  625,  122,  122,  122,  122,  122,  122,  123,
      124,  124,  124,  124,  125,  126,  126,  127,  128,  129,
      133,  134,  625,  133,  135,  625,  625,  625,  625,  625,
      625,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  625,  625,  625,  625,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  625,  625,  625,  137,  138,

      139,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      141,  142,  142,  143,  625,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  625,  156,  157,
      158,  439,  440,  625,  439,  625,  625,  625,  625,  625,
      625,  625,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  625,  625,  625,  625,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  625,  625,  625,  442,
      443,  444,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  446,  447,  447,  448,  625,  449,  450,  451,  452,

      453,  454,  455,  456,  457,  458,  459,  460,  625,  461,
      462,  463,  133,  134,  625,  133,  135,  625,  625,  625,
      625,  625,  625,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  625,  625,  625,
      625,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  625,  625,  625,
      137,  138,  139,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  141,  142,  142,  143,  625,  144,  145,  146,
      147,  148,  149,  150,  151,  152,  153,  154,  155,  574,
      156,  157,  158,  558,  575,  625,  625,  574,  574,  574,

      574,  574,  575,  575,  575,  575,  575,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  574,  574,  574,  574,
      574,  575,  575,  575,  575,  575,  625,  625,  625,  625,
      346,  577,  625,  625,  625,  625,  625,  625,  625,  577,
      577,  577,  577,  577,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  347,  577,  577,
      577,  577,  577,  625,  625,  625,  625,  348,  625,  349,
      349,  349,  349,  349,  349,  350,  351,  351,  351,  351,
      352,  353,  353,  354,  355,  356,  345,  578,  625,  625,
      625,  625,  625,  625,  625,  578,  578,  578,  578,  578,

      589,  625,  625,  625,  625,  625,  625,  625,  589,  589,
      589,  589,  589,  625,  578,  578,  578,  578,  578,  625,
      625,  625,  625,  346,  590,  625,  625,  589,  589,  589,
      589,  589,  590,  590,  590,  590,  590,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      347,  590,  590,  590,  590,  590,  625,  625,  625,  625,
      348,  625,  349,  349,  349,  349,  349,  349,  350,  351,
      351,  351,  351,  352,  353,  353,  354,  355,  356,  567,
      625,  625,  625,  625,  625,  591,  625,  625,  625,  625,
      189,  625,  625,  591,  591,  591,  591,  591,  189,  189,

      189,  189,  189,  625,  625,  625,  625,  625,  625,  625,
      625,  369,  591,  591,  591,  591,  591,  189,  189,  189,
      189,  189,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  370,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  371,  625,
      372,  372,  372,  372,  372,  372,  373,  374,  374,  374,
      374,  375,  376,  376,  377,  378,  379,  368,  625,  625,
      625,  625,  625,  592,  625,  625,  625,  625,  593,  625,
      625,  592,  592,  592,  592,  592,  593,  593,  593,  593,
      593,  625,  625,  625,  625,  625,  625,  625,  625,  369,

      592,  592,  592,  592,  592,  593,  593,  593,  593,  593,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  370,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  371,  625,  372,  372,
      372,  372,  372,  372,  373,  374,  374,  374,  374,  375,
      376,  376,  377,  378,  379,  229,  625,  625,  625,  625,
      625,  625,  625,  230,  231,  625,  230,  232,  625,  625,
      625,  625,  625,  625,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  625,  234,
      625,  625,  233,  233,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  625,  625,
      625,  235,  236,  237,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  239,  240,  240,  241,  625,  242,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      625,  254,  255,  256,  439,  440,  625,  439,  625,  625,
      625,  625,  625,  625,  625,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  625,
      625,  625,  625,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  625,
      625,  625,  442,  443,  444,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  446,  447,  447,  448,  625,  449,
      450,  451,  452,  453,  454,  455,  456,  457,  458,  459,
      460,  594,  461,  462,  463,  345,  212,  625,  625,  594,
      594,  594,  594,  594,  212,  212,  212,  212,  212,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  594,  594,
      594,  594,  594,  212,  212,  212,  212,  212,  625,  625,
      625,  625,  346,  595,  625,  625,  625,  625,  625,  625,
      625,  595,  595,  595,  595,  595,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  347,
      595,  595,  595,  595,  595,  625,  625,  625,  625,  348,

      625,  349,  349,  349,  349,  349,  349,  350,  351,  351,
      351,  351,  352,  353,  353,  354,  355,  356,  368,  625,
      625,  625,  625,  625,  596,  625,  625,  625,  625,  599,
      625,  625,  596,  596,  596,  596,  596,  599,  599,  599,
      599,  599,  625,  625,  625,  625,  625,  625,  625,  625,
      369,  596,  596,  596,  596,  596,  599,  599,  599,  599,
      599,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  370,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  371,  625,  372,
      372,  372,  372,  372,  372,  373,  374,  374,  374,  374,

      375,  376,  376,  377,  378,  379,  600,  625,  625,  625,
      625,  601,  625,  625,  600,  600,  600,  600,  600,  601,
      601,  601,  601,  601,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  600,  600,  600,  600,  600,  601,  601,
      601,  601,  601,  602,  625,  625,  625,  625,  603,  625,
      625,  602,  602,  602,  602,  602,  603,  603,  603,  603,
      603,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      602,  602,  602,  602,  602,  603,  603,  603,  603,  603,
      604,  625,  625,  625,  625,  605,  625,  625,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  604,  604,  604,
      604,  604,  605,  605,  605,  605,  605,  118,  606,  625,
      625,  625,  625,  625,  625,  625,  606,  606,  606,  606,
      606,  625,  625,  625,  625,  119,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  606,  606,  606,  606,  606,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  120,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  121,  625,  122,  122,  122,  122,  122,  122,
      123,  124,  124,  124,  124,  125,  126,  126,  127,  128,
      129,  485,  625,  625,  625,  625,  607,  625,  625,  485,

      485,  485,  485,  485,  607,  607,  607,  607,  607,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  485,  485,
      485,  485,  485,  607,  607,  607,  607,  607,  608,  625,
      625,  625,  625,  500,  625,  625,  608,  608,  608,  608,
      608,  500,  500,  500,  500,  500,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  608,  608,  608,  608,  608,
      500,  500,  500,  500,  500,  609,  625,  625,  625,  625,
      610,  625,  625,  609,  609,  609,  609,  609,  610,  610,
      610,  610,  610,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  609,  609,  609,  609,  609,  610,  610,  610,

      610,  610,  611,  625,  625,  625,  625,  612,  625,  625,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  611,
      611,  611,  611,  611,  612,  612,  612,  612,  612,  613,
      625,  625,  625,  625,  614,  625,  625,  613,  613,  613,
      613,  613,  614,  614,  614,  614,  614,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  613,  613,  613,  613,
      613,  614,  614,  614,  614,  614,  615,  625,  625,  625,
      625,  616,  625,  625,  615,  615,  615,  615,  615,  616,
      616,  616,  616,  616,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  615,  615,  615,  615,  615,  616,  616,
      616,  616,  616,  617,  625,  625,  625,  625,  618,  625,
      625,  617,  617,  617,  617,  617,  618,  618,  618,  618,
      618,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      617,  617,  617,  617,  617,  618,  618,  618,  618,  618,
      619,  625,  625,  625,  625,  620,  625,  625,  619,  619,
      619,  619,  619,  620,  620,  620,  620,  620,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  619,  619,  619,
      619,  619,  620,  620,  620,  620,  620,  621,  625,  625,
      625,  625,  625,  622,  625,  621,  621,  621,  621,  621,

      623,  622,  622,  622,  622,  622,  625,  625,  623,  623,
      623,  623,  623,  625,  621,  621,  621,  621,  621,  187,
      622,  622,  622,  622,  622,  625,  625,  623,  623,  623,
      623,  623,  624,  625,  625,  625,  625,  625,  625,  625,
      624,  624,  624,  624,  624,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,   54,  625,  625,  624,
      624,  624,  624,  624,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,   55,  625,  625,  625,  625,  625,  625,
      625,  625,  625,   56,  625,   57,   57,   57,   57,   57,

       57,   58,   59,   59,   59,   59,   60,   61,   61,   62,
       63,   64,  210,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,   78,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,   79,  625,  625,  625,  625,  625,  625,  625,  625,
      625,   80,  625,   81,   81,   81,   81,   81,   81,   82,
       83,   83,   83,   83,   84,   85,   85,   86,   87,   88,

      118,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  119,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  120,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  121,  625,  122,  122,  122,
      122,  122,  122,  123,  124,  124,  124,  124,  125,  126,
      126,  127,  128,  129,  345,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  346,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  347,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  348,  625,
      349,  349,  349,  349,  349,  349,  350,  351,  351,  351,
      351,  352,  353,  353,  354,  355,  356,  368,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  369,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  370,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  371,  625,  372,  372,
      372,  372,  372,  372,  373,  374,  374,  374,  374,  375,
      376,  376,  377,  378,  379,   52,  625,   52,   52,   52,
       52,  625,   52,  625,  625,   52,   65,  625,   65,   65,
       65,   65,  625,   65,  625,  625,   65,   76,  625,   76,
       76,   76,   76,  625,   76,  625,  625,   76,  117,  117,
      117,  117,  625,  117,  625,  625,  117,  167,  167,  167,

      167,  167,  168,  168,  168,  168,  168,  170,  170,  170,
      170,  170,  171,  171,  171,  171,  171,  172,  172,  625,
      172,  172,  173,  173,  173,  173,  173,  175,  175,  175,
      175,  175,  178,  178,  178,  178,  178,  181,  181,  181,
      181,  181,  186,  186,  186,  186,  186,  192,  192,  192,
      192,  193,  193,  193,   52,   52,   52,   52,   52,  195,
      195,  195,  195,  195,  197,  197,  197,  197,  197,  199,
      199,  199,  199,  199,   65,  625,   65,   65,   65,   65,
      625,   65,  625,  625,   65,  201,  201,  201,  201,  202,
      202,  202,   65,   65,   65,   65,   65,  204,  204,  204,

      204,  204,  206,  206,  206,  206,  206,  208,  208,  208,
      208,  208,   76,  625,   76,   76,   76,   76,  625,   76,
      625,  625,   76,  215,  215,  215,  215,  216,  216,  216,
       76,   76,   76,   76,   76,  218,  218,  218,  218,  218,
      220,  220,  220,  220,  220,  222,  222,  222,  222,  222,
      258,  258,  258,  258,  258,  259,  259,  259,  259,  259,
      261,  261,  261,  261,  261,  262,  262,  262,  262,  262,
       96,   96,  625,   96,   96,  263,  263,  263,  263,  263,
      265,  265,  265,  265,  265,  268,  268,  268,  268,  268,
      271,  271,  271,  271,  271,  276,  276,  276,  276,  276,

      117,  117,  117,  117,  625,  117,  625,  625,  117,  279,
      279,  279,  279,  280,  280,  280,  117,  117,  117,  117,
      117,  282,  282,  282,  282,  282,  284,  284,  284,  284,
      284,  286,  286,  286,  286,  286,  130,  625,  130,  292,
      292,  292,  292,  292,  293,  293,  293,  293,  293,  295,
      295,  295,  295,  295,  296,  296,  296,  296,  296,  136,
      136,  625,  136,  136,  297,  297,  297,  297,  297,  299,
      299,  299,  299,  299,  301,  301,  301,  301,  301,  304,
      304,  304,  304,  304,  307,  307,  307,  307,  307,  312,
      312,  312,  312,  312,  173,  173,  173,  173,  173,  337,

      337,  337,  337,  337,  167,  167,  167,  167,  167,  338,
      338,  338,  338,  338,  339,  339,  339,  339,  339,  340,
      340,  340,  340,  340,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  344,  344,  344,  344,  344,  344,
      625,  344,  625,  625,  344,   52,  625,   52,   52,   52,
       52,  625,   52,  625,  625,   52,  193,  193,  193,  193,
      193,   52,   52,   52,   52,   52,  359,  359,  359,  359,
      359,  360,  360,  360,  360,  360,  361,  361,  361,  361,
      361,  362,  362,  362,  362,  362,  202,  202,  202,  202,
      202,   65,   65,   65,   65,   65,  363,  363,  363,  363,

      363,  364,  364,  364,  364,  364,  365,  365,  365,  365,
      365,  366,  366,  366,  366,  366,  367,  367,  367,  367,
      367,  367,  625,  367,  625,  625,  367,   76,  625,   76,
       76,   76,   76,  625,   76,  625,  625,   76,  216,  216,
      216,  216,  216,   76,   76,   76,   76,   76,  382,  382,
      382,  382,  382,  383,  383,  383,  383,  383,  384,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  391,  391,
      391,  391,  391,  392,  392,  392,  392,  392,  394,  394,
      394,  394,  394,  395,  395,  395,  395,  395,  233,  233,
      625,  233,  233,  396,  396,  396,  396,  396,  398,  398,

      398,  398,  398,  400,  400,  400,  400,  400,  403,  403,
      403,  403,  403,  406,  406,  406,  406,  406,  411,  411,
      411,  411,  411,  263,  263,  263,  263,  263,  412,  412,
      412,  412,  412,  258,  258,  258,  258,  258,  413,  413,
      413,  413,  413,  414,  414,  414,  414,  414,  415,  415,
      415,  415,  415,  417,  417,  417,  417,  417,  418,  418,
      418,  418,  418,  280,  280,  280,  280,  280,  117,  117,
      117,  117,  117,  421,  421,  421,  421,  421,  422,  422,
      422,  422,  422,  423,  423,  423,  423,  423,  424,  424,
      424,  424,  424,  425,  425,  130,  625,  130,  299,  299,

      299,  299,  299,  428,  428,  428,  428,  428,  292,  292,
      292,  292,  292,  429,  429,  429,  429,  429,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  433,  433,
      433,  433,  433,  434,  434,  434,  434,  434,  464,  464,
      464,  464,  464,  465,  465,  465,  465,  465,  467,  467,
      467,  467,  467,  468,  468,  468,  468,  468,  317,  317,
      625,  317,  317,  469,  469,  469,  469,  469,  471,  471,
      471,  471,  471,  474,  474,  474,  474,  474,  477,  477,
      477,  477,  477,  482,  482,  482,  482,  482,  483,  483,
      483,  483,  483,  344,  344,  344,  344,  344,  344,  625,

      344,  625,  625,  344,  488,  488,  488,  488,  489,  489,
      489,  344,  344,  344,  344,  344,  491,  491,  491,  491,
      491,  493,  493,  493,  493,  493,  495,  495,  495,  495,
      495,   52,  625,   52,   52,   52,   52,  625,   52,  625,
      625,   52,   52,   52,   52,   52,   52,  193,  193,  193,
      193,  193,   65,  625,   65,   65,   65,   65,  625,   65,
      625,  625,   65,   65,   65,   65,   65,   65,  202,  202,
      202,  202,  202,  367,  367,  367,  367,  367,  367,  625,
      367,  625,  625,  367,  503,  503,  503,  503,  504,  504,
      504,  367,  367,  367,  367,  367,  506,  506,  506,  506,

      506,  508,  508,  508,  508,  508,  510,  510,  510,  510,
      510,   76,  625,   76,   76,   76,   76,  625,   76,  625,
      625,   76,   76,   76,   76,   76,   76,  216,  216,  216,
      216,  216,  398,  398,  398,  398,  398,  514,  514,  514,
      514,  514,  391,  391,  391,  391,  391,  515,  515,  515,
      515,  515,  516,  516,  516,  516,  516,  517,  517,  517,
      517,  517,  519,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  521,  521,  521,  521,  521,  117,  117,  117,
      117,  625,  117,  625,  625,  117,  117,  117,  117,  117,
      117,  280,  280,  280,  280,  280,  425,  425,  425,  130,

      625,  130,  526,  526,  526,  526,  526,  530,  530,  530,
      530,  530,  531,  531,  531,  531,  531,  533,  533,  533,
      533,  533,  534,  534,  534,  534,  534,  441,  441,  625,
      441,  441,  535,  535,  535,  535,  535,  537,  537,  537,
      537,  537,  539,  539,  539,  539,  539,  542,  542,  542,
      542,  542,  545,  545,  545,  545,  545,  550,  550,  550,
      550,  550,  469,  469,  469,  469,  469,  551,  551,  551,
      551,  551,  464,  464,  464,  464,  464,  552,  552,  552,
      552,  552,  553,  553,  553,  553,  553,  554,  554,  554,
      554,  554,  556,  556,  556,  556,  556,  557,  557,  557,

      557,  557,  344,  344,  344,  344,  344,  344,  625,  344,
      625,  625,  344,  489,  489,  489,  489,  489,  344,  344,
      344,  344,  344,  561,  561,  561,  561,  561,  562,  562,
      562,  562,  562,  563,  563,  563,  563,  563,  564,  564,
      564,  564,  564,  367,  367,  367,  367,  367,  367,  625,
      367,  625,  625,  367,  504,  504,  504,  504,  504,  367,
      367,  367,  367,  367,  570,  570,  570,  570,  570,  571,
      571,  571,  571,  571,  572,  572,  572,  572,  572,  573,
      573,  573,  573,  573,  576,  576,  576,  576,  576,  130,
      625,  130,  537,  537,  537,  537,  537,  581,  581,  581,

      581,  581,  530,  530,  530,  530,  530,  582,  582,  582,
      582,  582,  583,  583,  583,  583,  583,  584,  584,  584,
      584,  584,  586,  586,  586,  586,  586,  587,  587,  587,
      587,  587,  588,  588,  588,  588,  588,  344,  344,  344,
      344,  344,  344,  625,  344,  625,  625,  344,  344,  344,
      344,  344,  344,  489,  489,  489,  489,  489,  367,  367,
      367,  367,  367,  367,  625,  367,  625,  625,  367,  367,
      367,  367,  367,  367,  504,  504,  504,  504,  504,  598,
      598,  598,  598,  598,  117,  117,  117,  117,  625,  117,
      625,  625,  117,   52,  625,   52,   52,   52,   52,  625,

       52,  625,  625,   52,   76,  625,   76,   76,   76,   76,
      625,   76,  625,  625,   76,    3,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625
    } ;

static yyconst flex_int16_t yy_chk[5916] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,

        5,    5,    5,    6,    6,    6,    6,    7,    7,    7,
        7,    8,   13,   16,   13,   16,   20,   22,   23,   24,
       25,  302,  630,   20,  597,  544,   16,   26,   26,   26,
       26,  524,  302,   38,  504,   20,   22,   23,   38,   24,
       25,  105,   93,   20,   93,   16,  105,   93,    8,   33,
       33,   33,   33,   33,   33,   33,   34,   34,   34,   34,
       34,   34,   34,   36,   36,   36,   36,   36,  489,  476,
       26,  472,   39,   39,   39,    8,   39,   41,   41,   41,
       41,   41,   41,   41,  458,    8,  449,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    9,   47,   47,   47,   50,   50,
       50,   50,  442,  425,    9,  405,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,   43,   43,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   43,   43,   43,   43,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       51,   51,   51,   51,  387,   10,   58,   58,   58,   58,
       58,   58,   58,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   64,   64,   64,   64,   64,   64,  114,
      114,  114,   10,   69,   69,   69,   69,   69,   69,   69,

      386,  331,   10,  306,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   17,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   17,   17,   75,   75,   75,   75,   75,   75,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,  119,   17,  159,  280,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,  119,  160,  159,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,  270,  160,   17,   17,  266,   17,   17,

       17,   17,   17,   17,   17,   17,  251,   17,   17,   17,
       19,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   82,   82,   82,   82,   82,   82,   82,   19,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   88,
       88,   88,   88,   88,   88,   19,  100,  100,  100,  100,
      100,  100,  100,  242,  235,   19,  162,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   21,   21,  162,   21,   21,  103,
      103,  103,  103,  103,  227,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,  156,
      156,  156,  161,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,  313,
      226,  161,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,  313,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   54,   21,   21,   21,   52,   54,  216,  106,  106,
      106,   78,  106,  254,  254,  254,   78,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   90,   91,   90,
      315,  314,  202,   92,  193,   54,  131,  132,   54,   91,

       90,  180,   52,   54,   92,   78,   54,  131,   78,  315,
       54,  314,   54,   78,   54,   54,   78,  132,   91,   90,
       78,  316,   78,   92,   78,   78,  131,  401,  176,   52,
      101,  101,  101,  101,  101,  101,  101,  132,  401,   52,
      316,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   65,  108,
      108,  108,  108,  108,  108,  108,  153,  144,   65,  137,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   76,  143,  143,
      143,  143,  143,   94,  110,  110,  148,  148,  148,  148,

      148,   94,   94,   94,   94,   94,  110,  110,  110,  110,
      123,  123,  123,  123,  123,  123,  123,  134,  130,   76,
       94,   94,   94,   94,   94,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  111,   76,  129,  129,  129,
      129,  129,  129,  326,  326,  326,   76,  326,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   95,  139,  139,  139,  139,
      139,  139,  139,   95,   95,  146,   95,   95,  147,  289,
      146,   89,  436,  147,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   77,   95,
      289,  436,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  437,   53,
      289,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  437,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      244,   95,   95,   95,   97,  244,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,  245,
       44,   97,   29,   97,  245,   97,   97,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  141,  141,  141,

      141,  141,  141,  141,   28,   97,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,   15,    3,  152,  152,
        0,   97,  117,  150,  150,  150,  150,  150,  150,  150,
      152,  152,  152,  152,  325,  163,  163,  163,  163,  325,
      117,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  177,  177,  177,  177,  177,    0,  117,  184,  184,
      184,  184,  184,  334,  334,  334,    0,  117,  163,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  133,  133,    0,  133,

      133,  225,    0,  225,    0,    0,  225,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  461,  461,  461,  525,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  525,    0,    0,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      525,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  451,  133,  133,  133,  135,  451,  290,
      224,  237,  237,  237,  237,  237,  237,  237,  135,  135,
      452,  224,    0,  290,    0,  452,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      224,  135,  290,    0,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      528,    0,    0,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,    0,
      528,  135,  135,    0,  135,  135,  135,  135,  135,  135,
      135,  135,    0,  135,  135,  135,  166,  239,  239,  239,
      239,  239,  239,  239,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,    0,    0,
        0,    0,  166,  166,  166,  166,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  166,  166,  166,    0,    0,
        0,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,    0,    0,  166,
      166,    0,  166,  166,  166,  166,  166,  166,  166,  166,
      190,  166,  166,  166,  188,  191,    0,    0,  190,  190,
      190,  190,  190,  191,  191,  191,  191,  191,  241,  241,
      241,  241,  241,    0,    0,  250,  250,  190,  190,  190,
      190,  190,  191,  191,  191,  191,  191,  250,  250,  250,
      250,  188,  213,  246,  246,  246,  246,  246,    0,    0,
      213,  213,  213,  213,  213,  248,  248,  248,  248,  248,

      248,  248,  267,  267,  267,  267,  267,    0,  188,  213,
      213,  213,  213,  213,    0,    0,    0,    0,  188,    0,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  189,  214,  274,
      274,  274,  274,  274,  426,    0,  214,  214,  214,  214,
      214,  228,  303,  303,  303,  303,  303,    0,  426,  228,
      228,  228,  228,  228,    0,  214,  214,  214,  214,  214,
        0,    0,    0,    0,  189,  229,    0,  426,  228,  228,
      228,  228,  228,  229,  229,  229,  229,  229,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  540,    0,

        0,  189,  229,  229,  229,  229,  229,    0,    0,  540,
        0,  189,    0,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      211,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  277,    0,    0,    0,    0,  278,    0,    0,  277,
      277,  277,  277,  277,  278,  278,  278,  278,  278,    0,
        0,    0,  211,  310,  310,  310,  310,  310,  277,  277,
      277,  277,  277,  278,  278,  278,  278,  278,  320,  320,
      320,  320,  320,  320,  320,    0,    0,    0,    0,  211,
      321,  321,  321,  321,  321,  321,  321,    0,    0,  211,

        0,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  212,  323,
      323,  323,  323,  323,  328,  328,  328,  328,  328,  328,
      328,  330,  330,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  330,  330,  330,  330,    0,    0,    0,
      212,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  350,  350,  350,  350,  350,  350,  350,  356,  356,
      356,  356,  356,  356,    0,    0,    0,  212,  373,  373,
      373,  373,  373,  373,  373,    0,    0,  212,    0,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  230,  379,  379,  379,
      379,  379,  379,    0,  230,  230,    0,  230,  230,  402,
      402,  402,  402,  402,    0,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,    0,
      230,    0,    0,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,    0,
        0,    0,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,    0,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  579,  230,  230,  230,  234,    0,  234,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
        0,    0,  234,    0,  234,  579,  234,  234,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  409,  409,
      409,  409,  409,    0,    0,  579,  234,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  427,    0,    0,
        0,    0,  234,  291,  291,    0,  291,  291,    0,    0,
        0,    0,  427,    0,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,    0,    0,
        0,  427,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,    0,    0,

        0,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,    0,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
        0,  291,  291,  291,  317,  317,    0,  317,  444,  444,
      444,  444,  444,  444,  444,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,    0,
        0,    0,    0,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,    0,
        0,    0,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,    0,  317,

      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  346,  317,  317,  317,  344,  346,    0,    0,    0,
        0,  369,    0,    0,    0,    0,  369,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  446,  446,  446,
      446,  446,  446,  446,    0,  346,    0,    0,  346,    0,
        0,    0,  344,  346,    0,  369,  346,    0,  369,    0,
      346,    0,  346,  369,  346,  346,  369,    0,    0,    0,
      369,    0,  369,    0,  369,  369,    0,    0,    0,  344,
      448,  448,  448,  448,  448,    0,    0,    0,    0,  344,
        0,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  345,  357,
      453,  453,  453,  453,  453,    0,    0,  357,  357,  357,
      357,  357,  358,  455,  455,  455,  455,  455,  455,  455,
      358,  358,  358,  358,  358,    0,  357,  357,  357,  357,
      357,    0,    0,    0,    0,  345,    0,    0,    0,  358,
      358,  358,  358,  358,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  457,  457,  473,  473,  473,  473,
      473,    0,  345,    0,    0,    0,  457,  457,  457,  457,
        0,    0,  345,    0,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  359,  380,  480,  480,  480,  480,  480,    0,    0,
      380,  380,  380,  380,  380,  381,  541,  541,  541,  541,
      541,    0,    0,  381,  381,  381,  381,  381,    0,  380,
      380,  380,  380,  380,    0,    0,    0,    0,  359,  388,
        0,    0,  381,  381,  381,  381,  381,  388,  388,  388,
      388,  388,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,    0,    0,    0,  359,  388,  388,  388,  388,
      388,    0,    0,    0,    0,  359,    0,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  363,  548,  548,  548,  548,  548,

        0,    0,    0,    0,  363,    0,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  367,    0,    0,    0,    0,    0,  419,
        0,    0,    0,    0,  420,    0,    0,  419,  419,  419,
      419,  419,  420,  420,  420,  420,  420,    0,    0,    0,
        0,    0,    0,    0,    0,  367,  419,  419,  419,  419,
      419,  420,  420,  420,  420,  420,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,    0,    0,    0,    0,
        0,    0,  367,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  367,    0,  367,  367,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  368,    0,    0,    0,    0,    0,  486,    0,    0,
        0,    0,  487,    0,    0,  486,  486,  486,  486,  486,
      487,  487,  487,  487,  487,    0,    0,    0,    0,    0,
        0,    0,    0,  368,  486,  486,  486,  486,  486,  487,
      487,  487,  487,  487,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      368,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      368,    0,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  382,

        0,    0,    0,    0,    0,  497,    0,    0,    0,    0,
      498,    0,    0,  497,  497,  497,  497,  497,  498,  498,
      498,  498,  498,    0,    0,    0,    0,    0,    0,    0,
        0,  382,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  382,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  382,    0,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  389,    0,    0,
        0,    0,    0,    0,    0,  389,  389,    0,  389,  389,

        0,    0,    0,    0,    0,    0,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
        0,  389,    0,    0,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
        0,    0,    0,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,    0,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  501,  389,  389,  389,  421,  502,    0,    0,
      501,  501,  501,  501,  501,  502,  502,  502,  502,  502,
        0,    0,    0,    0,  421,    0,    0,    0,    0,  501,

      501,  501,  501,  501,  502,  502,  502,  502,  502,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  421,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  421,    0,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      428,  428,    0,  428,  428,    0,    0,    0,    0,    0,
        0,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,    0,    0,    0,    0,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,    0,    0,    0,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,    0,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,    0,  428,  428,
      428,  439,  439,    0,  439,    0,    0,    0,    0,    0,
        0,    0,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,    0,    0,    0,    0,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,    0,    0,    0,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,    0,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,    0,  439,
      439,  439,  483,  483,    0,  483,  483,    0,    0,    0,
        0,    0,    0,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,    0,    0,    0,
        0,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,    0,    0,    0,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,    0,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  512,
      483,  483,  483,  484,  513,    0,    0,  512,  512,  512,

      512,  512,  513,  513,  513,  513,  513,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  512,  512,  512,  512,
      512,  513,  513,  513,  513,  513,    0,    0,    0,    0,
      484,  522,    0,    0,    0,    0,    0,    0,    0,  522,
      522,  522,  522,  522,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  484,  522,  522,
      522,  522,  522,    0,    0,    0,    0,  484,    0,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  485,  523,    0,    0,
        0,    0,    0,    0,    0,  523,  523,  523,  523,  523,

      559,    0,    0,    0,    0,    0,    0,    0,  559,  559,
      559,  559,  559,    0,  523,  523,  523,  523,  523,    0,
        0,    0,    0,  485,  560,    0,    0,  559,  559,  559,
      559,  559,  560,  560,  560,  560,  560,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      485,  560,  560,  560,  560,  560,    0,    0,    0,    0,
      485,    0,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  499,
        0,    0,    0,    0,    0,  565,    0,    0,    0,    0,
      566,    0,    0,  565,  565,  565,  565,  565,  566,  566,

      566,  566,  566,    0,    0,    0,    0,    0,    0,    0,
        0,  499,  565,  565,  565,  565,  565,  566,  566,  566,
      566,  566,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  499,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  499,    0,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  500,    0,    0,
        0,    0,    0,  568,    0,    0,    0,    0,  569,    0,
        0,  568,  568,  568,  568,  568,  569,  569,  569,  569,
      569,    0,    0,    0,    0,    0,    0,    0,    0,  500,

      568,  568,  568,  568,  568,  569,  569,  569,  569,  569,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  500,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  500,    0,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  514,    0,    0,    0,    0,
        0,    0,    0,  514,  514,    0,  514,  514,    0,    0,
        0,    0,    0,    0,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,    0,  514,
        0,    0,  514,  514,  514,  514,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  514,  514,  514,    0,    0,
        0,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,    0,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
        0,  514,  514,  514,  529,  529,    0,  529,    0,    0,
        0,    0,    0,    0,    0,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,    0,
        0,    0,    0,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,    0,
        0,    0,  529,  529,  529,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,    0,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  574,  529,  529,  529,  561,  575,    0,    0,  574,
      574,  574,  574,  574,  575,  575,  575,  575,  575,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  574,  574,
      574,  574,  574,  575,  575,  575,  575,  575,    0,    0,
        0,    0,  561,  577,    0,    0,    0,    0,    0,    0,
        0,  577,  577,  577,  577,  577,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  561,
      577,  577,  577,  577,  577,    0,    0,    0,    0,  561,

        0,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  570,    0,
        0,    0,    0,    0,  578,    0,    0,    0,    0,  589,
        0,    0,  578,  578,  578,  578,  578,  589,  589,  589,
      589,  589,    0,    0,    0,    0,    0,    0,    0,    0,
      570,  578,  578,  578,  578,  578,  589,  589,  589,  589,
      589,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  570,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  570,    0,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  590,    0,    0,    0,
        0,  591,    0,    0,  590,  590,  590,  590,  590,  591,
      591,  591,  591,  591,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  590,  590,  590,  590,  590,  591,  591,
      591,  591,  591,  592,    0,    0,    0,    0,  593,    0,
        0,  592,  592,  592,  592,  592,  593,  593,  593,  593,
      593,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      592,  592,  592,  592,  592,  593,  593,  593,  593,  593,
      594,    0,    0,    0,    0,  595,    0,    0,  594,  594,
      594,  594,  594,  595,  595,  595,  595,  595,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  594,  594,  594,
      594,  594,  595,  595,  595,  595,  595,  596,  599,    0,
        0,    0,    0,    0,    0,    0,  599,  599,  599,  599,
      599,    0,    0,    0,    0,  596,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  599,  599,  599,  599,  599,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  596,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  596,    0,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  600,    0,    0,    0,    0,  601,    0,    0,  600,

      600,  600,  600,  600,  601,  601,  601,  601,  601,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  600,  600,
      600,  600,  600,  601,  601,  601,  601,  601,  602,    0,
        0,    0,    0,  603,    0,    0,  602,  602,  602,  602,
      602,  603,  603,  603,  603,  603,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  602,  602,  602,  602,  602,
      603,  603,  603,  603,  603,  604,    0,    0,    0,    0,
      605,    0,    0,  604,  604,  604,  604,  604,  605,  605,
      605,  605,  605,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  604,  604,  604,  604,  604,  605,  605,  605,

      605,  605,  606,    0,    0,    0,    0,  607,    0,    0,
      606,  606,  606,  606,  606,  607,  607,  607,  607,  607,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  606,
      606,  606,  606,  606,  607,  607,  607,  607,  607,  608,
        0,    0,    0,    0,  609,    0,    0,  608,  608,  608,
      608,  608,  609,  609,  609,  609,  609,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  608,  608,  608,  608,
      608,  609,  609,  609,  609,  609,  610,    0,    0,    0,
        0,  611,    0,    0,  610,  610,  610,  610,  610,  611,
      611,  611,  611,  611,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  610,  610,  610,  610,  610,  611,  611,
      611,  611,  611,  612,    0,    0,    0,    0,  613,    0,
        0,  612,  612,  612,  612,  612,  613,  613,  613,  613,
      613,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      612,  612,  612,  612,  612,  613,  613,  613,  613,  613,
      614,    0,    0,    0,    0,  615,    0,    0,  614,  614,
      614,  614,  614,  615,  615,  615,  615,  615,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  614,  614,  614,
      614,  614,  615,  615,  615,  615,  615,  616,    0,    0,
        0,    0,    0,  618,    0,  616,  616,  616,  616,  616,

      621,  618,  618,  618,  618,  618,    0,    0,  621,  621,
      621,  621,  621,    0,  616,  616,  616,  616,  616,  617,
      618,  618,  618,  618,  618,    0,    0,  621,  621,  621,
      621,  621,  622,    0,    0,    0,    0,    0,    0,    0,
      622,  622,  622,  622,  622,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  617,    0,    0,  622,
      622,  622,  622,  622,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  617,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  617,    0,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  619,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  619,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  619,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  619,    0,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      620,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  620,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  620,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  620,    0,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  623,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  623,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  623,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  623,    0,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  624,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  624,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  624,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  624,    0,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  626,    0,  626,  626,  626,
      626,    0,  626,    0,    0,  626,  627,    0,  627,  627,
      627,  627,    0,  627,    0,    0,  627,  628,    0,  628,
      628,  628,  628,    0,  628,    0,    0,  628,  629,  629,
      629,  629,    0,  629,    0,    0,  629,  631,  631,  631,

      631,  631,  632,  632,  632,  632,  632,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  635,  635,    0,
      635,  635,  636,  636,  636,  636,  636,  637,  637,  637,
      637,  637,  638,  638,  638,  638,  638,  639,  639,  639,
      639,  639,  640,  640,  640,  640,  640,  641,  641,  641,
      641,  642,  642,  642,  643,  643,  643,  643,  643,  644,
      644,  644,  644,  644,  645,  645,  645,  645,  645,  646,
      646,  646,  646,  646,  647,    0,  647,  647,  647,  647,
        0,  647,    0,    0,  647,  648,  648,  648,  648,  649,
      649,  649,  650,  650,  650,  650,  650,  651,  651,  651,

      651,  651,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  654,    0,  654,  654,  654,  654,    0,  654,
        0,    0,  654,  655,  655,  655,  655,  656,  656,  656,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      659,  659,  659,  659,  659,  660,  660,  660,  660,  660,
      661,  661,  661,  661,  661,  662,  662,  662,  662,  662,
      663,  663,  663,  663,  663,  664,  664,  664,  664,  664,
      665,  665,    0,  665,  665,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  668,  668,  668,  668,  668,
      669,  669,  669,  669,  669,  670,  670,  670,  670,  670,

      671,  671,  671,  671,    0,  671,    0,    0,  671,  672,
      672,  672,  672,  673,  673,  673,  674,  674,  674,  674,
      674,  675,  675,  675,  675,  675,  676,  676,  676,  676,
      676,  677,  677,  677,  677,  677,  678,    0,  678,  679,
      679,  679,  679,  679,  680,  680,  680,  680,  680,  681,
      681,  681,  681,  681,  682,  682,  682,  682,  682,  683,
      683,    0,  683,  683,  684,  684,  684,  684,  684,  685,
      685,  685,  685,  685,  686,  686,  686,  686,  686,  687,
      687,  687,  687,  687,  688,  688,  688,  688,  688,  689,
      689,  689,  689,  689,  690,  690,  690,  690,  690,  691,

      691,  691,  691,  691,  692,  692,  692,  692,  692,  693,
      693,  693,  693,  693,  694,  694,  694,  694,  694,  695,
      695,  695,  695,  695,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  698,  698,  698,  698,  698,  698,
        0,  698,    0,    0,  698,  699,    0,  699,  699,  699,
      699,    0,  699,    0,    0,  699,  700,  700,  700,  700,
      700,  701,  701,  701,  701,  701,  702,  702,  702,  702,
      702,  703,  703,  703,  703,  703,  704,  704,  704,  704,
      704,  705,  705,  705,  705,  705,  706,  706,  706,  706,
      706,  707,  707,  707,  707,  707,  708,  708,  708,  708,

      708,  709,  709,  709,  709,  709,  710,  710,  710,  710,
      710,  711,  711,  711,  711,  711,  712,  712,  712,  712,
      712,  712,    0,  712,    0,    0,  712,  713,    0,  713,
      713,  713,  713,    0,  713,    0,    0,  713,  714,  714,
      714,  714,  714,  715,  715,  715,  715,  715,  716,  716,
      716,  716,  716,  717,  717,  717,  717,  717,  718,  718,
      718,  718,  718,  719,  719,  719,  719,  719,  720,  720,
      720,  720,  720,  721,  721,  721,  721,  721,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  724,  724,
        0,  724,  724,  725,  725,  725,  725,  725,  726,  726,

      726,  726,  726,  727,  727,  727,  727,  727,  728,  728,
      728,  728,  728,  729,  729,  729,  729,  729,  730,  730,
      730,  730,  730,  731,  731,  731,  731,  731,  732,  732,
      732,  732,  732,  733,  733,  733,  733,  733,  734,  734,
      734,  734,  734,  735,  735,  735,  735,  735,  736,  736,
      736,  736,  736,  737,  737,  737,  737,  737,  738,  738,
      738,  738,  738,  739,  739,  739,  739,  739,  740,  740,
      740,  740,  740,  741,  741,  741,  741,  741,  742,  742,
      742,  742,  742,  743,  743,  743,  743,  743,  744,  744,
      744,  744,  744,  745,  745,  746,    0,  746,  747,  747,

      747,  747,  747,  748,  748,  748,  748,  748,  749,  749,
      749,  749,  749,  750,  750,  750,  750,  750,  751,  751,
      751,  751,  751,  752,  752,  752,  752,  752,  753,  753,
      753,  753,  753,  754,  754,  754,  754,  754,  755,  755,
      755,  755,  755,  756,  756,  756,  756,  756,  757,  757,
      757,  757,  757,  758,  758,  758,  758,  758,  759,  759,
        0,  759,  759,  760,  760,  760,  760,  760,  761,  761,
      761,  761,  761,  762,  762,  762,  762,  762,  763,  763,
      763,  763,  763,  764,  764,  764,  764,  764,  765,  765,
      765,  765,  765,  766,  766,  766,  766,  766,  766,    0,

      766,    0,    0,  766,  767,  767,  767,  767,  768,  768,
      768,  769,  769,  769,  769,  769,  770,  770,  770,  770,
      770,  771,  771,  771,  771,  771,  772,  772,  772,  772,
      772,  773,    0,  773,  773,  773,  773,    0,  773,    0,
        0,  773,  774,  774,  774,  774,  774,  775,  775,  775,
      775,  775,  776,    0,  776,  776,  776,  776,    0,  776,
        0,    0,  776,  777,  777,  777,  777,  777,  778,  778,
      778,  778,  778,  779,  779,  779,  779,  779,  779,    0,
      779,    0,    0,  779,  780,  780,  780,  780,  781,  781,
      781,  782,  782,  782,  782,  782,  783,  783,  783,  783,

      783,  784,  784,  784,  784,  784,  785,  785,  785,  785,
      785,  786,    0,  786,  786,  786,  786,    0,  786,    0,
        0,  786,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  789,  789,  789,  789,  789,  790,  790,  790,
      790,  790,  791,  791,  791,  791,  791,  792,  792,  792,
      792,  792,  793,  793,  793,  793,  793,  794,  794,  794,
      794,  794,  795,  795,  795,  795,  795,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  798,  798,  798,
      798,    0,  798,    0,    0,  798,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  801,  801,  801,  802,

        0,  802,  803,  803,  803,  803,  803,  804,  804,  804,
      804,  804,  805,  805,  805,  805,  805,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  808,  808,    0,
      808,  808,  809,  809,  809,  809,  809,  810,  810,  810,
      810,  810,  811,  811,  811,  811,  811,  812,  812,  812,
      812,  812,  813,  813,  813,  813,  813,  814,  814,  814,
      814,  814,  815,  815,  815,  815,  815,  816,  816,  816,
      816,  816,  817,  817,  817,  817,  817,  818,  818,  818,
      818,  818,  819,  819,  819,  819,  819,  820,  820,  820,
      820,  820,  821,  821,  821,  821,  821,  822,  822,  822,

      822,  822,  823,  823,  823,  823,  823,  823,    0,  823,
        0,    0,  823,  824,  824,  824,  824,  824,  825,  825,
      825,  825,  825,  826,  826,  826,  826,  826,  827,  827,
      827,  827,  827,  828,  828,  828,  828,  828,  829,  829,
      829,  829,  829,  830,  830,  830,  830,  830,  830,    0,
      830,    0,    0,  830,  831,  831,  831,  831,  831,  832,
      832,  832,  832,  832,  833,  833,  833,  833,  833,  834,
      834,  834,  834,  834,  835,  835,  835,  835,  835,  836,
      836,  836,  836,  836,  837,  837,  837,  837,  837,  838,
        0,  838,  839,  839,  839,  839,  839,  840,  840,  840,

      840,  840,  841,  841,  841,  841,  841,  842,  842,  842,
      842,  842,  843,  843,  843,  843,  843,  844,  844,  844,
      844,  844,  845,  845,  845,  845,  845,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  848,  848,  848,
      848,  848,  848,    0,  848,    0,    0,  848,  849,  849,
      849,  849,  849,  850,  850,  850,  850,  850,  851,  851,
      851,  851,  851,  851,    0,  851,    0,    0,  851,  852,
      852,  852,  852,  852,  853,  853,  853,  853,  853,  854,
      854,  854,  854,  854,  855,  855,  855,  855,    0,  855,
        0,    0,  855,  856,    0,  856,  856,  856,  856,    0,

      856,    0,    0,  856,  857,    0,  857,  857,  857,  857,
        0,  857,    0,    0,  857,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625
    } ;

static yyconst flex_int16_t yy_rule_linenum[32] =
    {   0,
      111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
      121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
      143
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/TurtleSScanner.lpp"
/* $Id: TurtleSScanner.lpp,v 1.3 2008-10-03 07:06:04 eric Exp $ -*- mode: c++ -*- */
/** \file TurtleSScanner.ll Define the Flex lexical scanner */
#line 5 "lib/TurtleSScanner.lpp"

#include "TurtleSParser/TurtleSParser.hpp"
#include "TurtleSScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::TurtleSParser::token token;
typedef w3c_sw::TurtleSParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TurtleSFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "lib/TurtleSScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 2107 "lib/TurtleSScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 110 "lib/TurtleSScanner.lpp"

#line 2271 "lib/TurtleSScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 626 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 625 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 32 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 32 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 33 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 111 "lib/TurtleSScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 112 "lib/TurtleSScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 113 "lib/TurtleSScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 114 "lib/TurtleSScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 115 "lib/TurtleSScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 116 "lib/TurtleSScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 117 "lib/TurtleSScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 118 "lib/TurtleSScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 119 "lib/TurtleSScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 120 "lib/TurtleSScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 121 "lib/TurtleSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", true); return token::IT_true;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 122 "lib/TurtleSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", false); return token::IT_false;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 123 "lib/TurtleSScanner.lpp"
{return token::SPARQL_PREFIX;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 124 "lib/TurtleSScanner.lpp"
{return token::SPARQL_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 125 "lib/TurtleSScanner.lpp"
{return token::BASE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 126 "lib/TurtleSScanner.lpp"
{return token::PREFIX;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 127 "lib/TurtleSScanner.lpp"
{return token::RDF_TYPE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 128 "lib/TurtleSScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRIREF;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 129 "lib/TurtleSScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 130 "lib/TurtleSScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 131 "lib/TurtleSScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 132 "lib/TurtleSScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 133 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 134 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 135 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 136 "lib/TurtleSScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 137 "lib/TurtleSScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 138 "lib/TurtleSScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 139 "lib/TurtleSScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 140 "lib/TurtleSScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 142 "lib/TurtleSScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 143 "lib/TurtleSScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 149 "lib/TurtleSScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2553 "lib/TurtleSScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TurtleSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TurtleSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TurtleSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TurtleSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 626 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 626 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 625);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TurtleSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TurtleSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TurtleSfree((void *) b->yy_ch_buf  );

	TurtleSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TurtleSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TurtleSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TurtleSalloc(new_size  );

		else
			(yy_start_stack) = (int *) TurtleSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TurtleSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TurtleSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TurtleSfree (void * ptr )
{
	free( (char *) ptr );	/* see TurtleSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 149 "lib/TurtleSScanner.lpp"


/* END semantic actions for TurtleS terminals */

/* START TurtleSScanner */
namespace w3c_sw {

TurtleSScanner::TurtleSScanner (TurtleSDriver* driver, std::istream* in, std::ostream* out) : TurtleSFlexLexer(in, out), driver(driver) {  }
TurtleSScanner::~TurtleSScanner () {  }

TurtleSParser::token_type TurtleSScanner::typedLiteral (TurtleSParser::semantic_type*& yylval, TurtleSParser::token_type tok) {
    std::istringstream is(yytext);
    std::ostringstream normalized;

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	normalized << i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	normalized << f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	normalized << d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

TurtleSParser::token_type TurtleSScanner::unescape (TurtleSParser::semantic_type*& yylval, TurtleSParser::location_type*& yylloc, size_t skip, TurtleSParser::token_type tok){
    std::string* space = new std::string;
    YaccDriver::unescape(yytext+skip, yyleng-skip-skip, space, yylloc);
    yylval->p_string = space;
    return tok;
}


const URI* TurtleSScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index));
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void TurtleSScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END TurtleSScanner */

const URI* TurtleSScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}

} // END namespace w3c_sw

/* This implementation of TurtleSFlexLexer::yylex() is required to fill the
 * vtable of the class TurtleSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the TurtleSScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TurtleSFlexLexer::yylex()
{
    std::cerr << "in TurtleSFlexLexer::yylex() !" << std::endl;
    return 0;
}


