#line 2 "lib/TurtleSScanner.cpp"

#line 4 "lib/TurtleSScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer TurtleSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *TurtleSalloc (yy_size_t  );
void *TurtleSrealloc (void *,yy_size_t  );
void TurtleSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[624] =
    {   0,
        0,    0,   40,   38,    2,    1,    1,   38,    2,   38,
        5,    6,   13,    8,   14,    7,   20,   35,    9,   38,
       38,   38,   38,   38,   11,   12,   38,   38,   10,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,    2,    1,
        0,   32,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   33,    0,
       22,    0,   24,   21,   21,   20,    0,   36,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
       19,   19,    0,    0,   35,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   34,   15,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   32,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   23,   23,    0,   25,   25,    0,    0,   21,    0,
        0,   26,   36,    0,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   36,   36,   36,
       36,   36,   36,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   19,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   23,    0,    0,   28,    0,   25,    0,    0,
       27,    0,   26,    0,   26,   36,   36,   36,   36,   36,

       36,   36,   36,   36,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   36,   36,   36,
       36,   36,    0,    0,    0,    0,    0,    0,   19,   19,
       19,    0,    0,    0,    0,    0,    0,    0,    0,   16,
       37,    0,   37,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   37,   37,   37,   37,   37,
       37,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,    0,   28,    0,
       27,    0,   27,   36,   36,   36,   36,   36,    0,    0,
       36,    4,   19,    0,   17,   37,   37,   37,   37,   37,
       37,   37,   37,   37,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   37,   37,   37,
       37,   37,    0,    0,   30,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    0,    0,    0,    0,
        0,    0,   36,   19,   37,   37,   37,   37,   37,    0,
        0,   37,    0,    0,    0,    0,    0,    0,    3,   37,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    8,    8,    9,   10,
       11,    8,   12,   13,   14,   15,    8,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
        8,   20,    8,   21,   22,   23,   24,   24,   25,   26,
       27,   27,   28,   27,   27,   29,   27,   27,   27,   30,
       27,   31,   32,   33,   34,   27,   27,   35,   27,   27,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   43,

       44,   45,   46,   46,   47,   46,   46,   48,   46,   49,
       46,   50,   46,   51,   52,   53,   54,   46,   46,   55,
       46,   46,    1,    1,    1,    8,    8,   56,   57,   58,
       58,   58,   58,   59,   60,   60,   60,   60,   60,   61,
       61,   60,   62,   63,   63,   63,   63,   63,   63,   63,
       64,   65,   65,   65,   65,   65,   65,   65,   65,   66,
       66,   66,   66,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   68,   68,   68,   68,   68,
       68,   68,   69,   70,   70,   70,   70,   70,   70,   71,
       72,   73,   73,   74,   75,   76,   76,   76,   76,   76,

       76,   76,   76,   77,   78,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   80,   81,   82,   83,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   85,   86,   87,   88,
       89,   89,   89,   90,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73
    } ;

static yyconst flex_int32_t yy_meta[91] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    4,    3,    5,    3,    3,    1,    3,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    3,    1,    3,    1,    3,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    7,    7,    7,    7,    7,
        7,    8,    7,    9,    7,    7,    7,    7,    9,    7,
       10,   11,   12,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[855] =
    {   0,
        0,    0, 1153, 5149,   89, 5149, 1149,   89,  118,  200,
       94, 5149,   77, 5149,   85, 1119,   87,  275, 5149,  345,
       83,  422,   82,   76,  106, 5149, 1079, 1069,    0,    0,
        0,   58,   78,    0,   77,    0,   60,   84,    0,  115,
        0,  154, 1011,    0,  156,   74,  163,    0,  153, 5149,
      506, 1060,  343,    0,    0,    0,  172,    0,  189,    0,
      303,    0,  199,  535,    0,    0,    0,  197,    0,  457,
        0,  460,    0,  342,  617, 1054,  593,    0,    0,    0,
      342,    0,  477,    0,  481,    0,  498,  379, 5149, 1005,
      554,  996,  616,  362,  612,  618,  116,  694,    0,    0,

      504,  515,    0,  224,    0,   93,  536,    0,  597,    0,
      602,  953,    0,  728,  244,  731,    0,  784, 5149,    0,
        0,    0,  614,    0,  749,    0,  752,    0,  592,  994,
      811,  427,  861,  974,  935,    0,  918,    0,  770,    0,
      778,    0,  606,  886,    0,  322,  576,  643,    0,  959,
        0,  976,  891,    0,  978,  392,  985,    0,  347,  696,
     1056, 5149, 5149, 1079,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  838,  773,    0,    0,  842,    0,    0,
        0,  779,    0,    0, 5149, 1163, 1248, 1046, 1149,    0,
      844,    0,    0,    0,    0,    0,    0,    0,    0,  843,

        0,    0,    0,    0,    0,    0,    0, 5149, 1330, 1412,
     1154, 1185,    0,  816,    0,    0,    0,    0,    0,    0,
        0, 1048, 1049,  841, 1187, 1188,  940, 1063, 1189, 1064,
      764,  751, 1489,    0,    0,  634,    0, 1125,    0, 1159,
        0, 1013,  619,    0, 1191, 1192, 1028,    0, 1196,    0,
     1201,  631,    0, 1217,  664, 1223,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  600, 1228,    0,    0,  601,
        0,    0,    0, 1233,    0,    0,    0,  601,    0,    0,
        0,    0,    0,    0,    0,    0,  865, 1326, 1565,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  332,

     1243,    0,    0,  573,    0,    0,    0, 1273,    0,    0,
      848,  611, 1641,    0,    0, 1296, 1303,    0, 1278,    0,
     1252, 1303,    0, 1310,    0, 1327,  547,    0, 1366,  904,
     1369,    0,    0,    0,    0,    0,    0,    0,    0, 1725,
     1810, 1726,    0,    0,    0, 1319,    0, 1394,    0, 1397,
        0, 1386, 1801, 1812, 1895,    0,    0,    0, 1924,    0,
        0,    0, 2006, 2088, 1739,    0,    0,    0, 1409,    0,
     1693,    0, 1795,    0, 1680, 1886, 1897, 2170,    0,    0,
        0, 1387, 1559, 1494,  585,  584, 1646, 1717, 1753,  551,
      492,  479,  427,  426,  424, 2247,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  344, 1750,    0,    0,
      362,    0,    0,    0, 1761,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 2317,    0,    0,    0,  401, 1745,
     1825, 2394,    0,    0,    0,    0,    0,    0,  909,    0,
     2470,    0,    0,  333,    0, 1817,    0, 1887,    0, 1835,
      310,    0, 1305, 1714, 1846,    0, 1884,    0, 1960,  305,
        0, 1962, 1048, 1969,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  287, 1865,    0,    0,  275,    0,    0,
        0, 1890,    0,    0, 2546, 2630, 2715, 2028, 2085,    0,
      276,    0,    0,    0,    0,    0,    0,    0, 2090, 2167,

     2797, 2879, 2172, 2317,    0,  235,    0,    0,    0,    0,
        0,    0,    0, 2322, 2616,  255,  254,  245,  220,  175,
      173,  172,  144, 2956,    0,    0,    0,    0,    0,    0,
        0,  145, 2028,    0,    0, 3032,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1162, 1919,    0,    0,
       94,    0,    0,    0, 1977,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5149, 2621, 2652, 3116,    0,    0,
        0, 2706, 2717, 5149, 2741, 2794, 3198,    0,    0,    0,
     2799, 2876,    0, 1624,    0,    0,    0,    0,    0,    0,
        0,    0, 2881, 3102, 3107, 3138, 3195, 3200,  108,    0,

     3273, 3278, 3308, 3313, 3343, 3348, 3378, 3383, 3413, 3418,
     3448, 3453, 3483, 3488, 3518, 3558, 3529, 3640, 3559, 3564,
     3725, 3807, 5149, 3897, 3908, 3919, 3928,  115, 3933, 3938,
     3943, 3948, 3953, 3958, 3963, 3968, 3973, 3978, 3983, 3987,
     3990, 3995, 4000, 4005, 4016, 4021, 4025, 4028, 4033, 4038,
     4043, 4054, 4059, 4063, 4066, 4071, 4076, 4081, 4086, 4091,
     4096, 4101, 4106, 4111, 4116, 4121, 4126, 4131, 4140, 4145,
     4149, 4152, 4157, 4162, 4167, 4175, 4175, 4180, 4185, 4190,
     4195, 4200, 4205, 4210, 4215, 4220, 4225, 4230, 4235, 4240,
     4245, 4250, 4255, 4260, 4265, 4276, 4287, 4292, 4297, 4302,

     4307, 4312, 4317, 4322, 4327, 4332, 4337, 4342, 4347, 4358,
     4369, 4374, 4379, 4384, 4389, 4394, 4399, 4404, 4409, 4414,
     4419, 4424, 4429, 4434, 4439, 4444, 4449, 4454, 4459, 4464,
     4469, 4474, 4479, 4484, 4489, 4494, 4499, 4504, 4509, 4514,
     4519, 4524, 4531, 4534, 4534, 4539, 4544, 4549, 4554, 4559,
     4564, 4569, 4574, 4579, 4584, 4589, 4594, 4599, 4604, 4609,
     4614, 4619, 4624, 4635, 4640, 4644, 4647, 4652, 4657, 4662,
     4673, 4678, 4683, 4694, 4699, 4704, 4715, 4720, 4724, 4727,
     4732, 4737, 4742, 4753, 4758, 4763, 4768, 4773, 4778, 4783,
     4788, 4793, 4798, 4803, 4808, 4817, 4822, 4827, 4835, 4838,

     4838, 4843, 4848, 4853, 4858, 4863, 4868, 4873, 4878, 4883,
     4888, 4893, 4898, 4903, 4908, 4913, 4918, 4923, 4928, 4933,
     4944, 4949, 4954, 4959, 4964, 4969, 4974, 4985, 4990, 4995,
     5000, 5005, 5010, 5015, 5020, 5028, 5028, 5033, 5038, 5043,
     5048, 5053, 5058, 5063, 5068, 5079, 5084, 5089, 5100, 5105,
     5110, 5115, 5126, 5137
    } ;

static yyconst flex_int16_t yy_def[855] =
    {   0,
      623,    1,  623,  623,  623,  623,  623,  624,  625,  626,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  627,
      628,  623,   22,   22,  623,  623,  623,  623,   22,  629,
      630,  629,  629,  631,  632,  633,  633,  623,  634,  623,
      635,  636,  636,  637,  623,  623,  623,  638,  623,  623,
      624,  623,  623,  639,  640,  641,  623,  642,  623,  643,
      623,  644,  623,  645,  646,  647,  648,  623,  649,  623,
      650,  623,  651,  623,  652,  623,  623,  653,  654,  655,
      623,  656,  623,  657,  623,  658,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  659,  660,

      659,  659,  661,  662,  663,  663,  623,  664,  623,  665,
      666,  666,  667,  623,  623,  623,  668,  669,  623,  670,
      671,  672,  623,  673,  623,  674,  623,  675,  623,  676,
      676,  676,  623,  133,  623,  133,  677,  678,  677,  677,
      677,  679,  680,  623,  681,  681,  681,  682,  683,  623,
      684,  685,  685,  686,  623,  623,  623,  687,  133,  133,
      623,  623,  623,  623,  133,  133,  133,  133,  133,  133,
      133,  688,  689,  690,  690,  690,  691,  692,  692,  690,
      693,  623,  694,  695,  623,  696,  697,  623,  623,  698,
      623,  699,  700,  699,  699,  701,  702,  703,  704,  623,

      705,  706,  705,  705,  707,  708,  709,  623,  710,  711,
      623,  623,  712,  623,  713,  714,  713,  713,  715,  716,
      717,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  233,  233,  718,  719,  718,  718,  718,
      720,  721,  623,  722,  722,  722,  723,  724,  623,  725,
      726,  726,  727,  623,  623,  623,  728,  233,  233,  233,
      233,  233,  233,  729,  730,  731,  731,  731,  732,  733,
      733,  731,  734,  623,  735,  736,  737,  623,  738,  739,
      738,  738,  740,  741,  742,  743,  744,  744,  623,  289,
      289,  289,  289,  289,  289,  289,  289,  745,  746,  747,

      747,  747,  748,  749,  749,  747,  750,  623,  751,  752,
      289,  289,  623,  753,  754,  753,  753,  755,  756,  757,
      757,  623,  758,  623,  759,  760,  760,  761,  623,  623,
      623,  762,  289,  289,  289,  289,  289,  763,  763,  764,
      764,  623,  765,  766,  767,  623,  768,  623,  769,  623,
      770,  623,  623,  623,  771,  772,  772,  773,  774,  775,
      775,  776,  777,  777,  623,  778,  779,  780,  623,  781,
      623,  782,  623,  783,  623,  623,  623,  784,  785,  785,
      786,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  396,  396,  396,  396,

      396,  396,  396,  396,  787,  788,  789,  789,  789,  790,
      791,  791,  789,  792,  623,  793,  794,  396,  396,  396,
      396,  396,  795,  795,  796,  797,  797,  798,  799,  800,
      800,  623,  432,  432,  432,  432,  801,  801,  432,  432,
      623,  441,  441,  802,  803,  802,  802,  802,  804,  805,
      623,  806,  806,  806,  807,  808,  623,  809,  810,  810,
      811,  623,  623,  623,  812,  441,  441,  441,  441,  441,
      441,  813,  814,  815,  815,  815,  816,  817,  817,  815,
      818,  623,  819,  820,  623,  821,  821,  623,  623,  822,
      623,  823,  824,  823,  823,  825,  826,  827,  623,  623,

      828,  828,  623,  623,  829,  623,  830,  831,  830,  830,
      832,  833,  834,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  524,  524,  524,  524,  835,  835,
      524,  836,  836,  485,  485,  623,  536,  536,  536,  536,
      536,  536,  536,  536,  837,  838,  839,  839,  839,  840,
      841,  841,  839,  842,  623,  843,  844,  536,  536,  536,
      536,  536,  845,  845,  623,  623,  623,  846,  847,  847,
      848,  623,  623,  623,  623,  623,  849,  850,  850,  851,
      623,  623,  524,  836,  536,  536,  536,  536,  536,  852,
      852,  536,  623,  623,  623,  623,  623,  623,  836,  536,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  853,  623,  854,  623,  623,
      846,  849,    0,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623
    } ;

static yyconst flex_int16_t yy_nxt[5240] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,    4,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,    4,
       21,   22,   22,   22,   22,   23,   22,   22,   22,   22,
       22,   22,   24,   22,   22,   25,    4,   26,   27,   28,
       29,   22,   22,   22,   23,   22,   22,   22,   22,   22,
       22,   22,   24,   22,   22,    4,   30,   31,   32,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   33,   34,
       34,   35,    4,    4,   36,   37,    4,   38,   39,   40,
       41,   42,   43,   44,   45,    4,   46,   47,   48,    4,
       49,   90,   91,   49,   52,   88,   88,   88,   88,   92,

       93,   95,   96,  159,   89,  131,  160,  161,  161,  161,
      161,   97,  132,  166,  166,  166,  166,  166,  166,  166,
      130,  286,  159,  170,  131,   53,  160,  231,  170,  231,
       97,  232,  132,  167,  167,  167,  167,  167,  167,  167,
      181,  181,  182,  162,  168,  168,  168,  165,  165,  537,
       54,  171,  171,  171,   49,  171,   98,   49,  286,  523,
       55,   98,   56,   56,   56,   56,   56,   56,   57,   58,
       58,   58,   58,   59,   60,   60,   61,   62,   63,   65,
      172,  172,  172,  172,  172,  172,  172,  523,  521,   66,
      521,   67,   67,   67,   67,   67,   67,   68,   69,   69,

       69,   69,   70,   71,   71,   72,   73,   74,   76,  174,
      175,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  177,  177,  177,  177,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  519,   77,  192,  192,  192,
      192,  192,  192,  192,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  198,  198,  198,  198,  198,  198,
      519,   78,  201,  201,  201,  201,  201,  201,  201,  517,
      517,   79,  363,   80,   80,   80,   80,   80,   80,   81,
       82,   82,   82,   82,   83,   84,   84,   85,   86,   87,
       98,  261,  261,  261,  258,  258,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      273,  273,  274,  340,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      466,   99,  100,  101,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  102,  103,  103,  104,  467,  187,  105,
      106,  187,  107,  108,  109,  110,  111,  112,  113,  114,
      551,  115,  116,  117,  119,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  311,  188,   94,  441,  187,
       88,   88,   88,   88,  187,  136,  228,  187,  536,   89,
      136,  187,  291,  187,  311,  187,  189,  207,  207,  207,

      207,  207,  207,  289,  398,  228,  120,  215,  215,  215,
      215,  215,  215,  215,  286,  396,  121,  397,  122,  122,
      122,  122,  122,  122,  123,  124,  124,  124,  124,  125,
      126,  126,  127,  128,  129,  133,  134,  133,  135,  395,
      286,  395,  393,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  288,  307,  307,
      308,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  288,  137,  138,
      139,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      141,  142,  142,  143,  393,  144,  145,  146,  147,  148,

      149,  150,  151,  152,  153,  154,  155,  391,  156,  157,
      158,  185,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,   53,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  221,  221,  221,  221,  221,  221,  259,
      259,  259,  259,  259,  259,  259,  391,   54,  223,   91,
      260,  260,  260,  260,  260,  260,  260,   55,  224,   56,
       56,   56,   56,   56,   56,   57,   58,   58,   58,   58,
       59,   60,   60,   61,   62,   63,   65,  224,  210,  386,

      386,  210,  478,  263,  263,  263,   66,  263,   67,   67,
       67,   67,   67,   67,   68,   69,   69,   69,   69,   70,
       71,   71,   72,   73,   74,  208,  211,  229,  290,  210,
      226,   93,   95,   96,  210,  440,  230,  210,  118,  136,
      227,  210,   97,  210,  136,  210,  212,  285,  285,  285,
      285,  285,  285,   77,  440,  230,  258,  266,  267,  227,
      259,   97,  264,  264,  264,  264,  264,  264,  264,  269,
      269,  269,  269,  293,  293,  293,  290,  290,   78,  279,
      279,  279,  279,  279,  279,  279,  411,  233,   79,  396,
       80,   80,   80,   80,   80,   80,   81,   82,   82,   82,

       82,   83,   84,   84,   85,   86,   87,  233,  234,  233,
      296,  296,  296,  136,  296,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  312,
      414,  414,  415,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  312,
      236,  237,  238,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  240,  241,  241,  242,  232,  243,  244,  245,
      246,  247,  248,  249,  250,  251,  252,  253,  254,  232,
      255,  256,  257,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  119,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  286,  291,  291,  291,  291,  291,
      291,  291,  287,  292,  292,  292,  292,  292,  292,  292,
      166,  166,  166,  166,  166,  120,  337,  337,  337,  337,
      337,  287,  385,   75,  385,  121,  386,  122,  122,  122,
      122,  122,  122,  123,  124,  124,  124,  124,  125,  126,
      126,  127,  128,  129,  133,  134,  133,  135,  286,  439,
       64,   51,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  430,  165,  166,  439,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  430,  137,  138,  139,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  141,
      142,  142,  143,  535,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  304,  156,  157,  158,
       98,  390,  535,  390,  133,  391,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      481,  481,  482,  289,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      623,   99,  100,  101,   99,   99,   99,   99,   99,   99,

       99,   99,   99,  102,  103,  103,  104,  286,  270,  105,
      106,  225,  107,  108,  109,  110,  111,  112,  113,  114,
      222,  115,  116,  117,  298,  298,  298,  298,  298,  298,
      298,  300,  301,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  303,  303,  303,  303,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  161,  161,  161,
      161,  353,  209,  222,  383,  186,  178,  353,  353,  353,
      353,  353,  382,  384,  392,  394,  392,  394,  393,  395,
      400,  400,  400,  397,  397,  164,  353,  353,  353,  353,
      353,  382,  384,  162,  313,  403,  403,  403,  235,  403,

      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  554,  554,  555,  163,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,   94,  314,  315,  316,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  317,  318,  318,
      319,   50,  623,  320,  321,  623,  322,  323,  324,  325,
      326,  327,  328,  329,  354,  330,  331,  332,  341,  376,
      354,  354,  354,  354,  354,  376,  376,  376,  376,  376,
      398,  398,  398,  398,  398,  398,  398,  623,  623,  354,
      354,  354,  354,  354,  376,  376,  376,  376,  376,  342,

      377,  623,  225,  388,  229,  623,  377,  377,  377,  377,
      377,  387,  389,  230,  399,  399,  399,  399,  399,  399,
      399,  623,  538,  623,  343,  377,  377,  377,  377,  377,
      387,  389,  230,  536,  344,  623,  345,  345,  345,  345,
      345,  345,  346,  347,  347,  347,  347,  348,  349,  349,
      350,  351,  352,  185,  235,  235,  407,  408,  623,  235,
      235,  405,  405,  405,  405,  405,  405,  405,  410,  410,
      410,  410,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  623,  623,   53,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  259,  259,  259,  259,  259,

      422,  422,  422,  422,  422,  623,  623,  623,  623,   54,
      291,  291,  291,  291,  291,  313,  623,  623,  623,   55,
      313,   56,   56,   56,   56,   56,   56,   57,   58,   58,
       58,   58,   59,   60,   60,   61,   62,   63,  364,  286,
      436,  436,  436,  436,  436,  469,  469,  469,  466,  466,
      431,  467,  467,  467,  467,  467,  467,  467,  468,  468,
      468,  468,  468,  468,  468,  623,  365,  623,  443,  431,
      471,  471,  471,  443,  471,  472,  472,  472,  472,  472,
      472,  472,  474,  475,  492,  492,  492,  492,  492,  492,
      492,  366,  623,  623,  477,  477,  477,  477,  516,  623,

      516,  367,  517,  368,  368,  368,  368,  368,  368,  369,
      370,  370,  370,  370,  371,  372,  372,  373,  374,  375,
      208,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  498,  498,  498,  498,  498,  498,  623,   77,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  623,
      623,  623,  623,   78,  507,  507,  507,  507,  507,  507,
      507,  623,  623,   79,  623,   80,   80,   80,   80,   80,
       80,   81,   82,   82,   82,   82,   83,   84,   84,   85,

       86,   87,  233,  234,  233,  518,  623,  518,  623,  519,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  623,  623,  623,  623,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  623,  236,  237,  238,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  240,  241,  241,
      242,  623,  243,  244,  245,  246,  247,  248,  249,  250,
      251,  252,  253,  254,  383,  255,  256,  257,  133,  134,
      133,  135,  623,  384,  623,  623,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      623,  623,  384,  623,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      623,  137,  138,  139,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  141,  142,  142,  143,  286,  144,  145,
      146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
      623,  156,  157,  158,  441,  442,  441,  520,  599,  520,
      623,  521,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  623,  623,  599,  623,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  623,  444,  445,  446,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  448,
      449,  449,  450,  623,  451,  452,  453,  454,  455,  456,
      457,  458,  459,  460,  461,  462,  623,  463,  464,  465,
      341,  487,  388,  623,  487,  513,  513,  513,  513,  513,
      513,  389,  623,  623,  502,  623,  623,  502,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  286,  488,
      389,  342,  487,  623,  522,  623,  522,  487,  523,  532,
      487,  623,  503,  623,  487,  502,  487,  443,  487,  489,
      502,  623,  443,  502,  623,  623,  343,  502,  532,  502,
      623,  502,  504,  623,  623,  623,  344,  623,  345,  345,

      345,  345,  345,  345,  346,  347,  347,  347,  347,  348,
      349,  349,  350,  351,  352,  486,  499,  398,  398,  398,
      398,  398,  499,  499,  499,  499,  499,  500,  528,  528,
      528,  528,  528,  500,  500,  500,  500,  500,  286,  623,
      623,  499,  499,  499,  499,  499,  342,  623,  623,  623,
      533,  623,  500,  500,  500,  500,  500,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  623,  623,  533,
      623,  343,  538,  538,  538,  538,  538,  538,  538,  623,
      623,  344,  623,  345,  345,  345,  345,  345,  345,  346,
      347,  347,  347,  347,  348,  349,  349,  350,  351,  352,

      185,  514,  540,  540,  540,  537,  537,  514,  514,  514,
      514,  514,  515,  543,  543,  543,  443,  543,  515,  515,
      515,  515,  515,  623,  623,  623,  514,  514,  514,  514,
      514,   53,  467,  467,  467,  467,  467,  515,  515,  515,
      515,  515,  539,  539,  539,  539,  539,  539,  539,  545,
      545,  545,  545,  545,  545,  545,   54,  562,  562,  562,
      562,  562,  623,  623,  623,  623,   55,  623,   56,   56,
       56,   56,   56,   56,   57,   58,   58,   58,   58,   59,
       60,   60,   61,   62,   63,   65,  538,  538,  538,  538,
      538,  623,  623,  623,  623,   66,  623,   67,   67,   67,

       67,   67,   67,   68,   69,   69,   69,   69,   70,   71,
       71,   72,   73,   74,  364,  547,  548,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  550,  550,  550,
      550,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  286,  365,  566,  589,  589,  589,  589,  589,  566,
      566,  566,  566,  566,  623,  584,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  366,  566,  566,
      566,  566,  566,  623,  584,  623,  623,  367,  623,  368,
      368,  368,  368,  368,  368,  369,  370,  370,  370,  370,
      371,  372,  372,  373,  374,  375,  501,  623,  623,  623,

      567,  623,  623,  623,  623,  572,  567,  567,  567,  567,
      567,  572,  572,  572,  572,  572,  623,  623,  623,  623,
      623,  623,  623,  623,  365,  567,  567,  567,  567,  567,
      572,  572,  572,  572,  572,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  366,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  367,
      623,  368,  368,  368,  368,  368,  368,  369,  370,  370,
      370,  370,  371,  372,  372,  373,  374,  375,  208,  623,
      623,  623,  573,  623,  623,  623,  623,  575,  573,  573,
      573,  573,  573,  575,  575,  575,  575,  575,  623,  623,

      623,  623,  623,  623,  623,  623,   77,  573,  573,  573,
      573,  573,  575,  575,  575,  575,  575,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,   78,  623,  623,  623,  623,  623,  623,  623,  623,
      623,   79,  623,   80,   80,   80,   80,   80,   80,   81,
       82,   82,   82,   82,   83,   84,   84,   85,   86,   87,
      233,  234,  233,  623,  623,  623,  623,  623,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  623,  623,  623,  623,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  623,  236,  237,  238,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  240,  241,  241,  242,  623,
      243,  244,  245,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  576,  255,  256,  257,  119,  581,  576,  576,
      576,  576,  576,  581,  581,  581,  581,  581,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  576,  576,  576,
      576,  576,  581,  581,  581,  581,  581,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  120,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  121,  623,
      122,  122,  122,  122,  122,  122,  123,  124,  124,  124,

      124,  125,  126,  126,  127,  128,  129,  133,  134,  133,
      135,  623,  623,  623,  623,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  623,
      623,  623,  623,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  623,
      137,  138,  139,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  141,  142,  142,  143,  623,  144,  145,  146,
      147,  148,  149,  150,  151,  152,  153,  154,  155,  623,
      156,  157,  158,  441,  442,  441,  623,  623,  623,  623,
      623,  443,  443,  443,  443,  443,  443,  443,  443,  443,

      443,  443,  443,  443,  443,  623,  623,  623,  623,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  623,  444,  445,  446,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  448,  449,
      449,  450,  623,  451,  452,  453,  454,  455,  456,  457,
      458,  459,  460,  461,  462,  623,  463,  464,  465,  133,
      134,  133,  135,  623,  623,  623,  623,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  623,  623,  623,  623,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  623,  137,  138,  139,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  141,  142,  142,  143,  623,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
      155,  582,  156,  157,  158,  565,  593,  582,  582,  582,
      582,  582,  593,  593,  593,  593,  593,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  582,  582,  582,  582,
      582,  593,  593,  593,  593,  593,  342,  594,  623,  623,
      623,  623,  623,  594,  594,  594,  594,  594,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  343,  594,  594,  594,  594,  594,  623,  623,  623,

      623,  344,  623,  345,  345,  345,  345,  345,  345,  346,
      347,  347,  347,  347,  348,  349,  349,  350,  351,  352,
      341,  595,  623,  623,  623,  623,  623,  595,  595,  595,
      595,  595,  187,  623,  623,  623,  623,  623,  187,  187,
      187,  187,  187,  623,  623,  623,  595,  595,  595,  595,
      595,  342,  623,  623,  623,  623,  596,  187,  187,  187,
      187,  187,  596,  596,  596,  596,  596,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  343,  623,  623,  623,
      623,  596,  596,  596,  596,  596,  344,  623,  345,  345,
      345,  345,  345,  345,  346,  347,  347,  347,  347,  348,

      349,  349,  350,  351,  352,  574,  623,  623,  623,  597,
      623,  623,  623,  623,  598,  597,  597,  597,  597,  597,
      598,  598,  598,  598,  598,  623,  623,  623,  623,  623,
      623,  623,  623,  365,  597,  597,  597,  597,  597,  598,
      598,  598,  598,  598,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  366,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  367,  623,
      368,  368,  368,  368,  368,  368,  369,  370,  370,  370,
      370,  371,  372,  372,  373,  374,  375,  364,  623,  623,
      623,  210,  623,  623,  623,  623,  601,  210,  210,  210,

      210,  210,  601,  601,  601,  601,  601,  623,  623,  623,
      623,  623,  623,  623,  623,  365,  210,  210,  210,  210,
      210,  601,  601,  601,  601,  601,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      366,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      367,  623,  368,  368,  368,  368,  368,  368,  369,  370,
      370,  370,  370,  371,  372,  372,  373,  374,  375,  233,
      234,  233,  623,  623,  623,  623,  623,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  623,  623,  623,  623,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  623,  236,  237,  238,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  240,  241,  241,  242,  623,  243,
      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  623,  255,  256,  257,  441,  442,  441,  623,  623,
      623,  623,  623,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  623,  623,  623,
      623,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  623,  444,  445,
      446,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      448,  449,  449,  450,  623,  451,  452,  453,  454,  455,
      456,  457,  458,  459,  460,  461,  462,  602,  463,  464,
      465,  341,  603,  602,  602,  602,  602,  602,  603,  603,
      603,  603,  603,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  602,  602,  602,  602,  602,  603,  603,  603,
      603,  603,  342,  604,  623,  623,  623,  623,  623,  604,
      604,  604,  604,  604,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  343,  604,  604,
      604,  604,  604,  623,  623,  623,  623,  344,  623,  345,
      345,  345,  345,  345,  345,  346,  347,  347,  347,  347,

      348,  349,  349,  350,  351,  352,  364,  623,  623,  623,
      605,  623,  623,  623,  623,  606,  605,  605,  605,  605,
      605,  606,  606,  606,  606,  606,  623,  623,  623,  623,
      623,  623,  623,  623,  365,  605,  605,  605,  605,  605,
      606,  606,  606,  606,  606,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  366,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  367,
      623,  368,  368,  368,  368,  368,  368,  369,  370,  370,
      370,  370,  371,  372,  372,  373,  374,  375,  607,  623,
      623,  623,  623,  487,  607,  607,  607,  607,  607,  487,

      487,  487,  487,  487,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  607,  607,  607,  607,  607,  487,  487,
      487,  487,  487,  608,  623,  623,  623,  623,  609,  608,
      608,  608,  608,  608,  609,  609,  609,  609,  609,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  608,  608,
      608,  608,  608,  609,  609,  609,  609,  609,  502,  623,
      623,  623,  623,  610,  502,  502,  502,  502,  502,  610,
      610,  610,  610,  610,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  502,  502,  502,  502,  502,  610,  610,
      610,  610,  610,  611,  623,  623,  623,  623,  612,  611,

      611,  611,  611,  611,  612,  612,  612,  612,  612,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  611,  611,
      611,  611,  611,  612,  612,  612,  612,  612,  613,  623,
      623,  623,  623,  614,  613,  613,  613,  613,  613,  614,
      614,  614,  614,  614,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  613,  613,  613,  613,  613,  614,  614,
      614,  614,  614,  615,  623,  623,  623,  623,  616,  615,
      615,  615,  615,  615,  616,  616,  616,  616,  616,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  615,  615,
      615,  615,  615,  616,  616,  616,  616,  616,  617,  623,

      623,  623,  623,  618,  617,  617,  617,  617,  617,  618,
      618,  618,  618,  618,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  617,  617,  617,  617,  617,  618,  618,
      618,  618,  618,  619,  623,  623,  623,  623,  623,  619,
      619,  619,  619,  619,  620,  623,  623,  623,  623,  623,
      620,  620,  620,  620,  620,  623,  623,  623,  619,  619,
      619,  619,  619,  185,  623,  623,  623,  623,  623,  620,
      620,  620,  620,  620,  621,  623,  623,  623,  623,  622,
      621,  621,  621,  621,  621,  622,  622,  622,  622,  622,
      623,  623,  623,  623,   53,  623,  623,  623,  623,  621,

      621,  621,  621,  621,  622,  622,  622,  622,  622,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,   54,
      623,  623,  623,  623,  623,  623,  623,  623,  623,   55,
      623,   56,   56,   56,   56,   56,   56,   57,   58,   58,
       58,   58,   59,   60,   60,   61,   62,   63,  208,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,   77,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,   78,  623,  623,  623,  623,  623,  623,  623,  623,
      623,   79,  623,   80,   80,   80,   80,   80,   80,   81,
       82,   82,   82,   82,   83,   84,   84,   85,   86,   87,
      341,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  342,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  343,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  344,  623,  345,  345,

      345,  345,  345,  345,  346,  347,  347,  347,  347,  348,
      349,  349,  350,  351,  352,  364,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  365,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  366,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  367,  623,
      368,  368,  368,  368,  368,  368,  369,  370,  370,  370,
      370,  371,  372,  372,  373,  374,  375,   51,  623,   51,

       51,   51,   51,  623,   51,  623,  623,   51,   64,  623,
       64,   64,   64,   64,  623,   64,  623,  623,   64,   75,
      623,   75,   75,   75,   75,  623,   75,  623,  623,   75,
      118,  118,  118,  118,  623,  118,  623,  623,  118,  165,
      165,  165,  165,  165,  166,  166,  166,  166,  166,  168,
      168,  168,  168,  168,  169,  169,  169,  169,  169,  170,
      170,  623,  170,  170,  171,  171,  171,  171,  171,  173,
      173,  173,  173,  173,  176,  176,  176,  176,  176,  179,
      179,  179,  179,  179,  184,  184,  184,  184,  184,  190,
      190,  190,  190,  191,  191,  191,   51,   51,   51,   51,

       51,  193,  193,  193,  193,  193,  195,  195,  195,  195,
      195,  197,  197,  197,  197,  197,   64,  623,   64,   64,
       64,   64,  623,   64,  623,  623,   64,  199,  199,  199,
      199,  200,  200,  200,   64,   64,   64,   64,   64,  202,
      202,  202,  202,  202,  204,  204,  204,  204,  204,  206,
      206,  206,  206,  206,   75,  623,   75,   75,   75,   75,
      623,   75,  623,  623,   75,  213,  213,  213,  213,  214,
      214,  214,   75,   75,   75,   75,   75,  216,  216,  216,
      216,  216,  218,  218,  218,  218,  218,  220,  220,  220,
      220,  220,  258,  258,  258,  258,  258,  259,  259,  259,

      259,  259,  261,  261,  261,  261,  261,  262,  262,  262,
      262,  262,   98,   98,  623,   98,   98,  263,  263,  263,
      263,  263,  265,  265,  265,  265,  265,  268,  268,  268,
      268,  268,  271,  271,  271,  271,  271,  276,  276,  276,
      276,  276,  118,  118,  118,  118,  623,  118,  623,  623,
      118,  277,  277,  277,  277,  278,  278,  278,  118,  118,
      118,  118,  118,  280,  280,  280,  280,  280,  282,  282,
      282,  282,  282,  284,  284,  284,  284,  284,  130,  623,
      130,  290,  290,  290,  290,  290,  291,  291,  291,  291,
      291,  293,  293,  293,  293,  293,  294,  294,  294,  294,

      294,  136,  136,  623,  136,  136,  295,  295,  295,  295,
      295,  297,  297,  297,  297,  297,  299,  299,  299,  299,
      299,  302,  302,  302,  302,  302,  305,  305,  305,  305,
      305,  310,  310,  310,  310,  310,  171,  171,  171,  171,
      171,  333,  333,  333,  333,  333,  165,  165,  165,  165,
      165,  334,  334,  334,  334,  334,  335,  335,  335,  335,
      335,  336,  336,  336,  336,  336,  338,  338,  338,  338,
      338,  339,  339,  339,  339,  339,  340,  340,  340,  340,
      340,  340,  623,  340,  623,  623,  340,   51,  623,   51,
       51,   51,   51,  623,   51,  623,  623,   51,  191,  191,

      191,  191,  191,   51,   51,   51,   51,   51,  355,  355,
      355,  355,  355,  356,  356,  356,  356,  356,  357,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  200,  200,
      200,  200,  200,   64,   64,   64,   64,   64,  359,  359,
      359,  359,  359,  360,  360,  360,  360,  360,  361,  361,
      361,  361,  361,  362,  362,  362,  362,  362,  363,  363,
      363,  363,  363,  363,  623,  363,  623,  623,  363,   75,
      623,   75,   75,   75,   75,  623,   75,  623,  623,   75,
      214,  214,  214,  214,  214,   75,   75,   75,   75,   75,
      378,  378,  378,  378,  378,  379,  379,  379,  379,  379,

      380,  380,  380,  380,  380,  381,  381,  381,  381,  381,
      397,  397,  397,  397,  397,  398,  398,  398,  398,  398,
      400,  400,  400,  400,  400,  401,  401,  401,  401,  401,
      235,  235,  623,  235,  235,  402,  402,  402,  402,  402,
      404,  404,  404,  404,  404,  406,  406,  406,  406,  406,
      409,  409,  409,  409,  409,  412,  412,  412,  412,  412,
      417,  417,  417,  417,  417,  263,  263,  263,  263,  263,
      418,  418,  418,  418,  418,  258,  258,  258,  258,  258,
      419,  419,  419,  419,  419,  420,  420,  420,  420,  420,
      421,  421,  421,  421,  421,  423,  423,  423,  423,  423,

      424,  424,  424,  424,  424,  278,  278,  278,  278,  278,
      118,  118,  118,  118,  118,  425,  425,  425,  425,  425,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
      428,  428,  428,  428,  428,  429,  429,  130,  623,  130,
      297,  297,  297,  297,  297,  432,  432,  432,  432,  432,
      290,  290,  290,  290,  290,  433,  433,  433,  433,  433,
      434,  434,  434,  434,  434,  435,  435,  435,  435,  435,
      437,  437,  437,  437,  437,  438,  438,  438,  438,  438,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,
      469,  469,  469,  469,  469,  470,  470,  470,  470,  470,

      313,  313,  623,  313,  313,  471,  471,  471,  471,  471,
      473,  473,  473,  473,  473,  476,  476,  476,  476,  476,
      479,  479,  479,  479,  479,  484,  484,  484,  484,  484,
      485,  485,  485,  485,  485,  340,  340,  340,  340,  340,
      340,  623,  340,  623,  623,  340,  490,  490,  490,  490,
      491,  491,  491,  340,  340,  340,  340,  340,  493,  493,
      493,  493,  493,  495,  495,  495,  495,  495,  497,  497,
      497,  497,  497,   51,  623,   51,   51,   51,   51,  623,
       51,  623,  623,   51,   51,   51,   51,   51,   51,  191,
      191,  191,  191,  191,   64,  623,   64,   64,   64,   64,

      623,   64,  623,  623,   64,   64,   64,   64,   64,   64,
      200,  200,  200,  200,  200,  363,  363,  363,  363,  363,
      363,  623,  363,  623,  623,  363,  505,  505,  505,  505,
      506,  506,  506,  363,  363,  363,  363,  363,  508,  508,
      508,  508,  508,  510,  510,  510,  510,  510,  512,  512,
      512,  512,  512,   75,  623,   75,   75,   75,   75,  623,
       75,  623,  623,   75,   75,   75,   75,   75,   75,  214,
      214,  214,  214,  214,  404,  404,  404,  404,  404,  524,
      524,  524,  524,  524,  397,  397,  397,  397,  397,  525,
      525,  525,  525,  525,  526,  526,  526,  526,  526,  527,

      527,  527,  527,  527,  529,  529,  529,  529,  529,  530,
      530,  530,  530,  530,  531,  531,  531,  531,  531,  118,
      118,  118,  118,  623,  118,  623,  623,  118,  118,  118,
      118,  118,  118,  278,  278,  278,  278,  278,  429,  429,
      429,  130,  623,  130,  534,  534,  534,  534,  534,  537,
      537,  537,  537,  537,  538,  538,  538,  538,  538,  540,
      540,  540,  540,  540,  541,  541,  541,  541,  541,  443,
      443,  623,  443,  443,  542,  542,  542,  542,  542,  544,
      544,  544,  544,  544,  546,  546,  546,  546,  546,  549,
      549,  549,  549,  549,  552,  552,  552,  552,  552,  557,

      557,  557,  557,  557,  471,  471,  471,  471,  471,  558,
      558,  558,  558,  558,  466,  466,  466,  466,  466,  559,
      559,  559,  559,  559,  560,  560,  560,  560,  560,  561,
      561,  561,  561,  561,  563,  563,  563,  563,  563,  564,
      564,  564,  564,  564,  340,  340,  340,  340,  340,  340,
      623,  340,  623,  623,  340,  491,  491,  491,  491,  491,
      340,  340,  340,  340,  340,  568,  568,  568,  568,  568,
      569,  569,  569,  569,  569,  570,  570,  570,  570,  570,
      571,  571,  571,  571,  571,  363,  363,  363,  363,  363,
      363,  623,  363,  623,  623,  363,  506,  506,  506,  506,

      506,  363,  363,  363,  363,  363,  577,  577,  577,  577,
      577,  578,  578,  578,  578,  578,  579,  579,  579,  579,
      579,  580,  580,  580,  580,  580,  583,  583,  583,  583,
      583,  130,  623,  130,  544,  544,  544,  544,  544,  585,
      585,  585,  585,  585,  537,  537,  537,  537,  537,  586,
      586,  586,  586,  586,  587,  587,  587,  587,  587,  588,
      588,  588,  588,  588,  590,  590,  590,  590,  590,  591,
      591,  591,  591,  591,  592,  592,  592,  592,  592,  340,
      340,  340,  340,  340,  340,  623,  340,  623,  623,  340,
      340,  340,  340,  340,  340,  491,  491,  491,  491,  491,

      363,  363,  363,  363,  363,  363,  623,  363,  623,  623,
      363,  363,  363,  363,  363,  363,  506,  506,  506,  506,
      506,  600,  600,  600,  600,  600,   51,  623,   51,   51,
       51,   51,  623,   51,  623,  623,   51,   75,  623,   75,
       75,   75,   75,  623,   75,  623,  623,   75,    3,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623
    } ;

static yyconst flex_int16_t yy_chk[5240] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,   13,   13,    5,    8,   11,   11,   11,   11,   15,

       15,   17,   17,   23,   11,   21,   24,   25,   25,   25,
       25,   17,   21,   32,   32,   32,   32,   32,   32,   32,
      628,  599,   23,   37,   21,    8,   24,   97,   37,   97,
       17,   97,   21,   33,   33,   33,   33,   33,   33,   33,
       46,   46,   46,   25,   35,   35,   35,   35,   35,  551,
        8,   38,   38,   38,   49,   38,  106,   49,  532,  523,
        8,  106,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
       40,   40,   40,   40,   40,   40,   40,  522,  521,    9,
      520,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,   10,   42,
       42,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   42,   42,   42,   42,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,  519,   10,   57,   57,   57,
       57,   57,   57,   57,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   63,   63,   63,   63,   63,   63,
      518,   10,   68,   68,   68,   68,   68,   68,   68,  517,
      516,   10,  506,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       18,  104,  104,  104,  104,  104,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
      115,  115,  115,  491,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
      478,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,  474,   53,   18,
       18,   53,   18,   18,   18,   18,   18,   18,   18,   18,
      460,   18,   18,   18,   20,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  159,   53,   94,  451,   53,
       88,   88,   88,   88,   53,  146,   94,   53,  444,   88,
      146,   53,  300,   53,  159,   53,   53,   74,   74,   74,

       74,   74,   74,  300,  407,   94,   20,   81,   81,   81,
       81,   81,   81,   81,  429,  407,   20,  411,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   22,   22,   22,   22,  395,
      132,  394,  393,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,  132,  156,  156,
      156,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,  132,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,  392,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,  391,   22,   22,
       22,   51,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   51,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   87,   87,   87,   87,   87,   87,  101,
      101,  101,  101,  101,  101,  101,  390,   51,   91,   91,
      102,  102,  102,  102,  102,  102,  102,   51,   91,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   64,   91,   77,  386,

      385,   77,  327,  107,  107,  107,   64,  107,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   75,   77,   95,  304,   77,
       93,   93,   96,   96,   77,  312,   95,   77,  278,  147,
       93,   77,   96,   77,  147,   77,   77,  129,  129,  129,
      129,  129,  129,   75,  312,   95,  270,  111,  111,   93,
      266,   96,  109,  109,  109,  109,  109,  109,  109,  111,
      111,  111,  111,  143,  143,  143,  143,  143,   75,  123,
      123,  123,  123,  123,  123,  123,  252,  243,   75,  236,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   98,   98,   98,
      148,  148,  148,  148,  148,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  160,
      255,  255,  255,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  160,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  232,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  231,
       98,   98,   98,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  118,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  131,  139,  139,  139,  139,  139,
      139,  139,  131,  141,  141,  141,  141,  141,  141,  141,
      175,  175,  175,  175,  175,  118,  182,  182,  182,  182,
      182,  131,  224,  214,  224,  118,  224,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  133,  133,  133,  133,  287,  311,
      200,  191,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  287,  178,  174,  311,

      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  287,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  439,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  153,  133,  133,  133,
      135,  227,  439,  227,  144,  227,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      330,  330,  330,  137,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      134,  135,  135,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  130,  112,  135,
      135,   92,  135,  135,  135,  135,  135,  135,  135,  135,
       90,  135,  135,  135,  150,  150,  150,  150,  150,  150,
      150,  152,  152,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  152,  152,  152,  152,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  161,  161,  161,
      161,  188,   76,  222,  223,   52,   43,  188,  188,  188,
      188,  188,  222,  223,  228,  230,  228,  230,  228,  230,
      242,  242,  242,  242,  242,   28,  188,  188,  188,  188,
      188,  222,  223,  161,  164,  247,  247,  247,  247,  247,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  463,  463,  463,   27,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,   16,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,    7,    3,  164,  164,    0,  164,  164,  164,  164,
      164,  164,  164,  164,  189,  164,  164,  164,  186,  211,
      189,  189,  189,  189,  189,  211,  211,  211,  211,  211,
      238,  238,  238,  238,  238,  238,  238,    0,    0,  189,
      189,  189,  189,  189,  211,  211,  211,  211,  211,  186,

      212,    0,  225,  226,  229,    0,  212,  212,  212,  212,
      212,  225,  226,  229,  240,  240,  240,  240,  240,  240,
      240,    0,  547,    0,  186,  212,  212,  212,  212,  212,
      225,  226,  229,  547,  186,    0,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  187,  245,  246,  251,  251,    0,  245,
      246,  249,  249,  249,  249,  249,  249,  249,  251,  251,
      251,  251,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,    0,    0,  187,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  267,  267,  267,  267,  267,

      274,  274,  274,  274,  274,    0,    0,    0,    0,  187,
      301,  301,  301,  301,  301,  321,    0,    0,    0,  187,
      321,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  209,  288,
      308,  308,  308,  308,  308,  319,  319,  319,  319,  319,
      288,  316,  316,  316,  316,  316,  316,  316,  317,  317,
      317,  317,  317,  317,  317,    0,  209,    0,  453,  288,
      322,  322,  322,  453,  322,  324,  324,  324,  324,  324,
      324,  324,  326,  326,  346,  346,  346,  346,  346,  346,
      346,  209,    0,    0,  326,  326,  326,  326,  382,    0,

      382,  209,  382,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      210,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  352,  352,  352,  352,  352,  352,    0,  210,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,    0,
        0,    0,    0,  210,  369,  369,  369,  369,  369,  369,
      369,    0,    0,  210,    0,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  233,  233,  233,  384,    0,  384,    0,  384,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,    0,    0,    0,    0,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,    0,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,    0,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  383,  233,  233,  233,  289,  289,
      289,  289,    0,  383,    0,    0,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

        0,    0,  383,    0,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
        0,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  584,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
        0,  289,  289,  289,  313,  313,  313,  387,  584,  387,
        0,  387,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,    0,    0,  584,    0,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,    0,  313,  313,  313,

      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,    0,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,    0,  313,  313,  313,
      340,  342,  388,    0,  342,  375,  375,  375,  375,  375,
      375,  388,    0,    0,  365,    0,    0,  365,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  430,  342,
      388,  340,  342,    0,  389,    0,  389,  342,  389,  430,
      342,    0,  365,    0,  342,  365,  342,  454,  342,  342,
      365,    0,  454,  365,    0,    0,  340,  365,  430,  365,
        0,  365,  365,    0,    0,    0,  340,    0,  340,  340,

      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  341,  353,  408,  408,  408,
      408,  408,  353,  353,  353,  353,  353,  354,  415,  415,
      415,  415,  415,  354,  354,  354,  354,  354,  431,    0,
        0,  353,  353,  353,  353,  353,  341,    0,    0,    0,
      431,    0,  354,  354,  354,  354,  354,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,    0,    0,  431,
        0,  341,  446,  446,  446,  446,  446,  446,  446,    0,
        0,  341,    0,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      355,  376,  450,  450,  450,  450,  450,  376,  376,  376,
      376,  376,  377,  455,  455,  455,  455,  455,  377,  377,
      377,  377,  377,    0,    0,    0,  376,  376,  376,  376,
      376,  355,  475,  475,  475,  475,  475,  377,  377,  377,
      377,  377,  448,  448,  448,  448,  448,  448,  448,  457,
      457,  457,  457,  457,  457,  457,  355,  482,  482,  482,
      482,  482,    0,    0,    0,    0,  355,    0,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  359,  548,  548,  548,  548,
      548,    0,    0,    0,    0,  359,    0,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  363,  459,  459,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  459,  459,  459,
      459,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  533,  363,  488,  555,  555,  555,  555,  555,  488,
      488,  488,  488,  488,    0,  533,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  363,  488,  488,
      488,  488,  488,    0,  533,    0,    0,  363,    0,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  364,    0,    0,    0,

      489,    0,    0,    0,    0,  499,  489,  489,  489,  489,
      489,  499,  499,  499,  499,  499,    0,    0,    0,    0,
        0,    0,    0,    0,  364,  489,  489,  489,  489,  489,
      499,  499,  499,  499,  499,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
        0,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  378,    0,
        0,    0,  500,    0,    0,    0,    0,  503,  500,  500,
      500,  500,  500,  503,  503,  503,  503,  503,    0,    0,

        0,    0,    0,    0,    0,    0,  378,  500,  500,  500,
      500,  500,  503,  503,  503,  503,  503,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  378,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  378,    0,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      396,  396,  396,    0,    0,    0,    0,    0,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,    0,    0,    0,    0,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,    0,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,    0,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  504,  396,  396,  396,  425,  514,  504,  504,
      504,  504,  504,  514,  514,  514,  514,  514,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  504,  504,  504,
      504,  504,  514,  514,  514,  514,  514,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  425,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  425,    0,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  432,  432,  432,
      432,    0,    0,    0,    0,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,    0,
        0,    0,    0,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,    0,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,    0,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,    0,
      432,  432,  432,  441,  441,  441,    0,    0,    0,    0,
        0,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,    0,    0,    0,    0,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,    0,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,    0,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,    0,  441,  441,  441,  485,
      485,  485,  485,    0,    0,    0,    0,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,    0,    0,    0,    0,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,    0,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,    0,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  515,  485,  485,  485,  486,  566,  515,  515,  515,
      515,  515,  566,  566,  566,  566,  566,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  515,  515,  515,  515,
      515,  566,  566,  566,  566,  566,  486,  567,    0,    0,
        0,    0,    0,  567,  567,  567,  567,  567,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  486,  567,  567,  567,  567,  567,    0,    0,    0,

        0,  486,    0,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      487,  572,    0,    0,    0,    0,    0,  572,  572,  572,
      572,  572,  573,    0,    0,    0,    0,    0,  573,  573,
      573,  573,  573,    0,    0,    0,  572,  572,  572,  572,
      572,  487,    0,    0,    0,    0,  575,  573,  573,  573,
      573,  573,  575,  575,  575,  575,  575,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  487,    0,    0,    0,
        0,  575,  575,  575,  575,  575,  487,    0,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  501,    0,    0,    0,  576,
        0,    0,    0,    0,  581,  576,  576,  576,  576,  576,
      581,  581,  581,  581,  581,    0,    0,    0,    0,    0,
        0,    0,    0,  501,  576,  576,  576,  576,  576,  581,
      581,  581,  581,  581,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  501,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  501,    0,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  502,    0,    0,
        0,  582,    0,    0,    0,    0,  593,  582,  582,  582,

      582,  582,  593,  593,  593,  593,  593,    0,    0,    0,
        0,    0,    0,    0,    0,  502,  582,  582,  582,  582,
      582,  593,  593,  593,  593,  593,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      502,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      502,    0,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  524,
      524,  524,    0,    0,    0,    0,    0,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,    0,    0,    0,    0,  524,  524,  524,  524,  524,

      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,    0,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,    0,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,    0,  524,  524,  524,  536,  536,  536,    0,    0,
        0,    0,    0,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,    0,    0,    0,
        0,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,    0,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,    0,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  594,  536,  536,
      536,  568,  595,  594,  594,  594,  594,  594,  595,  595,
      595,  595,  595,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  594,  594,  594,  594,  594,  595,  595,  595,
      595,  595,  568,  596,    0,    0,    0,    0,    0,  596,
      596,  596,  596,  596,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  568,  596,  596,
      596,  596,  596,    0,    0,    0,    0,  568,    0,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  577,    0,    0,    0,
      597,    0,    0,    0,    0,  598,  597,  597,  597,  597,
      597,  598,  598,  598,  598,  598,    0,    0,    0,    0,
        0,    0,    0,    0,  577,  597,  597,  597,  597,  597,
      598,  598,  598,  598,  598,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  577,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  577,
        0,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  601,    0,
        0,    0,    0,  602,  601,  601,  601,  601,  601,  602,

      602,  602,  602,  602,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  601,  601,  601,  601,  601,  602,  602,
      602,  602,  602,  603,    0,    0,    0,    0,  604,  603,
      603,  603,  603,  603,  604,  604,  604,  604,  604,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  603,  603,
      603,  603,  603,  604,  604,  604,  604,  604,  605,    0,
        0,    0,    0,  606,  605,  605,  605,  605,  605,  606,
      606,  606,  606,  606,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  605,  605,  605,  605,  605,  606,  606,
      606,  606,  606,  607,    0,    0,    0,    0,  608,  607,

      607,  607,  607,  607,  608,  608,  608,  608,  608,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  609,    0,
        0,    0,    0,  610,  609,  609,  609,  609,  609,  610,
      610,  610,  610,  610,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  609,  609,  609,  609,  609,  610,  610,
      610,  610,  610,  611,    0,    0,    0,    0,  612,  611,
      611,  611,  611,  611,  612,  612,  612,  612,  612,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  611,  611,
      611,  611,  611,  612,  612,  612,  612,  612,  613,    0,

        0,    0,    0,  614,  613,  613,  613,  613,  613,  614,
      614,  614,  614,  614,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  613,  613,  613,  613,  613,  614,  614,
      614,  614,  614,  615,    0,    0,    0,    0,    0,  615,
      615,  615,  615,  615,  617,    0,    0,    0,    0,    0,
      617,  617,  617,  617,  617,    0,    0,    0,  615,  615,
      615,  615,  615,  616,    0,    0,    0,    0,    0,  617,
      617,  617,  617,  617,  619,    0,    0,    0,    0,  620,
      619,  619,  619,  619,  619,  620,  620,  620,  620,  620,
        0,    0,    0,    0,  616,    0,    0,    0,    0,  619,

      619,  619,  619,  619,  620,  620,  620,  620,  620,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  616,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  616,
        0,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  618,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  618,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  618,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  618,    0,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      621,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  621,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  621,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  621,    0,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  622,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  622,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  622,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  622,    0,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  624,    0,  624,

      624,  624,  624,    0,  624,    0,    0,  624,  625,    0,
      625,  625,  625,  625,    0,  625,    0,    0,  625,  626,
        0,  626,  626,  626,  626,    0,  626,    0,    0,  626,
      627,  627,  627,  627,    0,  627,    0,    0,  627,  629,
      629,  629,  629,  629,  630,  630,  630,  630,  630,  631,
      631,  631,  631,  631,  632,  632,  632,  632,  632,  633,
      633,    0,  633,  633,  634,  634,  634,  634,  634,  635,
      635,  635,  635,  635,  636,  636,  636,  636,  636,  637,
      637,  637,  637,  637,  638,  638,  638,  638,  638,  639,
      639,  639,  639,  640,  640,  640,  641,  641,  641,  641,

      641,  642,  642,  642,  642,  642,  643,  643,  643,  643,
      643,  644,  644,  644,  644,  644,  645,    0,  645,  645,
      645,  645,    0,  645,    0,    0,  645,  646,  646,  646,
      646,  647,  647,  647,  648,  648,  648,  648,  648,  649,
      649,  649,  649,  649,  650,  650,  650,  650,  650,  651,
      651,  651,  651,  651,  652,    0,  652,  652,  652,  652,
        0,  652,    0,    0,  652,  653,  653,  653,  653,  654,
      654,  654,  655,  655,  655,  655,  655,  656,  656,  656,
      656,  656,  657,  657,  657,  657,  657,  658,  658,  658,
      658,  658,  659,  659,  659,  659,  659,  660,  660,  660,

      660,  660,  661,  661,  661,  661,  661,  662,  662,  662,
      662,  662,  663,  663,    0,  663,  663,  664,  664,  664,
      664,  664,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  666,  667,  667,  667,  667,  667,  668,  668,  668,
      668,  668,  669,  669,  669,  669,    0,  669,    0,    0,
      669,  670,  670,  670,  670,  671,  671,  671,  672,  672,
      672,  672,  672,  673,  673,  673,  673,  673,  674,  674,
      674,  674,  674,  675,  675,  675,  675,  675,  676,    0,
      676,  677,  677,  677,  677,  677,  678,  678,  678,  678,
      678,  679,  679,  679,  679,  679,  680,  680,  680,  680,

      680,  681,  681,    0,  681,  681,  682,  682,  682,  682,
      682,  683,  683,  683,  683,  683,  684,  684,  684,  684,
      684,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  687,  687,  687,  687,  687,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  690,  690,  690,  690,
      690,  691,  691,  691,  691,  691,  692,  692,  692,  692,
      692,  693,  693,  693,  693,  693,  694,  694,  694,  694,
      694,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  696,    0,  696,    0,    0,  696,  697,    0,  697,
      697,  697,  697,    0,  697,    0,    0,  697,  698,  698,

      698,  698,  698,  699,  699,  699,  699,  699,  700,  700,
      700,  700,  700,  701,  701,  701,  701,  701,  702,  702,
      702,  702,  702,  703,  703,  703,  703,  703,  704,  704,
      704,  704,  704,  705,  705,  705,  705,  705,  706,  706,
      706,  706,  706,  707,  707,  707,  707,  707,  708,  708,
      708,  708,  708,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  710,    0,  710,    0,    0,  710,  711,
        0,  711,  711,  711,  711,    0,  711,    0,    0,  711,
      712,  712,  712,  712,  712,  713,  713,  713,  713,  713,
      714,  714,  714,  714,  714,  715,  715,  715,  715,  715,

      716,  716,  716,  716,  716,  717,  717,  717,  717,  717,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      720,  720,  720,  720,  720,  721,  721,  721,  721,  721,
      722,  722,    0,  722,  722,  723,  723,  723,  723,  723,
      724,  724,  724,  724,  724,  725,  725,  725,  725,  725,
      726,  726,  726,  726,  726,  727,  727,  727,  727,  727,
      728,  728,  728,  728,  728,  729,  729,  729,  729,  729,
      730,  730,  730,  730,  730,  731,  731,  731,  731,  731,
      732,  732,  732,  732,  732,  733,  733,  733,  733,  733,
      734,  734,  734,  734,  734,  735,  735,  735,  735,  735,

      736,  736,  736,  736,  736,  737,  737,  737,  737,  737,
      738,  738,  738,  738,  738,  739,  739,  739,  739,  739,
      740,  740,  740,  740,  740,  741,  741,  741,  741,  741,
      742,  742,  742,  742,  742,  743,  743,  744,    0,  744,
      745,  745,  745,  745,  745,  746,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  748,  748,  748,  748,  748,
      749,  749,  749,  749,  749,  750,  750,  750,  750,  750,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      753,  753,  753,  753,  753,  754,  754,  754,  754,  754,
      755,  755,  755,  755,  755,  756,  756,  756,  756,  756,

      757,  757,    0,  757,  757,  758,  758,  758,  758,  758,
      759,  759,  759,  759,  759,  760,  760,  760,  760,  760,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      763,  763,  763,  763,  763,  764,  764,  764,  764,  764,
      764,    0,  764,    0,    0,  764,  765,  765,  765,  765,
      766,  766,  766,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  769,  769,  769,  769,  769,  770,  770,
      770,  770,  770,  771,    0,  771,  771,  771,  771,    0,
      771,    0,    0,  771,  772,  772,  772,  772,  772,  773,
      773,  773,  773,  773,  774,    0,  774,  774,  774,  774,

        0,  774,    0,    0,  774,  775,  775,  775,  775,  775,
      776,  776,  776,  776,  776,  777,  777,  777,  777,  777,
      777,    0,  777,    0,    0,  777,  778,  778,  778,  778,
      779,  779,  779,  780,  780,  780,  780,  780,  781,  781,
      781,  781,  781,  782,  782,  782,  782,  782,  783,  783,
      783,  783,  783,  784,    0,  784,  784,  784,  784,    0,
      784,    0,    0,  784,  785,  785,  785,  785,  785,  786,
      786,  786,  786,  786,  787,  787,  787,  787,  787,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  792,

      792,  792,  792,  792,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  795,  795,  795,  795,  795,  796,
      796,  796,  796,    0,  796,    0,    0,  796,  797,  797,
      797,  797,  797,  798,  798,  798,  798,  798,  799,  799,
      799,  800,    0,  800,  801,  801,  801,  801,  801,  802,
      802,  802,  802,  802,  803,  803,  803,  803,  803,  804,
      804,  804,  804,  804,  805,  805,  805,  805,  805,  806,
      806,    0,  806,  806,  807,  807,  807,  807,  807,  808,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  810,
      810,  810,  810,  810,  811,  811,  811,  811,  811,  812,

      812,  812,  812,  812,  813,  813,  813,  813,  813,  814,
      814,  814,  814,  814,  815,  815,  815,  815,  815,  816,
      816,  816,  816,  816,  817,  817,  817,  817,  817,  818,
      818,  818,  818,  818,  819,  819,  819,  819,  819,  820,
      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
        0,  821,    0,    0,  821,  822,  822,  822,  822,  822,
      823,  823,  823,  823,  823,  824,  824,  824,  824,  824,
      825,  825,  825,  825,  825,  826,  826,  826,  826,  826,
      827,  827,  827,  827,  827,  828,  828,  828,  828,  828,
      828,    0,  828,    0,    0,  828,  829,  829,  829,  829,

      829,  830,  830,  830,  830,  830,  831,  831,  831,  831,
      831,  832,  832,  832,  832,  832,  833,  833,  833,  833,
      833,  834,  834,  834,  834,  834,  835,  835,  835,  835,
      835,  836,    0,  836,  837,  837,  837,  837,  837,  838,
      838,  838,  838,  838,  839,  839,  839,  839,  839,  840,
      840,  840,  840,  840,  841,  841,  841,  841,  841,  842,
      842,  842,  842,  842,  843,  843,  843,  843,  843,  844,
      844,  844,  844,  844,  845,  845,  845,  845,  845,  846,
      846,  846,  846,  846,  846,    0,  846,    0,    0,  846,
      847,  847,  847,  847,  847,  848,  848,  848,  848,  848,

      849,  849,  849,  849,  849,  849,    0,  849,    0,    0,
      849,  850,  850,  850,  850,  850,  851,  851,  851,  851,
      851,  852,  852,  852,  852,  852,  853,    0,  853,  853,
      853,  853,    0,  853,    0,    0,  853,  854,    0,  854,
      854,  854,  854,    0,  854,    0,    0,  854,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623
    } ;

static yyconst flex_int16_t yy_rule_linenum[39] =
    {   0,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      146,  147,  148,  149,  150,  151,  152,  155
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/TurtleSScanner.lpp"
/* $Id: TurtleSScanner.lpp,v 1.3 2008-10-03 07:06:04 eric Exp $ -*- mode: c++ -*- */
/** \file TurtleSScanner.ll Define the Flex lexical scanner */
#line 5 "lib/TurtleSScanner.lpp"

#include "TurtleSParser/TurtleSParser.hpp"
#include "TurtleSScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::TurtleSParser::token token;
typedef w3c_sw::TurtleSParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "TurtleSFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 56 "lib/TurtleSScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 1955 "lib/TurtleSScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 115 "lib/TurtleSScanner.lpp"

#line 2119 "lib/TurtleSScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 624 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 623 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 39 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 39 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 40 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 116 "lib/TurtleSScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 117 "lib/TurtleSScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "lib/TurtleSScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 119 "lib/TurtleSScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 120 "lib/TurtleSScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 121 "lib/TurtleSScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 122 "lib/TurtleSScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 123 "lib/TurtleSScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 124 "lib/TurtleSScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 125 "lib/TurtleSScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 126 "lib/TurtleSScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 127 "lib/TurtleSScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 128 "lib/TurtleSScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 129 "lib/TurtleSScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 130 "lib/TurtleSScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 131 "lib/TurtleSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", true); return token::IT_true;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 132 "lib/TurtleSScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", false); return token::IT_false;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "lib/TurtleSScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "lib/TurtleSScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 135 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 136 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 137 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 138 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 139 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 140 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 141 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 142 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 143 "lib/TurtleSScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 144 "lib/TurtleSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 145 "lib/TurtleSScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 146 "lib/TurtleSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 147 "lib/TurtleSScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 148 "lib/TurtleSScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 149 "lib/TurtleSScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 150 "lib/TurtleSScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 151 "lib/TurtleSScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 152 "lib/TurtleSScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 154 "lib/TurtleSScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 155 "lib/TurtleSScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 161 "lib/TurtleSScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2436 "lib/TurtleSScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	TurtleSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	TurtleSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					TurtleSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) TurtleSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 624 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 624 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 623);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) TurtleSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) TurtleSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		TurtleSfree((void *) b->yy_ch_buf  );

	TurtleSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)TurtleSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)TurtleSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) TurtleSalloc(new_size  );

		else
			(yy_start_stack) = (int *) TurtleSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *TurtleSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *TurtleSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void TurtleSfree (void * ptr )
{
	free( (char *) ptr );	/* see TurtleSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 161 "lib/TurtleSScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START TurtleSScanner */
namespace w3c_sw {

TurtleSScanner::TurtleSScanner (TurtleSDriver* driver, std::istream* in, std::ostream* out) : TurtleSFlexLexer(in, out), driver(driver) {  }
TurtleSScanner::~TurtleSScanner () {  }

TurtleSParser::token_type TurtleSScanner::typedLiteral (TurtleSParser::semantic_type*& yylval, TurtleSParser::token_type tok) {
    std::istringstream is(yytext);
    std::ostringstream normalized;

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	normalized << i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	normalized << f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	normalized << d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

unsigned short h2n (char c) {
    return
	c<='9'?c-'0':
	c<='F'?c-'A'+10:
	c<='f'?c-'a'+10:
	throw;
}
TurtleSParser::token_type TurtleSScanner::unescape (TurtleSParser::semantic_type*& yylval, size_t skip, TurtleSParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case 'u':
		if (i < yyleng-skip-4) {
		    unsigned short b=
			h2n(yytext[i+1])<<12 | h2n(yytext[i+2])<<8 |
			h2n(yytext[i+3])<<04 | h2n(yytext[i+4]);
		    (*space) += char(b); // !! utf-8-encode
		    break;
		} else
		    throw(new std::exception());
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* TurtleSScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index));
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void TurtleSScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END TurtleSScanner */

const URI* TurtleSScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}

} // END namespace w3c_sw

/* This implementation of TurtleSFlexLexer::yylex() is required to fill the
 * vtable of the class TurtleSFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the TurtleSScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int TurtleSFlexLexer::yylex()
{
    std::cerr << "in TurtleSFlexLexer::yylex() !" << std::endl;
    return 0;
}


