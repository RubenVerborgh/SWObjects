// $Id: SPARQLfedScanner.hpp,v 1.3 2008-10-03 07:06:02 eric Exp $

#ifndef SPARQLfedScanner_H
#define SPARQLfedScanner_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    w3c_sw::SPARQLfedParser::token_type				\
    w3c_sw::SPARQLfedScanner::lex(				\
	w3c_sw::SPARQLfedParser::semantic_type* yylval,		\
	w3c_sw::SPARQLfedParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer SPARQLfedFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "SPARQLfedParser/SPARQLfedParser.hpp"

namespace w3c_sw {

/** SPARQLfedScanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to SPARQLfedFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the SPARQLfedScanner class. This is required
 * because the yylex() defined in SPARQLfedFlexLexer has no parameters. */
class SPARQLfedScanner : public SPARQLfedFlexLexer
{
private:
    SPARQLfedDriver* driver;
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    SPARQLfedScanner(SPARQLfedDriver* driver, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~SPARQLfedScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual SPARQLfedParser::token_type lex(
	SPARQLfedParser::semantic_type* yylval,
	SPARQLfedParser::location_type* yylloc
	);
    SPARQLfedParser::token_type lexWrapper(
	   SPARQLfedParser::semantic_type* yylval,
	   SPARQLfedParser::location_type* yylloc
					   ) {
	try {
	    return lex(yylval, yylloc);
	} catch (const char* e) {
	    std::stringstream s;
	    s << *yylloc << ": " << e;
	    throw s.str();
	}
    }

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    SPARQLfedParser::token_type typedLiteral(SPARQLfedParser::semantic_type*&, SPARQLfedParser::token_type tok);
    SPARQLfedParser::token_type unescape(SPARQLfedParser::semantic_type*&, SPARQLfedParser::location_type*&, size_t skip, SPARQLfedParser::token_type tok);

    /** resolvePrefix
     * Assumes barewords are localnames in the default namespace.
     * This leaves it to the lexer to warn about missing prefixes.
     */
    const URI* resolvePrefix (const char* yytext, SPARQLfedParser::location_type* yylloc) {
	std::string stripped;
	YaccDriver::unescapeReserved(yytext, ::strlen(yytext), &stripped, yylloc);

	size_t index = stripped.find(':');
	if (index == std::string::npos)
	    // throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
	    index = 0;
	std::string prefix = stripped.substr(0, index);
	const URI* nspace = driver->getNamespace(prefix, true);
	if (nspace == NULL)
	    nspace = driver->prefixError(prefix, *yylloc);
	stripped.replace(0, index+1, nspace->getLexicalValue());

	return driver->getAbsoluteURI(stripped.c_str());
    }

    const URI* unescapeAndResolveBase (const char* p_rel, size_t len, SPARQLfedParser::location_type* yylloc) {
	std::string stripped;
	YaccDriver::unescapeNumeric(p_rel, len, &stripped, yylloc);
	return driver->getAbsoluteURI(stripped.c_str());
    }


};

} // namespace w3c_sw

#endif // SPARQLfedScanner_H
