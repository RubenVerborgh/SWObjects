#line 2 "lib/MapSetScanner.cpp"

#line 4 "lib/MapSetScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer MapSetFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *MapSetalloc (yy_size_t  );
void *MapSetrealloc (void *,yy_size_t  );
void MapSetfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1012] =
    {   0,
        0,    0,   96,   94,    2,    1,    1,   57,   94,    2,
       94,   94,   94,   35,   36,   19,   54,   42,   55,   37,
       56,   74,   89,   33,   50,   48,   51,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   44,   45,
       94,   94,   43,   94,   94,   30,   94,   31,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,    2,    1,   49,
        0,   86,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   47,    0,   85,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
        0,   76,    0,   78,   75,   75,   74,    0,   90,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
       72,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   53,   92,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   73,    0,    0,   89,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
       69,    0,    0,    0,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   93,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,   93,
       93,   93,   93,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   85,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   77,   77,
        0,   79,   79,    0,    0,   75,    0,    0,   80,   90,
        0,   90,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   90,   90,   90,   90,   90,   90,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   92,   92,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,   92,   92,   92,   92,
       92,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   58,
        0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,   93,   93,   93,   93,
       93,   93,   93,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,   93,   93,   93,

       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   77,    0,    0,   82,    0,   79,    0,    0,   81,
        0,   80,    0,   80,   90,   90,   90,   90,   90,   90,
       90,   90,   90,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   90,   90,   90,   90,
       90,    0,    0,    0,    0,    0,    0,   92,   92,   92,
       92,   92,   92,   92,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   92,   92,   92,
       92,   92,    0,    0,   73,    0,    0,    0,    0,    0,

        0,    0,   16,    0,    0,    0,    0,    0,   27,    0,
       21,    0,    0,    0,    0,    0,    0,   59,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,    0,    0,   91,
        0,   91,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   91,   91,   91,   91,   91,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   70,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,   93,   93,   93,

       93,    0,    0,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   82,    0,   82,    0,   81,
        0,   81,   90,   90,   90,   90,   90,    0,    0,   90,
       92,   92,   92,   92,   92,    0,    0,   92,    0,    0,
       62,    0,    0,    0,    0,    0,   15,    0,    0,   64,
        0,   65,    0,    0,   22,    0,    0,    0,    0,    0,
       68,    0,    0,    0,    0,    0,    0,    0,    0,   32,
       40,    0,    0,   23,   91,   91,   91,   91,   91,   91,
       91,   91,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   91,   91,   91,   91,

       91,    0,    0,   71,   84,    0,    0,    0,    0,   93,
       83,    0,    0,    0,    0,   90,   92,    0,    0,    0,
        0,    0,   41,    0,    0,    0,    0,    0,    0,    0,
       17,    0,    0,    0,    0,   18,    4,    0,    0,   26,
        0,    0,    0,   91,   91,   91,   91,   91,    0,    0,
       91,    0,    0,    0,    0,    0,    0,   66,    0,    0,
       25,    0,    0,    0,    0,    0,    0,   39,    0,    8,
        0,    0,   91,   24,    0,    7,   61,    0,    0,    0,
        0,   38,    6,    0,    0,    0,   63,    0,    0,   13,
       20,   14,    0,   67,    0,    0,    0,    0,    0,   29,

        0,    0,    9,    0,    3,   10,    0,   60,   12,   11,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   67,   74,   75,   76,   77,   78,   79,   80,
       81,   67,   82,   83,   84,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1024] =
    {   0,
        0,    0,  847,10645,  118,10645,  827,  776,  117,  146,
      245,  754,  352,  123,10645,10645,  110,10645,  111,  738,
    10645,  114,  451,10645,  545,10645,  722,  644,    0,  745,
      107,   97,  109,   99,  115,  117,  167,  168,  336,  327,
      337,  173,  339,  334,  357,  170,  537,  536,  296,10645,
      690,  707,    0,  539,  346,10645,  589,10645,  530,  779,
      796,  813,  830,  847,  350,  864,   96,  881,  103,  898,
      915,  932,  949,  966,  109,  969,  986,  265,10645,10645,
     1081,  640, 1082, 1010, 1026, 1116,  378, 1133, 1074, 1150,
     1160, 1177,  501, 1188, 1223, 1239, 1254,  542, 1271, 1288,

     1298, 1308, 1325,  581, 1406, 1440, 1457, 1474, 1491, 1508,
     1525, 1542, 1559,  273, 1576, 1031, 1593, 1610, 1627, 1644,
     1661,  175, 1664, 1681,10645, 1771,  633, 1777, 1705, 1721,
     1806, 1051, 1823, 1840, 1850, 1860, 1877,  683,  630,10645,
      582, 1121,  581, 1802,  113,  354, 1805,  408, 1961, 1995,
     2012, 2029, 2046, 2063, 2080, 2097, 2114,  476, 2131, 1078,
     2148, 2165, 2182, 2199, 2216,  231, 2219, 2236, 2312,    0,
    10645, 2254, 2270, 2285, 1185, 2347, 2302, 2364, 2374, 2391,
     1343,10645, 2472, 2506, 2523, 2540, 2557, 2574, 2591, 2608,
     2625,  495, 2642, 1746, 2659, 2676, 2693, 2710, 2727,  408,

     2730, 2747,  562, 1786, 2827,    0, 1788, 2808, 2809, 2818,
     2835, 2852, 2869, 2886, 2903, 2920,  459, 2937, 2954, 2971,
     2988, 3005, 1888, 3022, 3039, 3056, 3073, 3090,  437, 3093,
     3110, 2810, 2811, 2816, 2817, 2819, 3183, 3181, 3174, 2825,
     3186, 3175, 3223, 3184, 3226, 3232, 3233, 3191, 3244, 3249,
     3276, 3281, 3283, 3303, 3325, 3298, 3330, 3337,  695,10645,
    10645, 3392, 3452, 3317,10645, 3339, 3465, 3470, 3471, 3472,
     3473, 3478, 3469, 3486, 3503, 3520, 3537, 3554, 3571, 3588,
     3605, 3622, 2300, 3639, 3656,10645, 3751, 3674,  499, 3691,
     3721, 3738, 3786, 3803, 3820, 3837, 3854,  498, 3871, 3888,

     3905, 3922, 3939, 3956, 3973,    0,    0, 3990, 4007, 4024,
     4041, 4058, 4075, 4092,  438, 4109, 4126, 4143, 4160, 2309,
     4177, 4194, 4211, 4228, 3708,  502, 4238, 4255,    0,    0,
        0,    0,    0,    0, 4272, 4289, 4306, 4323, 4340, 4357,
     4374, 4391, 4408, 4425, 2397, 4442, 4459,10645, 4549, 4477,
      452, 4494, 4519, 4536, 4584, 4601, 4618, 4635, 1806, 3214,
      409, 3272, 3385,  588, 1834, 3386, 2854,  433,  431,    0,
        0,    0, 4652, 4669, 4686, 4703, 4720, 4737, 4754,  350,
     4771, 4788, 4805, 4822, 4839, 3433, 4856, 4873, 4890, 4907,
     4924,  630, 4927, 4944,    0,    0,    0,    0,    0,    0,

     4961, 4978, 4995, 5012, 5029, 5046, 5063, 5080, 5097, 5114,
     3746, 5131, 5148, 5165,  379, 5182, 5199, 5216, 5233, 5250,
     5267, 5284,    0,    0, 5301, 5318, 5335, 5352, 5369, 5386,
     5403,  333, 5420, 5437, 5454, 5471, 4501, 5488, 5505, 5522,
     5539, 5556,  702, 5559, 5576,    0,    0,    0,    0,    0,
        0, 5593, 5610, 5627, 5644, 5661, 5678, 5695, 5712, 5729,
     5746, 4544, 5763, 5780,    0, 5840, 5841, 5842, 5843, 5848,
     5849, 5850, 5851, 5856, 5857, 5848, 5865, 5882, 5899, 5916,
     5933, 5950, 5967, 5984, 6001, 5807, 6018, 6035, 6104, 6106,
     6097, 6098, 6112, 6111, 6103, 6109, 6118, 6119, 6158, 6155,

     6157, 6168, 6166, 6171, 6177, 6176, 6179, 6207, 6221, 6215,
     6218, 6229, 6223, 6237, 6268, 6231, 6271, 6273, 6279, 6261,
     6289, 6281, 6292, 6313, 6315, 6323, 6381, 6415, 6432, 6449,
     6466, 6483, 6500, 6517, 6534, 1772, 6551, 6275, 6568, 6585,
     6602, 6619, 6636,  731, 6639, 6656, 6716, 6717, 6718, 6719,
     6724, 6725, 6726, 6717, 6734, 6829,  416, 6830, 6758, 6774,
     6864, 6282, 6881, 6822, 6898, 6908, 6925, 6318, 7020, 6943,
     6960, 6990, 7049, 7007, 7084, 7101,    0,    0,    0,    0,
        0,    0,    0, 7118, 7135, 7152, 7169, 7186, 7203, 7220,
     7237, 7254, 7271, 6676, 7288, 7305,    0,    0,    0,    0,

        0, 7322, 7339, 7429,  406, 7435, 7363, 7379, 7464, 6685,
     7481, 6977, 7498, 7508, 7525, 6789, 7615, 7543, 7560, 7585,
     3218, 6859, 3267,  380,  379, 3317, 6861, 3321,  370,  356,
      327,  326,  309,  248,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 7602, 7650, 7667, 7684, 7701, 7718, 7735,
     7752, 7769, 7786, 6798, 7803, 7820,    0,    0,    0,    0,
        0, 7837, 7854, 7930, 7872, 7889, 7906,    0,    0,    0,
        0,    0,    0,    0, 7965, 7982, 7999, 8016, 8033, 8050,
     8067, 8084, 8101, 8118, 6827, 8135, 8152,    0,    0,    0,
        0,    0, 8169, 8186,  250, 7070, 7071, 7072, 7073, 7439,

     8203, 8220, 7442, 7450, 8290, 7453, 8293, 8282, 7444, 8296,
     7451, 8291, 8299, 8301, 8338, 8335, 8341, 8344, 8346, 8357,
     8351, 8383, 8393, 8395, 8394, 8392, 8405, 8402, 8415, 8446,
     8449, 8447, 8439, 8463, 8454, 8495, 8457, 8473, 8497,    0,
        0,    0, 8488, 8505, 8522, 8539, 8556, 8573, 8590,  142,
     7923, 8607, 8624, 8641, 8658, 7567, 8675, 8692, 8709, 8726,
     8743,  994, 8746, 8763,    0,    0,    0,    0,    0,    0,
     8780, 8797, 8814, 8831, 8848, 8865, 8882, 8899, 8916, 8933,
     7404, 8950, 8967, 9027, 8494, 9028,  204, 9019,  141, 9036,
     9053, 9070, 9087, 9104, 9121, 9138,    0,    0,    0,    0,

        0, 9155, 9172,    0,  175, 9189,  130, 9206, 9223, 9240,
     9257, 9274, 9291, 9308,  156,  145,  143,  137,  135,  127,
      121,  101,    0,    0,    0,    0,    0, 9325, 9342,    0,
        0,    0,    0,    0,    0, 9359, 9376,    0, 9436, 9437,
     9438, 9443, 9452, 9444, 9445, 9455, 9453, 9460, 9490, 9491,
     9501, 9496, 9510, 9499, 9504, 9507, 9512, 9518, 9546, 9544,
     9553, 9554, 9561, 9562, 9560, 9580, 9607, 9570, 9601, 9602,
     9608, 9619, 9616, 9614,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 9610, 9627, 9644, 9661, 9678, 9695, 9712,
     9729, 9746, 9763, 7610, 9780, 9797,    0,    0,    0,    0,

        0, 9814, 9831, 9617,10645,    0, 9848, 9865, 9882,    0,
    10645,    0, 9899, 9916, 9933,    0,    0,10000, 9995, 9994,
    10003,10002,10008,10047,10013,10011,10016,10048,10066,10054,
    10055,10061,10074,10069,10093,10075,10101,10115,10109,10110,
    10117,10120,10127,    0,    0,    0,    0,    0,10118,10135,
        0,10195,10207,10206,10209,10214,10215,10198,10216,10252,
    10217,10253,10264,10258,10259,10267,10273,10275,10311,10295,
    10314,10309,    0,10312,10317,10319,10325,10326,10331,10363,
    10362,10349,10368,10379,10373,10384,10376,10407,10414,10394,
    10415,10416,10426,10424,10431,10442,10461,10466,10425,10468,

    10473,10476,10478,10479,10484,10485,10487,10500,10515,10521,
    10645,10596,10601,10606,10609,  116,10614,10619,10621,10626,
    10631,10636,10639
    } ;

static yyconst flex_int16_t yy_def[1024] =
    {   0,
     1011,    1, 1011, 1011, 1011, 1011, 1011, 1011, 1012, 1013,
     1011, 1011, 1014, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1015, 1011, 1011, 1011, 1016, 1011,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1011, 1011,
     1011, 1011,   30,   30,   30, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1012, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1013, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1014, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1015,  169,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1016,   30,   30,   23,   30,   30,   30, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1011, 1011,
     1011, 1011,   30,   30, 1011,   30,   30,   30,   30,   30,
       30,   30, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1017, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011,  105,  105, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  105,  105,
      105,  105,  105,  105, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1018, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  149,
      149,  149, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,  149,  149,  149,  149,  149,  149,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  183,  183, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,  183,  183,  183,  183,  183,
      183, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1019,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011,   30,   30,   30,   30,
       30,   30,   30, 1011, 1011, 1017,  556, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1020, 1011,
     1011, 1011, 1021, 1011, 1011, 1011,  105,  105,  105,  105,
      105,  105,  105, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011,  105,  105,  105,  105,

      105, 1011, 1011, 1018,  604, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1022, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,  149,  149,  149,  149,  149,  149,
      149,  149,  149, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011,  149,  149,  149,  149,
      149, 1011, 1011, 1023, 1011, 1011, 1011,  183,  183,  183,
      183,  183,  183,  183, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011,  183,  183,  183,
      183,  183, 1011, 1011, 1019,   30,   30,   30,   30,   30,

     1011, 1011,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  527,
      527,  527, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,  527,  527,  527,  527,  527,  527,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011,   30,   30,   30,  556, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011,  105,  105,  105,  105,

      105, 1011, 1011,  105,  604, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,  149,  149,  149,  149,  149, 1011, 1011,  149,
      183,  183,  183,  183,  183, 1011, 1011,  183,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  527,  527,  527,  527,  527,  527,
      527,  527,  527, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011,  527,  527,  527,  527,

      527, 1011, 1011,   30, 1011,  556, 1011, 1011, 1011,  105,
     1011,  604, 1011, 1011, 1011,  149,  183,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  527,  527,  527,  527,  527, 1011, 1011,
      527,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  527,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
        0, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011
    } ;

static yyconst flex_int16_t yy_nxt[10765] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   37,   37,   39,
       40,   41,   42,   43,   44,   45,   37,   46,   47,   48,
       37,   37,   49,    4,   50,   51,   52,   53,   31,   32,
       33,   34,   54,   36,   37,   38,   37,   37,   39,   40,
       41,   42,   43,   44,   45,   55,   46,   47,   48,   37,
       37,   56,   57,   58,    4,   59,   60,   61,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   62,   63,   63,

       64,    4,    4,   65,   66,    4,   67,   68,   69,   70,
       71,   72,   73,   74,    4,   75,   76,   77,    4,   78,
      203,  822,   78,   82,  139,  139,  139,  139,  141,  143,
      142,  144,  146,  145,  147,  232,  140,  236,  207,  235,
      238,  822,  207,  233,  207,  365,  148,  820,  207,  234,
      207,  239,  207,  237,  207,  820,  207,  818,  207,  240,
      207,  241,  207,  818,  232,  816,  236,  207,  235,  238,
       83,  207,  233,  207,  365,  148,  816,  207,  234,  207,
      239,  207,  237,  207,  604,  207,  911,  207,  240,  207,
      241,  207,  272,  272,  272,  556,  272,  273,  273,  273,

      273,  273,  273,  273,  282,  282,  283,   84,  207,  242,
      905,  255,  207,  243,  207,  256,  247,   85,  207,   86,
       86,   86,   86,   86,   86,   87,   88,   88,   88,   88,
       89,   90,   90,   91,   92,   93,   95,  207,  242,  740,
      255,  207,  243,  207,  256,  247,   96,  207,   97,   97,
       97,   97,   97,   97,   98,   99,   99,   99,   99,  100,
      101,  101,  102,  103,  104,  105,   78,  465,  634,   78,
      344,  344,  345,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  259,  259,  259,

      259,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  410,  410,  411,  634,
      106,  107,  108,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  109,  110,  110,  111,  632,  632,  112,  113,
      260,  114,  115,  116,  117,  118,  119,  120,  121,  245,
      122,  123,  124,  127,  244,  246,  250,  248,  207,  334,
      334,  334,  207,  334,  366,  207,  630,  207,  207,  207,
      207,  207,  207,  249,  207,  251,  367,  207,  245,  252,
      630,  207,  253,  244,  246,  250,  248,  207,  207,  625,

      625,  207,  207,  254,  207,  128,  207,  207,  207,  207,
      207,  207,  249,  207,  251,  367,  207,  805,  252,  264,
      207,  253,  787,  368,  624,  368,  624,  207,  369,  625,
      423,  207,  254,  169,  271,  271,  271,  271,  271,  271,
      271,  271,  129,  271,  271,  271,  271,  370,  271,  271,
      271,  369,  130,  369,  131,  131,  131,  131,  131,  131,
      132,  133,  133,  133,  133,  134,  135,  135,  136,  137,
      138,  149,  290,  290,  290,  290,  290,  290,  290,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  461,  461,  462,  126,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  485,  485,  486,  306,  150,  151,  152,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  153,  154,
      154,  155,   94,   81,  156,  157,  204,  158,  159,  160,
      161,  162,  163,  164,  165,  257,  166,  167,  168,  170,
      171,  258,  400,  400,  400,  239,  400,  207,  207,  465,
      207,  207,  207,  240,  207,  296,  296,  296,  296,  296,
      296,  451,  451,  451,  257,  451,  263,  593,  593,  594,

      258,  362,  359,  629,  239,  629,  207,  207,  630,  207,
      207,  207,  240,  207,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  139,  139,  139,  139,  172,  299,  299,  299,  299,
      299,  299,  299,  140,  349,  173,  287,  174,  174,  174,
      174,  174,  174,  175,  176,  176,  176,  176,  177,  178,
      178,  179,  180,  181,  183,  305,  305,  305,  305,  305,
      305,  265,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  259,  259,  259,  259,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  653,  653,  654,  262,  184,
      185,  186,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  187,  188,  188,  189,  261,  182,  190,  191,  260,
      192,  193,  194,  195,  196,  197,  198,  199,  145,  200,
      201,  202,  204,  205,  125,  204,  206,  358,  358,  358,
      358,  358,  358,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  208,  207,  207,  207,
      209,  207,  207,  207,  207,  207,  207,  684,  684,  685,

       80,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  208,  207,  207,  207,  209,
      207,  207,  207,  207,  207,  207,  780,  780,  781,   79,
      210,  211,  212,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  214,  215,  215,  216, 1011,  217,  218,  219,
      220,  221,  222,  223,  224,  225,  226,  227,  228, 1011,
      229,  230,  231,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  268,  268,  268,

      268,  268,  268,  268,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  269,  269,  269,  266,  266,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  275,

      276,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  278,  278,  278,  278,  277,  279,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  286,   81,  893,
      893,  894, 1011,   81,  288,  288,  288,  288,  288,  288,

      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  335,  335,  335,  335,  335,
      335,  335, 1011, 1011,   83,   81, 1011, 1011, 1011,  360,
       81,  142, 1011, 1011,   81,  352,  352,  352,  352,  352,
      352,  352,   81,  361, 1011,   81, 1011,   81,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292, 1011, 1011,
     1011,   84,  401,  401,  401,  401,  401,  401,  401, 1011,
     1011,   85,  361,   86,   86,   86,   86,   86,   86,   87,
       88,   88,   88,   88,   89,   90,   90,   91,   92,   93,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,   95,  416,
      416,  416,  416,  416,  416,  416, 1011, 1011,   96, 1011,
       97,   97,   97,   97,   97,   97,   98,   99,   99,   99,

       99,  100,  101,  101,  102,  103,  104,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  303,

      303,  303,  303,  303,  303,  303,  303,  303,  303,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  306,  422,  422,  422,
      422,  422,  422, 1011,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307, 1011, 1011,
     1011, 1011,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307, 1011, 1011, 1011,
     1011,  308,  309,  310,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  312,  313,  313,  314, 1011,  315,  316,
      317, 1011,  318,  319,  320,  321,  322,  323,  324,  325,
     1011,  326,  327,  328,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  331,  331,  331,  331,  331,
      331,  331,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  332,  332,  332,  329,  329,  105,  105,  105,  105,
      105,  105,  105,  105, 1011,  105,  105,  105,  105, 1011,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  337,  338,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  340,  340,  340,  340,
      339,  341,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  348,  126, 1011, 1011, 1011, 1011,  126,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      363, 1011,  144,  146,  128,  147,  359,  207, 1011,  207,
      126,  207, 1011,  207,  364,  126, 1011,  148,  621,  126,
      452,  452,  452,  452,  452,  452,  452,  126, 1011,  631,
      126,  631,  126, 1011,  632, 1011,  207, 1011,  207, 1011,
      207,  129,  207,  364, 1011, 1011,  148,  621,  770,  770,
      770,  130,  770,  131,  131,  131,  131,  131,  131,  132,
      133,  133,  133,  133,  134,  135,  135,  136,  137,  138,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  370,  371,
     1011,  370,  476,  476,  476,  476,  476,  476,  476,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372, 1011, 1011, 1011, 1011,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372, 1011, 1011, 1011, 1011,  373,  374,  375,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  377,  378,
      378,  379, 1011,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  390,  391, 1011,  392,  393,  394,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      397,  397,  397,  397,  397,  397,  397,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  398,  398,  398,  395,
      395,  149,  149,  149,  149,  149,  149,  149,  149, 1011,
      149,  149,  149,  149, 1011,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  403,
      404,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  406,  406,  406,  406,  405,  407,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  171,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  553,  553,  553,  553,

      553, 1011,  172,  584,  584,  584,  584,  584,  584,  584,
     1011, 1011,  173, 1011,  174,  174,  174,  174,  174,  174,
      175,  176,  176,  176,  176,  177,  178,  178,  179,  180,
      181,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  423,  601,  601,  601,  601,  601, 1011, 1011,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424, 1011, 1011, 1011, 1011,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424, 1011, 1011, 1011, 1011,  425,  426,  427,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  429,
      430,  430,  431, 1011,  432,  433,  434, 1011,  435,  436,
      437,  438,  439,  440,  441,  442, 1011,  443,  444,  445,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  448,  448,  448,  448,  448,  448,  448,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  449,  449,  449,
      446,  446,  183,  183,  183,  183,  183,  183,  183,  183,

     1011,  183,  183,  183,  183, 1011,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      454,  455,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  457,  457,  457,  457,  456,  458,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464, 1011,  207,
      207,  207,  490,  207,  207,  489,  207,  207,  492,  466,
      207,  207,  207,  491,  207,  493,  207,  497,  207,  633,
      207,  633,  207, 1011,  634, 1011, 1011, 1011,  207,  207,
      207,  490,  207,  207,  489,  207,  207,  492,  466,  207,
      207,  207,  491,  207,  493,  207,  497,  207, 1011,  207,

     1011,  207,  467,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      470,  470,  470,  470,  470,  470,  470,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  471,  471,  471,  468,
      468,  207,  207,  207,  207,  207,  207,  207,  207, 1011,
      207,  207,  207,  207, 1011,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  474,  474,  474,  207,  474,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  478,  479,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  481,  481,  481,  481,  480,
      482,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  494,  495,  496,  498,  207,  207, 1011, 1011,  207,
      207,  499,  207, 1011,  207,  504,  207,  207,  207,  207,
     1011,  207,  207,  815,  622,  815,  508, 1011,  816, 1011,
      494,  495,  496,  498,  207,  207,  623, 1011,  207,  207,
      499,  207,  500,  207,  504,  207,  207,  207,  207,  501,
      207,  207,  502, 1011,  207,  508,  505,  207,  207, 1011,
      503,  207,  506,  207,  207,  623,  509,  207,  207,  507,
      510,  500,  817,  512,  817,  207,  511,  818,  501,  207,
      207,  502,  362,  207,  207,  505,  207,  207,  513,  503,

      207,  506,  207,  207,  626,  509,  207,  207,  507,  510,
     1011,  517,  512, 1011,  207,  511,  514,  207,  207,  207,
      515,  207,  207,  207,  207,  516,  207,  513,  207, 1011,
      524,  518,  819,  626,  819,  519,  821,  820,  821,  207,
      517,  822, 1011,  207,  207,  514,  207,  520,  207,  515,
      207,  207, 1011,  207,  516,  207,  521,  207,  207,  524,
      518,  522,  207, 1011,  519, 1011,  207,  523,  207,  526,
      207,  207,  207,  207,  525,  207,  520,  207,  207, 1011,
      207, 1011,  207, 1011,  207,  521, 1011,  207, 1011, 1011,
      522,  207, 1011,  548, 1011,  207,  523, 1011,  526,  207,

      207, 1011, 1011,  525,  207,  627,  366,  207, 1011,  207,
     1011,  207,  527,  207, 1011, 1011, 1011,  628,  367, 1011,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527, 1011, 1011,  628,  367,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527, 1011, 1011, 1011, 1011,  528,  529,  530,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  531,
      532,  532,  533,  207, 1011,  534,  535,  207,  536,  537,

      538,  539,  540,  541,  542,  543,  207,  544,  545,  546,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      547, 1011,  207,  207, 1011, 1011,  207,  644,  644,  644,
      644,  644,  644,  644, 1011,  207, 1011, 1011, 1011,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207, 1011,
     1011, 1011,  207,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  266,  266,  266,
      266,  266,  267,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  267,  267,  267,  267,
      267,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  266,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  557,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,  592,  592,  592,  592,  592,  592,  592,  592,

      592,  592, 1011, 1011,  558,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81, 1011,
     1011,  559,  661,  661,  661,  661,  661, 1011, 1011, 1011,
     1011,  560, 1011,  561,  561,  561,  561,  561,  561,  562,
      563,  563,  563,  563,  564,  565,  565,  566,  567,  568,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  577,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  579,  579,  579,  579,  579,  579,  579,  579,  579,

      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  580,  580,  580,  580,  580,  580,  580,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  581,  581,
      581,  578,  578,  307,  307,  307,  307,  307,  307,  307,

      307, 1011,  307,  307,  307,  307, 1011,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  583,
      583,  583, 1011,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  586,  587,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      589,  589,  589,  589,  588,  590,  588,  588,  588,  588,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      329,  329,  329,  329,  329,  330,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  330,
      330,  330,  330,  330,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  329,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      605,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  675,  675,  675,  675,  675,

      675,  675,  606,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126, 1011, 1011,  607,
      692,  692,  692,  692,  692, 1011, 1011, 1011, 1011,  608,
     1011,  609,  609,  609,  609,  609,  609,  610,  611,  611,
      611,  611,  612,  613,  613,  614,  615,  616,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  635,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  638,  638,  638,  638,  638,  638,
      638,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      639,  639,  639,  636,  636,  372,  372,  372,  372,  372,
      372,  372,  372, 1011,  372,  372,  372,  372, 1011,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  642,  642,
      642,  372,  642,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  646,  647,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  649,
      649,  649,  649,  648,  650,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  395,
      395,  395,  395,  395,  396,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  395,  395,  395,  395,  395,  395,  396,  396,
      396,  396,  396,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  395,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  668,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  671,  671,  671,  671,  671,  671,  671,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  672,

      672,  672,  669,  669,  424,  424,  424,  424,  424,  424,
      424,  424, 1011,  424,  424,  424,  424, 1011,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      674,  674,  674, 1011,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  677,
      678,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  680,  680,  680,  680,  679,  681,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  688,  688,  688,  688,  688,  688,

      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  446,  446,  446,  446,  446,  447,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      447,  447,  447,  447,  447,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  446,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207, 1011,

     1011,  207,  207,  700,  700,  700,  700,  700, 1011, 1011,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207, 1011, 1011,
      207,  207,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  468,  468,  468,  468,
      468,  469,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  467,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  469,  469,  469,  469,  469,

      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  468,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  703,  704,  705,  207,
      707,  708,  207,  706,  207,  207, 1011,  207,  709,  207,
      207,  207,  207,  207,  207,  710,  207,  207,  711,  207,
      207, 1011,  712,  207,  207,  703,  704,  705,  207,  707,
      708,  207,  706,  207,  207, 1011,  207,  709,  207,  207,
      207,  207,  207,  207,  710,  207,  207,  711,  207,  207,
      713,  712,  207,  207,  714, 1011,  207, 1011,  207,  207,

      207,  715,  207,  207,  716,  718,  719,  207,  720,  207,
      717,  207,  207,  207, 1011,  721,  207,  207,  207,  713,
      207,  207,  207,  714,  207,  207, 1011,  207,  207,  207,
      715,  207,  207,  716,  718,  719,  207,  720,  207,  717,
      207,  207,  207, 1011,  721,  207,  207,  207,  207,  207,
      207,  207,  722,  207,  723,  724,  207, 1011,  725,  207,
      207,  726,  207,  207,  207, 1011,  207,  727,  207,  728,
      207, 1011,  207, 1011,  207, 1011,  207,  207,  207,  730,
     1011,  722,  207,  723,  724,  207, 1011,  725,  207,  207,
      726,  207,  207,  207, 1011,  207,  727,  207,  728,  207,

      729,  207,  207,  207, 1011,  207,  207,  207,  730,  207,
     1011,  207,  207,  207,  207,  731,  207,  732,  207,  733,
      207,  734,  207,  735,  207, 1011,  207, 1011, 1011,  729,
      207,  207, 1011,  207,  207,  207,  736,  207,  207, 1011,
     1011,  207,  207,  207,  731,  207,  732,  207,  733,  207,
      734,  207,  735,  207,  207,  207,  738,  737,  207,  207,
      207, 1011,  207,  207,  207,  736,  207,  739,  207,  771,
      771,  771,  771,  771,  771,  771,  790,  790,  790,  790,
      790,  790,  790,  207, 1011,  738,  737,  207, 1011,  207,
     1011, 1011, 1011,  207, 1011, 1011,  739,  207,  740,  741,

     1011,  740,  796,  796,  796,  796,  796,  796, 1011,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742, 1011, 1011, 1011, 1011,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742, 1011, 1011, 1011, 1011,  743,  744,  745,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  747,  748,
      748,  749, 1011,  750,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  760,  761, 1011,  762,  763,  764,  765,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      767,  767,  767,  767,  767,  767,  767,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  768,  768,  768,  765,

      765,  527,  527,  527,  527,  527,  527,  527,  527, 1011,
      527,  527,  527,  527, 1011,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  773,
      774,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  776,  776,  776,  776,  775,  777,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207, 1011,  207,
      207,  207,  801,  801,  801,  801,  801, 1011,  785,  808,
      808,  808,  808,  808,  808,  808,  207,  207,  207,  207,
      784,  207,  207,  207,  207,  207,  207, 1011,  207,  207,

      207,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  557,  556, 1011, 1011, 1011,
     1011,  556,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  814,  814,  814,  814,  814,  814,  622,
     1011,  627,  558,  556, 1011, 1011, 1011, 1011,  556, 1011,
     1011,  623,  556,  628,  827,  827,  827,  827,  827, 1011,

      556, 1011, 1011,  556, 1011,  556,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792, 1011, 1011, 1011,  559,
      623, 1011,  628,  835,  835,  835,  835,  835, 1011,  560,
     1011,  561,  561,  561,  561,  561,  561,  562,  563,  563,
      563,  563,  564,  565,  565,  566,  567,  568,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  794,

      794,  794,  794,  794,  794,  794,  794,  794,  794,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  286,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810, 1011, 1011,   83,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94, 1011, 1011,
       84,  207,  207,  207,  207,  207,  207,  207,  207, 1011,
       85, 1011,   86,   86,   86,   86,   86,   86,   87,   88,
       88,   88,   88,   89,   90,   90,   91,   92,   93,   95,
      207,  207,  207,  207,  207,  207,  207,  207, 1011,   96,
     1011,   97,   97,   97,   97,   97,   97,   98,   99,   99,
       99,   99,  100,  101,  101,  102,  103,  104,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,

      298,  298,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  578,  578,  578,  578,
      578,  579,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  577,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  578,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      605,  604, 1011, 1011, 1011, 1011,  604,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807, 1011, 1011,
      207, 1011,  606,  207,  207,  207,  840,  207,  604,  207,
     1011,  207,  207,  604,  207,  207,  207,  604,  207,  842,

      901,  901,  901,  901,  901,  604, 1011, 1011,  604,  207,
      604, 1011,  207,  207,  207,  840,  207, 1011,  207,  607,
      207,  207, 1011,  207,  207,  207, 1011,  207,  842,  608,
     1011,  609,  609,  609,  609,  609,  609,  610,  611,  611,
      611,  611,  612,  613,  613,  614,  615,  616,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  812,

      812,  812,  812,  812,  812,  812,  812,  812,  812,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  348,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  884,  884,  884,  884,  884,  884,  884,  128,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643, 1011, 1011,  129,  948,  948,  948,  948,
      948, 1011, 1011, 1011, 1011,  130, 1011,  131,  131,  131,
      131,  131,  131,  132,  133,  133,  133,  133,  134,  135,
      135,  136,  137,  138,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  636,  636,  636,  636,  636,  637,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  635,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      637,  637,  637,  637,  637,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  636,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,

      828,  828,  828,  828,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  171,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  415,  742,  742,  742,
      742,  742,  742,  742,  742, 1011,  742,  742,  742,  742,
      172,  742,  742,  742, 1011, 1011, 1011, 1011, 1011, 1011,
      173, 1011,  174,  174,  174,  174,  174,  174,  175,  176,
      176,  176,  176,  177,  178,  178,  179,  180,  181,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  669,  669,  669,  669,  669,  670,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  668,

      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  670,  670,  670,  670,  670,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  669,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  841,  843,  207,  845, 1011,  847,  207,  846,  849,
     1011,  207,  207, 1011,  207,  207,  207,  207,  207,  844,
      207,  207,  207,  848,  207, 1011,  207, 1011, 1011, 1011,
      841,  843,  207,  845, 1011,  847,  207,  846,  849, 1011,
      207,  207, 1011,  207,  207,  207,  207,  207,  844,  207,
      207,  207,  848,  207,  850,  207,  207,  852,  854,  207,
      207,  851,  207,  207,  853,  207,  207,  207,  855,  207,
     1011,  207,  207,  856, 1011, 1011,  207, 1011,  207, 1011,

     1011, 1011,  207,  850, 1011,  207,  852,  854,  207,  207,
      851,  207,  207,  853,  207,  207,  207,  855,  207, 1011,
      207,  207,  856,  859,  207,  207, 1011,  207,  207,  858,
      860,  207,  857,  207,  207,  207,  207,  207,  207,  207,
      207,  862,  861,  207, 1011,  864,  207,  207,  863, 1011,
      207, 1011,  859,  207, 1011, 1011,  207,  207,  858,  860,
      207,  857,  207,  207,  207,  207,  207,  207,  207,  207,
      862,  861,  207, 1011,  864,  207,  207,  863,  865,  207,
      207,  867,  866, 1011,  207,  207,  869,  207,  207,  207,
      207,  207,  207,  868,  207,  871,  870, 1011,  207,  207,

     1011,  873,  207, 1011,  207, 1011, 1011,  865,  207,  207,
      867,  866, 1011,  207,  207,  869,  207,  207,  207,  207,
      207,  207,  868,  207,  871,  870,  872,  207,  207,  874,
      873,  207, 1011,  207, 1011,  207,  207,  207,  207,  207,
      207, 1011,  207,  207, 1011, 1011, 1011,  207, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,  872, 1011, 1011,  874, 1011,
     1011, 1011, 1011, 1011,  207,  207, 1011,  207,  207,  207,
     1011,  207,  875,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,

      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      878,  878,  878,  878,  878,  878,  878,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  879,  879,  879,  876,
      876,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  882,  882,  882,
      742,  882,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  886,  887,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  889,  889,
      889,  889,  888,  890,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  765,  765,

      765,  765,  765,  766,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  766,  766,  766,
      766,  766,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  765,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,

      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  207,  207,
     1011, 1011,  207,  207, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  904, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011,  207,  207, 1011,

     1011,  207,  207,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,

      907,  907,  907,  907,  907,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  915,  915,  915,  915,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  207,  918,  207,
      920,  207,  207,  207,  207,  207,  922,  919,  207,  207,
      207, 1011, 1011,  207,  207,  921,  207,  207,  207,  923,

      207,  207, 1011, 1011, 1011,  924,  207,  918,  207,  920,
      207,  207,  207,  207,  207,  922,  919,  207,  207,  207,
     1011, 1011,  207,  207,  921,  207,  207,  207,  923,  207,
      207,  925,  207,  926,  924,  207,  207,  207,  927, 1011,
      207,  207,  207,  928,  207,  207,  207, 1011,  929,  207,
     1011,  207,  207,  207,  930,  207, 1011,  207, 1011,  207,
      925,  207,  926,  207,  207,  207,  207,  927,  931,  207,
      207,  207,  928,  207,  207,  207, 1011,  929,  207, 1011,
      207,  207,  207,  930,  207,  207,  207,  207,  207,  933,
      932,  207,  207,  935,  207,  207, 1011,  931,  207,  207,

      934,  207,  207,  207,  937,  207,  207,  207,  936, 1011,
      938,  207, 1011, 1011,  207,  940,  207, 1011,  933,  932,
      207,  207,  935,  207,  207,  207, 1011,  207,  207,  934,
      207,  207,  207,  937,  207,  207,  207,  936,  939,  938,
      207, 1011,  207,  207,  940,  941,  207,  207,  207,  207,
      207,  942,  207,  207,  207,  207,  943,  207,  207,  207,
      207,  207,  207, 1011,  207, 1011, 1011,  939, 1011, 1011,
     1011,  207,  207, 1011,  941,  207,  207,  207,  207, 1011,
      942,  207,  207, 1011,  207,  943,  207,  207,  207,  207,
      207,  207, 1011,  207,  883,  883,  883,  883,  883,  883,

      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  876,  876,
      876,  876,  876,  877,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  875,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  877,  877,  877,
      877,  877,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  876,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  951,  951,

      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  952,  207,  207, 1011,  956,  954,
      207,  207,  953,  207,  207,  207,  955,  207,  207,  207,
     1011,  958,  207,  207,  207,  959,  207,  207,  207, 1011,
     1011,  207,  960,  952,  207,  207, 1011,  956,  954,  207,
      207,  953,  207,  207,  207,  955,  207,  207,  207,  957,
      958,  207,  207,  207,  959,  207,  207,  207,  207,  207,
      207,  960,  207,  961,  962,  207,  207, 1011,  963,  207,

      207,  966,  207, 1011,  965, 1011,  207,  207,  957, 1011,
      207,  207,  964, 1011,  207,  207,  207,  207,  207,  207,
      207,  207,  961,  962,  207,  207, 1011,  963,  207,  207,
      966,  207, 1011,  965,  207,  207,  207,  967,  207,  207,
      207,  964,  207,  207,  207,  207,  207,  968,  207,  207,
      207,  207, 1011,  970,  207,  207,  207,  969,  207,  972,
      207,  207,  207,  207,  971,  207,  967,  207,  207, 1011,
     1011,  207,  207, 1011, 1011,  207,  968, 1011, 1011,  207,
      207, 1011,  970,  207,  207,  207,  969,  207,  972,  207,
      207,  207, 1011,  971,  207, 1011, 1011,  207, 1011, 1011,

     1011,  207,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  207,  975,  976,  207,
      974,  977,  978,  207,  980,  979, 1011,  207,  207, 1011,
      207,  207,  207, 1011,  207,  207,  207,  207,  207,  207,
      207,  207,  207, 1011, 1011,  207,  975,  976,  207,  974,
      977,  978,  207,  980,  979, 1011,  207,  207, 1011,  207,
      207,  207,  981,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  982,  207,  207,  983,  984,  207,  207,  207,

      207, 1011, 1011,  207,  207,  207,  985, 1011,  207,  207,
     1011,  981,  207,  987,  207,  986,  207, 1011,  207, 1011,
      207,  982,  207,  207,  983,  984,  207,  207,  207,  207,
     1011, 1011,  207,  207,  207,  985,  207,  207,  207,  988,
      207,  207,  987,  207,  986,  207,  989,  207, 1011,  207,
      207, 1011,  207,  207,  990,  207,  207,  207,  207,  207,
      207, 1011,  207,  991,  207,  207,  207,  992,  988,  207,
      207,  207,  207, 1011, 1011,  989,  207,  993, 1011,  207,
     1011,  207,  207,  990,  207,  207,  207,  207,  207,  207,
      207,  207,  991,  207,  207,  207,  992,  995, 1011,  207,

      207,  207,  994,  207,  207,  207,  993,  207,  207,  207,
     1011,  996,  998,  207,  207,  997, 1011,  207,  207,  207,
      207,  207, 1011,  207,  207,  207,  995, 1011, 1011,  207,
     1011,  994,  207,  207, 1011,  207,  207,  207,  207,  207,
      996,  998,  207,  207,  997, 1000,  207,  207,  207,  207,
      207,  999,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207, 1001, 1002,  207,  207,  207,  207,  207,  207,
     1006,  207,  207, 1011, 1000, 1011,  207,  207, 1011, 1011,
      999,  207, 1011,  207,  207,  207,  207,  207,  207,  207,
      207, 1001, 1002, 1003,  207,  207,  207, 1011,  207, 1006,

      207,  207,  207, 1011, 1011,  207,  207,  207, 1004,  207,
     1005,  207,  207,  207,  207, 1007,  207,  207,  207,  207,
      207, 1008, 1003,  207, 1009,  207,  207, 1011, 1010,  207,
      207,  207,  207, 1011, 1011,  207,  207, 1004,  207, 1005,
      207,  207,  207,  207, 1007,  207,  207,  207,  207,  207,
     1008, 1011,  207, 1009,  207,  207,  207, 1010,  207,  207,
      207,  207,  207, 1011, 1011, 1011,  207, 1011, 1011, 1011,
      207, 1011, 1011, 1011,  207, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011,  207, 1011, 1011, 1011,  207,
     1011,  207, 1011, 1011, 1011,  207,   81, 1011,   81,   81,

       81,   94, 1011,   94,   94,   94,  126, 1011,  126,  126,
      126,  169,  169,  169,  556,  556,  556,  556,  556,  604,
      604,  604,  604,  604,  695,  695,   81, 1011,   81,   81,
       81,   94, 1011,   94,   94,   94,  126, 1011,  126,  126,
      126,  169,  169,  169,    3, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011
    } ;

static yyconst flex_int16_t yy_chk[10765] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
     1016,  822,    5,    9,   14,   14,   14,   14,   17,   19,
       17,   19,   22,  145,   22,   31,   14,   33,   32,   32,
       34,  821,   32,   31,   34,  145,   22,  820,   31,   31,
       33,   35,   31,   33,   33,  819,   35,  818,   36,   35,
       35,   36,   36,  817,   31,  816,   33,   32,   32,   34,
        9,   32,   31,   34,  145,   22,  815,   31,   31,   33,
       35,   31,   33,   33,  807,   35,  805,   36,   35,   35,
       36,   36,   67,   67,   67,  789,   67,   69,   69,   69,

       69,   69,   69,   69,   75,   75,   75,    9,   37,   38,
      787,   46,   37,   38,   42,   46,   42,    9,   42,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   37,   38,  750,
       46,   37,   38,   42,   46,   42,   10,   42,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   11,   78,  695,  634,   78,
      122,  122,  122,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   49,   49,   49,

       49,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  166,  166,  166,  633,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  632,  631,   11,   11,
       49,   11,   11,   11,   11,   11,   11,   11,   11,   40,
       11,   11,   11,   13,   39,   41,   44,   43,   40,  114,
      114,  114,   40,  114,  146,   44,  630,   39,   41,   44,
       43,   39,   41,   43,   43,   45,  146,   55,   40,   45,
      629,   55,   45,   39,   41,   44,   43,   40,   45,  625,

      624,   40,   45,   45,   44,   13,   39,   41,   44,   43,
       39,   41,   43,   43,   45,  146,   55,  605,   45,   55,
       55,   45,  557,  148,  361,  148,  361,   45,  148,  361,
      432,   45,   45,  415,   65,   65,   65,   65,   65,   65,
       65,   65,   13,   65,   65,   65,   65,  380,   65,   65,
       65,  369,   13,  368,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   23,   87,   87,   87,   87,   87,   87,   87,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,  200,  200,  200,  351,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  229,  229,  229,  315,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  298,  289,   23,   23,  217,   23,   23,   23,
       23,   23,   23,   23,   23,   47,   23,   23,   23,   25,
       25,   48,  158,  158,  158,   54,  158,   48,   47,  203,
       54,   48,   47,   54,   54,   93,   93,   93,   93,   93,
       93,  192,  192,  192,   47,  192,   54,  326,  326,  326,

       48,  143,  141,  364,   54,  364,   48,   47,  364,   54,
       48,   47,   54,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,  139,  139,  139,  139,   25,   98,   98,   98,   98,
       98,   98,   98,  139,  127,   25,   82,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,  104,  104,  104,  104,  104,
      104,   57,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  259,  259,  259,  259,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  392,  392,  392,   52,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   51,   27,   28,   28,  259,
       28,   28,   28,   28,   28,   28,   28,   28,   20,   28,
       28,   28,   30,   30,   12,   30,   30,  138,  138,  138,
      138,  138,  138,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  443,  443,  443,

        8,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  544,  544,  544,    7,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,    3,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,    0,
       30,   30,   30,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   81,   83,  762,
      762,  762,    0,   83,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,  116,  116,  116,  116,  116,
      116,  116,    0,    0,   81,   83,    0,    0,    0,  142,
       83,  142,    0,    0,   83,  132,  132,  132,  132,  132,
      132,  132,   83,  142,    0,   83,    0,   83,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,    0,    0,
        0,   81,  160,  160,  160,  160,  160,  160,  160,    0,
        0,   81,  142,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   94,  175,
      175,  175,  175,  175,  175,  175,    0,    0,   94,    0,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  105,  181,  181,  181,
      181,  181,  181,    0,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,    0,    0,
        0,    0,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,    0,    0,    0,
        0,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,    0,  105,  105,
      105,    0,  105,  105,  105,  105,  105,  105,  105,  105,
        0,  105,  105,  105,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  112,  112,  112,  112,
      112,  112,  112,  112,    0,  112,  112,  112,  112,    0,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  126,  128,    0,    0,    0,    0,  128,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      144,    0,  144,  147,  126,  147,  359,  204,    0,  207,
      128,  204,    0,  207,  144,  128,    0,  147,  359,  128,
      194,  194,  194,  194,  194,  194,  194,  128,    0,  365,
      128,  365,  128,    0,  365,    0,  204,    0,  207,    0,
      204,  126,  207,  144,    0,    0,  147,  359,  536,  536,
      536,  126,  536,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  149,  149,
        0,  149,  223,  223,  223,  223,  223,  223,  223,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,    0,    0,    0,    0,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,    0,    0,    0,    0,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,    0,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,    0,  149,  149,  149,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  156,  156,  156,  156,  156,  156,  156,  156,    0,
      156,  156,  156,  156,    0,  156,  156,  156,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  169,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  283,  283,  283,  283,

      283,    0,  169,  320,  320,  320,  320,  320,  320,  320,
        0,    0,  169,    0,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  183,  345,  345,  345,  345,  345,    0,    0,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,    0,    0,    0,    0,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,    0,    0,    0,    0,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,    0,  183,  183,  183,    0,  183,  183,
      183,  183,  183,  183,  183,  183,    0,  183,  183,  183,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  190,  190,  190,  190,  190,  190,  190,  190,

        0,  190,  190,  190,  190,    0,  190,  190,  190,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  205,  208,
      209,  232,  233,  208,  209,  232,  233,  234,  235,  208,
      236,  234,  235,  234,  236,  236,  240,  240,  205,  367,
      240,  367,  205,    0,  367,    0,    0,    0,  208,  209,
      232,  233,  208,  209,  232,  233,  234,  235,  208,  236,
      234,  235,  234,  236,  236,  240,  240,  205,    0,  240,

        0,  205,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  218,  218,  218,  218,  218,  218,  218,  218,    0,
      218,  218,  218,  218,    0,  218,  218,  218,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  237,  238,  239,  241,  239,  242,    0,    0,  239,
      242,  242,  238,    0,  237,  244,  238,  241,  237,  244,
        0,  241,  248,  621,  360,  621,  248,    0,  621,    0,
      237,  238,  239,  241,  239,  242,  360,    0,  239,  242,
      242,  238,  243,  237,  244,  238,  241,  237,  244,  243,
      241,  248,  243,    0,  243,  248,  245,  245,  243,    0,
      243,  245,  246,  246,  247,  360,  249,  246,  247,  247,
      249,  243,  623,  250,  623,  249,  249,  623,  243,  249,
      250,  243,  362,  243,  250,  245,  245,  243,  250,  243,

      245,  246,  246,  247,  362,  249,  246,  247,  247,  249,
        0,  253,  250,    0,  249,  249,  251,  251,  249,  250,
      252,  251,  252,  250,  253,  252,  252,  250,  253,    0,
      256,  254,  626,  362,  626,  254,  628,  626,  628,  256,
      253,  628,    0,  256,  254,  251,  251,  254,  254,  252,
      251,  252,    0,  253,  252,  252,  255,  253,  264,  256,
      254,  255,  264,    0,  254,    0,  255,  255,  256,  258,
      255,  257,  256,  254,  257,  257,  254,  254,  258,    0,
      266,    0,  258,    0,  266,  255,    0,  264,    0,    0,
      255,  264,    0,  264,    0,  255,  255,    0,  258,  255,

      257,    0,    0,  257,  257,  363,  366,  258,    0,  266,
        0,  258,  262,  266,    0,    0,    0,  363,  366,    0,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,    0,    0,  363,  366,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,    0,    0,    0,    0,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  263,    0,  262,  262,  263,  262,  262,

      262,  262,  262,  262,  262,  262,  267,  262,  262,  262,
      267,  268,  269,  270,  271,  268,  269,  270,  271,  272,
      263,    0,  263,  272,    0,    0,  263,  386,  386,  386,
      386,  386,  386,  386,    0,  267,    0,    0,    0,  267,
      268,  269,  270,  271,  268,  269,  270,  271,  272,    0,
        0,    0,  272,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,

      281,  281,  281,  281,  281,  281,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  287,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,    0,    0,  287,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,    0,
        0,  287,  411,  411,  411,  411,  411,    0,    0,    0,
        0,  287,    0,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  309,  309,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  316,  316,  316,  316,  316,  316,  316,

      316,    0,  316,  316,  316,  316,    0,  316,  316,  316,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,    0,  318,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  323,  323,  323,  323,  323,

      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,

      337,  337,  337,  337,  337,  337,  337,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  343,  343,  343,  343,  343,  343,  343,  343,

      343,  343,  343,  343,  343,  343,  343,  343,  343,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      349,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  437,  437,  437,  437,  437,

      437,  437,  349,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,    0,    0,  349,
      462,  462,  462,  462,  462,    0,    0,    0,    0,  349,
        0,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  381,  381,  381,  381,  381,
      381,  381,  381,    0,  381,  381,  381,  381,    0,  381,
      381,  381,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  433,  433,  433,  433,  433,  433,
      433,  433,    0,  433,  433,  433,  433,    0,  433,  433,
      433,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,    0,  435,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  466,  467,  468,  469,  466,  467,  468,  469,  470,
      471,  472,  473,  470,  471,  472,  473,  474,  475,    0,

        0,  474,  475,  486,  486,  486,  486,  486,    0,    0,
      466,  467,  468,  469,  466,  467,  468,  469,  470,  471,
      472,  473,  470,  471,  472,  473,  474,  475,    0,    0,
      474,  475,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  489,  490,  491,  492,
      493,  494,  491,  492,  495,  489,    0,  490,  495,  489,
      496,  490,  494,  493,  496,  496,  494,  493,  497,  497,
      498,    0,  498,  497,  498,  489,  490,  491,  492,  493,
      494,  491,  492,  495,  489,    0,  490,  495,  489,  496,
      490,  494,  493,  496,  496,  494,  493,  497,  497,  498,
      499,  498,  497,  498,  500,    0,  500,    0,  501,  499,

      500,  501,  501,  499,  502,  504,  505,  503,  506,  502,
      503,  503,  504,  502,    0,  507,  504,  506,  505,  499,
      507,  506,  505,  500,  507,  500,    0,  501,  499,  500,
      501,  501,  499,  502,  504,  505,  503,  506,  502,  503,
      503,  504,  502,    0,  507,  504,  506,  505,  508,  507,
      506,  505,  508,  507,  509,  510,  510,    0,  511,  511,
      510,  512,  509,  511,  513,    0,  509,  513,  513,  514,
      512,    0,  516,    0,  512,    0,  516,  508,  514,  516,
        0,  508,  514,  509,  510,  510,    0,  511,  511,  510,
      512,  509,  511,  513,    0,  509,  513,  513,  514,  512,

      515,  516,  520,  512,    0,  516,  520,  514,  516,  515,
        0,  514,  517,  515,  518,  517,  517,  518,  518,  519,
      519,  521,  522,  522,  519,    0,  522,    0,    0,  515,
      521,  520,    0,  523,  521,  520,  523,  523,  515,    0,
        0,  517,  515,  518,  517,  517,  518,  518,  519,  519,
      521,  522,  522,  519,  524,  522,  525,  524,  524,  521,
      525,    0,  523,  521,  526,  523,  523,  526,  526,  538,
      538,  538,  538,  538,  538,  538,  562,  562,  562,  562,
      562,  562,  562,  524,    0,  525,  524,  524,    0,  525,
        0,    0,    0,  526,    0,    0,  526,  526,  527,  527,

        0,  527,  568,  568,  568,  568,  568,  568,    0,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,    0,    0,    0,    0,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,    0,    0,    0,    0,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,    0,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,    0,  527,  527,  527,  528,

      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  534,  534,  534,  534,  534,  534,  534,  534,    0,
      534,  534,  534,  534,    0,  534,  534,  534,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  541,  541,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  547,  548,  549,
      550,  547,  548,  549,  550,  551,  552,  553,    0,  551,
      552,  553,  594,  594,  594,  594,  594,    0,  548,  610,
      610,  610,  610,  610,  610,  610,  547,  548,  549,  550,
      547,  548,  549,  550,  551,  552,  553,    0,  551,  552,

      553,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  556,  558,    0,    0,    0,
        0,  558,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  616,  616,  616,  616,  616,  616,  622,
        0,  627,  556,  558,    0,    0,    0,    0,  558,    0,
        0,  622,  558,  627,  654,  654,  654,  654,  654,    0,

      558,    0,    0,  558,    0,  558,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,    0,    0,    0,  556,
      622,    0,  627,  685,  685,  685,  685,  685,    0,  556,
        0,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  569,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,    0,    0,  569,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,    0,    0,
      569,  696,  697,  698,  699,  696,  697,  698,  699,    0,
      569,    0,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  573,
      696,  697,  698,  699,  696,  697,  698,  699,    0,  573,
        0,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,

      589,  589,  589,  589,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      604,  606,    0,    0,    0,    0,  606,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,    0,    0,
      700,    0,  604,  703,  700,  709,  704,  703,  606,  709,
        0,  704,  711,  606,  706,  704,  711,  606,  706,  706,

      781,  781,  781,  781,  781,  606,    0,    0,  606,  700,
      606,    0,  703,  700,  709,  704,  703,    0,  709,  604,
      704,  711,    0,  706,  704,  711,    0,  706,  706,  604,
        0,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  614,

      614,  614,  614,  614,  614,  614,  614,  614,  614,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  617,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  756,  756,  756,  756,  756,  756,  756,  617,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  644,    0,    0,  617,  894,  894,  894,  894,
      894,    0,    0,    0,    0,  617,    0,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  664,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  751,  751,  751,
      751,  751,  751,  751,  751,    0,  751,  751,  751,  751,
      664,  751,  751,  751,    0,    0,    0,    0,    0,    0,
      664,    0,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,

      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,

      683,  683,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,

      701,  701,  701,  701,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  705,  707,  708,  708,    0,  712,  708,  710,  714,
        0,  705,  712,    0,  707,  705,  712,  710,  707,  707,
      713,  710,  714,  713,  713,    0,  714,    0,    0,    0,
      705,  707,  708,  708,    0,  712,  708,  710,  714,    0,
      705,  712,    0,  707,  705,  712,  710,  707,  707,  713,
      710,  714,  713,  713,  715,  714,  716,  717,  719,  715,
      716,  716,  717,  715,  718,  718,  717,  719,  720,  718,
        0,  719,  721,  721,    0,    0,  721,    0,  720,    0,

        0,    0,  720,  715,    0,  716,  717,  719,  715,  716,
      716,  717,  715,  718,  718,  717,  719,  720,  718,    0,
      719,  721,  721,  724,  722,  721,    0,  720,  722,  723,
      725,  720,  722,  726,  723,  725,  724,  726,  723,  725,
      724,  727,  726,  728,    0,  729,  727,  728,  728,    0,
      727,    0,  724,  722,    0,    0,  729,  722,  723,  725,
      729,  722,  726,  723,  725,  724,  726,  723,  725,  724,
      727,  726,  728,    0,  729,  727,  728,  728,  730,  727,
      733,  731,  730,    0,  733,  729,  733,  730,  732,  729,
      731,  730,  732,  732,  731,  735,  734,    0,  737,  735,

        0,  738,  737,    0,  734,    0,    0,  730,  734,  733,
      731,  730,    0,  733,  738,  733,  730,  732,  738,  731,
      730,  732,  732,  731,  735,  734,  736,  737,  735,  739,
      738,  737,    0,  734,    0,  785,  736,  734,  739,  785,
      736,    0,  739,  738,    0,    0,    0,  738,    0,    0,
        0,    0,    0,    0,    0,  736,    0,    0,  739,    0,
        0,    0,    0,    0,  785,  736,    0,  739,  785,  736,
        0,  739,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  752,  752,  752,  752,  752,  752,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  752,  752,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  759,  759,  759,  759,  759,  759,  759,

      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,

      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  784,  786,
        0,    0,  784,  786,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  784,    0,
        0,    0,    0,    0,    0,    0,    0,  784,  786,    0,

        0,  784,  786,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,

      794,  794,  794,  794,  794,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

      808,  808,  808,  808,  808,  808,  808,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  839,  840,  841,
      843,  839,  840,  841,  842,  844,  845,  842,  842,  844,
      845,    0,    0,  843,  847,  844,  846,  843,  847,  846,

      846,  848,    0,    0,    0,  848,  839,  840,  841,  843,
      839,  840,  841,  842,  844,  845,  842,  842,  844,  845,
        0,    0,  843,  847,  844,  846,  843,  847,  846,  846,
      848,  849,  850,  851,  848,  849,  850,  852,  853,    0,
      854,  852,  851,  854,  854,  855,  851,    0,  856,  855,
        0,  853,  856,  857,  857,  853,    0,  857,    0,  858,
      849,  850,  851,  858,  849,  850,  852,  853,  858,  854,
      852,  851,  854,  854,  855,  851,    0,  856,  855,    0,
      853,  856,  857,  857,  853,  860,  857,  859,  858,  860,
      859,  859,  858,  863,  861,  862,    0,  858,  861,  862,

      862,  865,  863,  864,  865,  865,  863,  864,  864,    0,
      866,  868,    0,    0,  860,  868,  859,    0,  860,  859,
      859,  866,  863,  861,  862,  866,    0,  861,  862,  862,
      865,  863,  864,  865,  865,  863,  864,  864,  867,  866,
      868,    0,  869,  870,  868,  869,  869,  870,  867,  871,
      866,  872,  867,  871,  866,  874,  873,  873,  904,  874,
      872,  873,  904,    0,  872,    0,    0,  867,    0,    0,
        0,  869,  870,    0,  869,  869,  870,  867,  871,    0,
      872,  867,  871,    0,  874,  873,  873,  904,  874,  872,
      873,  904,    0,  872,  884,  884,  884,  884,  884,  884,

      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  890,  890,  890,  890,

      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  902,  902,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,

      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  918,  920,  919,    0,  922,  920,
      919,  918,  919,  922,  921,  918,  921,  922,  921,  923,
        0,  925,  926,  923,  925,  926,  926,  927,  925,    0,
        0,  927,  927,  918,  920,  919,    0,  922,  920,  919,
      918,  919,  922,  921,  918,  921,  922,  921,  923,  924,
      925,  926,  923,  925,  926,  926,  927,  925,  924,  928,
      927,  927,  924,  928,  929,  930,  931,    0,  930,  930,

      931,  934,  932,    0,  933,    0,  932,  929,  924,    0,
      934,  929,  932,    0,  934,  933,  936,  924,  928,  933,
      936,  924,  928,  929,  930,  931,    0,  930,  930,  931,
      934,  932,    0,  933,  935,  932,  929,  935,  935,  934,
      929,  932,  937,  934,  933,  936,  937,  938,  933,  936,
      939,  940,    0,  941,  939,  940,  938,  939,  941,  943,
      938,  942,  941,  935,  942,  942,  935,  935,  943,    0,
        0,  937,  943,    0,    0,  937,  938,    0,    0,  939,
      940,    0,  941,  939,  940,  938,  939,  941,  943,  938,
      942,  941,    0,  942,  942,    0,    0,  943,    0,    0,

        0,  943,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  952,  953,  954,  958,
      952,  955,  956,  958,  959,  957,    0,  954,  953,    0,
      955,  954,  953,    0,  955,  956,  957,  959,  961,  956,
      957,  959,  961,    0,    0,  952,  953,  954,  958,  952,
      955,  956,  958,  959,  957,    0,  954,  953,    0,  955,
      954,  953,  960,  955,  956,  957,  959,  961,  956,  957,
      959,  961,  962,  960,  962,  963,  964,  960,  962,  964,

      965,    0,    0,  964,  965,  963,  965,    0,  966,  963,
        0,  960,  966,  967,  967,  966,  968,    0,  967,    0,
      968,  962,  960,  962,  963,  964,  960,  962,  964,  965,
        0,    0,  964,  965,  963,  965,  970,  966,  963,  969,
      970,  966,  967,  967,  966,  968,  971,  967,    0,  968,
      972,    0,  969,  974,  972,  971,  969,  974,  975,  971,
      976,    0,  975,  975,  976,  970,  977,  978,  969,  970,
      977,  978,  979,    0,    0,  971,  979,  979,    0,  972,
        0,  969,  974,  972,  971,  969,  974,  975,  971,  976,
      982,  975,  975,  976,  982,  977,  978,  981,    0,  977,

      978,  979,  980,  981,  980,  979,  979,  981,  980,  983,
        0,  984,  986,  983,  985,  985,    0,  987,  985,  982,
      984,  987,    0,  982,  984,  986,  981,    0,    0,  986,
        0,  980,  981,  980,    0,  990,  981,  980,  983,  990,
      984,  986,  983,  985,  985,  989,  987,  985,  988,  984,
      987,  988,  988,  984,  986,  989,  991,  992,  986,  989,
      991,  992,  993,  995,  990,  994,  999,  993,  990,  994,
      999,  993,  995,    0,  989,    0,  995,  988,    0,    0,
      988,  988,    0,  996,  989,  991,  992,  996,  989,  991,
      992,  993,  995,  996,  994,  999,  993,    0,  994,  999,

      993,  995,  997,    0,    0,  995,  997,  998,  997, 1000,
      998,  998,  996, 1000, 1001, 1001,  996, 1002, 1001, 1003,
     1004, 1002,  996, 1003, 1004, 1005, 1006,    0, 1007, 1005,
     1006,  997, 1007,    0,    0,  997,  998,  997, 1000,  998,
      998, 1008, 1000, 1001, 1001, 1008, 1002, 1001, 1003, 1004,
     1002,    0, 1003, 1004, 1005, 1006, 1009, 1007, 1005, 1006,
     1009, 1007, 1010,    0,    0,    0, 1010,    0,    0,    0,
     1008,    0,    0,    0, 1008,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1009,    0,    0,    0, 1009,
        0, 1010,    0,    0,    0, 1010, 1012,    0, 1012, 1012,

     1012, 1013,    0, 1013, 1013, 1013, 1014,    0, 1014, 1014,
     1014, 1015, 1015, 1015, 1017, 1017, 1017, 1017, 1017, 1018,
     1018, 1018, 1018, 1018, 1019, 1019, 1020,    0, 1020, 1020,
     1020, 1021,    0, 1021, 1021, 1021, 1022,    0, 1022, 1022,
     1022, 1023, 1023, 1023, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,

     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011
    } ;

static yyconst flex_int16_t yy_rule_linenum[95] =
    {   0,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      297,  298,  299,  302

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/MapSetScanner.lpp"
/* $Id: MapSetScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/** \file MapSetScanner.ll Define the Flex lexical scanner */
#line 5 "lib/MapSetScanner.lpp"

#include "MapSetParser/MapSetParser.hpp"
#include "MapSetScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::MapSetParser::token token;
typedef w3c_sw::MapSetParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "MapSetFlexLexer" */
/* consider using class instead
 * %option yyclass="MapSetScanner"
 * void MapSetFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 60 "lib/MapSetScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for MapSet terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for MapSet terminals */
/* START semantic actions for MapSet terminals */
#line 3269 "lib/MapSetScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 206 "lib/MapSetScanner.lpp"

#line 3433 "lib/MapSetScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1012 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1011 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 95 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 95 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 96 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 207 "lib/MapSetScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 208 "lib/MapSetScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 209 "lib/MapSetScanner.lpp"
{return token::IT_REWRITEVAR;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 210 "lib/MapSetScanner.lpp"
{return token::IT_SERVER;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 211 "lib/MapSetScanner.lpp"
{return token::IT_USER;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 212 "lib/MapSetScanner.lpp"
{return token::IT_PASSWORD;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 213 "lib/MapSetScanner.lpp"
{return token::IT_DATABASE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 214 "lib/MapSetScanner.lpp"
{return token::IT_STEMURI;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 215 "lib/MapSetScanner.lpp"
{return token::IT_PRIMARYKEY;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 216 "lib/MapSetScanner.lpp"
{return token::IT_SHAREDVARS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 217 "lib/MapSetScanner.lpp"
{return token::IT_INTERSECTION;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 218 "lib/MapSetScanner.lpp"
{return token::IT_PROMISCUOUS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 219 "lib/MapSetScanner.lpp"
{return token::IT_VARNAMES;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 220 "lib/MapSetScanner.lpp"
{return token::IT_DRACONIAN;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 221 "lib/MapSetScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 222 "lib/MapSetScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 223 "lib/MapSetScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 224 "lib/MapSetScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 225 "lib/MapSetScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 226 "lib/MapSetScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 227 "lib/MapSetScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 228 "lib/MapSetScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 229 "lib/MapSetScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 230 "lib/MapSetScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 231 "lib/MapSetScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 232 "lib/MapSetScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 233 "lib/MapSetScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 234 "lib/MapSetScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 235 "lib/MapSetScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 236 "lib/MapSetScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 237 "lib/MapSetScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 238 "lib/MapSetScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 239 "lib/MapSetScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 240 "lib/MapSetScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 241 "lib/MapSetScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 242 "lib/MapSetScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 243 "lib/MapSetScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 244 "lib/MapSetScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 245 "lib/MapSetScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 246 "lib/MapSetScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 247 "lib/MapSetScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 248 "lib/MapSetScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 249 "lib/MapSetScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 250 "lib/MapSetScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 251 "lib/MapSetScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 252 "lib/MapSetScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 253 "lib/MapSetScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 254 "lib/MapSetScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 255 "lib/MapSetScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 256 "lib/MapSetScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 257 "lib/MapSetScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 258 "lib/MapSetScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 259 "lib/MapSetScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 260 "lib/MapSetScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 261 "lib/MapSetScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 262 "lib/MapSetScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 263 "lib/MapSetScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 264 "lib/MapSetScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 265 "lib/MapSetScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 266 "lib/MapSetScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 267 "lib/MapSetScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 268 "lib/MapSetScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 269 "lib/MapSetScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 270 "lib/MapSetScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 271 "lib/MapSetScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 272 "lib/MapSetScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 273 "lib/MapSetScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 274 "lib/MapSetScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 275 "lib/MapSetScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 276 "lib/MapSetScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 277 "lib/MapSetScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 278 "lib/MapSetScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 279 "lib/MapSetScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 280 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 281 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 282 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 283 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 287 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 288 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 289 "lib/MapSetScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 290 "lib/MapSetScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 291 "lib/MapSetScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 292 "lib/MapSetScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 293 "lib/MapSetScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 294 "lib/MapSetScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 295 "lib/MapSetScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 296 "lib/MapSetScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 297 "lib/MapSetScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 298 "lib/MapSetScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 299 "lib/MapSetScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 301 "lib/MapSetScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 302 "lib/MapSetScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 308 "lib/MapSetScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4030 "lib/MapSetScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	MapSetfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	MapSetfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					MapSetrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) MapSetrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1012 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1012 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1011);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) MapSetalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) MapSetalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		MapSetfree((void *) b->yy_ch_buf  );

	MapSetfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)MapSetalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)MapSetrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) MapSetalloc(new_size  );

		else
			(yy_start_stack) = (int *) MapSetrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *MapSetalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *MapSetrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void MapSetfree (void * ptr )
{
	free( (char *) ptr );	/* see MapSetrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 308 "lib/MapSetScanner.lpp"


/* END semantic actions for MapSet terminals */

/* START MapSetScanner */
namespace w3c_sw {

MapSetScanner::MapSetScanner (MapSetDriver* driver, std::istream* in, std::ostream* out) : MapSetFlexLexer(in, out), driver(driver) {  }
MapSetScanner::~MapSetScanner () {  }

MapSetParser::token_type MapSetScanner::typedLiteral (MapSetParser::semantic_type*& yylval, MapSetParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

MapSetParser::token_type MapSetScanner::unescape (MapSetParser::semantic_type*& yylval, size_t skip, MapSetParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* MapSetScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void MapSetScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END MapSetScanner */

const URI* MapSetScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of MapSetFlexLexer::yylex() is required to fill the
 * vtable of the class MapSetFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the MapSetScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int MapSetFlexLexer::yylex()
{
    std::cerr << "in MapSetFlexLexer::yylex() !" << std::endl;
    return 0;
}


