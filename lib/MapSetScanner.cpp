#line 2 "lib/MapSetScanner.cpp"

#line 4 "lib/MapSetScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer MapSetFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *MapSetalloc (yy_size_t  );
void *MapSetrealloc (void *,yy_size_t  );
void MapSetfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[961] =
    {   0,
        0,    0,   89,   87,    2,    1,    1,   50,   87,    2,
       87,   87,   87,   27,   28,   14,   47,   34,   48,   30,
       49,   67,   82,   35,   43,   41,   44,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   37,   38,
       87,   87,   36,   25,   87,   26,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,    2,    1,   42,    0,   79,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   86,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,    0,   78,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,   69,
        0,   71,   68,   68,   67,    0,   83,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   45,   65,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   46,
       85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       66,    0,    0,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   81,   62,    0,   39,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   86,

       86,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   86,   86,   86,   86,   86,   86,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   78,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   70,   70,    0,   72,   72,    0,    0,   68,
        0,    0,   73,   83,    0,   83,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   83,   83,
       83,   83,   83,   83,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,   85,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   85,
       85,   85,   85,   85,   85,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   23,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   51,    0,    0,    0,    0,    0,   84,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,   86,   86,   86,   86,   86,
       86,   86,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,   86,   86,   86,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       70,    0,    0,   75,    0,   72,    0,    0,   74,    0,
       73,    0,   73,   83,   83,   83,   83,   83,   83,   83,
       83,   83,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   83,   83,   83,   83,   83,
        0,    0,    0,    0,    0,    0,   85,   85,   85,   85,
       85,   85,   85,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,   85,   85,   85,
       85,    0,    0,   66,    0,    0,    0,    0,    0,    0,
        0,   12,    0,    0,    0,    0,   22,    0,    0,   16,

        0,    0,    0,    0,    0,    0,   52,    0,    0,   29,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,    0,    0,    5,    0,   84,    0,   84,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       84,   84,   84,   84,   84,   84,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       86,   86,   86,   86,   86,    0,    0,   86,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   75,

        0,   75,    0,   74,    0,   74,   83,   83,   83,   83,
       83,    0,    0,   83,   85,   85,   85,   85,   85,    0,
        0,   85,    0,    0,   55,    0,    0,    0,   64,    0,
       11,    0,   57,    0,   58,   10,    0,    0,   17,    0,
        0,    0,    0,   61,    0,    0,    0,    0,    0,   32,
        0,   18,   84,   84,   84,   84,   84,   84,   84,   84,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   84,   84,   84,   84,   84,    0,
        0,   77,    0,    0,    0,    0,   86,   76,    0,    0,
        0,    0,   83,   85,    0,    0,    0,    0,   33,    0,

        0,    0,    0,    0,    0,   13,    0,    0,    0,    4,
       21,    0,    0,   84,   84,   84,   84,   84,    0,    0,
       84,    0,    0,    0,    0,   59,    0,    0,   20,    0,
        0,    0,    0,    0,    8,    0,   84,   19,    0,    7,
       54,    0,    0,   31,    6,    0,    0,   56,    0,   15,
       60,    0,    0,    0,   24,    0,    9,    3,   53,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   67,   74,   75,   76,   77,   78,   79,   80,
       81,   67,   82,   83,   84,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[973] =
    {   0,
        0,    0, 2129, 9604,  118, 9604, 2012, 1977,  117,  146,
      245, 1909,  352,  123, 9604, 9604,  110, 9604,  111, 1783,
     9604,  114,  451, 9604,  545, 9604, 1764,  644,    0,  745,
      107,   96,  111,   80,  117,  103,   92,  110,  128,  122,
      318,  116,  336,  177,  338,  167,  169,  130,  296, 9604,
     1712, 1744,    0, 9604, 1644, 9604,  330,  487,  504,  521,
      779,  796,  350,  813,   99,  830,  172,  847,  864,  881,
      898,  538,   45,  908,  925,  200, 9604, 9604, 1020, 1719,
     1021,  949,  965, 1055,  378, 1072, 1013, 1089, 1099, 1116,
      552, 1127, 1162, 1178, 1193,  571, 1210, 1227, 1237, 1247,

     1264,  683, 1345, 1379, 1396, 1413, 1430, 1447, 1464, 1481,
     1498,  271, 1515,  970, 1532, 1549, 1566, 1583, 1600,  231,
     1603, 1620, 9604, 1710, 1713, 1716, 1644, 1660, 1745,  990,
     1762, 1779, 1789, 1799, 1816, 1027,  388, 9604, 1703, 1060,
     1558, 1741,  183, 1740, 1744,  361, 1900, 1934, 1951, 1968,
     1985, 2002, 2019, 2036, 2053,  300, 2070, 1124, 2087, 2104,
     2121, 2138, 2155,  277, 2158, 2175, 2251,    0, 9604, 2193,
     2209, 2224, 1272, 2286, 2241, 2303, 2313, 2330, 1695, 9604,
     2411, 2445, 2462, 2479, 2496, 2513, 2530, 2547, 2564,  546,
     2581, 1698, 2598, 2615, 2632, 2649, 2666,  290, 2669, 2686,

     1556,  119,  172,    0,  171, 2746, 2714, 2743, 2760, 2777,
     2794, 2811, 2828, 1362, 2845, 2862, 2879, 2896, 2913, 1827,
     2930, 2947, 2964, 2981, 2998,  307, 3001, 3018, 2747,  175,
     2748,  341, 1729, 3088,  464,  465,  655, 3092, 3095, 3094,
      658,  757, 1358, 2750, 2749, 3089, 3098,  759, 1911, 3138,
     3081, 3102, 3114, 3137, 1027, 9604, 9604, 3192, 9604,  342,
     1357, 1359, 1736, 1912, 1913, 2393, 3226, 3243, 3260, 3277,
     3294, 3311, 3328, 3345, 3362, 3379, 2239, 3396, 3413, 9604,
     3508, 3431, 1396, 3448, 3478, 3495, 3543, 3560, 3577, 3594,
     3611, 1392, 3628, 3645, 3662, 3679, 3696, 3713, 3730,    0,

        0, 3747, 3764, 3781, 3798, 3815, 3832, 3849, 1131, 3866,
     3883, 3900, 3917, 2248, 3934, 3951, 3968, 3985, 3101,  336,
     3458, 4002,    0,    0,    0,    0,    0,    0, 4019, 4036,
     4053, 4070, 4087, 4104, 4121, 4138, 4155, 4172, 3104, 4189,
     4206, 9604, 4296, 4224, 1172, 4241, 4266, 4283, 4331, 4348,
     4365, 4382, 3185, 3186, 1751, 4463, 4464, 1770, 2418, 4465,
     3199, 1205, 1075,    0,    0,    0, 4414, 4443, 4460, 4477,
     4494, 4511, 4528,  996, 4545, 4562, 4579, 4596, 4613, 3505,
     4630, 4647, 4664, 4681, 4698,  537, 4701, 4718,    0,    0,
        0,    0,    0,    0, 4735, 4752, 4769, 4786, 4803, 4820,

     4837, 4854, 4871, 4888, 4246, 4905, 4922, 4939, 1028, 4956,
     4973, 4990, 5007, 5024, 5041, 5058,    0,    0, 5075, 5092,
     5109, 5126, 5143, 5160, 5177,  975, 5194, 5211, 5228, 5245,
     4293, 5262, 5279, 5296, 5313, 5330,  980, 5333, 5350,    0,
        0,    0,    0,    0,    0, 5367, 5384, 5401, 5418, 5435,
     5452, 5469, 5486, 5503, 5520, 4390, 5537, 5554,    0, 2395,
     2396, 2423, 2752, 3086, 3104, 3139, 3140, 3174, 3204, 5571,
     5588, 5605, 5622, 5639, 5656, 5673, 5690, 5707, 5724, 4419,
     5741, 5758, 5827, 5829, 4450, 5820, 5834, 5822, 5828, 5825,
     4452, 5831, 5837, 5836, 5843, 5841, 5878, 5852, 5883, 5884,

     5879, 5885, 5882, 5895, 5889, 5899, 5891, 5901, 5896, 5902,
     5927, 4453, 5938, 5935, 5937, 5939, 5941, 5998, 6032, 6049,
     6066, 6083, 6100, 6117, 6134, 6151, 1711, 6168, 5892, 6185,
     6202, 6219, 6236, 6253, 1012, 6256, 6273, 5893, 5933, 5943,
     5952, 5953, 6290, 6307, 6402, 1065, 6403, 6331, 6347, 6437,
     6352, 6454, 6395, 6471, 6481, 6498, 6382, 6593, 6516, 6533,
     6563, 6622, 6580, 6657, 6674,    0,    0,    0,    0,    0,
        0,    0, 6691, 6708, 6725, 6742, 6759, 6776, 6793, 6810,
     6827, 6844, 6397, 6861, 6878,    0,    0,    0,    0,    0,
     6895, 6912, 7002,  848, 7008, 6936, 6952, 7037, 6540, 7054,

     7071, 7081, 7091, 7108, 6600, 7198, 7126, 7143, 7168, 6004,
     6440, 6442,  826,  744, 6483, 6662, 6698,  738,  729,  726,
      725,  545,  536,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 7185, 7233, 7250, 7267, 7284, 7301, 7318, 7335,
     7352, 7369, 6545, 7386, 7403,    0,    0,    0,    0,    0,
     7420, 7437, 7513, 7455, 7472, 7489,    0,    0,    0,    0,
        0,    0,    0, 7548, 7565, 7582, 7599, 7616, 7633, 7650,
     7667, 7684, 7701, 6960, 7718, 7735,    0,    0,    0,    0,
        0, 7752, 7769,  536, 6009, 6010, 6011, 6012, 6649, 7786,
     7803, 6650, 7026, 7033, 7863, 7876, 6651, 7874, 7875, 7010,

     7030, 7880, 7877, 7873, 7884, 7871, 7028, 7891, 7899, 7012,
     7885, 7916, 7888, 7932, 7921, 7927, 7926, 7934, 7933, 7923,
     7031, 7935, 7946, 7937, 7949,    0,    0,    0, 7936, 7953,
     7970, 7987, 8004, 8021, 8038,  455, 7506, 8055, 8072, 8089,
     8106, 6990, 8123, 8140, 8157, 8174, 8191, 1022, 8194, 8211,
        0,    0,    0,    0,    0,    0, 8228, 8245, 8262, 8279,
     8296, 8313, 8330, 8347, 8364, 8381, 7148, 8398, 8415, 7939,
      447, 8432,  397, 8449, 8466, 8483, 8500, 8517, 8534, 8551,
        0,    0,    0,    0,    0, 8568, 8585,    0,  436, 8602,
      356, 8619, 8636, 8653, 8670, 8687, 8704, 8721,  387,  327,

      309,  186,  185,  182,  171,  159,    0,    0,    0,    0,
        0, 8738, 8755,    0,    0,    0,    0,    0,    0, 8772,
     8789,    0, 7941, 7942, 7943, 7944, 8862, 8850, 8851, 8852,
     8853, 8854, 8856, 8866, 8858, 8859, 8874, 8864, 8863, 8865,
     8868, 8899, 8872, 8871, 8902, 8914, 8906, 8911, 8910, 8912,
     8925, 8917,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 8912, 8929, 8946, 8963, 8980, 8997, 9014, 9031, 9048,
     9065, 7193, 9082, 9099,    0,    0,    0,    0,    0, 9116,
     9133, 9604,    0, 9150, 9167, 9184,    0, 9604,    0, 9201,
     9218, 9235,    0,    0, 9302, 8918, 8919, 8920, 8921, 9299,

     9297, 9298, 9301, 9317, 9306, 9307, 9308, 9319, 9311, 9312,
     9313, 9320, 9350,    0,    0,    0,    0,    0, 9311, 9340,
        0, 9371, 9412, 9411, 9414, 9316, 9416, 9417, 9322, 9380,
     9418, 9413, 9415, 9420, 9323, 9433,    0, 9421, 9423, 9425,
     9426, 9429, 9465, 9438, 9460, 9470, 9476, 9464, 9478, 9466,
     9469, 9480, 9472, 9474, 9473, 9475, 9481, 9483, 9484, 9604,
     9555, 9560, 9565, 9568,  116, 9573, 9578, 9580, 9585, 9590,
     9595, 9598
    } ;

static yyconst flex_int16_t yy_def[973] =
    {   0,
      960,    1,  960,  960,  960,  960,  960,  960,  961,  962,
      960,  960,  963,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  964,  960,  960,  960,  965,  960,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  960,  960,
      960,  960,   30,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  961,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  962,  960,  960,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  963,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  964,  167,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,

      965,   30,   30,   23,   30,   30,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  960,  960,  960,  960,  960,   30,
       30,   30,   30,   30,   30,   30,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      966,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  103,

      103,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  103,  103,  103,  103,  103,  103,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  967,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  147,  147,  147,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  147,  147,
      147,  147,  147,  147,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  181,  181,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  181,
      181,  181,  181,  181,  181,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  968,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,   30,   30,   30,
       30,   30,  960,  960,  966,  545,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  969,  960,  960,
      960,  970,  960,  960,  960,  103,  103,  103,  103,  103,
      103,  103,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  103,  103,  103,  103,  103,
      960,  960,  967,  593,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  960,  960,  971,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  147,  147,  147,  147,  147,
      960,  960,  972,  960,  960,  960,  181,  181,  181,  181,
      181,  181,  181,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  181,  181,  181,  181,
      181,  960,  960,  968,   30,   30,   30,   30,   30,  960,
      960,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  518,  518,  518,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      518,  518,  518,  518,  518,  518,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,   30,
      545,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      103,  103,  103,  103,  103,  960,  960,  103,  593,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  960,  960,  960,  147,  147,  147,  147,
      147,  960,  960,  147,  181,  181,  181,  181,  181,  960,
      960,  181,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  518,  518,  518,  518,  518,  960,
      960,  960,  545,  960,  960,  960,  103,  960,  593,  960,
      960,  960,  147,  181,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  518,  518,  518,  518,  518,  960,  960,
      518,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  518,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,    0,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960
    } ;

static yyconst flex_int16_t yy_nxt[9724] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   37,   37,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   37,   48,
       37,   37,   49,    4,   50,   51,   52,   53,   31,   32,
       33,   34,   35,   36,   37,   38,   37,   37,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   37,   48,   37,
       37,   54,   55,   56,    4,   57,   58,   59,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   60,   61,   61,

       62,    4,    4,   63,   64,    4,   65,   66,   67,   68,
       69,   70,   71,   72,    4,   73,   74,   75,    4,   76,
      201,  234,   76,   80,  137,  137,  137,  137,  139,  141,
      140,  142,  144,  205,  145,  229,  138,  205,  232,  233,
      276,  276,  277,  230,  205,  235,  146,  238,  205,  231,
      234,  205,  205,  236,  241,  239,  240,  205,  205,  244,
      205,  237,  205,  205,  229,  254,  205,  232,  233,  205,
       81,  205,  230,  205,  235,  146,  238,  205,  231,  806,
      205,  205,  236,  241,  239,  240,  205,  205,  244,  205,
      237,  806,  205,  960,  254,  266,  266,  266,  205,  266,

      205,   76,  804,  143,   76,  804,  802,   82,  205,  247,
      252,  251,  205,  205,  253,  359,  484,   83,  205,   84,
       84,   84,   84,   84,   84,   85,   86,   86,   86,   86,
       87,   88,   88,   89,   90,   91,   93,  205,  247,  252,
      251,  205,  205,  253,  359,  484,   94,  205,   95,   95,
       95,   95,   95,   95,   96,   97,   97,   97,   97,   98,
       99,   99,  100,  101,  102,  103,  267,  267,  267,  267,
      267,  267,  267,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  255,  255,  255,

      255,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  338,  338,  339,  802,
      104,  105,  106,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  107,  108,  108,  109,  242,  800,  110,  111,
      256,  112,  113,  114,  115,  116,  117,  118,  119,  205,
      120,  121,  122,  125,  245,  243,  248,  328,  328,  328,
      249,  328,  404,  404,  405,  242,  362,  205,  362,  205,
      246,  363,  486,  205,  250,  455,  455,  456,  205,  137,
      137,  137,  137,  245,  243,  248,  394,  394,  394,  249,

      394,  138,  479,  479,  480,  126,  205,  800,  205,  246,
      593,  486,  205,  250,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  582,  582,  583,  265,  265,  265,  265,  265,  265,
      265,  265,  127,  265,  265,  265,  265,  888,  265,  265,
      265,  545,  128,  882,  129,  129,  129,  129,  129,  129,
      130,  131,  131,  131,  131,  132,  133,  133,  134,  135,
      136,  147,  284,  284,  284,  284,  284,  284,  284,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  489,  490,  205,  205,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  489,  490,  205,  205,  148,  149,  150,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  151,  152,
      152,  153,  726,  459,  154,  155,  623,  156,  157,  158,
      159,  160,  161,  162,  163,  623,  164,  165,  166,  168,
      169,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  262,  262,  262,  262,  262,
      262,  262,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  642,  642,  643,  170,  290,  290,  290,  290,
      290,  290,  445,  445,  445,  171,  445,  172,  172,  172,
      172,  172,  172,  173,  174,  174,  174,  174,  175,  176,
      176,  177,  178,  179,  181,  293,  293,  293,  293,  293,
      293,  293,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  205,  491,  499,  205,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  205,  491,  499,  205,  182,
      183,  184,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  185,  186,  186,  187,  621,  621,  188,  189,  619,
      190,  191,  192,  193,  194,  195,  196,  197,  619,  198,
      199,  200,  202,  203,  614,  202,  204,  299,  299,  299,
      299,  299,  299,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  206,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  500,  205,  508,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  206,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  500,  205,  508,  205,
      207,  208,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  211,  212,  212,  213,  614,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  789,
      226,  227,  228,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  263,  263,  263,  260,  260,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  269,  270,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      272,  272,  272,  272,  271,  273,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  280,   79,  255,  255,
      255,  255,   79,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  329,  329,  329,  329,  329,  329,
      329,  771,  417,   81,   79,  673,  673,  674,  354,   79,
      140,  256,  167,   79,  346,  346,  346,  346,  346,  346,
      346,   79,  355,  364,   79,  363,   79,  286,  286,  286,

      286,  286,  286,  286,  286,  286,  286,  766,  766,  767,
       82,  352,  352,  352,  352,  352,  352,  871,  871,  872,
       83,  355,   84,   84,   84,   84,   84,   84,   85,   86,
       86,   86,   86,   87,   88,   88,   89,   90,   91,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,

      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,   93,  395,  395,
      395,  395,  395,  395,  395,  363,  124,   94,  300,   95,
       95,   95,   95,   95,   95,   96,   97,   97,   97,   97,
       98,   99,   99,  100,  101,  102,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,  294,  294,  294,  294,  294,  294,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  300,  410,  410,  410,  410,
      410,  410,  410,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  501,  205,  205,

      205,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  501,  205,  205,  205,
      302,  303,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  306,  307,  307,  308,   92,  309,  310,  311,
       79,  312,  313,  314,  315,  316,  317,  318,  319,  202,
      320,  321,  322,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  324,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  325,  325,  325,  325,  325,  325,
      325,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      326,  326,  326,  323,  323,  103,  103,  103,  103,  103,
      103,  103,  103,  459,  103,  103,  103,  103,  356,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  331,  332,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  334,  334,  334,  334,  333,
      335,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  340,  340,  340,  340,  340,  340,

      340,  340,  340,  340,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  342,  124,  353,  343,  281,  259,  124,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  357,
      360,  142,  144,  126,  145,  258,  613,  257,  613,  124,
      205,  614,  361,  358,  124,  487,  146,  205,  124,  416,
      416,  416,  416,  416,  416,  618,  124,  618,  180,  124,
      619,  124,  446,  446,  446,  446,  446,  446,  446,  205,

      127,  361,  358,  143,  487,  146,  205,  756,  756,  756,
      128,  756,  129,  129,  129,  129,  129,  129,  130,  131,
      131,  131,  131,  132,  133,  133,  134,  135,  136,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  364,  365,  123,
      364,  470,  470,  470,  470,  470,  470,  470,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  205,  205,  205,  509,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  205,  205,  205,  509,  367,  368,  369,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  371,  372,  372,

      373,   78,  374,  375,  376,  377,  378,  379,  380,  381,
      382,  383,  384,  385,   77,  386,  387,  388,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  391,
      391,  391,  391,  391,  391,  391,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  392,  392,  392,  389,  389,
      147,  147,  147,  147,  147,  147,  147,  147,  960,  147,
      147,  147,  147,  960,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  398,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      400,  400,  400,  400,  399,  401,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  169,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  409,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  542,  542,  542,  542,  542,
      960,  170,  573,  573,  573,  573,  573,  573,  573,  960,
      960,  171,  960,  172,  172,  172,  172,  172,  172,  173,
      174,  174,  174,  174,  175,  176,  176,  177,  178,  179,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  417,  960,  620,  205,  620,  205,  205,  621,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  205,  205,  205,  205,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  960,  205,  960,  960,  419,  420,  421,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  423,  424,
      424,  425,  960,  426,  427,  428,  960,  429,  430,  431,
      432,  433,  434,  435,  436,  960,  437,  438,  439,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      442,  442,  442,  442,  442,  442,  442,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  443,  443,  443,

      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  443,  443,  443,  440,
      440,  181,  181,  181,  181,  181,  181,  181,  181,  960,
      181,  181,  181,  181,  960,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  448,

      449,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  451,  451,  451,  451,  450,  452,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  205,  205,  205,
      205,  205,  483,  205,  503,  485,  502,  460,  461,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  960,  205,  205,  205,  205,
      205,  483,  205,  503,  485,  502,  460,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  464,  464,
      464,  464,  464,  464,  464,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  465,  465,  465,  465,  465,

      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  465,  465,  465,  462,  462,  205,
      205,  205,  205,  205,  205,  205,  205,  960,  205,  205,
      205,  205,  960,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  468,  468,  468,  205,  468,  469,  469,  469,

      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  472,  473,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  475,  475,  475,  475,  474,  476,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  488,
      492,  504,  205,  497,  493,  505,  960,  205,  513,  205,
      205,  494,  506,  205,  495,  498,  205,  960,  514,  205,
      960,  960,  496,  205,  515,  205,  516,  507,  488,  492,
      504,  205,  497,  493,  505,  205,  205,  513,  205,  205,
      494,  506,  205,  495,  498,  205,  510,  514,  205,  517,
      511,  496,  205,  515,  205,  516,  507,  960,  205,  205,
      205,  205,  512,  960,  205,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  510,  960,  960,  517,  511,

      590,  590,  590,  590,  590,  353,  611,  205,  205,  205,
      205,  512,  518,  960,  622,  205,  622,  610,  612,  623,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  205,  205,  610,  612,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  960,  205,  960,  960,  519,  520,  521,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  522,
      523,  523,  524,  960,  960,  525,  526,  960,  527,  528,

      529,  530,  531,  532,  533,  534,  960,  535,  536,  537,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  260,  260,  260,  260,  260,  261,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  261,  261,  261,  261,  261,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  260,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  546,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  960,
      960,  547,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  960,  960,  548,  633,

      633,  633,  633,  633,  633,  633,  960,  960,  549,  960,
      550,  550,  550,  550,  550,  550,  551,  552,  552,  552,
      552,  553,  554,  554,  555,  556,  557,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  292,  292,  292,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  564,  564,  564,

      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  566,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  569,

      569,  569,  569,  569,  569,  569,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  570,  570,  570,  567,  567,
      301,  301,  301,  301,  301,  301,  301,  301,  960,  301,
      301,  301,  301,  960,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  572,  572,  572,  960,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  575,  576,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  578,  578,  578,
      578,  577,  579,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  323,  323,  323,
      323,  323,  324,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  324,  324,  324,  324,
      324,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  323,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,

      592,  592,  592,  592,  592,  592,  592,  594,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  650,  650,  650,  650,  650,  960,  960,  595,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  960,  960,  596,  664,  664,  664,
      664,  664,  664,  664,  960,  960,  597,  960,  598,  598,

      598,  598,  598,  598,  599,  600,  600,  600,  600,  601,
      602,  602,  603,  604,  605,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  356,  616,  360,  681,  681,  681,  681,
      681,  694,  700,  205,  205,  615,  617,  361,  624,  625,

      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  689,  689,  689,  689,  689,
      694,  700,  205,  205,  615,  617,  361,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  627,  627,
      627,  627,  627,  627,  627,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  628,  628,  628,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  628,  628,  628,  625,  625,  366,
      366,  366,  366,  366,  366,  366,  366,  960,  366,  366,
      366,  366,  960,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  631,  631,  631,  366,  631,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  635,  636,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  638,  638,  638,  638,  637,  639,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  389,  389,  389,  389,  389,  390,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  390,  390,  390,  390,  390,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,

      389,  389,  389,  389,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  389,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  657,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  660,  660,  660,
      660,  660,  660,  660,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  661,  661,  661,  658,  658,  418,  418,
      418,  418,  418,  418,  418,  418,  960,  418,  418,  418,
      418,  960,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  663,  663,  663,  960,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  666,  667,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  669,  669,  669,  669,  668,
      670,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  440,  440,  440,  440,  440,
      441,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  441,  441,  441,  441,  441,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  440,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  462,
      462,  462,  462,  462,  463,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  461,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  463,  463,
      463,  463,  463,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  462,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  692,
      693,  205,  696,  205,  960,  695,  205,  697,  205,  205,
      205,  699,  205,  698,  701,  205,  702,  205,  205,  704,
      703,  960,  205,  960,  205,  705,  707,  960,  692,  693,
      205,  696,  205,  205,  695,  205,  697,  205,  205,  205,

      699,  205,  698,  701,  205,  702,  205,  205,  704,  703,
      706,  205,  708,  205,  705,  707,  709,  960,  710,  205,
      205,  711,  205,  205,  205,  205,  205,  712,  713,  714,
      205,  715,  205,  717,  205,  716,  205,  205,  960,  706,
      205,  708,  205,  205,  718,  709,  719,  710,  205,  205,
      711,  960,  205,  205,  205,  205,  712,  713,  714,  205,
      715,  205,  717,  205,  716,  205,  205,  720,  205,  205,
      721,  205,  205,  718,  205,  719,  205,  722,  205,  205,
      205,  723,  205,  724,  205,  725,  757,  757,  757,  757,
      757,  757,  757,  205,  205,  960,  720,  205,  960,  721,

      960,  960,  960,  205,  960,  205,  722,  205,  205,  205,
      723,  205,  724,  205,  725,  726,  727,  960,  726,  799,
      960,  799,  205,  205,  800,  960,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      205,  205,  205,  205,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  205,
      205,  205,  205,  729,  730,  731,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  733,  734,  734,  735,  960,

      736,  737,  738,  739,  740,  741,  742,  743,  744,  745,
      746,  747,  960,  748,  749,  750,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  753,  753,  753,
      753,  753,  753,  753,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,

      754,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  754,  754,  754,  751,  751,  518,  518,
      518,  518,  518,  518,  518,  518,  960,  518,  518,  518,
      518,  960,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  759,  760,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  762,  762,

      762,  762,  761,  763,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  546,  545,
      960,  960,  960,  960,  545,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  774,  774,  774,  774,
      774,  774,  774,  960,  960,  547,  545,  801,  960,  801,
      611,  545,  802,  960,  960,  545,  780,  780,  780,  780,
      780,  780,  612,  545,  960,  960,  545,  960,  545,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  960,
      960,  960,  548,  785,  785,  785,  785,  785,  803,  960,

      803,  612,  549,  804,  550,  550,  550,  550,  550,  550,
      551,  552,  552,  552,  552,  553,  554,  554,  555,  556,
      557,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  280,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,  792,  792,  792,  792,  792,  792,
      792,  811,  811,  811,  811,  811,   81,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  960,  616,   82,  798,  798,  798,  798,  798,  798,
      205,  205,  205,   83,  617,   84,   84,   84,   84,   84,

       84,   85,   86,   86,   86,   86,   87,   88,   88,   89,
       90,   91,   93,  805,  960,  805,  960,  960,  806,  205,
      205,  205,   94,  617,   95,   95,   95,   95,   95,   95,
       96,   97,   97,   97,   97,   98,   99,   99,  100,  101,
      102,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  781,  781,  781,  781,  781,  781,  781,  781,

      781,  781,  781,  781,  781,  781,  781,  781,  781,  567,
      567,  567,  567,  567,  568,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  566,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  568,  568,
      568,  568,  568,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  567,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  594,  593,  960,  960,  960,  960,  593,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  205,  960,  205,  960,  595,  819,  819,  819,  819,
      819,  593,  824,  960,  825,  831,  593,  205,  837,  205,
      593,  205,  205,  960,  205,  960,  960,  960,  593,  960,
      205,  593,  205,  593,  862,  862,  862,  862,  862,  862,
      862,  824,  596,  825,  831,  960,  205,  837,  205,  960,

      205,  205,  597,  205,  598,  598,  598,  598,  598,  598,
      599,  600,  600,  600,  600,  601,  602,  602,  603,  604,
      605,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  797,  797,  797,  797,  797,  797,  797,  797,

      797,  797,  797,  797,  797,  797,  797,  797,  797,  342,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  879,  879,  879,  879,  879,  960,
      960,  126,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  960,  960,  127,  918,
      918,  918,  918,  918,  960,  960,  960,  960,  128,  960,

      129,  129,  129,  129,  129,  129,  130,  131,  131,  131,
      131,  132,  133,  133,  134,  135,  136,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  625,  625,  625,  625,  625,  626,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      624,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  626,  626,  626,  626,  626,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

      808,  808,  625,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,

      813,  813,  813,  813,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  169,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      728,  728,  728,  728,  728,  728,  728,  728,  960,  728,

      728,  728,  728,  170,  728,  728,  728,  960,  960,  960,
      960,  960,  960,  171,  960,  172,  172,  172,  172,  172,
      172,  173,  174,  174,  174,  174,  175,  176,  176,  177,
      178,  179,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  658,  658,  658,  658,
      658,  659,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  657,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  659,  659,  659,  659,  659,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  658,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  205,  827,  829,  830,  832,  826,
      836,  960,  205,  833,  205,  205,  205,  205,  205,  834,
      835,  205,  828,  838,  842,  205,  205,  840,  960,  205,
      839,  960,  205,  205,  827,  829,  830,  832,  826,  836,
      205,  205,  833,  205,  205,  205,  205,  205,  834,  835,
      205,  828,  838,  842,  205,  205,  840,  205,  205,  839,
      843,  205,  205,  845,  205,  841,  847,  205,  205,  205,
      849,  844,  846,  205,  205,  205,  850,  851,  205,  848,
      205,  852,  205,  895,  205,  205,  205,  205,  896,  843,
      205,  205,  845,  205,  841,  847,  205,  205,  960,  849,

      844,  846,  205,  205,  205,  850,  851,  205,  848,  205,
      852,  205,  895,  205,  205,  960,  205,  896,  960,  205,
      853,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  856,  856,
      856,  856,  856,  856,  856,  854,  854,  854,  854,  854,

      854,  854,  854,  854,  854,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  857,  857,  857,  854,  854,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  860,  860,  860,  728,  860,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,

      861,  861,  861,  861,  861,  861,  861,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  864,  865,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  867,  867,  867,  867,
      866,  868,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  874,  874,  874,  874,  874,

      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  751,  751,  751,  751,
      751,  752,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  876,  876,  876,

      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  751,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  881,

      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,

      891,  891,  891,  891,  891,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      897,  205,  205,  205,  205,  900,  899,  205,  901,  205,

      205,  898,  902,  205,  205,  205,  904,  205,  903,  205,
      905,  960,  205,  205,  960,  205,  907,  960,  960,  897,
      205,  205,  205,  205,  900,  899,  205,  901,  205,  205,
      898,  902,  205,  205,  205,  904,  205,  903,  205,  905,
      205,  205,  205,  205,  205,  907,  909,  205,  908,  906,
      910,  205,  205,  205,  912,  205,  911,  913,  205,  205,
      205,  205,  205,  925,  924,  923,  205,  960,  960,  205,
      960,  960,  205,  960,  960,  909,  205,  908,  906,  910,
      205,  205,  205,  912,  205,  911,  913,  205,  205,  205,
      205,  205,  925,  924,  923,  205,  861,  861,  861,  861,

      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      854,  854,  854,  854,  854,  855,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  853,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  855,
      855,  855,  855,  855,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  854,  916,

      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,

      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  922,  926,  205,  205,
      205,  927,  205,  205,  928,  930,  929,  205,  205,  205,
      931,  933,  205,  205,  205,  934,  935,  205,  205,  932,
      205,  205,  960,  205,  205,  922,  926,  205,  205,  205,
      927,  205,  205,  928,  930,  929,  205,  205,  205,  931,
      933,  205,  205,  205,  934,  935,  205,  205,  932,  205,
      205,  205,  205,  205,  936,  937,  937,  937,  937,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  205,  960,  960,  960,  938,  960,  960,  944,
      205,  205,  960,  936,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  205,  939,  940,  942,  938,  941,  943,  944,  945,
      205,  946,  205,  205,  205,  205,  205,  205,  205,  205,
      948,  205,  205,  947,  205,  949,  205,  205,  951,  950,
      205,  939,  940,  942,  205,  941,  943,  960,  945,  205,
      946,  205,  205,  205,  205,  205,  205,  205,  205,  948,
      205,  205,  947,  205,  949,  205,  205,  951,  950,  205,

      952,  205,  953,  205,  954,  205,  205,  205,  205,  955,
      205,  205,  956,  205,  205,  205,  205,  205,  958,  205,
      959,  205,  205,  957,  205,  205,  960,  960,  960,  952,
      205,  953,  960,  954,  205,  205,  205,  960,  955,  205,
      205,  956,  205,  205,  205,  205,  205,  958,  205,  959,
      205,  205,  957,  205,  205,   79,  960,   79,   79,   79,
       92,  960,   92,   92,   92,  124,  960,  124,  124,  124,
      167,  167,  167,  545,  545,  545,  545,  545,  593,  593,
      593,  593,  593,  684,  684,   79,  960,   79,   79,   79,
       92,  960,   92,   92,   92,  124,  960,  124,  124,  124,

      167,  167,  167,    3,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960
    } ;

static yyconst flex_int16_t yy_chk[9724] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
      965,   34,    5,    9,   14,   14,   14,   14,   17,   19,
       17,   19,   22,   37,   22,   31,   14,   32,   32,   33,
       73,   73,   73,   31,   36,   35,   22,   36,   31,   31,
       34,   38,   33,   35,   40,   38,   39,   42,   35,   42,
      202,   35,   37,   40,   31,   48,   32,   32,   33,   39,
        9,   48,   31,   36,   35,   22,   36,   31,   31,  806,
       38,   33,   35,   40,   38,   39,   42,   35,   42,  202,
       35,  805,   40,  203,   48,   65,   65,   65,   39,   65,

       48,   76,  804,  143,   76,  803,  802,    9,   46,   44,
       47,   46,  205,  203,   47,  143,  230,    9,   44,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   46,   44,   47,
       46,  205,  203,   47,  143,  230,   10,   44,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   11,   67,   67,   67,   67,
       67,   67,   67,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   49,   49,   49,

       49,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  120,  120,  120,  801,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   41,  800,   11,   11,
       49,   11,   11,   11,   11,   11,   11,   11,   11,   41,
       11,   11,   11,   13,   43,   41,   45,  112,  112,  112,
       45,  112,  164,  164,  164,   41,  146,   43,  146,   45,
       43,  146,  232,  260,   45,  198,  198,  198,   41,  137,
      137,  137,  137,   43,   41,   45,  156,  156,  156,   45,

      156,  137,  226,  226,  226,   13,   43,  799,   45,   43,
      791,  232,  260,   45,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,  320,  320,  320,   63,   63,   63,   63,   63,   63,
       63,   63,   13,   63,   63,   63,   63,  789,   63,   63,
       63,  773,   13,  771,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   23,   85,   85,   85,   85,   85,   85,   85,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,  235,  236,  235,  236,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  235,  236,  235,  236,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  736,  684,   23,   23,  623,   23,   23,   23,
       23,   23,   23,   23,   23,  622,   23,   23,   23,   25,
       25,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  386,  386,  386,   25,   91,   91,   91,   91,
       91,   91,  190,  190,  190,   25,  190,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,   96,   96,   96,   96,   96,
       96,   96,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  237,  237,  241,  241,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  237,  237,  241,  241,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  621,  620,   28,   28,  619,
       28,   28,   28,   28,   28,   28,   28,   28,  618,   28,
       28,   28,   30,   30,  614,   30,   30,  102,  102,  102,
      102,  102,  102,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  242,  242,  248,

      248,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  242,  242,  248,  248,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  613,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  594,
       30,   30,   30,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   79,   81,  255,  255,
      255,  255,   81,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  114,  114,  114,  114,  114,  114,
      114,  546,  426,   79,   81,  437,  437,  437,  140,   81,
      140,  255,  409,   81,  130,  130,  130,  130,  130,  130,
      130,   81,  140,  374,   81,  363,   81,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,  535,  535,  535,
       79,  136,  136,  136,  136,  136,  136,  748,  748,  748,
       79,  140,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   92,  158,  158,
      158,  158,  158,  158,  158,  362,  345,   92,  309,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  103,  173,  173,  173,  173,
      173,  173,  173,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  243,  261,  243,

      262,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  243,  261,  243,  262,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  292,  103,  103,  103,
      283,  103,  103,  103,  103,  103,  103,  103,  103,  214,
      103,  103,  103,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  110,  110,  110,  110,  110,
      110,  110,  110,  201,  110,  110,  110,  110,  141,  110,
      110,  110,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  121,  121,  121,  121,  121,  121,

      121,  121,  121,  121,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  124,  126,  139,  125,   80,   55,  126,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  142,
      144,  142,  145,  124,  145,   52,  355,   51,  355,  126,
      233,  355,  144,  142,  126,  233,  145,  263,  126,  179,
      179,  179,  179,  179,  179,  358,  126,  358,   27,  126,
      358,  126,  192,  192,  192,  192,  192,  192,  192,  233,

      124,  144,  142,   20,  233,  145,  263,  527,  527,  527,
      124,  527,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  147,  147,   12,
      147,  220,  220,  220,  220,  220,  220,  220,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  249,  264,  265,  249,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  249,  264,  265,  249,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,    8,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,    7,  147,  147,  147,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154,  154,  154,  154,  154,  154,    3,  154,
      154,  154,  154,    0,  154,  154,  154,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  167,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  277,  277,  277,  277,  277,
        0,  167,  314,  314,  314,  314,  314,  314,  314,    0,
        0,  167,    0,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  181,    0,  359,  266,  359,  460,  461,  359,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  266,  462,  460,  461,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,    0,  462,    0,    0,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,    0,  181,  181,  181,    0,  181,  181,  181,
      181,  181,  181,  181,  181,    0,  181,  181,  181,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  186,  186,  186,

      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  188,  188,  188,  188,  188,  188,  188,  188,    0,
      188,  188,  188,  188,    0,  188,  188,  188,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  206,  229,  231,
      245,  244,  229,  463,  245,  231,  244,  206,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,    0,  206,  229,  231,  245,
      244,  229,  463,  245,  231,  244,  206,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  215,
      215,  215,  215,  215,  215,  215,  215,    0,  215,  215,
      215,  215,    0,  215,  215,  215,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  234,
      238,  246,  251,  240,  239,  246,    0,  464,  251,  234,
      246,  239,  247,  238,  239,  240,  239,    0,  252,  247,
        0,    0,  239,  252,  252,  465,  253,  247,  234,  238,
      246,  251,  240,  239,  246,  253,  464,  251,  234,  246,
      239,  247,  238,  239,  240,  239,  250,  252,  247,  254,
      250,  239,  252,  252,  465,  253,  247,    0,  254,  250,
      466,  467,  250,    0,  253,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  250,    0,    0,  254,  250,

      339,  339,  339,  339,  339,  353,  354,  254,  250,  466,
      467,  250,  258,    0,  361,  468,  361,  353,  354,  361,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  468,  469,  353,  354,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,    0,  469,    0,    0,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,    0,    0,  258,  258,    0,  258,  258,

      258,  258,  258,  258,  258,  258,    0,  258,  258,  258,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  279,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  281,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,    0,
        0,  281,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,    0,    0,  281,  380,

      380,  380,  380,  380,  380,  380,    0,    0,  281,    0,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  298,  298,  298,

      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      310,  310,  310,  310,  310,  310,  310,  310,    0,  310,
      310,  310,  310,    0,  310,  310,  310,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,    0,

      312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,

      334,  334,  334,  334,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  343,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  405,  405,  405,  405,  405,    0,    0,  343,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,    0,    0,  343,  431,  431,  431,
      431,  431,  431,  431,    0,    0,  343,    0,  343,  343,

      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  356,  357,  360,  456,  456,  456,  456,
      456,  485,  491,  491,  512,  356,  357,  360,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  480,  480,  480,  480,  480,
      485,  491,  491,  512,  356,  357,  360,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  375,
      375,  375,  375,  375,  375,  375,  375,    0,  375,  375,
      375,  375,    0,  375,  375,  375,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  379,  379,  379,

      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  421,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  427,  427,
      427,  427,  427,  427,  427,  427,    0,  427,  427,  427,
      427,    0,  427,  427,  427,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,    0,  429,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  478,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  483,
      484,  486,  487,  488,    0,  486,  490,  488,  483,  489,
      484,  490,  492,  489,  492,  487,  493,  494,  493,  495,
      494,    0,  496,    0,  495,  496,  498,    0,  483,  484,
      486,  487,  488,  498,  486,  490,  488,  483,  489,  484,

      490,  492,  489,  492,  487,  493,  494,  493,  495,  494,
      497,  496,  499,  495,  496,  498,  500,    0,  501,  497,
      501,  502,  498,  503,  499,  500,  502,  503,  504,  505,
      505,  506,  507,  508,  538,  507,  504,  509,    0,  497,
      506,  499,  508,  510,  509,  500,  510,  501,  497,  501,
      502,    0,  503,  499,  500,  502,  503,  504,  505,  505,
      506,  507,  508,  538,  507,  504,  509,  511,  511,  506,
      513,  508,  510,  509,  539,  510,  514,  514,  515,  513,
      516,  515,  517,  516,  540,  517,  529,  529,  529,  529,
      529,  529,  529,  541,  542,    0,  511,  511,    0,  513,

        0,    0,    0,  539,    0,  514,  514,  515,  513,  516,
      515,  517,  516,  540,  517,  518,  518,    0,  518,  610,
        0,  610,  541,  542,  610,    0,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      685,  686,  687,  688,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  685,
      686,  687,  688,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,    0,

      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,    0,  518,  518,  518,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  525,  525,
      525,  525,  525,  525,  525,  525,    0,  525,  525,  525,
      525,    0,  525,  525,  525,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  545,  547,
        0,    0,    0,    0,  547,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  551,  551,  551,  551,
      551,  551,  551,    0,    0,  545,  547,  612,    0,  612,
      611,  547,  612,    0,    0,  547,  557,  557,  557,  557,
      557,  557,  611,  547,    0,    0,  547,    0,  547,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,    0,
        0,    0,  545,  583,  583,  583,  583,  583,  615,    0,

      615,  611,  545,  615,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  558,

      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  599,  599,  599,  599,  599,  599,
      599,  643,  643,  643,  643,  643,  558,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,    0,  616,  558,  605,  605,  605,  605,  605,  605,
      689,  692,  697,  558,  616,  558,  558,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  562,  617,    0,  617,    0,    0,  617,  689,
      692,  697,  562,  616,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  574,  574,  574,  574,  574,  574,  574,  574,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  592,  592,  592,

      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  593,  595,    0,    0,    0,    0,  595,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  700,    0,  710,    0,  593,  674,  674,  674,  674,
      674,  595,  693,    0,  694,  701,  595,  693,  707,  707,
      595,  701,  721,    0,  694,    0,    0,    0,  595,    0,
      700,  595,  710,  595,  742,  742,  742,  742,  742,  742,
      742,  693,  593,  694,  701,    0,  693,  707,  707,    0,

      701,  721,  593,  694,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  606,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  767,  767,  767,  767,  767,    0,
        0,  606,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,    0,    0,  606,  872,
      872,  872,  872,  872,    0,    0,    0,    0,  606,    0,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,

      638,  638,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,

      645,  645,  645,  645,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  653,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      737,  737,  737,  737,  737,  737,  737,  737,    0,  737,

      737,  737,  737,  653,  737,  737,  737,    0,    0,    0,
        0,    0,    0,  653,    0,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,

      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  695,  696,  698,  699,  702,  695,
      706,    0,  706,  703,  704,  698,  699,  696,  703,  704,
      705,  702,  696,  708,  713,  705,  711,  711,    0,  713,
      709,    0,  708,  695,  696,  698,  699,  702,  695,  706,
      709,  706,  703,  704,  698,  699,  696,  703,  704,  705,
      702,  696,  708,  713,  705,  711,  711,  712,  713,  709,
      714,  708,  715,  716,  720,  712,  718,  717,  716,  709,
      720,  715,  717,  714,  719,  718,  722,  723,  724,  719,
      770,  725,  823,  824,  825,  826,  712,  723,  826,  714,
      725,  715,  716,  720,  712,  718,  717,  716,    0,  720,

      715,  717,  714,  719,  718,  722,  723,  724,  719,  770,
      725,  823,  824,  825,  826,    0,  723,  826,    0,  725,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  750,  750,  750,  750,  750,

      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  769,

      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,

      797,  797,  797,  797,  797,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      827,  828,  829,  830,  831,  832,  830,  833,  834,  835,

      836,  828,  837,  827,  839,  838,  840,  834,  838,  841,
      841,    0,  844,  843,    0,  837,  843,    0,    0,  827,
      828,  829,  830,  831,  832,  830,  833,  834,  835,  836,
      828,  837,  827,  839,  838,  840,  834,  838,  841,  841,
      842,  844,  843,  845,  837,  843,  846,  847,  845,  842,
      847,  849,  848,  850,  849,  846,  848,  851,  852,  896,
      897,  898,  899,  898,  897,  896,  851,    0,    0,  842,
        0,    0,  845,    0,    0,  846,  847,  845,  842,  847,
      849,  848,  850,  849,  846,  848,  851,  852,  896,  897,
      898,  899,  898,  897,  896,  851,  862,  862,  862,  862,

      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,

      890,  890,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  895,  900,  901,  902,
      900,  901,  903,  895,  902,  904,  903,  905,  906,  907,
      905,  908,  909,  910,  911,  909,  912,  926,  904,  907,
      908,  912,    0,  929,  935,  895,  900,  901,  902,  900,
      901,  903,  895,  902,  904,  903,  905,  906,  907,  905,
      908,  909,  910,  911,  909,  912,  926,  904,  907,  908,
      912,  913,  929,  935,  913,  919,  919,  919,  919,  919,

      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  922,    0,    0,    0,  922,    0,    0,  930,
      913,  930,    0,  913,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  922,  923,  924,  927,  922,  925,  928,  930,  931,
      930,  932,  924,  923,  932,  925,  933,  927,  928,  931,
      934,  934,  938,  933,  939,  936,  940,  941,  942,  939,
      942,  923,  924,  927,  936,  925,  928,    0,  931,  944,
      932,  924,  923,  932,  925,  933,  927,  928,  931,  934,
      934,  938,  933,  939,  936,  940,  941,  942,  939,  942,

      943,  945,  946,  936,  947,  948,  943,  950,  944,  949,
      951,  946,  952,  953,  955,  954,  956,  947,  954,  949,
      956,  952,  957,  953,  958,  959,    0,    0,    0,  943,
      945,  946,    0,  947,  948,  943,  950,    0,  949,  951,
      946,  952,  953,  955,  954,  956,  947,  954,  949,  956,
      952,  957,  953,  958,  959,  961,    0,  961,  961,  961,
      962,    0,  962,  962,  962,  963,    0,  963,  963,  963,
      964,  964,  964,  966,  966,  966,  966,  966,  967,  967,
      967,  967,  967,  968,  968,  969,    0,  969,  969,  969,
      970,    0,  970,  970,  970,  971,    0,  971,  971,  971,

      972,  972,  972,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960
    } ;

static yyconst flex_int16_t yy_rule_linenum[88] =
    {   0,
      172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  224,  225,  226,  227,  228,  229,  230,  231,
      232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  250,  251,
      252,  253,  254,  255,  256,  257,  260
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/MapSetScanner.lpp"
/* $Id: MapSetScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/** \file MapSetScanner.ll Define the Flex lexical scanner */
#line 5 "lib/MapSetScanner.lpp"

#include "MapSetParser/MapSetParser.hpp"
#include "MapSetScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::MapSetParser::token token;
typedef w3c_sw::MapSetParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "MapSetFlexLexer" */
/* consider using class instead
 * %option yyclass="MapSetScanner"
 * void MapSetFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 60 "lib/MapSetScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for MapSet terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for MapSet terminals */
/* START semantic actions for MapSet terminals */
#line 3020 "lib/MapSetScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 171 "lib/MapSetScanner.lpp"

#line 3184 "lib/MapSetScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 961 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 960 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 88 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 88 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 89 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 172 "lib/MapSetScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 173 "lib/MapSetScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 174 "lib/MapSetScanner.lpp"
{return token::IT_REWRITEVAR;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 175 "lib/MapSetScanner.lpp"
{return token::IT_SERVER;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 176 "lib/MapSetScanner.lpp"
{return token::IT_USER;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 177 "lib/MapSetScanner.lpp"
{return token::IT_PASSWORD;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 178 "lib/MapSetScanner.lpp"
{return token::IT_DATABASE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 179 "lib/MapSetScanner.lpp"
{return token::IT_STEMURI;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 180 "lib/MapSetScanner.lpp"
{return token::IT_PRIMARYKEY;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 181 "lib/MapSetScanner.lpp"
{return token::IT_LABEL;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 182 "lib/MapSetScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 183 "lib/MapSetScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 184 "lib/MapSetScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 185 "lib/MapSetScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 186 "lib/MapSetScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 187 "lib/MapSetScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 188 "lib/MapSetScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 189 "lib/MapSetScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 190 "lib/MapSetScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 191 "lib/MapSetScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 192 "lib/MapSetScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 193 "lib/MapSetScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 194 "lib/MapSetScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 195 "lib/MapSetScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 196 "lib/MapSetScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 197 "lib/MapSetScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 198 "lib/MapSetScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 199 "lib/MapSetScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 200 "lib/MapSetScanner.lpp"
{return token::IT_NULL;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 201 "lib/MapSetScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 202 "lib/MapSetScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 203 "lib/MapSetScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 204 "lib/MapSetScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 205 "lib/MapSetScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 206 "lib/MapSetScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 207 "lib/MapSetScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 208 "lib/MapSetScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 209 "lib/MapSetScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 210 "lib/MapSetScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 211 "lib/MapSetScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 212 "lib/MapSetScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 213 "lib/MapSetScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 214 "lib/MapSetScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 215 "lib/MapSetScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 216 "lib/MapSetScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 217 "lib/MapSetScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 218 "lib/MapSetScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 219 "lib/MapSetScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 220 "lib/MapSetScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 221 "lib/MapSetScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 222 "lib/MapSetScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 223 "lib/MapSetScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 224 "lib/MapSetScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 225 "lib/MapSetScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 226 "lib/MapSetScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 227 "lib/MapSetScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 228 "lib/MapSetScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 229 "lib/MapSetScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 230 "lib/MapSetScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 231 "lib/MapSetScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 232 "lib/MapSetScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 233 "lib/MapSetScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 234 "lib/MapSetScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 235 "lib/MapSetScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 236 "lib/MapSetScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 237 "lib/MapSetScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 238 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 239 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 240 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 241 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 242 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 243 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 244 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 245 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 246 "lib/MapSetScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 247 "lib/MapSetScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 248 "lib/MapSetScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 249 "lib/MapSetScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 250 "lib/MapSetScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 251 "lib/MapSetScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 252 "lib/MapSetScanner.lpp"
{yylval->p_POS = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 253 "lib/MapSetScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 254 "lib/MapSetScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 255 "lib/MapSetScanner.lpp"
{yylval->p_POS = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 256 "lib/MapSetScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 257 "lib/MapSetScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 259 "lib/MapSetScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 260 "lib/MapSetScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 266 "lib/MapSetScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3746 "lib/MapSetScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	MapSetfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	MapSetfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					MapSetrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) MapSetrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 961 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 961 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 960);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) MapSetalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) MapSetalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		MapSetfree((void *) b->yy_ch_buf  );

	MapSetfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)MapSetalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)MapSetrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) MapSetalloc(new_size  );

		else
			(yy_start_stack) = (int *) MapSetrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *MapSetalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *MapSetrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void MapSetfree (void * ptr )
{
	free( (char *) ptr );	/* see MapSetrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 266 "lib/MapSetScanner.lpp"


/* END semantic actions for MapSet terminals */

/* START MapSetScanner */
namespace w3c_sw {

MapSetScanner::MapSetScanner (MapSetDriver* driver, std::istream* in, std::ostream* out) : MapSetFlexLexer(in, out), driver(driver) {  }
MapSetScanner::~MapSetScanner () {  }

MapSetParser::token_type MapSetScanner::typedLiteral (MapSetParser::semantic_type*& yylval, MapSetParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

MapSetParser::token_type MapSetScanner::unescape (MapSetParser::semantic_type*& yylval, size_t skip, MapSetParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* MapSetScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void MapSetScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END MapSetScanner */

const URI* MapSetScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of MapSetFlexLexer::yylex() is required to fill the
 * vtable of the class MapSetFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the MapSetScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int MapSetFlexLexer::yylex()
{
    std::cerr << "in MapSetFlexLexer::yylex() !" << std::endl;
    return 0;
}


