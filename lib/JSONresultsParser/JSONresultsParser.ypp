/* $Id: JSONresultsParser.ypp,v 1.3 2008-11-13 19:18:01 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPParser.yy */
/* Bison parser for SPARQL JSON results format
 * conventions:
 *   generated production names are composed of their constituents.
 *   { $$ = $1; } elided.
 *   driver has extra state for hard-to-generate tries like  Foo Bar* => ((Foo Bar) Bar)
 *
 * lexer allocates new std::strings (grr, can't include objects with a constructor in a union)
 * copy and delete everything as soon as it's converted to an AtomDictionary-managed term. For
 * example, LANGTAGs are copied and deleted, datatypes allocated and kept.
 * curTTerm, curDatatype -- managed.
 * curLang -- unmanaged, copy and delete after use.
 */

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start Top

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="w3c_sw"

/* set the parser's class identifier */
%define "parser_class_name" "JSONresultsParser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class JSONresultsDriver& driver }

/* verbose error messages */
%error-verbose

// %{ //  ##bison1
%code requires { // ##bison2
/* Bison seems to test inclusion with PARSER_HEADER_H, rather than something
 * which varies by parser_class_name . Overriding with define specific to
 * this parser.
 */
#endif /* !PARSER_HEADER_H */
#ifndef JSONRESULTS_PARSER_HPP
#define JSONRESULTS_PARSER_HPP

#include "SWObjects.hpp"
#include "ResultSet.hpp"
#include "ParserCommon.hpp"

namespace w3c_sw {

class JSONresultsScanner;

/** The Driver class brings together all components. It creates an instance of
 * the JSONresultsParser and JSONresultsScanner classes and connects them. Then the input stream is
 * fed into the scanner object and the parser gets it's token
 * sequence. Furthermore the driver object is available in the grammar rules as
 * a parameter. Therefore the driver class contains a reference to the
 * structure into which the parsed data is saved. */

class JSONresultsDriver : public YaccDriver {
    friend class JSONresultsParser;
protected:
    ResultSet* curResultSet;
    Result* curResult;
    VariableVector termList;
    std::vector<const TTerm*>::const_iterator curTTerm;
    const std::string* curValue;
    const URI* curDatatype;
    const std::string* curLang;

    void startBindingSet () {
	curResultSet = new ResultSet(atomFactory);
	curResultSet->erase(curResultSet->begin());
    }

    void addBindingVar (const TTerm* var) {
	curResultSet->addOrderedVar(var);
	termList.push_back(var);
    }

    void startBindingRow (bool iterateBindingVars = true) {
	curResult = new Result(curResultSet);
	curResultSet->insert(curResultSet->end(), curResult);
	curTTerm = iterateBindingVars ? termList.begin() : termList.end();
    }

    void addBinding (const TTerm* variable, const TTerm* value) {
	assert (curResult != NULL);
	if (value != TTerm::Unbound)
	    curResultSet->set(curResult, variable, value, false);
    }

    void addBindingValue (const TTerm* value) {
	//    throw "!! how can i get the yylocation_stack_?";
	if (curTTerm == termList.end()) {
	    std::stringstream ss;
	    ss << "atom " << value->toString() << " binding tuple wider than BINDINGS variable list.";
	    // error(*(yylocation_stack_.begin()), ss.str().c_str());
	    throw "!! how can i get the yylocation_stack_?";
	}
	if (value != TTerm::Unbound)
	    curResultSet->set(curResult, *curTTerm, value, false);
	++curTTerm;
    }

    void addBindingVarOrValue (const TTerm* term) {
	if (curResult == NULL)
	    addBindingVar(term);
	else
	    addBindingValue(term);
    }

    Result* endBindingRow () {
	if (curTTerm != termList.end()) {
	    // error(*(yylocation_stack_.begin()), "insufficient bindings for result set row.");
	    throw "!! how can i get the yylocation_stack_?";
	}
	Result* ret = curResult;
	curResult = NULL;
	return ret;
    }

    ResultSet* endBindingSet () {
	ResultSet* ret = curResultSet;
	curResultSet = NULL;
	termList.clear();
	return ret;
    }

public:
    JSONresultsDriver(AtomFactory* atomFactory);
    ~JSONresultsDriver();

    const ResultSet* parse(IStreamContext& in, ResultSet* rs = NULL);
    const ResultSet* parse(std::string queryStr, ResultSet* rs = NULL);


    /** Pointer to the current lexer instance, this is used to connect the
     * parser to the scanner. It is used in the yylex macro. */
    class JSONresultsScanner* lexer;

    /** Reference to the object created during parsing of the JSON stream. */
    ResultSet* root;
};

} // namespace w3c_sw

// %} // ##bison1
} // ##bison2

 /*** BEGIN JSONresults language tokens. ***/

%union {
    const std::string* p_str;
    const TTerm* p_TTerm;
    const URI* p_URI;
    const BNode* p_BNode;
    const RDFLiteral* p_literal;
}

%{
#include "../JSONresultsScanner.hpp"
%}
%token			__EOF__	     0	"end of file"

/* Language tokens */
%token GT_LCURLEY GT_COMMA GT_RCURLEY GT_COLON GT_LBRACKET GT_RBRACKET GT_H_22__head_H_22_ 
       GT_H_27__head_H_27_ GT_H_22__link_H_22_ GT_H_27__link_H_27_ GT_H_22__vars_H_22_ 
       GT_H_27__vars_H_27_ GT_H_22__results_H_22_ GT_H_27__results_H_27_ GT_H_22__bindings_H_22_ 
       GT_H_27__bindings_H_27_ GT_H_22__uri_H_22_ GT_H_27__uri_H_27_ GT_H_22__bnode_H_22_ 
       GT_H_27__bnode_H_27_ GT_H_22__type_H_22_ GT_H_27__type_H_27_ GT_H_22__value_H_22_ 
       GT_H_27__value_H_27_ GT_H_22__literal_H_22_ GT_H_27__literal_H_27_
       GT_H_22__typed_MINUS_literal_H_22_ GT_H_27__typed_MINUS_literal_H_27_ 
       GT_H_22__datatype_H_22_ GT_H_27__datatype_H_27_ GT_H_22__xml_COLON_lang_H_22_ GT_H_27__xml_COLON_lang_H_27_ 
       STRING_LITERAL2 STRING_LITERAL1

/* Productions */
%type <p_str> word value lang _O_QGT_COMMA_E_S_Qlang_E_C _Q_O_QGT_COMMA_E_S_Qlang_E_C_E_Opt STRING_LITERAL2 STRING_LITERAL1
%type <p_TTerm> RDFterm v_all vt_all
%type <p_URI> t_uri datatype
%type <p_BNode> t_bnode
%type <p_literal> t_plainLiteral t_typedLiteral d_typedLiteral l_plainLiteral
                  _O_Qlang_E_S_QGT_COMMA_E_S_Qvalue_E_Or_Qvalue_E_S_QGT_COMMA_E_S_Qlang_E_Opt_C
                  _O_Qdatatype_E_S_QGT_COMMA_E_S_Qvalue_E_Or_Qvalue_E_S_QGT_COMMA_E_S_Qdatatype_E_C
                  

/* END TokenBlock */

//%destructor { delete $$; } BlankNode

 /*** END JSONresults language tokens. ***/

%{
#include "../JSONresultsScanner.hpp"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lexWrapper
%}

%% /*** Grammar Rules ***/

 /*** BEGIN JSONresults language structure. ***/
Top:
    GT_LCURLEY {
	if (driver.root == NULL)
	    driver.startBindingSet();
	else
	    driver.curResultSet = driver.root;
      } head GT_COMMA results GT_RCURLEY	{
	  driver.root = driver.endBindingSet();
	  driver.curResultSet = NULL;
      }
;

head:
    headWord GT_COLON GT_LCURLEY _O_Q_link_E_S_QGT_COMMA_E_S_Qvars_E_Or_Qvars_E_S_QGT_COMMA_E_S_Q_link_E_Opt_C GT_RCURLEY	
;

_O_QGT_COMMA_E_S_Q_link_E_C:
    GT_COMMA _link	
;

_Q_O_QGT_COMMA_E_S_Q_link_E_C_E_Opt:
    
  | _O_QGT_COMMA_E_S_Q_link_E_C	
;

_O_Q_link_E_S_QGT_COMMA_E_S_Qvars_E_Or_Qvars_E_S_QGT_COMMA_E_S_Q_link_E_Opt_C:
    _link GT_COMMA vars	
  | vars _Q_O_QGT_COMMA_E_S_Q_link_E_C_E_Opt	
;

_link:
    linkWord GT_COLON GT_LBRACKET word GT_RBRACKET	{
	// throw away link $4
	delete $4;
    }
;

vars:
    varsWord GT_COLON GT_LBRACKET word _Q_O_QGT_COMMA_E_S_Qword_E_C_E_Star GT_RBRACKET	
;

_O_QGT_COMMA_E_S_Qword_E_C:
    GT_COMMA word	{
	driver.addBindingVar(driver.getVariable(*$2));
	delete $2;
    }
;

_Q_O_QGT_COMMA_E_S_Qword_E_C_E_Star:
    
  | _Q_O_QGT_COMMA_E_S_Qword_E_C_E_Star _O_QGT_COMMA_E_S_Qword_E_C	
;

results:
    resultsWord GT_COLON GT_LCURLEY bindings GT_RCURLEY	
;

bindings:
    bindingsWord GT_COLON GT_LBRACKET solution _Q_O_QGT_COMMA_E_S_Qsolution_E_C_E_Star GT_RBRACKET	
;

_O_QGT_COMMA_E_S_Qsolution_E_C:
    GT_COMMA solution	
;

_Q_O_QGT_COMMA_E_S_Qsolution_E_C_E_Star:
    
  | _Q_O_QGT_COMMA_E_S_Qsolution_E_C_E_Star _O_QGT_COMMA_E_S_Qsolution_E_C	
;

solution:
    GT_LCURLEY {
	driver.startBindingRow(false);
      } binding _Q_O_QGT_COMMA_E_S_Qbinding_E_C_E_Star GT_RCURLEY	{
	  driver.endBindingRow();
      }
;

_O_QGT_COMMA_E_S_Qbinding_E_C:
    GT_COMMA binding	
;

_Q_O_QGT_COMMA_E_S_Qbinding_E_C_E_Star:
    
  | _Q_O_QGT_COMMA_E_S_Qbinding_E_C_E_Star _O_QGT_COMMA_E_S_Qbinding_E_C	
;

binding:
    word GT_COLON GT_LCURLEY RDFterm GT_RCURLEY	{
	driver.addBinding(driver.getVariable(*$1), $4);
	delete $1;
    }
;

RDFterm:
    typeKey t_uri	{
	$$ = $2;
    }
  | typeKey t_bnode	{
	$$ = $2;
    }
  | typeKey t_plainLiteral	{
	$$ = $2;
    }
  | typeKey t_typedLiteral	{
	$$ = $2;
    }
  | value {
	driver.curValue = $1;
      } GT_COMMA v_all	{
	  driver.curValue = NULL;
	  $$ = $4;
      }
  | datatype {
	driver.curDatatype = $1;
      } GT_COMMA d_typedLiteral	{
	  driver.curDatatype = NULL;
	  $$ = $4;
      }
  | lang {
	driver.curLang = $1;
      } GT_COMMA l_plainLiteral	{
	  driver.curLang = NULL;
	  $$ = $4;
      }
;

t_uri:
    uriWord GT_COMMA value	{
	$$ = driver.getURI(*$3);
	delete $3;
    }
;

t_bnode:
    bnodeWord GT_COMMA value	{
	$$ = driver.getBNode(*$3);
	delete $3;
    }
;

t_plainLiteral:
    literalWord GT_COMMA _O_Qlang_E_S_QGT_COMMA_E_S_Qvalue_E_Or_Qvalue_E_S_QGT_COMMA_E_S_Qlang_E_Opt_C	{
	$$ = $3;
    }
;

_O_QGT_COMMA_E_S_Qlang_E_C:
    GT_COMMA lang	{
	$$ = $2;
    }
;

_Q_O_QGT_COMMA_E_S_Qlang_E_C_E_Opt:
    {
	$$ = NULL;
    }
  | _O_QGT_COMMA_E_S_Qlang_E_C	
;

_O_Qlang_E_S_QGT_COMMA_E_S_Qvalue_E_Or_Qvalue_E_S_QGT_COMMA_E_S_Qlang_E_Opt_C:
    lang GT_COMMA value	{
	$$ = driver.getRDFLiteral(*$3, NULL, $1 ? new LANGTAG(*$1) : NULL);
	delete $3;
	delete $1;
    }
  | value _Q_O_QGT_COMMA_E_S_Qlang_E_C_E_Opt	{
	$$ = driver.getRDFLiteral(*$1, NULL, $2 ? new LANGTAG(*$2) : NULL);
	delete $1;
	delete $2;
    }
;

t_typedLiteral:
    typedLiteralWord GT_COMMA _O_Qdatatype_E_S_QGT_COMMA_E_S_Qvalue_E_Or_Qvalue_E_S_QGT_COMMA_E_S_Qdatatype_E_C	{
	$$ = $3;
    }
;

_O_Qdatatype_E_S_QGT_COMMA_E_S_Qvalue_E_Or_Qvalue_E_S_QGT_COMMA_E_S_Qdatatype_E_C:
    datatype GT_COMMA value	{
	$$ = driver.getRDFLiteral(*$3, $1, NULL);
	delete $3;
    }
  | value GT_COMMA datatype	{
	$$ = driver.getRDFLiteral(*$1, $3, NULL);
	delete $1;
    }
;

v_all:
    typeKey vt_all	{
	$$ = $2;
    }
  | datatype GT_COMMA typeKey typedLiteralWord	{
      $$ = driver.getRDFLiteral(*driver.curValue, $1, NULL);
      delete driver.curValue;
      driver.curDatatype = NULL;
    }
  | lang GT_COMMA typeKey literalWord	{
      $$ = driver.getRDFLiteral(*driver.curValue, NULL, $1 ? new LANGTAG(*$1) : NULL);
      delete driver.curValue;
      delete $1;
      driver.curLang = NULL;
    }
;

vt_all:
    uriWord	{
	$$ = driver.getURI(*driver.curValue);
	delete driver.curValue;
    }
  | bnodeWord	{
	$$ = driver.getBNode(*driver.curValue);
	delete driver.curValue;
    }
  | literalWord _Q_O_QGT_COMMA_E_S_Qlang_E_C_E_Opt	{
	$$ = driver.getRDFLiteral(*driver.curValue, NULL, $2 ? new LANGTAG(*$2) : NULL);
	delete driver.curValue;
	delete $2;
    }
  | typedLiteralWord GT_COMMA datatype	{
	$$ = driver.getRDFLiteral(*driver.curValue, $3, NULL);
	delete driver.curValue;
    }
;

d_typedLiteral:
    typeKey typedLiteralWord GT_COMMA value	{
	$$ = driver.getRDFLiteral(*$4, driver.curDatatype, NULL);
	delete $4;
    }
  | value GT_COMMA typeKey typedLiteralWord	{
	$$ = driver.getRDFLiteral(*$1, driver.curDatatype, NULL);
	delete $1;
    }
;

l_plainLiteral:
    typeKey literalWord GT_COMMA value	{
	$$ = driver.getRDFLiteral(*$4, NULL, driver.curLang ? new LANGTAG(*driver.curLang) : NULL);
	delete $4;
	delete driver.curLang;
    }
  | value GT_COMMA typeKey literalWord	{
	$$ = driver.getRDFLiteral(*$1, NULL, driver.curLang ? new LANGTAG(*driver.curLang) : NULL);
	delete $1;
	delete driver.curLang;
    }
;

value:
    valueWord GT_COLON word	{
	$$ = $3;
    }
;

datatype:
    datatypeWord GT_COLON word	{
	$$ = driver.getURI(*$3);
	delete $3;
    }
;

lang:
    langWord GT_COLON word	{
	$$ = $3;
    }
;

headWord:
    GT_H_22__head_H_22_	
  | GT_H_27__head_H_27_	
;

linkWord:
    GT_H_22__link_H_22_	
  | GT_H_27__link_H_27_	
;

varsWord:
    GT_H_22__vars_H_22_	
  | GT_H_27__vars_H_27_	
;

resultsWord:
    GT_H_22__results_H_22_	
  | GT_H_27__results_H_27_	
;

bindingsWord:
    GT_H_22__bindings_H_22_	
  | GT_H_27__bindings_H_27_	
;

uriWord:
    GT_H_22__uri_H_22_	
  | GT_H_27__uri_H_27_	
;

bnodeWord:
    GT_H_22__bnode_H_22_	
  | GT_H_27__bnode_H_27_	
;

typeKey:
    typeWord GT_COLON	
;

typeWord:
    GT_H_22__type_H_22_	
  | GT_H_27__type_H_27_	
;

valueWord:
    GT_H_22__value_H_22_	
  | GT_H_27__value_H_27_	
;

literalWord:
    GT_H_22__literal_H_22_	
  | GT_H_27__literal_H_27_	
;

typedLiteralWord:
    GT_H_22__typed_MINUS_literal_H_22_	
  | GT_H_27__typed_MINUS_literal_H_27_	
;

datatypeWord:
    GT_H_22__datatype_H_22_	
  | GT_H_27__datatype_H_27_	
;

langWord:
    GT_H_22__xml_COLON_lang_H_22_	
  | GT_H_27__xml_COLON_lang_H_27_	
;

word:
    STRING_LITERAL1	
  | STRING_LITERAL2	
  | headWord	{
	$$ = new std::string("head");
    }
  | varsWord	{
      $$ = new std::string("vars");
    }
  | resultsWord	{
      $$ = new std::string("results");
    }
  | bindingsWord	{
      $$ = new std::string("bindings");
    }
  | typeWord	{
      $$ = new std::string("type");
    }
  | uriWord	{
      $$ = new std::string("uri");
    }
  | bnodeWord	{
      $$ = new std::string("bnode");
    }
  | literalWord	{
      $$ = new std::string("literal");
    }
  | typedLiteralWord	{
      $$ = new std::string("typedLiteral");
    }
  | datatypeWord	{
      $$ = new std::string("datatype");
    }
  | langWord	{
      $$ = new std::string("lang");
    }
  | valueWord	{
      $$ = new std::string("value");
    }
;
 /*** END JSONresults language structure. ***/


%% /*** Additional Code ***/

void w3c_sw::JSONresultsParser::error(const JSONresultsParser::location_type& l,
				    const std::string& constM)
{
    std::string m = constM;
    static struct { const char* from; const char* to; } tokens[] = {
	{ "GT_LPAREN",		"'('" },
	{ "GT_RPAREN",		"')'" },
	{ "GT_TIMES",		"'*'" },
	{ "GT_LCURLEY",		"'{'" },
	{ "GT_RCURLEY",		"'}'" },
	{ "GT_SEMI",		"';'" },
	{ "GT_DOT",		"'.'" },
	{ "GT_COMMA",		"','" },
	{ "GT_LBRACKET",	"'['" },
	{ "GT_RBRACKET",	"']'" },
	{ "GT_OR",		"'||'" },
	{ "GT_AND",		"'&&'" },
	{ "GT_EQUAL",		"'='" },
	{ "GT_NEQUAL",		"'!='" },
	{ "GT_LT",		"'<'" },
	{ "GT_GT",		"'>'" },
	{ "GT_LE",		"'<='" },
	{ "GT_GE",		"'>='" },
	{ "GT_DIVIDE",		"'/'" },
	{ "GT_PLUS",		"'+'" },
	{ "GT_MINUS",		"'-'" },
	{ "GT_NOT",		"'!'" },
	{ "GT_DTYPE",		"'^^'" },
	{ "GT_", "" }
    };
    for (size_t i = 0; i < sizeof(tokens)/sizeof(tokens[0]); ++i) {
	size_t p = m.find(tokens[i].from);
	if (p != std::string::npos) {
	    m.replace(p, strlen(tokens[i].from) + 1, tokens[i].to);
	    break;
	}
    }
    driver.error(l, m);
}

/* START Driver (@@ stand-alone would allow it to be shared with other parsers */

namespace w3c_sw {

    JSONresultsDriver::JSONresultsDriver (AtomFactory* atomFactory) : 
	YaccDriver("", atomFactory), 
	curResultSet(NULL), curResult(NULL), curValue(NULL), 
	curDatatype(NULL), curLang(NULL), root(NULL)
{
}

    JSONresultsDriver::~JSONresultsDriver ()
{
}

const ResultSet* JSONresultsDriver::parse (IStreamContext& in, ResultSet* rs)
{
    root = curResultSet = rs;
    curResult = NULL;
    curValue = NULL;
    curDatatype = NULL;
    curLang = NULL;
    streamname = in.nameStr;

    JSONresultsScanner scanner(this, in.p);
    scanner.set_debug(trace_scanning);
    lexer = &scanner;

    JSONresultsParser parser(*this);
    parser.set_debug_level(trace_parsing);
    // !!! Clear out namespaces!
    ignorePrefixFlag = false;
    parser.parse();
    return root;
}

const ResultSet* JSONresultsDriver::parse (std::string queryStr, ResultSet* rs)
{
    IStreamContext in(queryStr.c_str(), IStreamContext::STRING);
    return parse(in, rs);
}


} // namespace w3c_sw

/* END Driver */

