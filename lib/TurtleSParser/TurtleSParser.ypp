/* $Id: TurtleSParser.ypp,v 1.2 2008-10-24 10:57:32 eric Exp $ -*- mode: c++ -*- */
/** \file TurtleSParser.yy Contains the Bison parser source */

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start turtleDoc

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="w3c_sw"

/* set the parser's class identifier */
%define "parser_class_name" "TurtleSParser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
    driver.yylloc = &@$;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class TurtleSDriver& driver }

/* verbose error messages */
%error-verbose

// %{ //  ##bison1
%code requires { // ##bison2
/* Bison seems to test inclusion with PARSER_HEADER_H, rather than something
 * which varies by parser_class_name . Overriding with define specific to
 * this parser.
 */
#endif /* !PARSER_HEADER_H */
#ifndef TURTLES_PARSER_HPP
#define TURTLES_PARSER_HPP

#include "SWObjects.hpp"
#include "RdfDB.hpp"
#include "ParserCommon.hpp"

#include <stack>

namespace w3c_sw {

/** The Driver class brings together all components. It creates an instance of
 * the TurtleSParser and TurtleSScanner classes and connects them. Then the input stream is
 * fed into the scanner object and the parser gets it's token
 * sequence. Furthermore the driver object is available in the grammar rules as
 * a parameter. Therefore the driver class contains a reference to the
 * structure into which the parsed data is saved. */

class TurtleSDriver : public YaccDataDriver {
    location* yylloc; // can't move up into YaccDriver 'cause location.hh hasn't been included yet.
    friend class TurtleSParser;
protected:
    const TTerm* curSubject;
    const TTerm* curPredicate;
public:
    size_t abortErrorCount;
    static size_t DefaultAbortErrorCount;

    TurtleSDriver (std::string baseURI, AtomFactory* atomFactory)
	: YaccDataDriver(baseURI, atomFactory), abortErrorCount(DefaultAbortErrorCount)
    {  }

    void parse(IStreamContext& in);
    void parse(IStreamContext& in, BasicGraphPattern* bgp);
    void parse(IStreamContext& in, RdfDB* db);
    void parse(std::string turtleStr);
    void parse(std::string turtleStr, BasicGraphPattern* bgp);
    void parse(std::string turtleStr, RdfDB* db);


    /** Pointer to the current lexer instance, this is used to connect the
     * parser to the scanner. It is used in the yylex macro. */
    class TurtleSScanner* lexer;
};

} // namespace w3c_sw

// %} // ##bison1
} // ##bison2

 /*** BEGIN TurtleS language tokens. ***/

%union {
    void* p_void;
    struct {const TTerm* subject; const TTerm* predicate;} p_SubjectPredicatePair;
    struct {const URI* uri; LANGTAG* langtag;} p_uri_or_langtag;

    /* Terminals */
    LANGTAG* p_LANGTAG;

    std::string* p_string;

    const NumericRDFLiteral* p_NumericRDFLiteral;
    const BooleanRDFLiteral* p_BooleanRDFLiteral;

    /* Productions */
    BasicGraphPattern* p_DefaultGraphPattern;
    const TTerm* p_TTerm;
    ProductionVector<const TTerm*>* p_TTerms;
    const URI* p_URI;
    ProductionVector<URI*>* p_URIs;
    const RDFLiteral* p_RDFLiteral;
    const BNode* p_BNode;

}

%{
#include "../TurtleSScanner.hpp"
%}
%token			__EOF__	     0	"end of file"
/* START TokenBlock */
/* Terminals */

%token BASE PREFIX SPARQL_BASE RDF_TYPE SPARQL_PREFIX GT_LPAREN GT_RPAREN GT_DOT
       GT_COMMA GT_SEMI GT_LBRACKET GT_RBRACKET GT_DTYPE
%token <p_TTerm> IT_true IT_false INTEGER DECIMAL DOUBLE BLANK_NODE_LABEL ANON
// deepest typing for these tokens:
// %token <p_BooleanRDFLiteral> IT_true IT_false
// %token <p_NumericRDFLiteral> INTEGER DECIMAL DOUBLE
// %token <p_BNode> BLANK_NODE_LABEL ANON
%token <p_string> STRING_LITERAL1 STRING_LITERAL2 STRING_LITERAL_LONG1 STRING_LITERAL_LONG2
%token <p_URI> PNAME_NS PNAME_LN IRIREF
%token <p_LANGTAG> LANGTAG

%type <p_TTerm> subject object collection RDFLiteral literal NumericLiteral BooleanLiteral BlankNode blankNodePropertyList verb predicate
%type <p_URI> iri PrefixedName
// deepest typing for these productions:
// %type <p_TTerm> subject object collection
// %type <p_RDFLiteral> RDFLiteral literal
// %type <p_NumericRDFLiteral> NumericLiteral
// %type <p_BooleanRDFLiteral> BooleanLiteral
// %type <p_BNode> BlankNode blankNodePropertyList
// %type <p_URI> verb predicate iri PrefixedName
%type <p_string> String
%type <p_TTerm> _Qobject_E_Star
%type <p_uri_or_langtag> _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C
                       _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt

/* END TokenBlock */

//%destructor { delete $$; } BlankNode

 /*** END TurtleS language tokens. ***/

%{
#include "../TurtleSScanner.hpp"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lexWrapper
%}

%% /*** Grammar Rules ***/

 /*** BEGIN TurtleS language structure. ***/
turtleDoc:
    // statement*
    _Qstatement_E_Star	
;

_Qstatement_E_Star:
    
  | _Qstatement_E_Star statement	
;

statement:
    directive	
  | triples GT_DOT	
  | error GT_DOT	
;

directive:
    prefixID	
  | base	
  | sparqlPrefix	
  | sparqlBase	
;

prefixID:
    PREFIX {
	driver.ignorePrefix(true);
      } PNAME_NS {
	  driver.ignorePrefix(false);
      } IRIREF {
	  std::string prefix($3->getLexicalValue());
	  driver.addPrefix(prefix.substr(0, prefix.length()-1), $5);
      } GT_DOT	
;

base:
    BASE IRIREF GT_DOT	{
	driver.setBase($2->getLexicalValue());
    }
;

sparqlPrefix:
    SPARQL_PREFIX {
	driver.ignorePrefix(true);
      } PNAME_NS {
	  driver.ignorePrefix(false);
      } IRIREF	{
	  std::string prefix($3->getLexicalValue());
	  driver.addPrefix(prefix.substr(0, prefix.length()-1), $5);
      }
;

sparqlBase:
    SPARQL_BASE IRIREF	{
	driver.setBase($2->getLexicalValue());
    }
;

triples:
    subject	{
	driver.curSubject = $1;
    } predicateObjectList	
  | blankNodePropertyList	{
	driver.curSubject = $1;
    } _QpredicateObjectList_E_Opt	
;

// predicateObjectList?
_QpredicateObjectList_E_Opt:
    
  | predicateObjectList	
;

predicateObjectList:
    // verb objectList ( ';' ( verb objectList )? )*
    verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star	
  | error
  | verb error
    //  | verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star error _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star	
;

// verb objectList
_O_Qverb_E_S_QobjectList_E_C:
    verb objectList	
;

// ( verb objectList )?
_Q_O_Qverb_E_S_QobjectList_E_C_E_Opt:
    
  | _O_Qverb_E_S_QobjectList_E_C	
;

// ';' ( verb objectList )?
_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C:
    GT_SEMI _Q_O_Qverb_E_S_QobjectList_E_C_E_Opt	
;

// ( ';' ( verb objectList )? )*
_Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star:
    
  | _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C	
  | _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star error _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C	
  | _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star error	
;

objectList:
    // object ( ',' object )*
    object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star	
;

// ',' object
_O_QGT_COMMA_E_S_Qobject_E_C:
    GT_COMMA object	
;

// ( ',' object )*
_Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star:
    
  | _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C	
;

verb:
    predicate	{
	$$ = $1;
	driver.curPredicate = $$;
    }
  | RDF_TYPE	{
      $$ = TTerm::RDF_type;
	driver.curPredicate = $$;
    }
;

subject:
    iri	{
	$$ = $1;
    }
  | BlankNode	// { $$ = $1; }
  | collection	
;

predicate:
    iri	{
	$$ = $1;
    }
;

object:
    iri	{
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
    }
  | BlankNode	{
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
    }
  | collection	{
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
    }
  | blankNodePropertyList	{
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
    }
  | literal	{
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
    }
;

literal:
    RDFLiteral	
  | NumericLiteral	// { $$ = $1; }
  | BooleanLiteral	// { $$ = $1; }
;

blankNodePropertyList:
    GT_LBRACKET {
	$<p_SubjectPredicatePair>$.subject = driver.curSubject;
	$<p_SubjectPredicatePair>$.predicate = driver.curPredicate;
	driver.curSubject = driver.createBNode();
      } predicateObjectList GT_RBRACKET	{
	  $$ = (BNode*)driver.curSubject; // could store w/ type in ctx..
	  driver.curSubject = $<p_SubjectPredicatePair>2.subject;
	  driver.curPredicate = $<p_SubjectPredicatePair>2.predicate;
      }
  // | GT_LBRACKET {
  // 	$<p_SubjectPredicatePair>$.subject = driver.curSubject;
  // 	$<p_SubjectPredicatePair>$.predicate = driver.curPredicate;
  // 	driver.curSubject = driver.createBNode();
  //     } predicateObjectList error GT_RBRACKET	{
  // 	  $$ = (BNode*)driver.curSubject; // could store w/ type in ctx..
  // 	  driver.curSubject = $<p_SubjectPredicatePair>2.subject;
  // 	  driver.curPredicate = $<p_SubjectPredicatePair>2.predicate;
  //     }
;

collection:
    // '(' object* ')'
    GT_LPAREN {
	$<p_SubjectPredicatePair>$.subject = driver.curSubject;
	$<p_SubjectPredicatePair>$.predicate = driver.curPredicate;
      } _Qobject_E_Star GT_RPAREN	{
	  if ($3 == NULL) {
	      $$ = TTerm::RDF_nil;
	  } else {
	      $$ = $3;
	      driver.curBGP->addTriplePattern
		  (driver.atomFactory->getTriple
		   (driver.curSubject, TTerm::RDF_rest, TTerm::RDF_nil));
	  }
	  driver.curSubject = $<p_SubjectPredicatePair>2.subject;
	  driver.curPredicate = $<p_SubjectPredicatePair>2.predicate;
      }
;

// object*
// $$ = the head, driver.curSubject = the tail
// final state:
//   $$=NULL means there were no elements.
//   otherwise add { curSubject rdf:rest rdf:nil }.
_Qobject_E_Star:
    {
	$$ = NULL;
    }
  | _Qobject_E_Star {
	const TTerm* nextTail = driver.createBNode();
	if ($1 == NULL) // on first element
	    $<p_TTerm>$ = nextTail;
	else		// on later elements
	    driver.curBGP->addTriplePattern
		(driver.atomFactory->getTriple
		 (driver.curSubject, TTerm::RDF_rest, nextTail));
	driver.curSubject = nextTail;
	driver.curPredicate = TTerm::RDF_first;
      } object	{
	  $$ = $<p_TTerm>2;
      }
;

NumericLiteral:
    INTEGER	
  | DECIMAL	
  | DOUBLE	
;

RDFLiteral:
    // String ( LANGTAG | ( '^^' iri ) )?
    String _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt	{
	$$ = driver.getRDFLiteral(*$1, $2.uri, $2.langtag);
	delete $1;
    }
;

// LANGTAG | ( '^^' iri )
_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C:
    LANGTAG	{
	$$.uri = NULL;
	$$.langtag = $1;
    }
// '^^' iri
  | GT_DTYPE iri	{
	$$.uri = $2;
	$$.langtag = NULL;
    }
;

// ( LANGTAG | ( '^^' iri ) )?
_Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt:
    {
	$$.uri = NULL;
	$$.langtag = NULL;
    }
  | _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C	
;

BooleanLiteral:
    IT_true	
  | IT_false	
;

String:
    STRING_LITERAL1	
  | STRING_LITERAL2	
  | STRING_LITERAL_LONG1	
  | STRING_LITERAL_LONG2	
;

iri:
    IRIREF	
  | PrefixedName	
;

PrefixedName:
    PNAME_LN	
  | PNAME_NS	
;

BlankNode:
    BLANK_NODE_LABEL	
  | ANON	
;

 /*** END TurtleS language structure. ***/

%% /*** Additional Code ***/

void w3c_sw::TurtleSParser::error(const TurtleSParser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}

/* START Driver (@@ stand-alone would allow it to be shared with other parsers */

namespace w3c_sw {

size_t TurtleSDriver::DefaultAbortErrorCount = 100;

void TurtleSDriver::parse (IStreamContext& in) {
    reset();
    streamname = in.nameStr;
    // clear prefixes for nth run but keep them around for e.g. serialization.
    clearPrefixes();
    curSubject = curPredicate = NULL;

    TurtleSScanner scanner(this, in.p);
    scanner.set_debug(trace_scanning);
    this->lexer = &scanner;

    TurtleSParser parser(*this);
    parser.set_debug_level(trace_parsing);
    parser.parse();
    checkErrors();
}

void TurtleSDriver::parse (IStreamContext& in, BasicGraphPattern* bgp) {
    setGraph(bgp);
    parse(in);
}

void TurtleSDriver::parse (IStreamContext& in, RdfDB* db) {
    setGraph(db->ensureGraph(NULL));
    parse(in);
}

void TurtleSDriver::parse(std::string turtleStr) {
    IStreamContext in(turtleStr.c_str(), IStreamContext::STRING);
    parse(in);
}

void TurtleSDriver::parse (std::string turtleStr, BasicGraphPattern* bgp) {
    IStreamContext in(turtleStr.c_str(), IStreamContext::STRING);
    setGraph(bgp);
    parse(in);
}

void TurtleSDriver::parse (std::string turtleStr, RdfDB* db) {
    IStreamContext in(turtleStr.c_str(), IStreamContext::STRING);
    setGraph(db->ensureGraph(DefaultGraph));
    parse(in);
}

} // namespace w3c_sw

/* END Driver */

