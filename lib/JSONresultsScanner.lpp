/* $Id: JSONresultsScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */

%{ /*** C/C++ Declarations ***/

#include "JSONresultsParser/JSONresultsParser.hpp"
#include "JSONresultsScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::JSONresultsParser::token token;
typedef w3c_sw::JSONresultsParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

%}

/*** Flex Declarations and Options ***/

/* enable c++ scanner class generation */
%option c++

/* change the name of the scanner class. results in "JSONresultsFlexLexer" */
%option prefix="JSONresults"
/* consider using class instead
 * %option yyclass="JSONresultsScanner"
 * void JSONresultsFlexLexer::LexerError( yyconst char msg[] )
 */

/* the manual says "somewhat more optimized" */
%option batch

/* enable scanner to generate debug output. disable this for release
 * versions. */
%option debug

%option nodefault
%option warn

/* no support for include files is planned */
%option noyywrap nounput

/* enables the use of start condition stacks */
%option stack

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
%{
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
%}

/* START patterns for SPARUL_EGP terminals */
GT_LCURLEY		"{"
GT_COMMA		","
GT_RCURLEY		"}"
GT_COLON		":"
GT_LBRACKET		"\["
GT_RBRACKET		"\]"
GT_H_22__head_H_22_		"\"head\""
GT_H_27__head_H_27_		"'head'"
GT_H_22__link_H_22_		"\"link\""
GT_H_27__link_H_27_		"'link'"
GT_H_22__vars_H_22_		"\"vars\""
GT_H_27__vars_H_27_		"'vars'"
GT_H_22__results_H_22_		"\"results\""
GT_H_27__results_H_27_		"'boolean'"
GT_H_22__boolean_H_22_		"\"boolean\""
GT_H_27__boolean_H_27_		"'results'"
IT_false		"false"
IT_true		"true"
GT_H_22__bindings_H_22_		"\"bindings\""
GT_H_27__bindings_H_27_		"'bindings'"
GT_H_22__uri_H_22_		"\"uri\""
GT_H_27__uri_H_27_		"'uri'"
GT_H_22__bnode_H_22_		"\"bnode\""
GT_H_27__bnode_H_27_		"'bnode'"
GT_H_22__type_H_22_		"\"type\""
GT_H_27__type_H_27_		"'type'"
GT_H_22__value_H_22_		"\"value\""
GT_H_27__value_H_27_		"'value'"
GT_H_22__literal_H_22_		"\"literal\""
GT_H_27__literal_H_27_		"'literal'"
GT_H_22__typed_MINUS_literal_H_22_		"\"typed-literal\""
GT_H_27__typed_MINUS_literal_H_27_		"'typed-literal'"
GT_H_22__datatype_H_22_		"\"datatype\""
GT_H_27__datatype_H_27_		"'datatype'"
GT_H_22__xml_COLON_lang_H_22_		"\"xml:lang\""
GT_H_27__xml_COLON_lang_H_27_		"'xml:lang'"
ECHAR		"\\"[\"\'\\bfnrt]

/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
STRING_LITERAL2		"\""(((([\x00-\t\x0B-\x0C\x0E-!#-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))]))|(({ECHAR}))))*"\""
STRING_LITERAL1		"\'"(((([\x00-\t\x0B-\x0C\x0E-&(-\[\]-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))]))|(({ECHAR}))))*"\'"
PASSED_TOKENS		(([\t ])+)|("#"([\x00-\t\x0B-\x0C\x0E-\x7F]|([\xC2-\xDF][\x80-\xBF])|(\xE0([\xA0-\xBF][\x80-\xBF]))|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|([\xE1-\xEC][\x80-\xBF][\x80-\xBF])|(\xED([\x80-\x9F][\x80-\xBF]))|([\xEE-\xEF][\x80-\xBF][\x80-\xBF])|(\xF0([\x90-\xBF][\x80-\xBF][\x80-\xBF]))|([\xF1-\xF3][\x80-\xBF][\x80-\xBF][\x80-\xBF])|(\xF4([\x80-\x8E][\x80-\xBF][\x80-\xBF])|(\x8F([\x80-\xBE][\x80-\xBF])|(\xBF[\x80-\xBD])))])*)
LINEFEED		(\r\n|\r|\n)

/* END patterns for SPARUL_EGP terminals */

/* START semantic actions for SPARUL_EGP terminals */
%%
{LINEFEED}		{ yylloc->end.lines(1); }
{PASSED_TOKENS}		{ yylloc->step(); /* @@ needed? useful? */ }
{GT_LCURLEY}		{return token::GT_LCURLEY;}
{GT_COMMA}		{return token::GT_COMMA;}
{GT_RCURLEY}		{return token::GT_RCURLEY;}
{GT_COLON}		{return token::GT_COLON;}
{GT_LBRACKET}		{return token::GT_LBRACKET;}
{GT_RBRACKET}		{return token::GT_RBRACKET;}
{GT_H_22__head_H_22_}		{return token::GT_H_22__head_H_22_;}
{GT_H_27__head_H_27_}		{return token::GT_H_27__head_H_27_;}
{GT_H_22__link_H_22_}		{return token::GT_H_22__link_H_22_;}
{GT_H_27__link_H_27_}		{return token::GT_H_27__link_H_27_;}
{GT_H_22__vars_H_22_}		{return token::GT_H_22__vars_H_22_;}
{GT_H_27__vars_H_27_}		{return token::GT_H_27__vars_H_27_;}
{GT_H_22__results_H_22_}		{return token::GT_H_22__results_H_22_;}
{GT_H_27__results_H_27_}		{return token::GT_H_27__results_H_27_;}
{GT_H_22__boolean_H_22_}		{return token::GT_H_22__boolean_H_22_;}
{GT_H_27__boolean_H_27_}		{return token::GT_H_27__boolean_H_27_;}
{IT_true}		{return token::IT_true;}
{IT_false}		{return token::IT_false;}
{GT_H_22__bindings_H_22_}		{return token::GT_H_22__bindings_H_22_;}
{GT_H_27__bindings_H_27_}		{return token::GT_H_27__bindings_H_27_;}
{GT_H_22__uri_H_22_}		{return token::GT_H_22__uri_H_22_;}
{GT_H_27__uri_H_27_}		{return token::GT_H_27__uri_H_27_;}
{GT_H_22__bnode_H_22_}		{return token::GT_H_22__bnode_H_22_;}
{GT_H_27__bnode_H_27_}		{return token::GT_H_27__bnode_H_27_;}
{GT_H_22__type_H_22_}		{return token::GT_H_22__type_H_22_;}
{GT_H_27__type_H_27_}		{return token::GT_H_27__type_H_27_;}
{GT_H_22__value_H_22_}		{return token::GT_H_22__value_H_22_;}
{GT_H_27__value_H_27_}		{return token::GT_H_27__value_H_27_;}
{GT_H_22__literal_H_22_}		{return token::GT_H_22__literal_H_22_;}
{GT_H_27__literal_H_27_}		{return token::GT_H_27__literal_H_27_;}
{GT_H_22__typed_MINUS_literal_H_22_}		{return token::GT_H_22__typed_MINUS_literal_H_22_;}
{GT_H_27__typed_MINUS_literal_H_27_}		{return token::GT_H_27__typed_MINUS_literal_H_27_;}
{GT_H_22__datatype_H_22_}		{return token::GT_H_22__datatype_H_22_;}
{GT_H_27__datatype_H_27_}		{return token::GT_H_27__datatype_H_27_;}
{GT_H_22__xml_COLON_lang_H_22_}		{return token::GT_H_22__xml_COLON_lang_H_22_;}
{GT_H_27__xml_COLON_lang_H_27_}		{return token::GT_H_27__xml_COLON_lang_H_27_;}
{STRING_LITERAL1}	{return unescape(yylval, 1, token::STRING_LITERAL1);}
{STRING_LITERAL2}	{return unescape(yylval, 1, token::STRING_LITERAL2);}

<<EOF>>			{ yyterminate();}
.			{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}

%%
/* END semantic actions for JSONresults terminals */

/* START JSONresultsScanner */
namespace w3c_sw {

JSONresultsScanner::JSONresultsScanner (JSONresultsDriver* driver, std::istream* in, std::ostream* out) : JSONresultsFlexLexer(in, out), driver(driver) {  }
JSONresultsScanner::~JSONresultsScanner () {  }

JSONresultsParser::token_type JSONresultsScanner::unescape (JSONresultsParser::semantic_type*& yylval, size_t skip, JSONresultsParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_str = space;
    return tok;
}


void JSONresultsScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END JSONresultsScanner */

} // END namespace w3c_sw

/* This implementation of JSONresultsFlexLexer::yylex() is required to fill the
 * vtable of the class JSONresultsFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the JSONresultsScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int JSONresultsFlexLexer::yylex()
{
    std::cerr << "in JSONresultsFlexLexer::yylex() !" << std::endl;
    return 0;
}

