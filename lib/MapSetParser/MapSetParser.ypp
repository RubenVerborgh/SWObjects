/* $Id: MapSetParser.ypp,v 1.3 2008-11-13 19:18:01 eric Exp $ -*- mode: c++ -*- */

/* Bison parser for SWObjects MapSets encapsulating SPARQL CONSTRUCTs
 * conventions:
 *   generated production names are composed of their constituents.
 *   { $$ = $1; } elided.
 *   driver has extra state for hard-to-generate tries like  Foo Bar* => ((Foo Bar) Bar)
 */

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start MapSet

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="w3c_sw"

/* set the parser's class identifier */
%define "parser_class_name" "MapSetParser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class MapSetDriver& driver }

/* verbose error messages */
%error-verbose

// %{ //  ##bison1
%code requires { // ##bison2
/* Bison seems to test inclusion with PARSER_HEADER_H, rather than something
 * which varies by parser_class_name . Overriding with define specific to
 * this parser.
 */
#endif /* !PARSER_HEADER_H */
#ifndef MAPSET_PARSER_HPP
#define MAPSET_PARSER_HPP

#include "SWObjects.hpp"
#include "ParserCommon.hpp"
#include "QueryMapper.hpp"

namespace w3c_sw {

class MapSetScanner;

/** The Driver class brings together all components. It creates an instance of
 * the MapSetParser and MapSetScanner classes and connects them. Then the input stream is
 * fed into the scanner object and the parser gets it's token
 * sequence. Furthermore the driver object is available in the grammar rules as
 * a parameter. Therefore the driver class contains a reference to the
 * structure into which the parsed data is saved. */

class MapSetDriver : public YaccDriver {
    friend class MapSetParser;
protected:
    const TTerm* curSubject;
    const TTerm* curPredicate;
    BasicGraphPattern* curBGP;
    ParserFilter* curFilter;
    TableOperation* curOp; // needed to make right-descending tree for e.g. TriplesBlock? ( ( GraphPatternNotTriples | Filter ) '.'? TriplesBlock? )*
    BindingClause* curBindingsClause;
    Binding* curBinding;
    ProductionVector<const Expression*>* curExprList;
    const TTerm* curGraphName;
    ProductionVector<const Expression*> filterExpressions;

    void ensureBasicGraphPattern ( ) {
	if (curBGP == NULL) {
	    curBGP = curGraphName == NULL ? 
		static_cast<BasicGraphPattern*>(new DefaultGraphPattern()) : 
		static_cast<BasicGraphPattern*>(new NamedGraphPattern(curGraphName));
	    curOp = makeConjunction(curOp, curBGP);
	}
    }

    ParserFilter* saveFilter () {
	ParserFilter* ret = curFilter;
	curFilter = NULL;
	return ret;
    }

    void restoreFilter (ParserFilter* was) {
	if (curFilter != NULL) {
	    if (curOp == NULL)
		ensureBasicGraphPattern();
	    curFilter->setOp(curOp);
	    curOp = curFilter;
	}
	curFilter = was;
    }

    TableOperation* makeConjunction (TableOperation* l, TableOperation* r) {
	if (l != NULL) {
	    if (r != NULL) {
		TableConjunction* ret = new TableConjunction();
		ret->addTableOperation(l, unnestTree);
		ret->addTableOperation(r, unnestTree);
		return ret;
	    } else
		return l;
	}
	if (r != NULL)
	    return r;
	return NULL;
    }

    TableOperation* makeDisjunction (TableOperation* l, TableOperation* r) {
	TableDisjunction* ret = new TableDisjunction();
	ret->addTableOperation(l, unnestTree);
	ret->addTableOperation(r, unnestTree);
	return ret;
    }

public:
    MapSetDriver(std::string baseURI, AtomFactory* atomFactory);
    ~MapSetDriver();

    virtual bool parse(IStreamContext& in);

    /** Pointer to the current lexer instance, this is used to connect the
     * parser to the scanner. It is used in the yylex macro. */
    class MapSetScanner* lexer;

    /** Reference to the object created during parsing of the SPARQL stream. */
    MapSet* root;

    /** Control attributes. */
    bool unnestTree;	/* conj(conj(A, B), C) => conj(A, B, C) */
    RuleTerm lastRuleTerm;
    bool lastRuleTermSet;
    bool sharedVarsSet;
};

} // namespace w3c_sw

// %} // ##bison1
} // ##bison2

 /*** BEGIN MapSet language tokens. ***/

%union {
    struct {const TTerm* subject; const TTerm* predicate;} p_SubjectPredicatePair;
    struct {int limit; int offset;} p_LimitOffsetPair;
    struct {const URI* uri; LANGTAG* langtag;} p_uri_or_langtag;
    struct {Operation* operation; WhereClause* whereClause;} p_OperationWhereClausePair;
    struct {e_distinctness distinctness; VarSet* varSet;} p_Project;
    struct {e_distinctness distinctness; const Expression* p_Expression;} p_DistExprPair;
    s_OrderConditionPair p_OrderConditionPair;
    std::vector<s_OrderConditionPair>* p_OrderConditions;
    TableConjunction* p_TableConjunction;
    TableDisjunction* p_TableDisjunction;

    /* Terminals */
    LANGTAG* p_LANGTAG;

    std::string* p_string;

    const NumericRDFLiteral* p_NumericRDFLiteral;
    const BooleanRDFLiteral* p_BooleanRDFLiteral;

    /* Productions */
    Operation* p_Operation;
    const Variable* p_Variable;

    Select* p_Select;
    e_distinctness p_distinctness;
    e_listModifier p_listModifier;
    e_Silence p_Silence;
    TTermList* p_TTermList;
    ExpressionAliasList* p_ExpressionAliaseList;
    ExpressionAlias* p_ExpressionAlias;
    VarSet* p_VarSet;
    ProductionVector<const DatasetClause*>* p_DatasetClauses;
    MapSet* p_MapSet;
    Ask* p_Ask;
    DatasetClause* p_DatasetClause;
    DefaultGraphClause* p_DefaultGraphClause;
    NamedGraphClause* p_NamedGraphClause;
    WhereClause* p_WhereClause;
    SolutionModifier* p_SolutionModifier;
    e_ASCorDESC p_e_ASCorDESC;
    BindingClause* p_BindingsClause;
    ProductionVector<const Binding*>* p_BindingValues;
    Binding* p_BindingValue;
    TableOperation* p_TableOperation;
    ProductionVector<const TableOperation*>* p_TableOperations;
    OptionalGraphPattern* p_OptionalGraphPattern;
    BasicGraphPattern* p_BasicGraphPattern;
    ParserFilter* p_ParserFilter;
    FunctionCall* p_FunctionCall;
    ArgList* p_ArgList;
    const TTerm* p_TTerm;
    ProductionVector<const TTerm*>* p_TTerms;
    Expression* p_Expression;
    ProductionVector<const Expression*>* p_Expressions;
    GeneralComparator* p_GeneralComparator;
    const URI* p_URI;
    ProductionVector<const URI*>* p_URIs;
    const RDFLiteral* p_RDFLiteral;
    const BNode* p_BNode;

}

%{
#include "../MapSetScanner.hpp"
%}
%token			__EOF__	     0	"end of file"

/* Language tokens */
%token IT_REWRITEVAR IT_SERVER IT_USER IT_PASSWORD IT_DATABASE IT_STEMURI IT_PRIMARYKEY IT_SHAREDVARS
       IT_PROMISCUOUS IT_INTERSECTION IT_DRACONIAN IT_VARNAMES
       IT_GRAPH IT_SERVICE IT_BASE IT_PREFIX IT_DISTINCT
       IT_REDUCED GT_TIMES IT_CONSTRUCT IT_SELECT IT_FROM IT_NAMED IT_ORDER
       IT_BY IT_ASC IT_DESC IT_LIMIT IT_OFFSET IT_BINDINGS IT_MEMBERS IT_STARTS
       IT_ENDS IT_ANY IT_UNORDERED GT_LCURLEY GT_RCURLEY IT_WHERE
       GT_LPAREN GT_RPAREN IT_UNDEF GT_DOT IT_OPTIONAL IT_MINUS IT_UNION IT_FILTER
       GT_COMMA GT_SEMI IT_a GT_LBRACKET GT_RBRACKET GT_OR GT_AND GT_EQUAL
       GT_NEQUAL GT_LT GT_GT GT_LE GT_GE GT_PLUS GT_MINUS GT_DIVIDE GT_NOT
       IT_IN GT_NOT_SPACECHAR_IN
       IT_IRI IT_URI IT_BNODE IT_COALESCE IT_IF IT_STRLANG IT_STRDT
       IT_EXISTS GT_NOT_SPACECHAR_EXISTS IT_SEPARATOR
       IT_STR IT_LANG IT_LANGMATCHES IT_DATATYPE IT_BOUND IT_sameTerm IT_isIRI
       IT_isURI IT_isBLANK IT_isLITERAL IT_REGEX GT_DTYPE
       IT_AS IT_GROUP IT_HAVING IT_COUNT IT_SUM IT_MIN IT_MAX IT_AVG IT_GROUP_CONCAT IT_SAMPLE


%token <p_BooleanRDFLiteral> IT_true IT_false
%token <p_NumericRDFLiteral> INTEGER DECIMAL DOUBLE INTEGER_POSITIVE
			     DECIMAL_POSITIVE DOUBLE_POSITIVE INTEGER_NEGATIVE
			     DECIMAL_NEGATIVE DOUBLE_NEGATIVE
%token <p_string> STRING_LITERAL1 STRING_LITERAL_LONG1
		  STRING_LITERAL2 STRING_LITERAL_LONG2
%token <p_URI> IRI_REF PNAME_NS PNAME_LN
%token <p_TTerm> BLANK_NODE_LABEL ANON
%token <p_Variable> VAR1 VAR2
%token <p_LANGTAG> LANGTAG
%token <p_NIL> NIL

/* Productions */
%type <p_Operation> ConstructQuery SubSelect // SPARQL 1
%type <p_Project> SelectClause

%type <p_distinctness> _O_QIT_DISTINCT_E_Or_QIT_REDUCED_E_C
		       _Q_O_QIT_DISTINCT_E_Or_QIT_REDUCED_E_C_E_Opt _QIT_DISTINCT_E_Opt
%type <p_listModifier> _O_QIT_MEMBERS_E_Or_QIT_STARTS_E_Or_QIT_ENDS_E_Or_QIT_ANY_E_Or_QIT_UNORDERED_E_C
		       _Q_O_QIT_MEMBERS_E_Or_QIT_STARTS_E_Or_QIT_ENDS_E_Or_QIT_ANY_E_Or_QIT_UNORDERED_E_C_E_Opt

%type <p_TTermList> _QVar_E_Plus
%type <p_VarSet>  _O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_Plus_Or_QGT_TIMES_E_C
%type <p_ExpressionAliaseList> GroupClause _QGroupClause_E_Opt _QGroupCondition_E_Plus
                               _Q_O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C_E_Plus
%type <p_DatasetClauses> _QDatasetClause_E_Star
%type <p_DatasetClause> DatasetClause
			_O_QDefaultGraphClause_E_Or_QNamedGraphClause_E_C
			DefaultGraphClause NamedGraphClause
%type <p_WhereClause> WhereClause
%type <p_SolutionModifier> SolutionModifier
 //%type <p_TODO> GroupClause GroupCondition HavingClause HavingCondition
%type <p_LimitOffsetPair> LimitOffsetClauses _QLimitOffsetClauses_E_Opt
			  LimitClause _QLimitClause_E_Opt
			  OffsetClause _QOffsetClause_E_Opt
%type <p_OrderConditions> _QOrderClause_E_Opt OrderClause
			  _QOrderCondition_E_Plus
%type <p_OrderConditionPair> OrderCondition
			     _O_QIT_ASC_E_Or_QIT_DESC_E_S_QBrackettedExpression_E_C
%type <p_e_ASCorDESC> _O_QIT_ASC_E_Or_QIT_DESC_E_C
%type <p_BindingsClause> BindingsClause
                         _O_QIT_BINDINGS_E_S_QVar_E_Plus_S_QGT_LCURLEY_E_S_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_Star_S_QGT_RCURLEY_E_C
                         _Q_O_QIT_BINDINGS_E_S_QVar_E_Plus_S_QGT_LCURLEY_E_S_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_Star_S_QGT_RCURLEY_E_C_E_Opt
%type <p_BindingValue> _O_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_C
%type <p_BindingValues> _Q_O_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_C_E_Star

%type <p_BasicGraphPattern> ConstructTemplate

%type <p_ArgList> ArgList _QArgList_E_Opt
%type <p_Expressions> _Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star
		      _Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star
		      _Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_S_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_Opt_C_E_Star
		      _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star
                      HavingClause _QHavingCondition_E_Plus _QHavingClause_E_Opt
                      ExpressionList _O_QNIL_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QGT_COMMA_E_S_QExpression_E_Star_S_QGT_RPAREN_E_C
%type <p_DistExprPair> ExprAggArg

 /* Parts Of Speach */
%type <p_TTerm> SourceSelector
	      BlankNodePropertyList
	      Verb VarOrIRIref VarOrTerm GraphNode
	      GraphTerm _QGraphTerm_E_Opt BlankNode TriplesNode Generator
              BindingValue
%type <p_TTerms> _QGraphNode_E_Plus
%type <p_RDFLiteral> RDFLiteral _O_QGT_SEMI_E_S_QIT_SEPARATOR_E_S_QGT_EQUAL_E_S_QString_E_C _Q_O_QGT_SEMI_E_S_QIT_SEPARATOR_E_S_QGT_EQUAL_E_S_QString_E_C_E_Opt
%type <p_NumericRDFLiteral> NumericLiteralUnsigned NumericLiteralPositive
			    NumericLiteralNegative NumericLiteral
%type <p_BooleanRDFLiteral> BooleanLiteral
%type <p_string> String
%type <p_Variable> Var _O_QIT_AS_E_S_QVar_E_C _Q_O_QIT_AS_E_S_QVar_E_C_E_Opt

/* Expressions */
%type <p_Expression> Expression Constraint _O_QConstraint_E_Or_QVar_E_C
		     BrackettedExpression BuiltInCall FunctionCall
		     ConditionalOrExpression
		     _O_QGT_OR_E_S_QConditionalAndExpression_E_C
		     ConditionalAndExpression _O_QGT_AND_E_S_QValueLogical_E_C
		     ValueLogical RelationalExpression NumericExpression
		     AdditiveExpression
		     _O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_S_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_Opt_C
		     MultiplicativeExpression
		     _O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C
		     UnaryExpression PrimaryExpression RegexExpression
		     _O_QGT_COMMA_E_S_QExpression_E_C
		     _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Opt IRIrefOrFunction
                     HavingCondition Aggregate _O_QGT_TIMES_E_Or_QExpression_E_C
                     _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Opt
                     _O_QGT_LPAREN_E_S_QExpression_E_S_QGT_RPAREN_E_Or_QNIL_E_C
                     ExistsFunc NotExistsFunc
                     _O_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C

%type <p_ExpressionAlias>  GroupCondition
                           _O_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C
                           _O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C
%type <p_GeneralComparator> _O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_Or_QIT_IN_E_S_QExpressionList_E_Or_QGT_NOT_SPACECHAR_IN_E_S_QExpressionList_E_C
			    _Q_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_Or_QIT_IN_E_S_QExpressionList_E_Or_QGT_NOT_SPACECHAR_IN_E_S_QExpressionList_E_C_E_Opt

%type <p_URI> _O_QGT_DTYPE_E_S_QIRIref_E_C IRIref PrefixedName
%type <p_uri_or_langtag> _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_QIRIref_E_C
			 _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_QIRIref_E_C_E_Opt

/* END TokenBlock */

//%destructor { delete $$; } BlankNode

 /*** END MapSet language tokens. ***/

%{
#include "../MapSetScanner.hpp"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lexWrapper
%}

%% /*** Grammar Rules ***/

 /*** BEGIN MapSet - Change the grammar rules below ***/
MapSet:
    // Prologue AccessParm* ConstructQuery*
    {
	driver.root = new MapSet();
	driver.root->sharedVars = MapSet::e_PROMISCUOUS;
      }	Prologue _QAccessParm_E_Star _QConstructQuery_E_Star	
;

_QAccessParm_E_Star:
    
  | _QAccessParm_E_Star AccessParm	
;

// ConstructQuery*
_QConstructQuery_E_Star:
    
  | _QConstructQuery_E_Star ConstructQuery	
;

AccessParm:
    IT_REWRITEVAR Var RDFLiteral RDFLiteral	{
#if REGEX_LIB == SWOb_DISABLED
      throw std::string("not compiled with REGEX_LIB: can't map ") + $2->toString() + " from " + $3->toString() + " to " + $4->toString() + ".";
#else /* ! REGEX_LIB == SWOb_DISABLED */
#if NotYet // @@
      driver.root->rewriteVars.push_back(POSmap($2, $3->getLexicalValue(), $4->getLexicalValue()));
#endif /* NotYet */
#endif /* ! REGEX_LIB == SWOb_DISABLED */
    }
  | IT_SERVER RDFLiteral	{
	static_cast<MapSet*>(driver.root)->server = $2;
    }
  | IT_USER RDFLiteral	{
	static_cast<MapSet*>(driver.root)->user = $2;
    }
  | IT_PASSWORD RDFLiteral	{
	static_cast<MapSet*>(driver.root)->password = $2;
    }
  | IT_DATABASE RDFLiteral	{
	static_cast<MapSet*>(driver.root)->database = $2;
    }
  | IT_STEMURI IRIref	{
	static_cast<MapSet*>(driver.root)->stemURI = $2;
    }
  | IT_PRIMARYKEY PrimaryKeySpec	
  | IT_SHAREDVARS _O_QIT_PROMISCUOUS_E_Or_QIT_VARNAMES_E_Or_QIT_DRACONIAN_E_C	{
	driver.sharedVarsSet = true;
    }
  | IT_INTERSECTION _Q_O_QGT_LCURLEY_E_S_QGraphTerm_E_Opt_S_QGT_RCURLEY_E_S_QVarOrTerm_E_C_E_Plus	{
	driver.lastRuleTermSet = false;
    }
;

_O_QIT_PROMISCUOUS_E_Or_QIT_VARNAMES_E_Or_QIT_DRACONIAN_E_C:
    IT_PROMISCUOUS	{
	driver.root->sharedVars = MapSet::e_PROMISCUOUS;
    }
  | IT_VARNAMES	{
	driver.root->sharedVars = MapSet::e_VARNAMES;
    }
  | IT_DRACONIAN	{
	driver.root->sharedVars = MapSet::e_DRACONIAN;
    }
;

_QGraphTerm_E_Opt:
    {
	$$ = NULL;
    }
  | GraphTerm	
;

_O_QGT_LCURLEY_E_S_QGraphTerm_E_Opt_S_QGT_RCURLEY_E_S_QVarOrTerm_E_C:
    GT_LCURLEY _QGraphTerm_E_Opt GT_RCURLEY VarOrTerm	{
	RuleTerm nextRuleTerm = RuleTerm($2, $4);
	if (driver.lastRuleTermSet)
	    static_cast<MapSet*>(driver.root)->nodeShare.addIntersection(driver.lastRuleTerm, nextRuleTerm);
	driver.lastRuleTerm = nextRuleTerm;
	driver.lastRuleTermSet = true;
	if (!driver.sharedVarsSet)
	    driver.root->sharedVars = MapSet::e_DRACONIAN;
    }
;

_Q_O_QGT_LCURLEY_E_S_QGraphTerm_E_Opt_S_QGT_RCURLEY_E_S_QVarOrTerm_E_C_E_Plus:
    _O_QGT_LCURLEY_E_S_QGraphTerm_E_Opt_S_QGT_RCURLEY_E_S_QVarOrTerm_E_C	
  | _Q_O_QGT_LCURLEY_E_S_QGraphTerm_E_Opt_S_QGT_RCURLEY_E_S_QVarOrTerm_E_C_E_Plus _O_QGT_LCURLEY_E_S_QGraphTerm_E_Opt_S_QGT_RCURLEY_E_S_QVarOrTerm_E_C	
;


PrimaryKeySpec:
    _QDefaultPrimaryKey_E_Opt _QPrimaryKeySet_E_Opt	
;

_QDefaultPrimaryKey_E_Opt:
    
  | DefaultPrimaryKey	
;

_QPrimaryKeySet_E_Opt:
    
  | PrimaryKeySet	
;

PrimaryKeySet:
    GT_LCURLEY _Q_O_QRDFLiteral_E_S_QGT_DOT_E_S_QRDFLiteral_E_C_E_Star GT_RCURLEY	
;

_O_QRDFLiteral_E_S_QGT_DOT_E_S_QRDFLiteral_E_C:
    RDFLiteral GT_DOT RDFLiteral	{
	static_cast<MapSet*>(driver.root)->keyMap[$1->getLexicalValue()] = $3->getLexicalValue();
    }
;

_Q_O_QRDFLiteral_E_S_QGT_DOT_E_S_QRDFLiteral_E_C_E_Star:
    
  | _Q_O_QRDFLiteral_E_S_QGT_DOT_E_S_QRDFLiteral_E_C_E_Star _O_QRDFLiteral_E_S_QGT_DOT_E_S_QRDFLiteral_E_C	
;

DefaultPrimaryKey:
    GT_LBRACKET RDFLiteral GT_RBRACKET	{
	static_cast<MapSet*>(driver.root)->primaryKey = $2;
    }
;

Prologue:
    // BaseDecl? PrefixDecl*
    _QBaseDecl_E_Opt _QPrefixDecl_E_Star
;

// BaseDecl?
_QBaseDecl_E_Opt:
    
  | BaseDecl	
;

// PrefixDecl*
_QPrefixDecl_E_Star:
    
  | _QPrefixDecl_E_Star PrefixDecl
;

BaseDecl:
    IT_BASE IRI_REF	{
	driver.setBase($2->getLexicalValue());
    }
;

PrefixDecl:
    IT_PREFIX {
	driver.ignorePrefix(true);
      } PNAME_NS {
	  driver.ignorePrefix(false);
      } IRI_REF	{
	  std::string prefix($3->getLexicalValue());
	  driver.addPrefix(prefix.substr(0, prefix.length()-1), $5);
      }
;

SubSelect:
    // SelectClause WhereClause SolutionModifier
    SelectClause {
	$<p_TableOperation>$ = driver.curOp;
      } {
	  $<p_ParserFilter>$ = driver.saveFilter();
      } WhereClause SolutionModifier	{
	  driver.restoreFilter($<p_ParserFilter>3);
	  driver.curOp = driver.makeConjunction($<p_TableOperation>2, new SubSelect(new Select($1.distinctness, $1.varSet, new ProductionVector<const DatasetClause*>(), $4, $5)));
      }
;

SelectClause:
    // 'SELECT' ( 'DISTINCT' | 'REDUCED' )? ( Var | Aggregate | BuiltInCall | FunctionCall | RDFLiteral | NumericLiteral | BooleanLiteral | ( '(' Expression ( 'AS' Var )? ')' ) )+ | '*'
    IT_SELECT _Q_O_QIT_DISTINCT_E_Or_QIT_REDUCED_E_C_E_Opt _O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_Plus_Or_QGT_TIMES_E_C	{
	$$.distinctness = $2;
	$$.varSet = $3;
    }
;

// 'DISTINCT' | 'REDUCED'
_O_QIT_DISTINCT_E_Or_QIT_REDUCED_E_C:
    IT_DISTINCT	{
	$$ = DIST_distinct;
    }
  | IT_REDUCED	{
	$$ = DIST_reduced;
    }
;

// ( 'DISTINCT' | 'REDUCED' )?
_Q_O_QIT_DISTINCT_E_Or_QIT_REDUCED_E_C_E_Opt:
    {
	$$ = DIST_all;
    }
  | _O_QIT_DISTINCT_E_Or_QIT_REDUCED_E_C	
;

// "AS" Var
_O_QIT_AS_E_S_QVar_E_C:
    IT_AS Var	{
	$$ = $2;
    }
;

// ( "AS" Var )?
_Q_O_QIT_AS_E_S_QVar_E_C_E_Opt:
    {
	$$ = NULL;
    }
  | _O_QIT_AS_E_S_QVar_E_C	
;

// "(" Expression ( "AS" Var )? ")"
_O_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C:
    GT_LPAREN Expression _Q_O_QIT_AS_E_S_QVar_E_C_E_Opt GT_RPAREN	{
	$$ = $3 ? new ExpressionAlias($2, $3) : new ExpressionAlias($2);
    }
;

// ( Var | Aggregate | BuiltInCall | FunctionCall | RDFLiteral | NumericLiteral | BooleanLiteral | ( '(' Expression ( 'AS' Var )? ')' ) )+
_O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C:
    Var	{
	$$ = new ExpressionAlias(new TTermExpression($1));
    }
  | Aggregate	{
	$$ = new ExpressionAlias($1);
    }
  | BuiltInCall	{
	$$ = new ExpressionAlias($1);
    }
  | FunctionCall	{
	$$ = new ExpressionAlias($1);
    }
  | RDFLiteral	{
	$$ = new ExpressionAlias(new TTermExpression($1));
    }
  | NumericLiteral	{
	$$ = new ExpressionAlias(new TTermExpression($1));
    }
  | BooleanLiteral	{
	$$ = new ExpressionAlias(new TTermExpression($1));
    }
  | // "(" Expression ( "AS" Var )? ")"
    _O_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C	
;

// ( Var | Aggregate | BuiltInCall | FunctionCall | RDFLiteral | NumericLiteral | BooleanLiteral | ( '(' Expression ( 'AS' Var )? ')' ) )+
_Q_O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C_E_Plus:
    _O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C	{
	$$ = new ExpressionAliasList($1);
    }
  | _Q_O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C_E_Plus _O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C	{
    $1->push_back($2);
    $$ = $1;
}
;

// ( Var | Aggregate | BuiltInCall | FunctionCall | RDFLiteral | NumericLiteral | BooleanLiteral | ( '(' Expression ( 'AS' Var )? ')' ) )+ | '*'
_O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_Plus_Or_QGT_TIMES_E_C:
    _Q_O_QVar_E_Or_QAggregate_E_Or_QBuiltInCall_E_Or_QFunctionCall_E_Or_QRDFLiteral_E_Or_QNumericLiteral_E_Or_QBooleanLiteral_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QIT_AS_E_S_QVar_E_Opt_S_QGT_RPAREN_E_C_E_Plus	{
	$$ = $1; // Grammar action needed for implicit upcast.
    }
  | GT_TIMES	{
	$$ = new StarVarSet();
    }
;

ConstructQuery:
    // 'CONSTRUCT' ConstructTemplate DatasetClause* WhereClause SolutionModifier
    _QGraphTerm_E_Opt IT_CONSTRUCT ConstructTemplate _QDatasetClause_E_Star WhereClause SolutionModifier	{
	/* $2 is known to be a DefaultGraphPattern because of grammar restrictions. */
	Construct* constr = new Construct((DefaultGraphPattern*)$3, $4, $5, $6);
	driver.root->maps.push_back(LabeledConstruct($1, constr));
    }
;

// DatasetClause*
_QDatasetClause_E_Star:
    {
	$$ = new ProductionVector<const DatasetClause*>();
    }
  | _QDatasetClause_E_Star DatasetClause	{
	$1->push_back($2);
	$$ = $1;
    }
;

DatasetClause:
    // 'FROM' ( DefaultGraphClause | NamedGraphClause )
    IT_FROM _O_QDefaultGraphClause_E_Or_QNamedGraphClause_E_C	{
	$$ = $2;
    }
;

// DefaultGraphClause | NamedGraphClause
_O_QDefaultGraphClause_E_Or_QNamedGraphClause_E_C:
    DefaultGraphClause	
  | NamedGraphClause	
;

DefaultGraphClause:
    SourceSelector	{
	$$ = new DefaultGraphClause($1, driver.atomFactory);
    }
;

NamedGraphClause:
    IT_NAMED SourceSelector	{
	$$ = new NamedGraphClause($2, driver.atomFactory);
    }
;

SourceSelector:
    IRIref	{
	$$ = $1;
    }
;

WhereClause:
    // 'WHERE'? GroupGraphPattern BindingsClause?
    _QIT_WHERE_E_Opt  GroupGraphPattern BindingsClause	{
	driver.restoreFilter(NULL);
	$$ = new WhereClause(driver.curOp ? driver.curOp : new DefaultGraphPattern(), $3);
	driver.curOp = NULL;
    }
;

_QIT_WHERE_E_Opt:

    | IT_WHERE	;

SolutionModifier:
    // GroupClause? HavingClauses? OrderClause? LimitOffsetClauses?
    _QGroupClause_E_Opt _QHavingClause_E_Opt _QOrderClause_E_Opt _QLimitOffsetClauses_E_Opt	{
	$$ = new SolutionModifier($1, $2, $3, $4.limit, $4.offset); // !!!
    }
;

// GroupClause?
_QGroupClause_E_Opt:
    {
	$$ = NULL;
    }
  | GroupClause	
;

// HavingClause?
_QHavingClause_E_Opt:
    {
	$$ = NULL;
    }
  | HavingClause	
;

// OrderClause?
_QOrderClause_E_Opt:
    {
	$$ = NULL;
    }
  | OrderClause	
;

// LimitOffsetClauses?
_QLimitOffsetClauses_E_Opt:
    {
	$$.limit = LIMIT_None;
	$$.offset = OFFSET_None;
    }
  | LimitOffsetClauses	
;

GroupClause:
    IT_GROUP IT_BY _QGroupCondition_E_Plus	{
	$$ = $3;
    }
;

// GroupCondition+
_QGroupCondition_E_Plus:
    GroupCondition	{
	$$ = new ExpressionAliasList($1);
    }
  | _QGroupCondition_E_Plus GroupCondition	{
	$1->push_back($2);
	$$ = $1;
    }
;

GroupCondition:
    BuiltInCall	{
	$$ = new ExpressionAlias($1);
    }
  | FunctionCall	{
	$$ = new ExpressionAlias($1);
    }
  | GT_LPAREN Expression _Q_O_QIT_AS_E_S_QVar_E_C_E_Opt GT_RPAREN	{
	$$ = $3 ? new ExpressionAlias($2, $3) : new ExpressionAlias($2);
    }
  | Var	{
	$$ = new ExpressionAlias(new TTermExpression($1));
    }
;

HavingClause:
    IT_HAVING _QHavingCondition_E_Plus	{
	$$ = $2;
}
;

_QHavingCondition_E_Plus:
    HavingCondition	{
	$$ = new ProductionVector<const Expression*>($1);
    }
  | _QHavingCondition_E_Plus HavingCondition	{
	$1->push_back($2);
	$$ = $1;
    }
;

HavingCondition:
    Constraint	
;

OrderClause:
    // 'ORDER' 'BY' OrderCondition+
    IT_ORDER IT_BY _QOrderCondition_E_Plus	{
	$$ = $3;
    }
;

// OrderCondition+
_QOrderCondition_E_Plus:
    OrderCondition	{
	$$ = new std::vector<s_OrderConditionPair>();
	$$->push_back($1);
    }
  | _QOrderCondition_E_Plus OrderCondition	{
	$1->push_back($2);
	$$ = $1;
    }
;

OrderCondition:
    // ( 'ASC' | 'DESC' ) BrackettedExpression
    _O_QIT_ASC_E_Or_QIT_DESC_E_S_QBrackettedExpression_E_C	
  | // Constraint | Var
    _O_QConstraint_E_Or_QVar_E_C	{
	$$.ascOrDesc = ORDER_Asc;
	$$.expression = $1;
    }
;

// 'ASC' | 'DESC'
_O_QIT_ASC_E_Or_QIT_DESC_E_C:
    IT_ASC	{
	$$ = ORDER_Asc;
    }
  | IT_DESC	{
	$$ = ORDER_Desc;
    }
;

// ( 'ASC' | 'DESC' ) BrackettedExpression
_O_QIT_ASC_E_Or_QIT_DESC_E_S_QBrackettedExpression_E_C:
    // 'ASC' | 'DESC'
    _O_QIT_ASC_E_Or_QIT_DESC_E_C BrackettedExpression	{
	$$.ascOrDesc = $1;
	$$.expression = $2;
    }
;

// Constraint | Var
_O_QConstraint_E_Or_QVar_E_C:
    Constraint	
  | Var	{
	$$ = new TTermExpression($1);
    }
;

LimitOffsetClauses:
    // LimitClause OffsetClause? | OffsetClause LimitClause?
    LimitClause _QOffsetClause_E_Opt	{
	$$.limit = $1.limit;
	$$.offset = $2.offset;
    }
  | OffsetClause _QLimitClause_E_Opt	{
	$$.limit = $2.limit;
	$$.offset = $1.offset;
    }
;

// OffsetClause?
_QOffsetClause_E_Opt:
    {
	$$.offset = OFFSET_None;
    }
  | OffsetClause	
;

// LimitClause?
_QLimitClause_E_Opt:
    {
	$$.limit = LIMIT_None;
    }
  | LimitClause	
;

LimitClause:
    IT_LIMIT INTEGER	{
	$$.limit = ((IntegerRDFLiteral*)$2)->getValue();
    }
;

OffsetClause:
    IT_OFFSET INTEGER	{
	$$.offset = ((IntegerRDFLiteral*)$2)->getValue();
    }
;

// BindingsClause?
BindingsClause:
    // ( 'BINDINGS' Var+ '{' ( '(' BindingValue+ ')' )* '}' )?
    _Q_O_QIT_BINDINGS_E_S_QVar_E_Plus_S_QGT_LCURLEY_E_S_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_Star_S_QGT_RCURLEY_E_C_E_Opt
;

// Var+
_QVar_E_Plus:
    Var	{
	$$ = new TTermList;
	$$->push_back($1);
    }
  | _QVar_E_Plus Var	{
	$1->push_back($2);
	$$ = $1;
    }
;

_QBindingValue_E_Plus:
    BindingValue	{
	driver.curBinding->push_back($1);
    }
  | _QBindingValue_E_Plus BindingValue	{
	driver.curBinding->push_back($2);
    }
;

_O_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_C:
    GT_LPAREN {
	driver.curBinding = new Binding();
      } _QBindingValue_E_Plus GT_RPAREN	{
	  $$ = driver.curBinding;
	  driver.curBinding = NULL;
      }
;

_Q_O_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_C_E_Star:
    {
	$$ = NULL;
    }
  | _Q_O_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_C_E_Star _O_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_C	{
	driver.curBindingsClause->push_back($2);
	$$ = NULL;
    }
;

_O_QIT_BINDINGS_E_S_QVar_E_Plus_S_QGT_LCURLEY_E_S_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_Star_S_QGT_RCURLEY_E_C:
    IT_BINDINGS _QVar_E_Plus GT_LCURLEY	{
	driver.curBindingsClause = new BindingClause($2);
      } _Q_O_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_C_E_Star GT_RCURLEY	{
	  $$ = driver.curBindingsClause;
	  driver.curBindingsClause = NULL;
      }
;

_Q_O_QIT_BINDINGS_E_S_QVar_E_Plus_S_QGT_LCURLEY_E_S_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_Star_S_QGT_RCURLEY_E_C_E_Opt:
    {
	$$ = NULL;
    }
  | _O_QIT_BINDINGS_E_S_QVar_E_Plus_S_QGT_LCURLEY_E_S_QGT_LPAREN_E_S_QBindingValue_E_Plus_S_QGT_RPAREN_E_Star_S_QGT_RCURLEY_E_C	
;

BindingValue:
    IRIref	{
	$$ = $1;
    }
  | RDFLiteral	{
	$$ = $1;
    }
  | NumericLiteral	{
	$$ = $1;
    }
  | BooleanLiteral	{
	$$ = $1;
    }
  | IT_UNDEF	{
	$$ = driver.getNULL();
    }
  | Var	{
	$$ = $1;
    }
;

GroupGraphPattern:
    // '{' ( SubSelect | GroupGraphPatternSub ) '}'
    GT_LCURLEY {
	driver.curOp = NULL;
	driver.curBGP = NULL;
      } _O_QSubSelect_E_Or_QGroupGraphPatternSub_E_C GT_RCURLEY	{
 	  // if ($2) LINE << $2 << ": " << *$2 << "--\n";
	  // if ($4) LINE << $4 << ": " << *$4 << "--\n";
	  driver.curBGP = NULL;
      }
;

// GroupGraphPatternSub
_O_QSubSelect_E_Or_QGroupGraphPatternSub_E_C:
    SubSelect
  | GroupGraphPatternSub	
;

GroupGraphPatternSub:
    // TriplesBlock? ( ( GraphPatternNotTriples | Filter ) '.'? TriplesBlock? )*
    _QTriplesBlock_E_Opt _Q_O_QGraphPatternNotTriples_E_Or_QFilter_E_S_QGT_DOT_E_Opt_S_QTriplesBlock_E_Opt_C_E_Star 
;

// TriplesBlock?
_QTriplesBlock_E_Opt:
    
  | TriplesBlock	
;

// GraphPatternNotTriples | Filter
_O_QGraphPatternNotTriples_E_Or_QFilter_E_C:
    GraphPatternNotTriples
  | Filter	
;

// '.'?
_QGT_DOT_E_Opt:

    | GT_DOT
;

// ( GraphPatternNotTriples | Filter ) '.'? TriplesBlock?
_O_QGraphPatternNotTriples_E_Or_QFilter_E_S_QGT_DOT_E_Opt_S_QTriplesBlock_E_Opt_C:
    _O_QGraphPatternNotTriples_E_Or_QFilter_E_C _QGT_DOT_E_Opt _QTriplesBlock_E_Opt	
;

// ( ( GraphPatternNotTriples | Filter ) '.'? TriplesBlock? )*
_Q_O_QGraphPatternNotTriples_E_Or_QFilter_E_S_QGT_DOT_E_Opt_S_QTriplesBlock_E_Opt_C_E_Star:
    
  | // ( GraphPatternNotTriples | Filter ) '.'? TriplesBlock?
    _Q_O_QGraphPatternNotTriples_E_Or_QFilter_E_S_QGT_DOT_E_Opt_S_QTriplesBlock_E_Opt_C_E_Star _O_QGraphPatternNotTriples_E_Or_QFilter_E_S_QGT_DOT_E_Opt_S_QTriplesBlock_E_Opt_C	
;

TriplesBlock:
    // TriplesSameSubject ( '.' TriplesBlock? )?
    TriplesSameSubject _Q_O_QGT_DOT_E_S_QTriplesBlock_E_Opt_C_E_Opt	
;

// '.' TriplesBlock?
_O_QGT_DOT_E_S_QTriplesBlock_E_Opt_C:
    GT_DOT _QTriplesBlock_E_Opt	
;

// ( '.' TriplesBlock? )?
_Q_O_QGT_DOT_E_S_QTriplesBlock_E_Opt_C_E_Opt:
    
  | // '.' TriplesBlock?
    _O_QGT_DOT_E_S_QTriplesBlock_E_Opt_C
;

GraphPatternNotTriples:
    OptionalGraphPattern
  | MinusGraphPattern
  | GroupOrUnionGraphPattern
  | GraphGraphPattern
  | ServiceGraphPattern
;

OptionalGraphPattern:
    IT_OPTIONAL	{
	$<p_TableOperation>$ = driver.curOp;
      } {
	  $<p_ParserFilter>$ = driver.curFilter;
      } GroupGraphPattern	{
	  OptionalGraphPattern* ret = new OptionalGraphPattern(driver.curOp);
	  if (driver.curFilter) {
	      driver.curFilter->copyExpressionsTo(ret);
	      delete driver.curFilter;
	  }
	  driver.curOp = driver.makeConjunction($<p_TableOperation>2, ret);
	  driver.curFilter = $<p_ParserFilter>3;
      }
;

GraphGraphPattern:
    IT_GRAPH {
	$<p_TableOperation>$ = driver.curOp;
      } {
	  $<p_ParserFilter>$ = driver.saveFilter();
      } VarOrIRIref {
	  $<p_TTerm>$ = driver.curGraphName;
	  driver.curGraphName = $4;
      } GroupGraphPattern	{
	  driver.restoreFilter($<p_ParserFilter>3);
	  driver.curOp = driver.makeConjunction($<p_TableOperation>2, new GraphGraphPattern($4, driver.curOp));
	  driver.curGraphName = $<p_TTerm>5;
      }
;

ServiceGraphPattern:
    IT_SERVICE {
	$<p_TableOperation>$ = driver.curOp;
      } {
	  $<p_ParserFilter>$ = driver.saveFilter();
      } VarOrIRIref GroupGraphPattern	{
	  driver.restoreFilter($<p_ParserFilter>3);
	  driver.curOp = driver.makeConjunction($<p_TableOperation>2, new ServiceGraphPattern($4, driver.curOp, driver.atomFactory, false));
      }
;

MinusGraphPattern:
    IT_MINUS {
	$<p_TableOperation>$ = driver.curOp;
      } {
	  $<p_ParserFilter>$ = driver.saveFilter();
      } GroupGraphPattern	{
	  driver.restoreFilter($<p_ParserFilter>3);
	  driver.curOp = driver.makeConjunction($<p_TableOperation>2, new MinusGraphPattern(driver.curOp));
      }
;

GroupOrUnionGraphPattern:
    // GroupGraphPattern ( 'UNION' GroupGraphPattern )*
    {
	driver.restoreFilter(NULL);
	$<p_TableOperation>$ = driver.curOp;
      } {
	  $<p_ParserFilter>$ = driver.saveFilter();
      } GroupGraphPattern _Q_O_QIT_UNION_E_S_QGroupGraphPattern_E_C_E_Star	{
	  driver.restoreFilter($<p_ParserFilter>2);
	  driver.curOp = driver.makeConjunction($<p_TableOperation>1, driver.curOp);
      }
;

// 'UNION' GroupGraphPattern
_O_QIT_UNION_E_S_QGroupGraphPattern_E_C:
    IT_UNION {
	if (driver.curOp == NULL)
	    driver.ensureBasicGraphPattern();
	driver.restoreFilter(NULL);
	$<p_TableOperation>$ = driver.curOp;
      } GroupGraphPattern	{
	  if (driver.curOp == NULL)
	      driver.ensureBasicGraphPattern();
	  driver.restoreFilter(NULL);
	  driver.curOp = driver.makeDisjunction($<p_TableOperation>2, driver.curOp);
      }
;

// ( 'UNION' GroupGraphPattern )*
_Q_O_QIT_UNION_E_S_QGroupGraphPattern_E_C_E_Star:
    
  | _Q_O_QIT_UNION_E_S_QGroupGraphPattern_E_C_E_Star _O_QIT_UNION_E_S_QGroupGraphPattern_E_C	
;

Filter:
    IT_FILTER Constraint	{
	if (driver.curFilter == NULL) {
	    if (driver.curOp == NULL)
		driver.ensureBasicGraphPattern();
	    driver.curFilter = new ParserFilter();
	}
	driver.curFilter->addExpression($2);
    }
;

Constraint:
    BrackettedExpression	
  | BuiltInCall	
  | FunctionCall	
;

FunctionCall:
    IRIref ArgList	{
	$$ = new FunctionCallExpression(new FunctionCall($1, $2));
    }
;

// NIL  | '(' 'DISTINCT'? Expression  ( ',' Expression  )* ')'
ArgList:
    // NIL
    NIL	{
	$$ = NULL;
    }
  | // '(' 'DISTINCT'? Expression  ( ',' Expression  )* ')'
    GT_LPAREN _QIT_DISTINCT_E_Opt Expression	{
	driver.curExprList = new ProductionVector<const Expression*>($3);
      } _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star GT_RPAREN	{
	  $$ = new ArgList(driver.curExprList); // !!! $2, 
	  driver.curExprList = NULL;
      }
;

_QIT_DISTINCT_E_Opt:
    {
	$$ = DIST_all;
    }
  | IT_DISTINCT	{
	$$ = DIST_all;
    }
;

// ',' Expression
_O_QGT_COMMA_E_S_QExpression_E_C:
    GT_COMMA Expression	{
	$$ = $2;
    }
;

// ( ',' Expression )*
_Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star:
    
  | _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star _O_QGT_COMMA_E_S_QExpression_E_C	{
	driver.curExprList->push_back($2);
    }
;

// '(' 'DISTINCT'? Expression  ')'
ExprAggArg:
    GT_LPAREN _QIT_DISTINCT_E_Opt Expression GT_RPAREN	{
	  $$.distinctness = $2;
	  $$.p_Expression = $3;
    }
;

ExpressionList:
    _O_QNIL_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QGT_COMMA_E_S_QExpression_E_Star_S_QGT_RPAREN_E_C	
;

_O_QNIL_E_Or_QGT_LPAREN_E_S_QExpression_E_S_QGT_COMMA_E_S_QExpression_E_Star_S_QGT_RPAREN_E_C:
    NIL	{
	$$ = NULL;
    }
  | GT_LPAREN Expression	{
	driver.curExprList = new ProductionVector<const Expression*>($2);
      } _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star GT_RPAREN	{
	  $$ = driver.curExprList;
	  driver.curExprList = NULL;
      }
;

ConstructTemplate:
    // '{' ConstructTriples? '}'
    GT_LCURLEY {
	driver.curBGP = NULL;
      } _QConstructTriples_E_Opt GT_RCURLEY	{
	  $$ = driver.curBGP;
      }
;

// ConstructTriples?
_QConstructTriples_E_Opt:
    
  | ConstructTriples	
;

ConstructTriples:
    // TriplesSameSubject ( '.' ConstructTriples? )?
    TriplesSameSubject _Q_O_QGT_DOT_E_S_QConstructTriples_E_Opt_C_E_Opt	
;

// '.' ConstructTriples?
_O_QGT_DOT_E_S_QConstructTriples_E_Opt_C:
    GT_DOT _QConstructTriples_E_Opt	
;

// ( '.' ConstructTriples? )?
_Q_O_QGT_DOT_E_S_QConstructTriples_E_Opt_C_E_Opt:
    
  | _O_QGT_DOT_E_S_QConstructTriples_E_Opt_C
;

TriplesSameSubject:
    VarOrTerm {
	driver.curSubject = $1;
    } PropertyListNotEmpty
  | TriplesNode {
	driver.curSubject = $1;
    } PropertyList
;

PropertyListNotEmpty:
    // Verb ObjectList ( ';' ( Verb ObjectList )? )*
    Verb ObjectList _Q_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C_E_Star	
;

// Verb ObjectList
_O_QVerb_E_S_QObjectList_E_C:
    Verb ObjectList
;

// ( Verb ObjectList )?
_Q_O_QVerb_E_S_QObjectList_E_C_E_Opt:

    | _O_QVerb_E_S_QObjectList_E_C
;

// ';' ( Verb ObjectList )?
_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C:
    GT_SEMI _Q_O_QVerb_E_S_QObjectList_E_C_E_Opt
;

// ( ';' ( Verb ObjectList )? )*
_Q_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C_E_Star:

    | _Q_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C
;

PropertyList:
    // PropertyListNotEmpty?
    _QPropertyListNotEmpty_E_Opt
;

// PropertyListNotEmpty?
_QPropertyListNotEmpty_E_Opt:

    | PropertyListNotEmpty
;

ObjectList:
    // Object ( ',' Object )*
    Object _Q_O_QGT_COMMA_E_S_QObject_E_C_E_Star	
;

// ',' Object
_O_QGT_COMMA_E_S_QObject_E_C:
    GT_COMMA Object
;

// ( ',' Object )*
_Q_O_QGT_COMMA_E_S_QObject_E_C_E_Star:

    | _Q_O_QGT_COMMA_E_S_QObject_E_C_E_Star _O_QGT_COMMA_E_S_QObject_E_C
;

Object:
    GraphNode	{
	driver.ensureBasicGraphPattern();
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
    }
;

Verb:
    VarOrIRIref	{
	$$ = $1;
	driver.curPredicate = $$;
    }
  | IT_a	{
	$$ = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");
	driver.curPredicate = $$;
    }
;

TriplesNode:
    Generator	
  | BlankNodePropertyList	
;

BlankNodePropertyList:
    GT_LBRACKET {
	$<p_SubjectPredicatePair>$.subject = driver.curSubject;
	$<p_SubjectPredicatePair>$.predicate = driver.curPredicate;
	driver.curSubject = driver.createBNode();
      } PropertyListNotEmpty GT_RBRACKET	{
	  $$ = driver.curSubject; // could store w/ type in ctx..
	  driver.curSubject = $<p_SubjectPredicatePair>2.subject;
	  driver.curPredicate = $<p_SubjectPredicatePair>2.predicate;
      }
;

Generator:
    // ('members' | 'starts' | 'ends' | 'any' | 'unordered')? '(' ( GraphNode GraphNode* )? ')' ;
    _Q_O_QIT_MEMBERS_E_Or_QIT_STARTS_E_Or_QIT_ENDS_E_Or_QIT_ANY_E_Or_QIT_UNORDERED_E_C_E_Opt GT_LPAREN _QGraphNode_E_Plus GT_RPAREN	{
	if ($1 == LIST_exact) {
	    $$ = driver.createBNode();
	    const TTerm* tail = $$;
	    ProductionVector<const TTerm*>* members = $3;
	    const URI* first = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#first");
	    const URI* rest = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest");
	    const TTerm* nil = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");
	    driver.ensureBasicGraphPattern();
	    for (unsigned i = 0; i < members->size(); i++) {
		driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(tail, first, members->at(i)));
		const TTerm* nextTail = i == members->size()-1 ? nil : driver.createBNode();
		driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(tail, rest, nextTail));
		tail = nextTail;
	    }
	    members->clear();
	    delete members;
	} else {
	    error(*(yylocation_stack_.end()), "unsupported function");
	}
    }
;

_O_QIT_MEMBERS_E_Or_QIT_STARTS_E_Or_QIT_ENDS_E_Or_QIT_ANY_E_Or_QIT_UNORDERED_E_C:
    // 'MEMBERS' | 'STARTS' | 'ENDS' | 'ANY' | 'UNORDERED'
    IT_MEMBERS	{
	$$ = LIST_members;
    }
  | IT_STARTS	{
	$$ = LIST_starts;
    }
  | IT_ENDS	{
	$$ = LIST_ends;
    }
  | IT_ANY	{
	$$ = LIST_any;
    }
  | IT_UNORDERED	{
	$$ = LIST_unordered;
    }
;

_Q_O_QIT_MEMBERS_E_Or_QIT_STARTS_E_Or_QIT_ENDS_E_Or_QIT_ANY_E_Or_QIT_UNORDERED_E_C_E_Opt:
    // ('MEMBERS' | 'STARTS' | 'ENDS' | 'ANY' | 'UNORDERED')?
    {
	$$ = LIST_exact;
    }
  | _O_QIT_MEMBERS_E_Or_QIT_STARTS_E_Or_QIT_ENDS_E_Or_QIT_ANY_E_Or_QIT_UNORDERED_E_C	
;

// GraphNode+
_QGraphNode_E_Plus:
    GraphNode	{
	$$ = new ProductionVector<const TTerm*>();
	$$->push_back($1);
    }
  | _QGraphNode_E_Plus GraphNode	{
	$1->push_back($2);
	$$ = $1;
    }
;

GraphNode:
    VarOrTerm	
  | TriplesNode	
;

VarOrTerm:
    Var	{
	$$ = $1;
    }
  | GraphTerm	
;

VarOrIRIref:
    Var	{
	$$ = $1;
    }
  | IRIref	{
	$$ = $1;
    }
;

Var:
    VAR1	
  | VAR2	
;

GraphTerm:
    IRIref	{
	$$ = $1;
    }
  | RDFLiteral	{
	$$ = $1;
    }
  | NumericLiteral	{
	$$ = $1;
    }
  | BooleanLiteral	{
	$$ = $1;
    }
  | BlankNode	
  | NIL	{
	$$ = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"); // !!! new GraphTerm_rule5($1);
    }
;

Expression:
    ConditionalOrExpression	
;

ConditionalOrExpression:
    // ConditionalAndExpression ( '||' ConditionalAndExpression )*
    ConditionalAndExpression _Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star	{
	$$ = $2->size() > 0 ? new BooleanDisjunction($1, $2) : $1;
	$2->clear();
	delete $2;
    }
;

// '||' ConditionalAndExpression
_O_QGT_OR_E_S_QConditionalAndExpression_E_C:
    GT_OR ConditionalAndExpression	{
	$$ = $2;
    }
;

// ( '||' ConditionalAndExpression )*
_Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star:
    {
	$$ = new ProductionVector<const Expression*>();
    }
  | _Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star _O_QGT_OR_E_S_QConditionalAndExpression_E_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

ConditionalAndExpression:
    // ValueLogical ( '&&' ValueLogical )*
    ValueLogical _Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star	{
	$$ = $2->size() > 0 ? new BooleanConjunction($1, $2) : $1;
	$2->clear();
	delete $2;
    }
;

// '&&' ValueLogical
_O_QGT_AND_E_S_QValueLogical_E_C:
    GT_AND ValueLogical	{
	$$ = $2;
    }
;

// ( '&&' ValueLogical )*
_Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star:
    {
	$$ = new ProductionVector<const Expression*>();
    }
  | _Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star _O_QGT_AND_E_S_QValueLogical_E_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

ValueLogical:
    RelationalExpression	
;

RelationalExpression:
    // NumericExpression ( '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression | 'IN' ExpressionList | 'NOT IN' ExpressionList )?
    NumericExpression _Q_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_Or_QIT_IN_E_S_QExpressionList_E_Or_QGT_NOT_SPACECHAR_IN_E_S_QExpressionList_E_C_E_Opt	{
	if ($2) {
	    $2->setLeftParm($1);
	    $$ = new ComparatorExpression($2); // !!!
	} else
	    $$ = $1;
    }
;

// '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression | 'IN' ExpressionList | 'NOT IN' ExpressionList
_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_Or_QIT_IN_E_S_QExpressionList_E_Or_QGT_NOT_SPACECHAR_IN_E_S_QExpressionList_E_C:
    GT_EQUAL NumericExpression	{
	$$ = new BooleanEQ($2);
    }
  | GT_NEQUAL NumericExpression	{
	$$ = new BooleanNE($2);
    }
  | GT_LT NumericExpression	{
	$$ = new BooleanLT($2);
    }
  | GT_GT NumericExpression	{
	$$ = new BooleanGT($2);
    }
  | GT_LE NumericExpression	{
	$$ = new BooleanLE($2);
    }
  | GT_GE NumericExpression	{
	$$ = new BooleanGE($2);
    }
  | IT_IN ExpressionList	{
	$$ = new NaryIn($2);
    }
  | GT_NOT_SPACECHAR_IN ExpressionList	{
	$$ = new NaryNotIn($2);
    }
;

// ( '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression | 'IN' ExpressionList | 'NOT IN' ExpressionList )?
_Q_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_Or_QIT_IN_E_S_QExpressionList_E_Or_QGT_NOT_SPACECHAR_IN_E_S_QExpressionList_E_C_E_Opt:
    {
	$$ = NULL;
    }
  | _O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_Or_QIT_IN_E_S_QExpressionList_E_Or_QGT_NOT_SPACECHAR_IN_E_S_QExpressionList_E_C	
;

NumericExpression:
    AdditiveExpression	
;

// MultiplicativeExpression  ( '+' MultiplicativeExpression  | '-' MultiplicativeExpression  | ( NumericLiteralPositive  | NumericLiteralNegative  ) ( ( '*' UnaryExpression  ) | ( '/' UnaryExpression  ) )? )*
AdditiveExpression:
    MultiplicativeExpression _Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_S_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_Opt_C_E_Star	{
	$$ = $2->size() > 0 ? new ArithmeticSum($1, $2) : $1;
	$2->clear();
	delete $2;
    }
;

// NumericLiteralPositive | NumericLiteralNegative
_O_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C:
    NumericLiteralPositive	{
	$$ = new NumberExpression($1);
    }
  | NumericLiteralNegative	{
	$$ = new NumberExpression($1);
    }
;

// '*' UnaryExpression | '/' UnaryExpression
_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C:
    GT_TIMES UnaryExpression	{
	$$ = $2;
    }
  | GT_DIVIDE UnaryExpression	{
	$$ = new ArithmeticInverse($2);
    }
;

// ( ( '*' UnaryExpression  ) | ( '/' UnaryExpression  ) )?
_Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Opt:
    {
	$$ = NULL;
    }
  | _O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C	
;

// '+' MultiplicativeExpression | '-' MultiplicativeExpression | ( NumericLiteralPositive | NumericLiteralNegative ) ( ( '*' UnaryExpression ) | ( '/' UnaryExpression ) )?
_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_S_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_Opt_C:
    GT_PLUS MultiplicativeExpression	{
	$$ = $2;
    }
  | GT_MINUS MultiplicativeExpression	{
	$$ = new ArithmeticNegation($2);
    }
  | // ( NumericLiteralPositive | NumericLiteralNegative ) ( ( '*' UnaryExpression  ) | ( '/' UnaryExpression  ) )?
    _O_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Opt	{
	if ($2 == NULL)
	    $$ = $1;
	else {
	    ProductionVector<const Expression*>* v = new ProductionVector<const Expression*>();
	    v->push_back($1);
	    v->push_back($2);
	    $$ = new BooleanConjunction(v);
	}
    }
;

// ( '+' MultiplicativeExpression | '-' MultiplicativeExpression | ( NumericLiteralPositive | NumericLiteralNegative ) ( ( '*' UnaryExpression ) | ( '/' UnaryExpression ) )? )*
_Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_S_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_Opt_C_E_Star:
    {
	$$ = new ProductionVector<const Expression*>();
    }
  | _Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_S_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_Opt_C_E_Star _O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_S_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_Opt_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

MultiplicativeExpression:
    // UnaryExpression ( '*' UnaryExpression | '/' UnaryExpression )*
    UnaryExpression _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star	{
	$$ = $2->size() > 0 ? new ArithmeticProduct($1, $2) : $1;
	$2->clear();
	delete $2;
    }
;

// ( '*' UnaryExpression | '/' UnaryExpression )*
_Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star:
    {
	$$ = new ProductionVector<const Expression*>();
    }
  | _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star _O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

UnaryExpression:
    GT_NOT PrimaryExpression	{
	$$ = new BooleanNegation($2);
    }
  | GT_PLUS PrimaryExpression	{
	$$ = $2;
    }
  | GT_MINUS PrimaryExpression	{
	$$ = new ArithmeticNegation($2);
    }
  | PrimaryExpression	
;

PrimaryExpression:
    BrackettedExpression	
  | BuiltInCall	
  | IRIrefOrFunction	
  | RDFLiteral	{
	$$ = new TTermExpression($1);
    }
  | NumericLiteral	{
	$$ = new TTermExpression($1);
    }
  | BooleanLiteral	{
	$$ = new TTermExpression($1);
    }
  | Var	{
	$$ = new TTermExpression($1);
    }
  | Aggregate	
;

BrackettedExpression:
    GT_LPAREN Expression GT_RPAREN	{
	$$ = $2;
    }
;

BuiltInCall:
    IT_STR GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_str, $3, NULL, NULL));
    }
  | IT_LANG GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_lang, $3, NULL, NULL));
    }
  | IT_LANGMATCHES GT_LPAREN Expression GT_COMMA Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_langMatches, $3, $5, NULL));
    }
  | IT_DATATYPE GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_datatype, $3, NULL, NULL));
    }
  | IT_BOUND GT_LPAREN Var GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_bound, new TTermExpression($3), NULL, NULL));
    }
  | IT_IRI GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_iri, $3, NULL, NULL));
    }
  | IT_URI GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_uri, $3, NULL, NULL));
    }
  | // 'BNODE' ( '(' Expression  ')' | NIL )
    IT_BNODE _O_QGT_LPAREN_E_S_QExpression_E_S_QGT_RPAREN_E_Or_QNIL_E_C	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_blank, $2, NULL, NULL));
    }
  | IT_COALESCE ExpressionList	{
	$$ = NULL; // new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_coalesce, $2, NULL, NULL));
	w3c_sw_NEED_IMPL("COALESCE");
    }
  | IT_IF GT_LPAREN Expression GT_COMMA Expression GT_COMMA Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_if, $3, $5, $7));
    }
  | IT_STRLANG GT_LPAREN Expression GT_COMMA Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_strlang, $3, $5, NULL));
    }
  | IT_STRDT GT_LPAREN Expression GT_COMMA Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_strdt, $3, $5, NULL));
    }
  | IT_sameTerm GT_LPAREN Expression GT_COMMA Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_sameTerm, $3, $5, NULL));
    }
  | IT_isIRI GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_isIRI, $3, NULL, NULL));
    }
  | IT_isURI GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_isIRI, $3, NULL, NULL));
    }
  | IT_isBLANK GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_isBlank, $3, NULL, NULL));
    }
  | IT_isLITERAL GT_LPAREN Expression GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_isLiteral, $3, NULL, NULL));
    }
  | RegexExpression	
  | ExistsFunc	
  | NotExistsFunc	
;

// '(' Expression  ')' | NIL
_O_QGT_LPAREN_E_S_QExpression_E_S_QGT_RPAREN_E_Or_QNIL_E_C:
    // '(' Expression  ')'
    GT_LPAREN Expression GT_RPAREN	{
	$$ = $2;
    }
  | NIL	{
	$$ = NULL;
    }
;

RegexExpression:
    // 'REGEX' '(' Expression ',' Expression ( ',' Expression )? ')'
    IT_REGEX GT_LPAREN Expression GT_COMMA Expression _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Opt GT_RPAREN	{
	$$ = new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_regex, $3, $5, $6));
    }
;

// ( ',' Expression )?
_Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Opt:
    {
	$$ = NULL;
    }
  | _O_QGT_COMMA_E_S_QExpression_E_C	
;

ExistsFunc:
    IT_EXISTS GroupGraphPattern	{
	$$ = NULL; // new FunctionCallExpression(new FunctionCall(&AtomFactory::FUNC_exists, driver.curOp, NULL, NULL));
	w3c_sw_NEED_IMPL("EXISTS");
    }
;

NotExistsFunc:
    GT_NOT_SPACECHAR_EXISTS GroupGraphPattern	{
	$$ = NULL; // new FunctionCallExpression(new BooleanNegation(new FunctionCall(&AtomFactory::FUNC_exists, driver.curOp, NULL, NULL)));
	w3c_sw_NEED_IMPL("EXISTS");
    }
;

Aggregate:
    IT_COUNT GT_LPAREN _QIT_DISTINCT_E_Opt _O_QGT_TIMES_E_Or_QExpression_E_C GT_RPAREN	{
	$$ = new FunctionCallExpression(new AggregateCall(&AtomFactory::FUNC_count, $3, $4));
    }
  | IT_SUM ExprAggArg	{
	$$ = new FunctionCallExpression(new AggregateCall(&AtomFactory::FUNC_sum, $2.distinctness, $2.p_Expression));
    }
  | IT_MIN ExprAggArg	{
	$$ = new FunctionCallExpression(new AggregateCall(&AtomFactory::FUNC_min, $2.distinctness, $2.p_Expression));
    }
  | IT_MAX ExprAggArg	{
	$$ = new FunctionCallExpression(new AggregateCall(&AtomFactory::FUNC_max, $2.distinctness, $2.p_Expression));
    }
  | IT_AVG ExprAggArg	{
	$$ = new FunctionCallExpression(new AggregateCall(&AtomFactory::FUNC_avg, $2.distinctness, $2.p_Expression));
    }
  | IT_SAMPLE ExprAggArg	{
	$$ = new FunctionCallExpression(new AggregateCall(&AtomFactory::FUNC_sample, $2.distinctness, $2.p_Expression));
    }
  | // 'GROUP_CONCAT' '(' 'DISTINCT'? Expression  ( ',' Expression  )* ( ';' 'SEPARATOR'  '=' String  )? ')'
    IT_GROUP_CONCAT GT_LPAREN _QIT_DISTINCT_E_Opt Expression	{
	driver.curExprList = new ProductionVector<const Expression*>($4);
      } _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star _Q_O_QGT_SEMI_E_S_QIT_SEPARATOR_E_S_QGT_EQUAL_E_S_QString_E_C_E_Opt GT_RPAREN	{
	  // x = new ArgList($2, driver.curExprList);
	  delete driver.curExprList;
	  driver.curExprList = NULL;
	  w3c_sw_NEED_IMPL("GROUP_CONCAT"); // !!!
	  // $$ = new FunctionCallExpression(new AggregateCall(&AtomFactory::FUNC_group-concat, $3, $4.p_Expression, $4.separator));
    }
;

_O_QGT_TIMES_E_Or_QExpression_E_C:
    GT_TIMES	{
	$$ = NULL;
    }
  | Expression	
;

_O_QGT_SEMI_E_S_QIT_SEPARATOR_E_S_QGT_EQUAL_E_S_QString_E_C:
    GT_SEMI IT_SEPARATOR GT_EQUAL String	{
	$$ = driver.getRDFLiteral(*$4, NULL, NULL);
    }
;

_Q_O_QGT_SEMI_E_S_QIT_SEPARATOR_E_S_QGT_EQUAL_E_S_QString_E_C_E_Opt:
    {
	$$ = NULL;
    }
  | _O_QGT_SEMI_E_S_QIT_SEPARATOR_E_S_QGT_EQUAL_E_S_QString_E_C	
;

IRIrefOrFunction:
    IRIref _QArgList_E_Opt	{
	if ($2)
	    $$ = new FunctionCallExpression(new FunctionCall($1, $2));
	else
	    $$ = new TTermExpression($1);
    }
;

// IRIref ArgList?
_QArgList_E_Opt:
    {
	$$ = NULL;
    }
  | ArgList	
;

RDFLiteral:
    // String ( LANGTAG | ( '^^' IRIref ) )?
    String _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_QIRIref_E_C_E_Opt	{
	$$ = driver.getRDFLiteral(*$1, $2.uri, $2.langtag);
	delete $1;
    }
;

// '^^' IRIref
_O_QGT_DTYPE_E_S_QIRIref_E_C:
    GT_DTYPE IRIref	{
	$$ = $2;
    }
;

// LANGTAG | ( '^^' IRIref )
_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_QIRIref_E_C:
    LANGTAG	{
	$$.uri = NULL;
	$$.langtag = $1;
    }
  | _O_QGT_DTYPE_E_S_QIRIref_E_C	{
	$$.uri = $1;
	$$.langtag = NULL;
    }
;

// ( LANGTAG | ( '^^' IRIref ) )?
_Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_QIRIref_E_C_E_Opt:
    {
	$$.uri = NULL;
	$$.langtag = NULL;
    }
  | _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_QIRIref_E_C	
;

NumericLiteral:
    NumericLiteralUnsigned	
  | NumericLiteralPositive	
  | NumericLiteralNegative	
;

NumericLiteralUnsigned:
    INTEGER	
  | DECIMAL	
  | DOUBLE	
;

NumericLiteralPositive:
    INTEGER_POSITIVE	
  | DECIMAL_POSITIVE	
  | DOUBLE_POSITIVE	
;

NumericLiteralNegative:
    INTEGER_NEGATIVE	
  | DECIMAL_NEGATIVE	
  | DOUBLE_NEGATIVE	
;

BooleanLiteral:
    IT_true	
  | IT_false	
    ;

String:
    STRING_LITERAL1	
  | STRING_LITERAL2	
  | STRING_LITERAL_LONG1	
  | STRING_LITERAL_LONG2	
;

IRIref:
    IRI_REF	
  | PrefixedName	
;

PrefixedName:
    PNAME_LN	
  | PNAME_NS	
;

BlankNode:
    BLANK_NODE_LABEL	
  | ANON	
;

 /*** END MapSet language structure. ***/


%% /*** Additional Code ***/

void w3c_sw::MapSetParser::error(const MapSetParser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}

/* START Driver (@@ stand-alone would allow it to be shared with other parsers */

namespace w3c_sw {

    MapSetDriver::MapSetDriver (std::string baseURI, AtomFactory* atomFactory) : 
	YaccDriver(baseURI, atomFactory), curSubject(NULL), curPredicate(NULL), 
	curBGP(NULL), curFilter(NULL), 
	curBindingsClause(NULL), curBinding(NULL), curExprList(NULL), 
	root(NULL), lastRuleTerm(atomFactory->getNULL(), atomFactory->getNULL()),
	lastRuleTermSet(false), sharedVarsSet(false)
{
}

    MapSetDriver::~MapSetDriver ()
{
}

bool MapSetDriver::parse(IStreamContext& in)
{
    streamname = in.nameStr;

    MapSetScanner scanner(this, in.p);
    scanner.set_debug(trace_scanning);
    lexer = &scanner;

    MapSetParser parser(*this);
    parser.set_debug_level(trace_parsing);
    // !!! Clear out namespaces!
    ignorePrefixFlag = false;
    return (parser.parse());
}

} // namespace w3c_sw

/* END Driver */

