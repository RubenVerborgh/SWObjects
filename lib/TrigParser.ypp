/* $Id: TrigParser.ypp,v 1.2 2008-10-24 10:57:32 eric Exp $ -*- mode: c++ -*- */
/** \file TrigParser.yy Contains the Bison parser source */

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start trigDoc

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="w3c_sw"

/* set the parser's class identifier */
%define "parser_class_name" "TrigParser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class TrigDriver& driver }

/* verbose error messages */
%error-verbose

// %{ //  ##bison1
%code requires { // ##bison2
/* Bison seems to test inclusion with PARSER_HEADER_H, rather than something
 * which varies by parser_class_name . Overriding with define specific to
 * this parser.
 */
#endif /* !PARSER_HEADER_H */
#ifndef TRIGS_PARSER_HPP
#define TRIGS_PARSER_HPP

#include "SWObjects.hpp"
#include "RdfDB.hpp"
#include "ParserCommon.hpp"

#include <stack>

namespace w3c_sw {

/** The Driver class brings together all components. It creates an instance of
 * the TrigParser and TrigScanner classes and connects them. Then the input stream is
 * fed into the scanner object and the parser gets it's token
 * sequence. Furthermore the driver object is available in the grammar rules as
 * a parameter. Therefore the driver class contains a reference to the
 * structure into which the parsed data is saved. */

class TrigDriver : public YaccDataDriver {
    friend class TrigParser;
protected:
    const TTerm* curSubject;
    const TTerm* curPredicate;
    RdfDB* db;
    BasicGraphPattern* neededBGP; // set to NULL as soon as it's returned as $$ anywhere
    BasicGraphPattern* defaultBGP;
public:
    TrigDriver (std::string baseURI, AtomFactory* atomFactory) : YaccDataDriver(baseURI, atomFactory) {
	curSubject = curPredicate = NULL;
	neededBGP = curBGP = NULL;
    }
    void setDB (RdfDB* db) { this->db = db; }

    void parse (IStreamContext& in, RdfDB* db = NULL, BasicGraphPattern* bgp = NULL);
    void parse (IStreamContext& in, BasicGraphPattern* bgp);
    void parse (std::string turtleStr, RdfDB* db = NULL, BasicGraphPattern* bgp = NULL);
    void parse (std::string turtleStr, BasicGraphPattern* bgp);

    /** Pointer to the current lexer instance, this is used to connect the
     * parser to the scanner. It is used in the yylex macro. */
    class TrigScanner* lexer;
    BasicGraphPattern* root;
};

} // namespace w3c_sw

// %} // ##bison1
} // ##bison2

 /*** BEGIN Trig language tokens. ***/

%union {
    struct {const TTerm* subject; const TTerm* predicate;} p_SubjectPredicatePair;
    struct {const URI* uri; LANGTAG* langtag;} p_uri_or_langtag;

    /* Terminals */
    LANGTAG* p_LANGTAG;

    std::string* p_string;

    const NumericRDFLiteral* p_NumericRDFLiteral;
    const BooleanRDFLiteral* p_BooleanRDFLiteral;

    /* Productions */
    BasicGraphPattern* p_DefaultGraphPattern;
    const TTerm* p_TTerm;
    ProductionVector<const TTerm*>* p_TTerms;
    const URI* p_URI;
    ProductionVector<URI*>* p_URIs;
    const RDFLiteral* p_RDFLiteral;
    const BNode* p_BNode;

}

%{
#include "TrigScanner.hpp"
%}
%token			__EOF__	     0	"end of file"
/* START TokenBlock */
/* Terminals */

%token BASE PREFIX SPARQL_BASE RDF_TYPE SPARQL_PREFIX GT_LPAREN GT_RPAREN GT_DOT
       GT_COMMA GT_SEMI GT_LBRACKET GT_RBRACKET GT_DTYPE IT_GRAPH GT_RCURLEY GT_LCURLEY
 //%token IT_BASE IT_PREFIX IT_GRAPH GT_LCURLEY GT_RCURLEY GT_LPAREN GT_RPAREN GT_DOT GT_COMMA GT_SEMI IT_a GT_LBRACKET GT_RBRACKET GT_PLUS GT_MINUS GT_DTYPE
%token <p_BooleanRDFLiteral> IT_true IT_false
%token <p_NumericRDFLiteral> INTEGER DECIMAL DOUBLE INTEGER_POSITIVE DECIMAL_POSITIVE DOUBLE_POSITIVE INTEGER_NEGATIVE DECIMAL_NEGATIVE DOUBLE_NEGATIVE
%token <p_string> STRING_LITERAL1 STRING_LITERAL2 STRING_LITERAL_LONG1 STRING_LITERAL_LONG2
%token <p_URI> IRIREF PNAME_NS PNAME_LN
%token <p_BNode> BLANK_NODE_LABEL ANON
%token <p_LANGTAG> LANGTAG
%token <p_NIL> NIL

/* Productions */
%type <p_trigDoc> trigDoc

%type <p_TTerms> _QGraphNode_E_Star

//%type <p_DefaultGraphPattern> ConstructTriples _Q_O_QGT_DOT_E_S_QConstructTriples_E_Opt_C_E_Opt _O_QGT_DOT_E_S_QConstructTriples_E_Opt_C _QConstructTriples_E_Opt TrigTemplate

%type <p_TTerm> Verb VarOriri VarOrTerm GraphNode Object GraphTerm _O_QCollection_E_Or_QBlankNodePropertyList_E_C _O_Qiri_E_Or_QBlankNode_E_C _O_Qiri_E_Or_QBlankNode_E_Or_Qcollection_E_Or_QBlankNodePropertyList_E_C subject
%type <p_RDFLiteral> RDFLiteral
%type <p_NumericRDFLiteral> NumericLiteralUnsigned NumericLiteralPositive NumericLiteralNegative NumericLiteral
%type <p_BooleanRDFLiteral> BooleanLiteral
%type <p_string> String
%type <p_BNode> BlankNode TriplesNode BlankNodePropertyList Collection

%type <p_URI> _O_QGT_DTYPE_E_S_Qiri_E_C iri PrefixedName
%type <p_uri_or_langtag> _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt

/* END TokenBlock */

//%destructor { delete $$; } BlankNode

 /*** END Trig language tokens. ***/

%{
#include "TrigScanner.hpp"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lexWrapper

#include "RdfDB.hpp"
%}

%% /*** Grammar Rules ***/

 /*** BEGIN Trig language structure. ***/
// [1]    	trigDoc 	   ::=    	statement*
trigDoc:
    _Qstatement_E_Star	{
	driver.root = driver.defaultBGP;
	// driver.root = $<p_DefaultGraphPattern>1;
    }
;

_Qstatement_E_Star:
    	
  | _Qstatement_E_Star statement	
;

// [2]    	statement 	   ::=    	directive | tripleOrBareGraph | graphword | wrappedDefault
statement:
    directive	
  | tripleOrBareGraph	
  | graphword	
  | wrappedDefault	
;

// [3]    	tripleOrBareGraph  ::=    	( iri | BlankNode | Collection | BlankNodePropertyList ) ( "{" (TriplesTemplate)? "}" | PropertyListNotEmpty "." )
tripleOrBareGraph:
    _O_Qiri_E_Or_QBlankNode_E_C {
	driver.curSubject = $1;
      } _O_QGT_LCURLEY_E_S_QTriplesTemplate_E_Opt_S_QGT_RCURLEY_E_Or_QPropertyListNotEmpty_E_S_QGT_DOT_E_C	
  | _O_QCollection_E_Or_QBlankNodePropertyList_E_C {
	driver.curSubject = $1;
      } _O_QGT_LCURLEY_E_S_QTriplesTemplate_E_Opt_S_QGT_RCURLEY_E_Or_QPropertyListNotEmpty_E_Opt_S_QGT_DOT_E_C	
;

_O_Qiri_E_Or_QBlankNode_E_C:
    iri	{
      $$ = $1;
    }
  | BlankNode	{
      $$ = $1;
    }
;

_QTriplesTemplate_E_Opt:
    
  | TriplesTemplate	
;

_O_QGT_LCURLEY_E_S_QTriplesTemplate_E_Opt_S_QGT_RCURLEY_E_Or_QPropertyListNotEmpty_E_S_QGT_DOT_E_C:
    GT_LCURLEY {
	driver.curBGP = driver.db->ensureGraph(driver.curSubject);
	driver.curSubject = NULL;
      } _QTriplesTemplate_E_Opt GT_RCURLEY	
  | {
	driver.curBGP = driver.db->ensureGraph(NULL);
	driver.neededBGP = NULL;
      } PropertyListNotEmpty GT_DOT	
;

_O_QCollection_E_Or_QBlankNodePropertyList_E_C:
    Collection	{
      $$ = $1;
    }
  | BlankNodePropertyList	{
      $$ = $1;
    }
;

_QPropertyListNotEmpty_E_Opt:
    
  | PropertyListNotEmpty	
;

_O_QGT_LCURLEY_E_S_QTriplesTemplate_E_Opt_S_QGT_RCURLEY_E_Or_QPropertyListNotEmpty_E_Opt_S_QGT_DOT_E_C:
    GT_LCURLEY {
	driver.curBGP = driver.db->ensureGraph(driver.curSubject);
	driver.curSubject = NULL;
      } _QTriplesTemplate_E_Opt GT_RCURLEY	
  | {
	driver.curBGP = driver.db->ensureGraph(NULL);
	driver.neededBGP = NULL;
      } _QPropertyListNotEmpty_E_Opt GT_DOT	
;

// [4]    	graphword 	   ::=    	"GRAPH" ( iri | BlankNode ) "{" (TriplesTemplate)? "}"
graphword:
    IT_GRAPH _O_Qiri_E_Or_QBlankNode_E_Or_Qcollection_E_Or_QBlankNodePropertyList_E_C GT_LCURLEY {
	driver.curBGP = driver.db->ensureGraph($2);
	driver.neededBGP = NULL;
      } _QTriplesTemplate_E_Opt GT_RCURLEY	
;

_O_Qiri_E_Or_QBlankNode_E_Or_Qcollection_E_Or_QBlankNodePropertyList_E_C:
    iri	{
      $$ = $1;
    }
  | BlankNode	{
      $$ = $1;
    }
  | Collection	{
      $$ = $1;
    }
  | BlankNodePropertyList	{
      $$ = $1;
    }
;

// [5]    	wrappedDefault 	   ::=    	"{" (TriplesTemplate)? "}"
wrappedDefault:
    GT_LCURLEY {
	driver.curBGP = driver.defaultBGP;
	driver.neededBGP = NULL;
      } _QTriplesTemplate_E_Opt GT_RCURLEY	
;

// [6]    	directive 	   ::=    	prefixID | base | sparqlPrefix | sparqlBase
directive:
    prefixID	
  | base	
  | sparqlPrefix	
  | sparqlBase	
;

// [7]    	prefixID 	   ::=    	PREFIX PNAME_NS IRIREF "."
prefixID:
    PREFIX {
	driver.ignorePrefix(true);
      } PNAME_NS {
	  driver.ignorePrefix(false);
      } IRIREF {
	  std::string prefix($3->getLexicalValue());
	  driver.addPrefix(prefix.substr(0, prefix.length()-1), $5);
      } GT_DOT	
;

// [10]    	sparqlPrefix 	   ::=    	SPARQL_PREFIX PNAME_NS IRIREF
sparqlPrefix:
    SPARQL_PREFIX {
	driver.ignorePrefix(true);
      } PNAME_NS {
	  driver.ignorePrefix(false);
      } IRIREF	{
	  std::string prefix($3->getLexicalValue());
	  driver.addPrefix(prefix.substr(0, prefix.length()-1), $5);
      }
;

// [8]    	base 		   ::=    	BASE IRIREF "."
base:
    BASE IRIREF GT_DOT	{
	driver.setBase($2->getLexicalValue());
    }
;

// [9]    	sparqlBase 	   ::=    	SPARQL_BASE IRIREF
sparqlBase:
    SPARQL_BASE IRIREF	{
	driver.setBase($2->getLexicalValue());
    }
;



// [11]    	TriplesTemplate 	   ::=    	TriplesSameSubject ("." TriplesTemplate? )?
TriplesTemplate:
    TriplesSameSubject _Q_O_QGT_DOT_E_S_QTriplesTemplate_E_Opt_C_E_Opt	{
	driver.neededBGP = NULL;
    }

;

_O_QGT_DOT_E_S_QTriplesTemplate_E_Opt_C:
    GT_DOT _QTriplesTemplate_E_Opt	
;

_Q_O_QGT_DOT_E_S_QTriplesTemplate_E_Opt_C_E_Opt:
    
  | _O_QGT_DOT_E_S_QTriplesTemplate_E_Opt_C	
;

// [12]    	TriplesSameSubject 	   ::=    	subject PropertyListNotEmpty | BlankNodePropertyList PropertyList
TriplesSameSubject:
    subject {
	driver.curSubject = $1;
    } PropertyListNotEmpty	
  | BlankNodePropertyList {
	driver.curSubject = $1;
    } PropertyList	
;

// [13]    	PropertyList 		   ::=    	PropertyListNotEmpty?
PropertyList:
    _QPropertyListNotEmpty_E_Opt	
;

// [14]    	PropertyListNotEmpty 	   ::=    	Verb ObjectList ( ";" (Verb ObjectList)? )*
PropertyListNotEmpty:
    Verb ObjectList _Q_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C_E_Star	
;

_O_QVerb_E_S_QObjectList_E_C:
    Verb ObjectList	
;

_Q_O_QVerb_E_S_QObjectList_E_C_E_Opt:
    
  | _O_QVerb_E_S_QObjectList_E_C	
;

_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C:
    GT_SEMI _Q_O_QVerb_E_S_QObjectList_E_C_E_Opt	
;

_Q_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C_E_Star:
    
  | _Q_O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_QVerb_E_S_QObjectList_E_Opt_C	
;


ObjectList:
    // Object ( ',' Object )*
    Object _Q_O_QGT_COMMA_E_S_QObject_E_C_E_Star
;

// ',' Object
_O_QGT_COMMA_E_S_QObject_E_C:
    GT_COMMA Object
;

// ( ',' Object )*
_Q_O_QGT_COMMA_E_S_QObject_E_C_E_Star:

    | _Q_O_QGT_COMMA_E_S_QObject_E_C_E_Star _O_QGT_COMMA_E_S_QObject_E_C
;

Object:
    GraphNode	{
	if (!driver.curBGP)
	    driver.neededBGP = driver.curBGP = new DefaultGraphPattern();
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
	$$ = $1;
    }
;

Verb:
    VarOriri	{
	$$ = $1;
	driver.curPredicate = $$;
    }
  | RDF_TYPE	{
	$$ = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");
	driver.curPredicate = $$;
    }
;

subject:
    iri	{
	$$ = $1;
    }
  | BlankNode	{
	$$ = $1;
    }
  | Collection	{
	$$ = $1;
    }
;

TriplesNode:
    Collection	{
	$$ = $1;
    }
  | BlankNodePropertyList	{
	$$ = $1;
    }
;

BlankNodePropertyList:
    GT_LBRACKET {
	$<p_SubjectPredicatePair>$.subject = driver.curSubject;
	$<p_SubjectPredicatePair>$.predicate = driver.curPredicate;
	driver.curSubject = driver.createBNode();
      } PropertyListNotEmpty GT_RBRACKET	{
	  $$ = (BNode*)driver.curSubject; // could store w/ type in ctx..
	  driver.curSubject = $<p_SubjectPredicatePair>2.subject;
	  driver.curPredicate = $<p_SubjectPredicatePair>2.predicate;
      }
;

Collection:
    // '(' GraphNode* ')'
    GT_LPAREN _QGraphNode_E_Star GT_RPAREN	{
	$$ = driver.createBNode();
	const TTerm* tail = $$;
	ProductionVector<const TTerm*>* members = $2;
	const URI* first = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#first");
	const URI* rest = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#rest");
	const TTerm* nil = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil");
	if (!driver.curBGP)
	    driver.neededBGP = driver.curBGP = new DefaultGraphPattern();
	for (unsigned i = 0; i < members->size(); i++) {
	    driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(tail, first, members->at(i)));
	    const TTerm* nextTail = i == members->size()-1 ? nil : driver.createBNode();
	    driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(tail, rest, nextTail));
	    tail = nextTail;
	}
	members->clear();
	delete members;
    }
;

// GraphNode*
_QGraphNode_E_Star:
    	{
	$$ = new ProductionVector<const TTerm*>();
    }    
  | _QGraphNode_E_Star GraphNode	{
	$1->push_back($2);
	$$ = $1;
    }
;

GraphNode:
    VarOrTerm	{
	$$ = $1;
    }
  | TriplesNode	{
	$$ = $1;
    }
;

VarOrTerm:
    GraphTerm	{
	$$ = $1;
    }
;

VarOriri:
    iri	{
	$$ = $1;
    }
;

GraphTerm:
    iri	{
	$$ = $1;
    }
  | RDFLiteral	{
	$$ = $1;
    }
  | NumericLiteral	{
	$$ = $1;
    }
  | BooleanLiteral	{
	$$ = $1;
    }
  | BlankNode	{
	$$ = $1;
    }
  | NIL	{
	$$ = driver.getURI("http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"); // !!! new GraphTerm_rule5($1);
    }
;

RDFLiteral:
    // String ( LANGTAG | ( '^^' iri ) )?
    String _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt	{
	$$ = driver.getRDFLiteral(*$1, $2.uri, $2.langtag);
	delete $1;
    }
;

// '^^' iri
_O_QGT_DTYPE_E_S_Qiri_E_C:
    GT_DTYPE iri	{
	$$ = $2;
    }
;

// LANGTAG | ( '^^' iri )
_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C:
    LANGTAG	{
	$$.uri = NULL;
	$$.langtag = $1;
    }
  | _O_QGT_DTYPE_E_S_Qiri_E_C	{
	$$.uri = $1;
	$$.langtag = NULL;
    }
;

// ( LANGTAG | ( '^^' iri ) )?
_Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt:
    {
	$$.uri = NULL;
	$$.langtag = NULL;
    }
  | _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C	{
	$$ = $1;
    }
;

NumericLiteral:
    NumericLiteralUnsigned	{
	$$ = $1;
    }
  | NumericLiteralPositive	{
	$$ = $1;
    }
  | NumericLiteralNegative	{
	$$ = $1;
    }
;

NumericLiteralUnsigned:
    INTEGER	{
	$$ = $1;
    }
  | DECIMAL	{
	$$ = $1;
    }
  | DOUBLE	{
	$$ = $1;
    }
;

NumericLiteralPositive:
    INTEGER_POSITIVE	{
	$$ = $1;
    }
  | DECIMAL_POSITIVE	{
	$$ = $1;
    }
  | DOUBLE_POSITIVE	{
	$$ = $1;
    }
;

NumericLiteralNegative:
    INTEGER_NEGATIVE	{
	$$ = $1;
    }
  | DECIMAL_NEGATIVE	{
	$$ = $1;
    }
  | DOUBLE_NEGATIVE	{
	$$ = $1;
    }
;

BooleanLiteral:
    IT_true	{
	$$ = $1;
    }
  | IT_false	{
	$$ = $1;
    }
;

String:
    STRING_LITERAL1	{
	$$ = $1;
    }
  | STRING_LITERAL2	{
	$$ = $1;
    }
  | STRING_LITERAL_LONG1	{
	$$ = $1;
    }
  | STRING_LITERAL_LONG2	{
	$$ = $1;
    }
;

iri:
    IRIREF	{
	$$ = $1;
    }
  | PrefixedName	{
	$$ = $1;
    }
;

PrefixedName:
    PNAME_LN	{
	$$ = $1;
    }
  | PNAME_NS	{
	$$ = $1;
    }
;

BlankNode:
    BLANK_NODE_LABEL	{
	$$ = $1;
    }
  | ANON	{
	$$ = $1;
    }
;

 /*** END Trig language structure. ***/

%% /*** Additional Code ***/

void w3c_sw::TrigParser::error(const TrigParser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}

/* START Driver (@@ stand-alone would allow it to be shared with other parsers */

namespace w3c_sw {

void TrigDriver::parse (IStreamContext& in, RdfDB* db, BasicGraphPattern* bgp)
{
    // clear prefixes for nth run but keep them around for e.g. serialization.
    clearPrefixes();

    if (db != NULL)
	setDB(db);
    if (bgp != NULL)
	setGraph(bgp);

    streamname = in.nameStr;

    TrigScanner scanner(this, in.p);
    scanner.set_debug(trace_scanning);
    this->lexer = &scanner;

    TrigParser parser(*this);
    parser.set_debug_level(trace_parsing);
    defaultBGP = curBGP ? curBGP : this->db->ensureGraph(NULL);
    parser.parse();
}

void TrigDriver::parse (IStreamContext& in, BasicGraphPattern* bgp) {
    parse(in, NULL, bgp);
}

void TrigDriver::parse (std::string turtleStr, RdfDB* db, BasicGraphPattern* bgp) {
    IStreamContext in(turtleStr.c_str(), IStreamContext::STRING);
    parse(in, db, bgp);
}

void TrigDriver::parse (std::string turtleStr, BasicGraphPattern* bgp) {
    IStreamContext in(turtleStr.c_str(), IStreamContext::STRING);
    parse(in, NULL, bgp);
}

} // namespace w3c_sw

/* END Driver */

