/* $Id: TrigParser.ypp,v 1.2 2008-10-24 10:57:32 eric Exp $ -*- mode: c++ -*- */
/** \file TrigParser.yy Contains the Bison parser source */

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start trigDoc

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="w3c_sw"

/* set the parser's class identifier */
%define "parser_class_name" "TrigParser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
    driver.yylloc = &@$;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class TrigDriver& driver }

/* verbose error messages */
%error-verbose

// %{ //  ##bison1
%code requires { // ##bison2
/* Bison seems to test inclusion with PARSER_HEADER_H, rather than something
 * which varies by parser_class_name . Overriding with define specific to
 * this parser.
 */
#endif /* !PARSER_HEADER_H */
#ifndef TRIG_PARSER_HPP
#define TRIG_PARSER_HPP

#include "SWObjects.hpp"
#include "RdfDB.hpp"
#include "ParserCommon.hpp"

#include <stack>

namespace w3c_sw {

/** The Driver class brings together all components. It creates an instance of
 * the TrigParser and TrigScanner classes and connects them. Then the input stream is
 * fed into the scanner object and the parser gets it's token
 * sequence. Furthermore the driver object is available in the grammar rules as
 * a parameter. Therefore the driver class contains a reference to the
 * structure into which the parsed data is saved. */

class TrigDriver : public YaccDataDriver {
    location* yylloc; // can't move up into YaccDriver 'cause location.hh hasn't been included yet.
    friend class TrigParser;
protected:
    const TTerm* curSubject;
    const TTerm* curPredicate;
    RdfDB* db;
    BasicGraphPattern* neededBGP; // set to NULL as soon as it's returned as $$ anywhere
    BasicGraphPattern* defaultBGP;
public:
    TrigDriver (std::string baseURI, AtomFactory* atomFactory) : YaccDataDriver(baseURI, atomFactory) {
	curSubject = curPredicate = NULL;
	neededBGP = curBGP = NULL;
    }
    void setDB (RdfDB* db) { this->db = db; }

    void parse (IStreamContext& in, RdfDB* db = NULL, BasicGraphPattern* bgp = NULL);
    void parse (IStreamContext& in, BasicGraphPattern* bgp);
    void parse (std::string turtleStr, RdfDB* db = NULL, BasicGraphPattern* bgp = NULL);
    void parse (std::string turtleStr, BasicGraphPattern* bgp);

    /** Pointer to the current lexer instance, this is used to connect the
     * parser to the scanner. It is used in the yylex macro. */
    class TrigScanner* lexer;
    BasicGraphPattern* root;

    const BNode* createBNode () {
	if (descriptiveBNodeLabels) {
	    std::stringstream ss;
	    ss << *(yylloc->begin.filename) <<":"<< yylloc->begin.line <<":"<< yylloc->begin.column;
	    return atomFactory->getBNode(ss.str(), &bnodeMap);
	} else {
	    return atomFactory->createBNode();
	}
    }
};

} // namespace w3c_sw

// %} // ##bison1
} // ##bison2

 /*** BEGIN Trig language tokens. ***/

%union {
    struct {const TTerm* subject; const TTerm* predicate;} p_SubjectPredicatePair;
    struct {const URI* uri; LANGTAG* langtag;} p_uri_or_langtag;

    std::string* p_string;

    const TTerm* p_TTerm;
    const URI* p_URI;
    const BNode* p_BNode;
    LANGTAG* p_LANGTAG;
    BasicGraphPattern* p_DefaultGraphPattern;
}

%{
#include "TrigScanner.hpp"
%}
%token			__EOF__	     0	"end of file"
/* START TokenBlock */
/* Terminals */

%token AT_BASE AT_PREFIX IT_BASE RDF_TYPE IT_PREFIX GT_LPAREN GT_RPAREN GT_DOT
       GT_COMMA GT_SEMI GT_LBRACKET GT_RBRACKET GT_DTYPE
       IT_GRAPH GT_LCURLEY GT_RCURLEY
%token <p_TTerm> IT_true IT_false INTEGER DECIMAL DOUBLE BLANK_NODE_LABEL ANON
// deepest typing for these tokens:
// %token <p_BooleanRDFLiteral> IT_true IT_false
// %token <p_NumericRDFLiteral> INTEGER DECIMAL DOUBLE
// %token <p_BNode> BLANK_NODE_LABEL ANON
%token <p_string> STRING_LITERAL1 STRING_LITERAL2 STRING_LITERAL_LONG1 STRING_LITERAL_LONG2
%token <p_URI> PNAME_NS PNAME_LN IRIREF
%token <p_LANGTAG> LANGTAG

%type <p_trigDoc> trigDoc

%type <p_TTerm> subject object _object1 collection RDFLiteral literal NumericLiteral BooleanLiteral BlankNode blankNodePropertyList verb predicate blank
%type <p_URI> iri PrefixedName
// deepest typing for these productions:
// %type <p_TTerm> subject object collection
// %type <p_RDFLiteral> RDFLiteral literal
// %type <p_NumericRDFLiteral> NumericLiteral
// %type <p_BooleanRDFLiteral> BooleanLiteral
// %type <p_BNode> BlankNode blankNodePropertyList
// %type <p_URI> verb predicate iri PrefixedName
%type <p_string> String
%type <p_TTerm> _Qobject_E_Star
%type <p_uri_or_langtag> _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C
                         _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt

//%type <p_DefaultGraphPattern> ConstructTriples _Q_O_QGT_DOT_E_S_QConstructTriples_E_Opt_C_E_Opt _O_QGT_DOT_E_S_QConstructTriples_E_Opt_C _QConstructTriples_E_Opt TrigTemplate

/* END TokenBlock */

//%destructor { delete $$; } BlankNode

 /*** END Trig language tokens. ***/

%{
#include "TrigScanner.hpp"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lexWrapper

#include "RdfDB.hpp"
%}

%% /*** Grammar Rules ***/

 /*** BEGIN Trig language structure. ***/
// [1]    	trigDoc 	   ::=    	(directive | block)*
trigDoc:
    _Q_O_Qdirective_E_Or_Qblock_E_C_E_Star	{
	driver.root = driver.defaultBGP;
	// driver.root = $<p_DefaultGraphPattern>1;
    }
;

_O_Qdirective_E_Or_Qblock_E_C:
    directive	
  | block	
;

_Q_O_Qdirective_E_Or_Qblock_E_C_E_Star:
    
  | _Q_O_Qdirective_E_Or_Qblock_E_C_E_Star _O_Qdirective_E_Or_Qblock_E_C	
;

// [2]    	block 	   ::=    	directive | triplesOrGraph | wrappedGraph | "GRAPH" ( iri | BlankNode ) "{" (triplesBlock)? "}"
block:
    triplesOrGraph	
  | wrappedGraph	
  | {
	driver.curBGP = driver.db->ensureGraph(NULL);
	driver.neededBGP = NULL;
    } triples2	
  | IT_GRAPH labelOrSubject wrappedGraph	
;

// [3]    	triplesOrGraph  ::=    	labelOrSubject ( "{" (triplesBlock)? "}" | predicateObjectList "." )
triplesOrGraph:
    labelOrSubject _O_QwrappedGraph_E_Or_QpredicateObjectList_E_S_QGT_DOT_E_C	{
	driver.curSubject = NULL;
      }
;

_O_QwrappedGraph_E_Or_QpredicateObjectList_E_S_QGT_DOT_E_C:
    wrappedGraph	
  | {
	driver.curBGP = driver.db->ensureGraph(NULL);
	driver.neededBGP = NULL;
      } predicateObjectList GT_DOT	
;

triples2:
    blankNodePropertyList {
      driver.curSubject = $1;
    } _QpredicateObjectList_E_Opt GT_DOT	{
	driver.curSubject = NULL;
      }
  | collection {
      driver.curSubject = $1;
    } predicateObjectList GT_DOT	{
	driver.curSubject = NULL;
      }
;

_QpredicateObjectList_E_Opt:
    
  | predicateObjectList	
;

// [5]    	wrappedGraph 	   ::=    	"{" (triplesBlock)? "}"
wrappedGraph:
    GT_LCURLEY {
	driver.curBGP = driver.db->ensureGraph(driver.curSubject);
	driver.neededBGP = NULL;
      } _QtriplesBlock_E_Opt {
	  driver.curSubject = NULL;
      } GT_RCURLEY	
;

_QtriplesBlock_E_Opt:
    
  | triplesBlock	
;

// [11]    	triplesBlock 	   ::=    	triples ("." triplesBlock? )?
triplesBlock:
    triples _Q_O_QGT_DOT_E_S_QtriplesBlock_E_Opt_C_E_Opt	{
	driver.neededBGP = NULL;
    }
;

_O_QGT_DOT_E_S_QtriplesBlock_E_Opt_C:
    GT_DOT _QtriplesBlock_E_Opt	
;

_Q_O_QGT_DOT_E_S_QtriplesBlock_E_Opt_C_E_Opt:
    
  | _O_QGT_DOT_E_S_QtriplesBlock_E_Opt_C	
;

labelOrSubject:
    iri	{
      driver.curSubject = $1;
    }
  | BlankNode	{
      driver.curSubject = $1;
    }
;

// [6]    	directive 	   ::=    	prefixID | base | sparqlPrefix | sparqlBase
directive:
    prefixID	
  | base	
  | sparqlPrefix	
  | sparqlBase	
;

// [7]    	prefixID 	   ::=    	PREFIX PNAME_NS IRIREF "."
prefixID:
    AT_PREFIX {
	driver.ignorePrefix(true);
      } PNAME_NS {
	  driver.ignorePrefix(false);
      } IRIREF {
	  std::string prefix($3->getLexicalValue());
	  driver.addPrefix(prefix.substr(0, prefix.length()-1), $5);
      } GT_DOT	
;

// [8]    	base 		   ::=    	BASE IRIREF "."
base:
    AT_BASE IRIREF GT_DOT	{
	driver.setBase($2->getLexicalValue());
    }
;

// [9]    	sparqlBase 	   ::=    	SPARQL_BASE IRIREF
sparqlBase:
    IT_BASE IRIREF	{
	driver.setBase($2->getLexicalValue());
    }
;

// [10]    	sparqlPrefix 	   ::=    	SPARQL_PREFIX PNAME_NS IRIREF
sparqlPrefix:
    IT_PREFIX {
	driver.ignorePrefix(true);
      } PNAME_NS {
	  driver.ignorePrefix(false);
      } IRIREF	{
	  std::string prefix($3->getLexicalValue());
	  driver.addPrefix(prefix.substr(0, prefix.length()-1), $5);
      }
;

// [12]    	triples 	   ::=    	subject predicateObjectList | blankNodePropertyList predicateObjectList?
triples:
    subject {
	driver.curSubject = $1;
    } predicateObjectList	
  | blankNodePropertyList {
	driver.curSubject = $1;
    } _QpredicateObjectList_E_Opt	
;

// [14]    	predicateObjectList 	   ::=    	verb objectList ( ";" (verb objectList)? )*
predicateObjectList:
    verb objectList _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star	
;

_O_Qverb_E_S_QobjectList_E_C:
    verb objectList	
;

_Q_O_Qverb_E_S_QobjectList_E_C_E_Opt:
    
  | _O_Qverb_E_S_QobjectList_E_C	
;

_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C:
    GT_SEMI _Q_O_Qverb_E_S_QobjectList_E_C_E_Opt	
;

_Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star:
    
  | _Q_O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C_E_Star _O_QGT_SEMI_E_S_Qverb_E_S_QobjectList_E_Opt_C	
;

objectList:
    // object ( ',' object )*
    object _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star	
;

// ',' object
_O_QGT_COMMA_E_S_Qobject_E_C:
    GT_COMMA object	
;

// ( ',' object )*
_Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star:
    
  | _Q_O_QGT_COMMA_E_S_Qobject_E_C_E_Star _O_QGT_COMMA_E_S_Qobject_E_C	
;

verb:
    predicate	{
	$$ = $1;
	driver.curPredicate = $$;
    }
  | RDF_TYPE	{
	$$ = TTerm::RDF_type;
	driver.curPredicate = $$;
    }
;

subject:
    iri	{
	$$ = $1;
    }
  | blank	
;

predicate:
    iri	{
	$$ = $1;
    }
;

object:
    _object1	{
	if (!driver.curBGP)
	    driver.neededBGP = driver.curBGP = new DefaultGraphPattern();
	driver.curBGP->addTriplePattern(driver.atomFactory->getTriple(driver.curSubject, driver.curPredicate, $1));
	$$ = $1;
    }
;

_object1:
    iri	{
	$$ = $1;
    }
  | blank	
  | blankNodePropertyList	
  | literal	
;

literal:
    RDFLiteral	
  | NumericLiteral	
  | BooleanLiteral	
;

blank:
    BlankNode	
  | collection	
;

blankNodePropertyList:
    GT_LBRACKET {
	$<p_SubjectPredicatePair>$.subject = driver.curSubject;
	$<p_SubjectPredicatePair>$.predicate = driver.curPredicate;
	driver.curSubject = driver.createBNode();
      } predicateObjectList GT_RBRACKET	{
	  $$ = (BNode*)driver.curSubject; // could store w/ type in ctx..
	  driver.curSubject = $<p_SubjectPredicatePair>2.subject;
	  driver.curPredicate = $<p_SubjectPredicatePair>2.predicate;
      }
;

collection:
    // '(' object* ')'
    GT_LPAREN {
	$<p_SubjectPredicatePair>$.subject = driver.curSubject;
	$<p_SubjectPredicatePair>$.predicate = driver.curPredicate;
      } _Qobject_E_Star GT_RPAREN	{
	  if ($3 == NULL) {
	      $$ = TTerm::RDF_nil;
	  } else {
	      $$ = $3;
	      driver.curBGP->addTriplePattern
		  (driver.atomFactory->getTriple
		   (driver.curSubject, TTerm::RDF_rest, TTerm::RDF_nil));
	  }
	  driver.curSubject = $<p_SubjectPredicatePair>2.subject;
	  driver.curPredicate = $<p_SubjectPredicatePair>2.predicate;
      }
;

// object*
// $$ = the head, driver.curSubject = the tail
// final state:
//   $$=NULL means there were no elements.
//   otherwise add { curSubject rdf:rest rdf:nil }.
_Qobject_E_Star:
    {
	$$ = NULL;
    }
  | _Qobject_E_Star {
	const TTerm* nextTail = driver.createBNode();
	if ($1 == NULL) // on first element
	    $<p_TTerm>$ = nextTail;
	else		// on later elements
	    driver.curBGP->addTriplePattern
		(driver.atomFactory->getTriple
		 (driver.curSubject, TTerm::RDF_rest, nextTail));
	driver.curSubject = nextTail;
	driver.curPredicate = TTerm::RDF_first;
      } object	{
	  $$ = $<p_TTerm>2;
      }
;

NumericLiteral:
    INTEGER	
  | DECIMAL	
  | DOUBLE	
;

RDFLiteral:
    // String ( LANGTAG | ( '^^' iri ) )?
    String _Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt	{
	$$ = driver.getRDFLiteral(*$1, $2.uri, $2.langtag);
	delete $1;
    }
;

// LANGTAG | ( '^^' iri )
_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C:
    LANGTAG	{
	$$.uri = NULL;
	$$.langtag = $1;
    }
  | GT_DTYPE iri	{
	$$.uri = $2;
	$$.langtag = NULL;
    }
;

// ( LANGTAG | ( '^^' iri ) )?
_Q_O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C_E_Opt:
    {
	$$.uri = NULL;
	$$.langtag = NULL;
    }
  | _O_QLANGTAG_E_Or_QGT_DTYPE_E_S_Qiri_E_C	
;

BooleanLiteral:
    IT_true	
  | IT_false	
;

String:
    STRING_LITERAL1	
  | STRING_LITERAL2	
  | STRING_LITERAL_LONG1	
  | STRING_LITERAL_LONG2	
;

iri:
    IRIREF	
  | PrefixedName	
;

PrefixedName:
    PNAME_LN	
  | PNAME_NS	
;

BlankNode:
    BLANK_NODE_LABEL	
  | ANON	
;

 /*** END Trig language structure. ***/

%% /*** Additional Code ***/

void w3c_sw::TrigParser::error(const TrigParser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}

/* START Driver (@@ stand-alone would allow it to be shared with other parsers */

namespace w3c_sw {

void TrigDriver::parse (IStreamContext& in, RdfDB* db, BasicGraphPattern* bgp)
{
    // clear prefixes for nth run but keep them around for e.g. serialization.
    clearPrefixes();
    curSubject = curPredicate = NULL;

    if (db != NULL)
	setDB(db);
    if (bgp != NULL)
	setGraph(bgp);

    streamname = in.nameStr;

    TrigScanner scanner(this, in.p);
    scanner.set_debug(trace_scanning);
    this->lexer = &scanner;

    TrigParser parser(*this);
    parser.set_debug_level(trace_parsing);
    defaultBGP = curBGP ? curBGP : this->db->ensureGraph(NULL);
    parser.parse();
}

void TrigDriver::parse (IStreamContext& in, BasicGraphPattern* bgp) {
    parse(in, NULL, bgp);
}

void TrigDriver::parse (std::string turtleStr, RdfDB* db, BasicGraphPattern* bgp) {
    IStreamContext in(turtleStr.c_str(), IStreamContext::STRING);
    parse(in, db, bgp);
}

void TrigDriver::parse (std::string turtleStr, BasicGraphPattern* bgp) {
    IStreamContext in(turtleStr.c_str(), IStreamContext::STRING);
    parse(in, NULL, bgp);
}

} // namespace w3c_sw

/* END Driver */

