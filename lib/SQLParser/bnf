Statement ::= SelectUnion ';'? | Update (';' Update)* ';'?

Update ::= Create | Insert

Create ::= 'CREATE' 'TABLE' Relation '(' FieldOrKey (',' FieldOrKey)* ')' Param*;

Insert ::= 'INSERT' 'INTO' Relation AttrList? ('VALUES' ConstList | SelectUnion)

Param ::= (NAME | 'DEFAULT') ('=' NAME)?

FieldOrKey ::= Attribute ('INT' | 'INTEGER' | 'DOUBLE' | 'DATE' | 'DATETIME' | 'STRING' | 'VARCHAR') ('(' INTEGER ')')? LinkDetails*
             | ('CONSTRAINT' Attribute)? 'FOREIGN' 'KEY' AttrList 'REFERENCES' Relation AttrList
             | 'PRIMARY' 'KEY' AttrList
             | 'UNIQUE'? 'KEY' Attribute AttrList

LinkDetails ::= 'PRIMARY' 'KEY'
              | 'DEFAULT' Constant
              | 'NOT' 'NULL'

Constant ::= 'NULL'
           | String
           | NumericLiteral
           | BooleanLiteral

AttrList ::= '(' Attribute (',' Attribute)* ')'
ConstList ::= '(' Constant (',' Constant)* ')'

SelectUnion ::= Select ( 'UNION' Select ) *
Select ::= 'SELECT' AttributeList ( 'FROM' TableList ('WHERE' Expression)? )? ('LIMIT' INTEGER | 'ROWNUM' '<=' INTEGER)? ('OFFSET' INTEGER)?

AttributeList ::= NamedAttribute (',' NamedAttribute)* | '*'
NamedAttribute ::= Expression ( 'AS'? Attribute )?
FQAttribute ::= Relation '.' Attribute | Attribute
Attribute ::= NAME
Relation ::= NAME

TableList ::= TableAlias ( ('INNER' | ',' | 'LEFT' 'OUTER') 'JOIN' TableAlias ( 'ON' Expression )? )*
TableAlias ::= Relation ( 'AS'? Relation )?
            | '(' SelectUnion ')' 'AS' Relation

Expression ::= ConditionalOrExpression
ConditionalOrExpression ::= ConditionalAndExpression ( 'OR' ConditionalAndExpression )*
ConditionalAndExpression ::= ValueLogical ( 'AND' ValueLogical )*
ValueLogical ::= RelationalExpression
RelationalExpression ::= NumericExpression RightRelationalExpression?
RightRelationalExpression ::= '=' NumericExpression
                                           | '!=' NumericExpression
                                           | '<' NumericExpression
                                           | '>' NumericExpression
                                           | '<=' NumericExpression
                                           | '>=' NumericExpression
                                           | 'IS' 'NULL'
                                           | 'IS' 'NOT' 'NULL'
NumericExpression ::= AdditiveExpression
AdditiveExpression ::= MultiplicativeExpression ( '+' MultiplicativeExpression
                                                | '-' MultiplicativeExpression
                                                | NumericLiteralPositive
                                                | NumericLiteralNegative )*
MultiplicativeExpression ::= UnaryExpression ( '*' UnaryExpression | '/' UnaryExpression )*
UnaryExpression ::= '!' PrimaryExpression
                  | '+' PrimaryExpression
                  | '-' PrimaryExpression
                  | PrimaryExpression
PrimaryExpression ::= BrackettedExpression
                    | BuiltInCall
                    | String
                    | NumericLiteral
                    | BooleanLiteral
                    | FQAttribute
                    | 'NULL'
BrackettedExpression ::= '(' Expression ')'
BuiltInCall ::= 'CONCAT' '(' Expression (',' Expression)* ')'
              | 'LCASE' '(' Expression ')'
              | 'UCASE' '(' Expression ')'
              | 'REGEX' '(' Expression ',' Expression ')'
NumericLiteral    ::=       NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
NumericLiteralUnsigned    ::=       INTEGER | DECIMAL | DOUBLE
NumericLiteralPositive    ::=       INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
NumericLiteralNegative    ::=       INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
BooleanLiteral    ::=       'true' | 'false'
String    ::=       STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2


@terminals
NAME ::= [a-zA-Z_][a-zA-Z0-9_]* | "`" [a-zA-Z_][a-zA-Z0-9_]* "`"

INTEGER       ::=       [0-9]+
DECIMAL       ::=       [0-9]+ '.' [0-9]* | '.' [0-9]+
DOUBLE    ::=       [0-9]+ '.' [0-9]* EXPONENT | '.' ([0-9])+ EXPONENT | ([0-9])+ EXPONENT
INTEGER_POSITIVE      ::=       '+' INTEGER
DECIMAL_POSITIVE      ::=       '+' DECIMAL
DOUBLE_POSITIVE       ::=       '+' DOUBLE
INTEGER_NEGATIVE      ::=       '-' INTEGER
DECIMAL_NEGATIVE      ::=       '-' DECIMAL
DOUBLE_NEGATIVE       ::=       '-' DOUBLE
EXPONENT      ::=       [eE] [+-]? [0-9]+
STRING_LITERAL1       ::=       "'" ( ([^#x27#x5C#xA#xD]) | ECHAR )* "'"
STRING_LITERAL2       ::=       '"' ( ([^#x22#x5C#xA#xD]) | ECHAR )* '"'
STRING_LITERAL_LONG1      ::=       "'''" ( ( "'" | "''" )? ( [^'\\] | ECHAR ) )* "'''"
STRING_LITERAL_LONG2      ::=       '"""' ( ( '"' | '""' )? ( [^"\\] | ECHAR ) )* '"""'
ECHAR     ::=       '\\' [tbnrf\\"']

@pass: [ \t\r\n]+ | '--' [^\r\n]*
