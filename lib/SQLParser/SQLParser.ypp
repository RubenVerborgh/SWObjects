/* $Id: Langname_Parser.yy,v 1.8 2008/04/21 01:46:20 eric Exp SQLParser.yy 19 2007-08-19 20:36:24Z tb $ -*- mode: c++ -*- */
/** \file SQLParser.yy Contains the Bison parser source */

/*** yacc/bison Declarations ***/

/* Require bison 2.3 or later */
%require "2.3"

/* add debug output code to generated parser. disable this for release
 * versions. */
%debug

/* start symbol is named "start" */
%start SelectUnion

/* write out a header file containing the token defines */
%defines

/* use newer C++ skeleton file */
%skeleton "lalr1.cc"

/* namespace to enclose parser in */
%name-prefix="w3c_sw"

/* set the parser's class identifier */
%define "parser_class_name" "SQLParser"

/* keep track of the current position within the input */
%locations
%initial-action
{
    // initialize the initial location object
    @$.begin.filename = @$.end.filename = &driver.streamname;
};

/* The driver is passed by reference to the parser and to the scanner. This
 * provides a simple but effective pure interface, not relying on global
 * variables. */
%parse-param { class SQLDriver& driver }

/* verbose error messages */
%error-verbose

// %{ //  ##bison1
%code requires { // ##bison2
/* Bison seems to test inclusion with PARSER_HEADER_H, rather than something
 * which varies by parser_class_name . Overriding with define specific to
 * this parser.
 */
#endif /* !PARSER_HEADER_H */
#ifndef SQL_PARSER_HPP
#define SQL_PARSER_HPP

#include <fstream>
#include <iostream>
#include <sstream>
#include <vector>
#include <string.h>
#include "SWObjects.hpp" // for IStreamContext
#include "SQL.hpp"

#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define LINE std::cerr << __FILE__ "(" TOSTRING(__LINE__) "): warning LINE\n"

extern std::ostream* _Trace;

/* START ClassBlock */

class ProgramFlowException : public std::exception  {
private:
    const char* msg;
public:
    ProgramFlowException(const char* msg) : msg(msg) { }

    // This declaration is not useless:
    // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118

    // See comment in eh_exception.cc.
};
/* END ClassBlock */

namespace sql = w3c_sw::sql;


namespace w3c_sw {

/** The SQLDriver class brings together all components. It creates an instance of
 * the SQLParser and SQLScanner classes and connects them. Then the input stream is
 * fed into the scanner object and the parser gets it's token
 * sequence. Furthermore the driver object is available in the grammar rules as
 * a parameter. Therefore the driver class contains a reference to the
 * structure into which the parsed data is saved. */
class sqlContext {
public:
    ~sqlContext()
    {
    }
};

class SQLDriver
{
public:
    /// construct a new parser driver context
    SQLDriver(sqlContext& context);

    /// enable debug output in the flex scanner
    bool trace_scanning;

    /// enable debug output in the bison parser
    bool trace_parsing;

    /// stream name (file or input stream) used for error messages.
    std::string streamname;

    /** Invoke the scanner and parser for a stream.
     * @param in	input stream
     * @return		true if successfully parsed
     */
    bool parse(IStreamContext& in);

    // To demonstrate pure handling of parse errors, instead of
    // simply dumping them on the standard error output, we will pass
    // them to the driver using the following two member functions.

    /** Error handling with associated line number. This can be modified to
     * output the error e.g. to a dialog box. */
    void error(const class location& l, const std::string& m);

    /** General error handling. This can be modified to output the error
     * e.g. to a dialog box. */
    void error(const std::string& m);

    /** Pointer to the current lexer instance, this is used to connect the
     * parser to the scanner. It is used in the yylex macro. */
    class SQLScanner* lexer;

    /** Reference to the context filled during parsing of the expressions. */
    sqlContext& context;
    sql::SQLQuery* root;
};
    typedef struct {std::string* relation; sql::SQLQuery* subselect; std::string* alias;} l_TableAlias;
    typedef struct {sql::Join* join; const sql::Expression* expr;} l_JoinExpression;
    typedef struct {std::vector<sql::Join*>* joins; std::vector<const sql::Expression*>* exprs;} l_TableList;

} // namespace w3c_sw

// %} // ##bison1
} // ##bison2

 /*** BEGIN sql - Change the grammar's tokens below ***/

%union {
    /* Productions */
    std::string* p_NAME;
    sql::SQLQuery* p_Select;
    std::vector<sql::SQLQuery*>* p_Selects;
    // struct {std::vector<sql::Join*>* joins; sql::WhereConstraint* where;} p_fromWhere;
    std::vector<sql::AliasedSelect*>* p_AttributeList;
    sql::AliasedSelect* p_AliasedSelect;
    sql::AliasAttr* p_AliasAttr;
    l_TableAlias p_tableAlias;
    l_JoinExpression p_JoinExpression;
    sql::BooleanComparator* p_BooleanComparator;
    l_TableList p_TableList;
    const sql::Expression* p_Expression;
    std::vector<const sql::Expression*>* p_Expressions;

}

%{
#include "SQLScanner.hpp"
%}
%token			__EOF__	     0	"end of file"
/* START TokenBlock */
/* Terminals */
%token IT_SELECT IT_UNION IT_WHERE IT_FROM GT_TIMES GT_COMMA IT_AS GT_DOT
       IT_INNER IT_JOIN IT_ON GT_OR GT_AND
       GT_EQUAL GT_NEQUAL GT_LT GT_GT GT_LE GT_GE GT_PLUS GT_MINUS GT_DIVIDE
       GT_NOT GT_LPAREN GT_RPAREN IT_CONCAT IT_REGEX

%token <p_NAME> NAME

%token <p_Expression> INTEGER INTEGER_POSITIVE INTEGER_NEGATIVE
%token <p_Expression> DECIMAL DECIMAL_POSITIVE DECIMAL_NEGATIVE
%token <p_Expression> DOUBLE DOUBLE_POSITIVE DOUBLE_NEGATIVE
%token <p_Expression> STRING_LITERAL1 STRING_LITERAL2 STRING_LITERAL_LONG1 STRING_LITERAL_LONG2
%token <p_Expression> IT_true IT_false

/* Productions */
%type <p_NAME> Relation _O_QIT_AS_E_S_QRelation_E_C _Q_O_QIT_AS_E_S_QRelation_E_C_E_Opt Attribute _O_QIT_AS_E_S_QAttribute_E_C _Q_O_QIT_AS_E_S_QAttribute_E_C_E_Opt
%type <p_Select> SelectUnion Select _O_QIT_UNION_E_S_QSelect_E_C
%type <p_Selects> _Q_O_QIT_UNION_E_S_QSelect_E_C_E_Star
%type <p_Expression> _O_QIT_WHERE_E_S_QExpression_E_C _Q_O_QIT_WHERE_E_S_QExpression_E_C_E_Opt
	_O_QIT_ON_E_S_QExpression_E_C _Q_O_QIT_ON_E_S_QExpression_E_C_E_Opt
%type <p_TableList> TableList _Q_O_QIT_INNER_E_S_QIT_JOIN_E_S_QTableAlias_E_S_QIT_ON_E_S_QExpression_E_Opt_C_E_Star
	_O_QIT_FROM_E_S_QTableList_E_S_QIT_WHERE_E_S_QExpression_E_Opt_C
	_Q_O_QIT_FROM_E_S_QTableList_E_S_QIT_WHERE_E_S_QExpression_E_Opt_C_E_Opt
%type <p_AttributeList> AttributeList  _Q_O_QGT_COMMA_E_S_QNamedAttribute_E_C_E_Star
%type <p_AliasedSelect> _O_QGT_COMMA_E_S_QNamedAttribute_E_C NamedAttribute
%type <p_Expression> FQAttribute
%type <p_tableAlias> TableAlias
%type <p_JoinExpression> _O_QIT_INNER_E_S_QIT_JOIN_E_S_QTableAlias_E_S_QIT_ON_E_S_QExpression_E_Opt_C
%type <p_Expression> Expression ConditionalAndExpression ConditionalOrExpression _O_QGT_OR_E_S_QConditionalAndExpression_E_C _O_QGT_AND_E_S_QValueLogical_E_C ValueLogical RelationalExpression
%type <p_Expressions> _Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star _Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star
%type <p_BooleanComparator> _O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_C _Q_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_C_E_Opt
%type <p_Expression> NumericExpression
%type <p_Expression> AdditiveExpression
%type <p_Expression> _O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C _O_QGT_COMMA_E_S_QExpression_E_C
%type <p_Expressions> _Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C_E_Star _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star
%type <p_Expression> MultiplicativeExpression
%type <p_Expression> _O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C
%type <p_Expressions> _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star
%type <p_Expression> UnaryExpression
%type <p_Expression> PrimaryExpression
%type <p_Expression> BrackettedExpression
%type <p_Expression> BuiltInCall
%type <p_Expression> NumericLiteral
%type <p_Expression> NumericLiteralUnsigned
%type <p_Expression> NumericLiteralPositive
%type <p_Expression> NumericLiteralNegative
%type <p_Expression> BooleanLiteral
%type <p_Expression> String

/* END TokenBlock */

//%destructor { delete $$; } BlankNode

 /*** END sql - Change the grammar's tokens above ***/

%{
#include <stdarg.h>
#include "SQL.hpp"
#include "SQLScanner.hpp"

/* this "connects" the bison parser in the driver to the flex scanner class
 * object. it defines the yylex() function call to pull the next token from the
 * current lexer object of the driver context. */
#undef yylex
#define yylex driver.lexer->lex
%}

%% /*** Grammar Rules ***/

 /*** BEGIN sql - Change the grammar rules below ***/
SelectUnion:
    Select _Q_O_QIT_UNION_E_S_QSelect_E_C_E_Star	{
	if ($2->size() > 0) {
	    sql::SQLUnion* u = new sql::SQLUnion();
	    u->disjoints.push_back($1);
	    for (std::vector<sql::SQLQuery*>::const_iterator it = $2->begin();
		 it != $2->end(); ++it)
		u->disjoints.push_back(*it);
	    $$ = driver.root = u;
	} else
	    $$ = driver.root = $1;
	delete $2;
}
;

_O_QIT_UNION_E_S_QSelect_E_C:
    IT_UNION Select	{
    $$ = $2;
}
;

_Q_O_QIT_UNION_E_S_QSelect_E_C_E_Star:
    {
    $$ = new std::vector<sql::SQLQuery*>();
}

    | _Q_O_QIT_UNION_E_S_QSelect_E_C_E_Star _O_QIT_UNION_E_S_QSelect_E_C	{
    $1->push_back($2);
    $$ = $1;
}
;

Select:
    IT_SELECT AttributeList _Q_O_QIT_FROM_E_S_QTableList_E_S_QIT_WHERE_E_S_QExpression_E_Opt_C_E_Opt	{
	driver.root = $$ = new sql::SQLQuery($3.joins);
	delete $3.joins;
	for (std::vector<sql::AliasedSelect*>::const_iterator it = $2->begin(); it != $2->end(); ++it)
	    driver.root->selects.push_back(*it);
	delete $2;
	for (std::vector<const w3c_sw::sql::Expression*>::const_iterator it = $3.exprs->begin();
	     it != $3.exprs->end(); ++it)
	    driver.root->constraints.push_back(*it);
	    // LINE << "exprs: " << (*it)->toString();
	delete $3.exprs;
}
;

_O_QIT_WHERE_E_S_QExpression_E_C:
    IT_WHERE Expression	{
    $$ = $2;
}
;

_Q_O_QIT_WHERE_E_S_QExpression_E_C_E_Opt:
    {
    $$ = NULL;
}

    | _O_QIT_WHERE_E_S_QExpression_E_C
;

_O_QIT_FROM_E_S_QTableList_E_S_QIT_WHERE_E_S_QExpression_E_Opt_C:
    IT_FROM TableList _Q_O_QIT_WHERE_E_S_QExpression_E_C_E_Opt	{
	$$.joins = $2.joins;
	$$.exprs = $2.exprs;
	if ($3 != NULL)
	    $$.exprs->push_back($3);
}
;

_Q_O_QIT_FROM_E_S_QTableList_E_S_QIT_WHERE_E_S_QExpression_E_Opt_C_E_Opt:
    {
    $$.joins = new std::vector<sql::Join*>();;
    $$.exprs = new std::vector<const sql::Expression*>();;
}

    | _O_QIT_FROM_E_S_QTableList_E_S_QIT_WHERE_E_S_QExpression_E_Opt_C
;

AttributeList:
    NamedAttribute _Q_O_QGT_COMMA_E_S_QNamedAttribute_E_C_E_Star	{
	// no $2->push_front($1);
	$$ = new std::vector<sql::AliasedSelect*>();
	$$->push_back($1);
	for (std::vector<sql::AliasedSelect*>::iterator it = $2->begin();
	     it != $2->end(); ++it)
	    $$->push_back(*it);
	$2->clear();
	delete $2;
}

    | GT_TIMES	{
	$$ = new std::vector<sql::AliasedSelect*>();
}
;

_O_QGT_COMMA_E_S_QNamedAttribute_E_C:
    GT_COMMA NamedAttribute	{
	$$ = $2;
}
;

_Q_O_QGT_COMMA_E_S_QNamedAttribute_E_C_E_Star:
    {
	$$ = new std::vector<sql::AliasedSelect*>();
}

    | _Q_O_QGT_COMMA_E_S_QNamedAttribute_E_C_E_Star _O_QGT_COMMA_E_S_QNamedAttribute_E_C	{
    $1->push_back($2);
    $$ = $1;
}
;

NamedAttribute:
    Expression _Q_O_QIT_AS_E_S_QAttribute_E_C_E_Opt	{
	$$ = new sql::AliasedSelect($1, $2 ? *$2 : $1->toString());
	delete $2;
}
;

_O_QIT_AS_E_S_QAttribute_E_C:
    IT_AS Attribute	{
    $$ = $2;
}
;

_Q_O_QIT_AS_E_S_QAttribute_E_C_E_Opt:
    {
    $$ = NULL;
}

    | _O_QIT_AS_E_S_QAttribute_E_C	{
    $$ = $1;
}
;

FQAttribute:
    Relation GT_DOT Attribute	{
	$$ = new sql::AliasAttrConstraint(sql::AliasAttr(*$1, *$3));
	delete $1;
	delete $3;
}
;

Attribute:
      NAME
;

Relation:
    NAME
;

TableList:
    TableAlias _Q_O_QIT_INNER_E_S_QIT_JOIN_E_S_QTableAlias_E_S_QIT_ON_E_S_QExpression_E_Opt_C_E_Star	{
	$$.joins = new std::vector<sql::Join*>();
	$$.joins->push_back($1.relation != NULL
			    ? (sql::Join*)new sql::TableJoin(*$1.relation, *$1.alias, false)
			    : (sql::Join*)new sql::SubqueryJoin($1.subselect, *$1.alias, false));
	delete $1.relation;
	delete $1.alias;
	for (std::vector<sql::Join*>::iterator it = $2.joins->begin();
	     it != $2.joins->end(); ++it)
	    $$.joins->push_back(*it);
	$$.exprs = $2.exprs;
	delete $2.joins;
}
;

_O_QIT_ON_E_S_QExpression_E_C:
    IT_ON Expression	{
    $$ = $2;
}
;

_Q_O_QIT_ON_E_S_QExpression_E_C_E_Opt:
    {
    $$ = NULL;
}

    | _O_QIT_ON_E_S_QExpression_E_C	{
    $$ = $1;
}
;

_O_QIT_INNER_E_S_QIT_JOIN_E_S_QTableAlias_E_S_QIT_ON_E_S_QExpression_E_Opt_C:
    IT_INNER IT_JOIN TableAlias _Q_O_QIT_ON_E_S_QExpression_E_C_E_Opt	{
	if ($3.relation != NULL) {
	    $$.join = new sql::TableJoin(*$3.relation, *$3.alias, false);
	    delete $3.relation;
	} else {
	    $$.join = new sql::SubqueryJoin($3.subselect, *$3.alias, false);
	}
	delete $3.alias;
	$$.expr = $4;
}
;

_Q_O_QIT_INNER_E_S_QIT_JOIN_E_S_QTableAlias_E_S_QIT_ON_E_S_QExpression_E_Opt_C_E_Star:
    {
	$$.joins = new std::vector<sql::Join*>();
	$$.exprs = new std::vector<const sql::Expression*>();
}

    | _Q_O_QIT_INNER_E_S_QIT_JOIN_E_S_QTableAlias_E_S_QIT_ON_E_S_QExpression_E_Opt_C_E_Star _O_QIT_INNER_E_S_QIT_JOIN_E_S_QTableAlias_E_S_QIT_ON_E_S_QExpression_E_Opt_C	{
    $1.joins->push_back($2.join);
    if ($2.expr != NULL)
	$1.exprs->push_back($2.expr);
    $$ = $1;
}
;

TableAlias:
    Relation _Q_O_QIT_AS_E_S_QRelation_E_C_E_Opt	{
	$$.relation = $1;
	$$.subselect = NULL;
	$$.alias = $2 ? $2 : new std::string(*$1);
}
    | GT_LPAREN SelectUnion GT_RPAREN IT_AS Relation	{
	$$.relation = NULL;
	$$.subselect = $2;
	$$.alias = $5;
    }
;

_O_QIT_AS_E_S_QRelation_E_C:
    IT_AS Relation	{
    $$ = $2;
}
;

_Q_O_QIT_AS_E_S_QRelation_E_C_E_Opt:
    {
    $$ = NULL;
}

    | _O_QIT_AS_E_S_QRelation_E_C	{
    $$ = $1;
}
;

Expression:
    ConditionalOrExpression	
;

ConditionalOrExpression:
    // ConditionalAndExpression ( '||' ConditionalAndExpression )*
    ConditionalAndExpression _Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star	{
	if ($2->size() > 0) {
	    sql::JunctionConstraint* t = new sql::DisjunctionConstraint();
	    t->constraints.push_back($1);
	    for (std::vector<const sql::Expression*>::const_iterator it = $2->begin();
		 it != $2->end(); ++it)
		t->constraints.push_back(*it);
	    $$ = t;
	} else
	    $$ = $1;
	delete $2;
    }
;

// '||' ConditionalAndExpression
_O_QGT_OR_E_S_QConditionalAndExpression_E_C:
    GT_OR ConditionalAndExpression	{
	$$ = $2;
    }
;

// ( '||' ConditionalAndExpression )*
_Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star:
    {
	$$ = new std::vector<const sql::Expression*>();
    }
  | _Q_O_QGT_OR_E_S_QConditionalAndExpression_E_C_E_Star _O_QGT_OR_E_S_QConditionalAndExpression_E_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

ConditionalAndExpression:
    // ValueLogical ( '&&' ValueLogical )*
    ValueLogical _Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star	{
	if ($2->size() > 0) {
	    sql::JunctionConstraint* t = new sql::ConjunctionConstraint();
	    t->constraints.push_back($1);
	    for (std::vector<const sql::Expression*>::const_iterator it = $2->begin();
		 it != $2->end(); ++it)
		t->constraints.push_back(*it);
	    $$ = t;
	} else
	    $$ = $1;
	delete $2;
    }
;

// '&&' ValueLogical
_O_QGT_AND_E_S_QValueLogical_E_C:
    GT_AND ValueLogical	{
	$$ = $2;
    }
;

// ( '&&' ValueLogical )*
_Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star:
    {
	$$ = new std::vector<const sql::Expression*>();
    }
  | _Q_O_QGT_AND_E_S_QValueLogical_E_C_E_Star _O_QGT_AND_E_S_QValueLogical_E_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

ValueLogical:
    RelationalExpression	
;

RelationalExpression:
    // NumericExpression ( '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression )?
    NumericExpression _Q_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_C_E_Opt	{
	if ($2) {
	    $2->setLeftParm($1);
	    $$ = $2; // !!!
	} else
	    $$ = $1;
    }
;

// '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression
_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_C:
    GT_EQUAL NumericExpression	{
	$$ = new sql::BooleanEQ($2);
    }
  | GT_NEQUAL NumericExpression	{
	$$ = new sql::BooleanNE($2);
    }
  | GT_LT NumericExpression	{
	$$ = new sql::BooleanLT($2);
    }
  | GT_GT NumericExpression	{
	$$ = new sql::BooleanGT($2);
    }
  | GT_LE NumericExpression	{
    $$ = new sql::BooleanLE($2);
    }
  | GT_GE NumericExpression	{
	$$ = new sql::BooleanGE($2);
    }
;

// ( '=' NumericExpression | '!=' NumericExpression | '<' NumericExpression | '>' NumericExpression | '<=' NumericExpression | '>=' NumericExpression )?
_Q_O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_C_E_Opt:
    {
	$$ = NULL;
    }

  | _O_QGT_EQUAL_E_S_QNumericExpression_E_Or_QGT_NEQUAL_E_S_QNumericExpression_E_Or_QGT_LT_E_S_QNumericExpression_E_Or_QGT_GT_E_S_QNumericExpression_E_Or_QGT_LE_E_S_QNumericExpression_E_Or_QGT_GE_E_S_QNumericExpression_E_C	
;

NumericExpression:
    AdditiveExpression	
;

AdditiveExpression:
    // MultiplicativeExpression ( '+' MultiplicativeExpression | '-' MultiplicativeExpression | NumericLiteralPositive | NumericLiteralNegative )*
    MultiplicativeExpression _Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C_E_Star	{
	$$ = $2->size() > 0
	    ? NULL // !!! new sql::ArithmeticSum($1, $2)
	    : $1;
	$2->clear();
	delete $2;
    }
;

// '+' MultiplicativeExpression | '-' MultiplicativeExpression | NumericLiteralPositive | NumericLiteralNegative
_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C:
    GT_PLUS MultiplicativeExpression	{
	$$ = $2;
    }
  | GT_MINUS MultiplicativeExpression	{
	$$ = NULL; // !! new sql::ArithmeticNegation($2);
    }
  | NumericLiteralPositive	{
	$$ = NULL; // !! new sql::NumberExpression($1);
    }
  | NumericLiteralNegative	{
	$$ = NULL; // !! new sql::NumberExpression($1);
    }
;

// ( '+' MultiplicativeExpression | '-' MultiplicativeExpression | NumericLiteralPositive | NumericLiteralNegative )*
_Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C_E_Star:
    {
	$$ = new std::vector<const sql::Expression*>();
    }
  | _Q_O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C_E_Star _O_QGT_PLUS_E_S_QMultiplicativeExpression_E_Or_QGT_MINUS_E_S_QMultiplicativeExpression_E_Or_QNumericLiteralPositive_E_Or_QNumericLiteralNegative_E_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

MultiplicativeExpression:
    // UnaryExpression ( '*' UnaryExpression | '/' UnaryExpression )*
    UnaryExpression _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star	{
	$$ = $2->size() > 0 ? NULL : $1; // !!! new sql::ArithmeticProduct($1, $2) : $1;
	$2->clear();
	delete $2;
    }
;

// '*' UnaryExpression | '/' UnaryExpression
_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C:
    GT_TIMES UnaryExpression	{
	$$ = $2;
    }
  | GT_DIVIDE UnaryExpression	{
	$$ = NULL; // !! new sql::ArithmeticInverse($2);
    }
;

// ( '*' UnaryExpression | '/' UnaryExpression )*
_Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star:
    {
	$$ = new std::vector<const sql::Expression*>();
    }
  | _Q_O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C_E_Star _O_QGT_TIMES_E_S_QUnaryExpression_E_Or_QGT_DIVIDE_E_S_QUnaryExpression_E_C	{
	$1->push_back($2);
	$$ = $1;
    }
;

UnaryExpression:
    GT_NOT PrimaryExpression	{
	$$ = NULL; // !! new sql::BooleanNegation($2);
    }
  | GT_PLUS PrimaryExpression	{
	$$ = $2;
    }
  | GT_MINUS PrimaryExpression	{
	$$ = NULL; // !! new sql::ArithmeticNegation($2);
    }
  | PrimaryExpression	
;

PrimaryExpression:
      BrackettedExpression
    | BuiltInCall
    | String
    | NumericLiteral
    | BooleanLiteral
    | FQAttribute
;

BrackettedExpression:
    GT_LPAREN Expression GT_RPAREN	{
    $$ = $2;
}
;

BuiltInCall:
    IT_CONCAT GT_LPAREN Expression _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star GT_RPAREN	{
	std::vector<const sql::Expression*> args;
	args.push_back($3);
	for (std::vector<const sql::Expression*>::const_iterator it = $4->begin();
	     it != $4->end(); ++it)
	    args.push_back(*it);
	$$ = new sql::ConcatConstraint(&args);
	delete $4;
}
  |
    // 'REGEX' '(' Expression ',' Expression ( ',' Expression )? ')'
    IT_REGEX GT_LPAREN Expression GT_COMMA Expression GT_RPAREN	{
	$$ = new sql::RegexConstraint($3, $5);
    }
;

_O_QGT_COMMA_E_S_QExpression_E_C:
    GT_COMMA Expression	{
    $$ = $2;
}
;

_Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star:
    {
	$$ = new std::vector<const sql::Expression*>();
}

    | _Q_O_QGT_COMMA_E_S_QExpression_E_C_E_Star _O_QGT_COMMA_E_S_QExpression_E_C	{
    $1->push_back($2);
    $$ = $1;
}
;

NumericLiteral:
      NumericLiteralUnsigned
    | NumericLiteralPositive
    | NumericLiteralNegative
;

NumericLiteralUnsigned:
      INTEGER
    | DECIMAL
    | DOUBLE
;

NumericLiteralPositive:
      INTEGER_POSITIVE
    | DECIMAL_POSITIVE
    | DOUBLE_POSITIVE
;

NumericLiteralNegative:
      INTEGER_NEGATIVE
    | DECIMAL_NEGATIVE
    | DOUBLE_NEGATIVE
;

BooleanLiteral:
      IT_true
    | IT_false
;

String:
      STRING_LITERAL1
    | STRING_LITERAL2
    | STRING_LITERAL_LONG1
    | STRING_LITERAL_LONG2
;

 /*** END sql - Change the grammar rules above ***/

%% /*** Additional Code ***/

void w3c_sw::SQLParser::error(const SQLParser::location_type& l,
			    const std::string& m)
{
    driver.error(l, m);
}

/* START SQLDriver (@@ stand-alone would allow it to be shared with other parsers */

namespace w3c_sw {

SQLDriver::SQLDriver(class sqlContext& _context)
    : trace_scanning(false),
      trace_parsing(false),
      context(_context)
{
}

bool SQLDriver::parse (IStreamContext& in)
{
    streamname = in.nameStr;

    SQLScanner scanner(this, in.p);
    scanner.set_debug(trace_scanning);
    lexer = &scanner;

    SQLParser parser(*this);
    parser.set_debug_level(trace_parsing);
    return (parser.parse());
}

void SQLDriver::error (const class location& l,
		   const std::string& m)
{
    std::stringstream s;
    s << l << ": " << m;
    throw s.str();
}

void SQLDriver::error (const std::string& m)
{
    throw m;
}

} // namespace w3c_sw

/* END SQLDriver */
