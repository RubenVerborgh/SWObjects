#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1367] =
    {   0,
        0,    0,  180,  178,    2,    1,    1,   71,  178,    2,
      178,  178,  178,    9,   10,   20,   70,   11,   88,    4,
       67,  159,  153,   38,   82,    3,   83,   69,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
       72,   73,   68,  178,   66,  178,  178,    7,    5,    8,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,    2,
        1,   81,    0,  169,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  157,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   80,    0,  168,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  172,  177,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  162,   37,    0,  165,   12,  160,
      160,  159,    0,  154,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   84,  152,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   85,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  158,    0,    0,
      153,    0,    0,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  129,   86,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       46,  119,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  173,  149,    0,    0,    0,   79,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  169,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
      157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  157,  157,  157,  157,  157,  157,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  168,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  177,  177,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  177,  177,  177,  177,  177,
      177,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  174,  163,  163,    0,  166,  166,
        0,    0,  160,    0,    0,  161,  154,    0,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  154,  154,  154,  154,  154,  154,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  156,  156,  156,  156,  156,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,   45,   58,   77,   31,   23,  146,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  114,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   94,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  145,    0,    0,  144,    0,    0,    0,   87,  120,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   89,    0,  143,
        0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
        0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   13,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,  157,  157,  157,  157,  157,
      157,  157,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  157,  157,  157,  157,  157,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  177,
      177,  177,  177,  177,  177,  177,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  177,

      177,  177,  177,  177,    0,    0,    0,  163,    0,    0,
      164,    0,  166,    0,    0,  167,    0,  161,    0,  161,
      154,  154,  154,  154,  154,  154,  154,  154,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  154,  154,  154,  154,  154,    0,    0,    0,
        0,    0,    0,  156,  156,  156,  156,  156,  156,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  156,  156,  156,  156,  156,    0,    0,
      158,    0,    0,    0,    0,    0,    0,    0,   14,   62,
        0,    0,   99,    0,    0,    0,    0,    0,   48,    0,

        0,    0,    0,    0,   32,    0,   43,    0,   76,    0,
        0,    0,   24,    0,    0,    0,    0,    0,   40,    0,
        0,    0,    0,    0,   90,    0,    0,   39,    0,    0,
        0,    0,   47,    0,    0,    0,    0,    0,    0,   97,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  121,    0,   52,  112,
      155,    0,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  155,  155,  155,  155,  155,

      155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  150,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  157,
      157,  157,  157,  157,    0,    0,  157,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  177,  177,  177,
      177,  177,    0,    0,  177,    0,  164,    0,  164,    0,
      167,    0,  167,  154,  154,  154,  154,  154,    0,    0,
      154,  156,  156,  156,  156,  156,    0,    0,  156,    0,
        0,   96,   93,   41,    0,    0,    0,    0,  141,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  100,   57,

       27,    0,  115,    0,    0,  133,    0,    0,  134,    0,
      105,   33,  123,    0,   63,    0,  113,   25,    0,    0,
       30,    0,   59,    0,  138,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,    0,    0,    0,    0,    0,    0,    0,  104,   36,
       64,    0,   55,   26,  155,  155,  155,  155,  155,  155,
      155,  155,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  155,  155,  155,  155,
      155,    0,    0,  151,    0,    0,  171,    0,    0,    0,
        0,  157,  170,    0,    0,    0,    0,  177,  154,  156,

        0,    0,  102,    0,    0,   44,    0,    0,   53,    0,
        0,    0,  140,   65,    0,   29,   54,    0,    0,    0,
        0,    0,    0,   34,    0,   15,    0,    0,  147,    0,
       16,    0,    0,  124,    0,    0,    0,   42,   75,    0,
        0,    0,    0,  103,    0,    0,  139,    0,    0,  155,
      155,  155,  155,  155,    0,    0,  155,    0,  175,    0,
        0,  176,    0,    0,    0,    0,    0,    0,   56,    0,
        0,    0,    0,    0,    0,  135,    0,    0,    0,   74,
      116,    0,   18,    0,  117,    0,   61,    0,    0,    0,
        0,    0,  109,  130,    0,  122,    0,    0,  155,    0,

        0,   35,  128,    0,  107,   92,    0,    0,   22,   17,
        0,    0,    0,    0,    0,    0,   60,  132,    0,  125,
      126,  127,  111,    0,    0,  118,    0,    0,    0,   21,
        0,    0,    0,    0,    0,  136,  137,    0,  148,  110,
      108,   78,    0,    0,    0,    0,    0,    0,    0,    0,
       50,    0,    0,    0,   49,   91,   51,    0,  142,    0,
        0,    0,    0,    0,  106,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   10,   10,   94,   95,   96,
       97,   97,   97,   98,   99,   99,   99,   99,   99,  100,
      101,   99,  102,  103,  104,  105,  104,  106,  104,  104,
      107,  108,  109,  109,  109,  109,  109,  109,  109,  110,
      110,  110,  110,  111,  111,  111,  111,  111,  111,  111,
      111,  112,  111,  111,  111,  113,  113,  113,  113,  114,
      113,  113,  115,  116,  116,  116,  116,  116,  116,  117,
      118,  119,  119,  120,  121,  122,  122,  122,  122,  122,

      122,  122,  122,  123,  124,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  126,  127,  128,  129,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  132,  133,  134,
      135,  135,  135,  136,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119
    } ;

static yyconst flex_int32_t yy_meta[137] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    3,    3,
        1,    3,    3,    3,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        3,    1,    3,    1,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    7,    7,    7,    7,    7,    7,    7,

        7,    8,    7,    7,    7,    7,    9,    7,    7,    7,
        7,    7,    7,    7,    9,    7,   10,   11,   12,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1713] =
    {   0,
        0,    0, 1962, 9675,  135, 9675, 1934, 1872,  134,   36,
      250, 1867,  374,  141, 9675,  490,  155, 9675,  166,  179,
     9675,  368,  605, 9675,  709, 9675, 1840,  825,    0,  943,
      363,  706, 1043, 1084, 1113, 1154,  378, 1202,  731, 1253,
     1298, 1313, 1361, 1402, 1427, 1478, 1172, 1521, 1361, 1539,
      145, 9675, 1766, 1652,    0, 1574, 1595, 9675, 1554, 9675,
        0,    0,  115,  124,    0,  114,    0,  126,  124,    0,
      133,    0,  356, 1549,    0, 1592,  168, 1599,    0,  137,
     9675, 9675, 1711, 1635,  742,    0,    0,    0,  367,    0,
     1625,    0, 1632,    0, 1006, 1654,    0,    0,    0, 1200,

        0, 1697,    0, 1745,    0, 1324, 1843,    0,    0, 1441,
     1663,    0,  373,    0,  290,  406,    0, 1704,    0, 1060,
     1547,    0, 1885,  523, 1892,    0, 9675, 1999, 1613, 2005,
        0,    0,    0, 1908,    0, 1933,    0, 1940,    0, 1996,
      791, 9675, 2115,    0,    0, 2008, 2157,    0,  741,    0,
      291,  651,    0, 2150,    0, 1965, 1526,    0, 2175,  862,
     2182,    0,  135, 2280, 2290, 9675, 2298, 2310, 9675, 2318,
     2341, 2351, 2371, 2404,    0,    0, 2306, 2318,    0, 1030,
        0,  294, 1070,    0, 2430,    0, 2455, 1525,    0, 2457,
     1152, 2470,    0, 2490, 2534, 9675,    0,    0,    0, 2483,

        0, 2577,    0, 2584,    0, 2533, 9675, 2682,    0,    0,
     2543, 2724,    0, 1385,    0,  296, 1162,    0, 2717,    0,
     2742, 1497,    0, 2744, 1244, 2757,    0, 1569, 2858, 1555,
     2973,    0,  231,  272,  265,  254,  380,  381, 1486,    0,
     3015,    0, 3024,    0, 1653, 1434,    0,  326,  352, 1694,
        0, 3017,    0, 3042, 1452,    0, 3044, 1274, 3057,    0,
      382,  414,  473,  496,    0,  508,  514, 3140,  543,  693,
     1525,  556,  560,  628,  624,  622,  694,  701, 1048,  704,
      706,    0,  718,  842, 3141,  838,  852,  841,  912,  946,
     1518,  957,  957, 1032,  959, 1032, 1044, 1040, 1058, 1094,

     1092, 1175, 1094, 1111, 1410, 1145, 1147, 1168, 1181, 1150,
        0,    0, 1164, 1542, 1161, 1209, 1224, 1234, 1239, 1258,
     1871, 9675, 9675, 3206, 1451, 1424, 9675,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97, 1710,    0, 1403,
      716,    0, 1379,    0,    0,    0, 1998,    0,    0, 9675,
     3335,    0, 1409,    0,    0,    0,    0,    0,    0,    0,
        0, 1407,    0,    0,    0,    0,    0,    0,    0, 3451,
        0, 1374,    0, 3103,    0, 3249,    0, 2031, 1338,    0,
      353, 1558,    0, 3242,    0, 3122, 1356,    0, 3267, 1640,
     3274,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      134, 2238,    0,    0, 1317,    0,    0,    0, 2320,    0,
        0, 9675, 3575,    0, 1346,    0,    0,    0,    0,    0,
        0,    0, 3691,    0, 1301,    0, 3304,    0, 3313,    0,
     2489, 1279,    0,  359, 1950,    0, 3306,    0, 3331, 1234,
        0, 3494, 2271, 3501,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  269, 2533,    0,    0, 1211,    0,    0,
        0, 2598,    0,    0, 1268, 3599, 3608, 3628, 3806, 3814,
     3658, 3834, 3842, 3865, 3406, 3636, 3895,    0,    0, 1188,
        0, 3800,    0, 3809,    0, 2775, 1157,    0,  692,  708,
     2889,    0, 3921,    0, 3946, 1176,    0, 3948, 3068, 3961,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  320,
     3096,    0,    0, 1167,    0,    0,    0, 3325,    0,    0,
        0, 1197,    0,    0,    0,    0,    0,    0,    0, 4059,
        0, 1131,    0, 4101,    0, 4110,    0, 3367, 1104,    0,
      713, 3336,    0, 4103,    0, 4128, 1119,    0, 4130, 3576,
     4143,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      624, 3607,    0,    0, 1115,    0,    0,    0, 3811,    0,
        0,    0, 4244,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1207, 3975,    0,    0, 1108,    0,    0,    0, 4161,    0,

        0, 1256, 1260, 1262, 1291, 1294, 1307, 1297, 1599, 1287,
     1304, 1325, 1367,    0, 1370, 1367, 1388, 1375, 1401, 1410,
     1412, 1422, 1432, 1439, 1472, 1472, 1469, 1482, 1513, 1527,
     1519,    0, 1524, 1533, 1583, 1575, 1580, 1591, 1581, 1592,
     1615,    0, 1171, 1840, 1850, 1852, 2029, 2030,    0,    0,
     2035, 2132, 2137, 2137, 2130, 2288, 2354, 2425, 2417, 4336,
     2417, 2428, 2707, 2688, 1166, 2705, 2694, 4344, 2866,    0,
     2880, 2868, 2882, 2984, 2983,    0, 2987, 2998, 3102, 3134,
     3140, 4412,    0,    0, 4454, 4463,    0, 4287,    0, 1180,
     3527,    0, 4456,    0, 4328, 1064,    0, 4481, 3760, 4488,

        0, 1073, 1069,    0,    0,    0, 1008, 1007,    0,    0,
        0,    0,    0,    0, 4600, 4730, 4601,    0,    0,    0,
     4504,    0, 4529,    0, 4536,    0, 4592, 4860,    0,    0,
        0, 4636,    0,    0,    0, 4976,    0,    0,    0,    0,
        0,    0,    0,    0, 1411, 4542,    0,    0, 1038,    0,
        0,    0, 4560,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5100, 5225, 4732,    0,    0,    0, 4593,    0,
     4679,    0, 4765,    0, 4600, 5350,    0,    0,    0, 5466,
        0,    0,    0,    0,    0,    0,    0,    0, 3123, 4599,
        0,    0, 1036,    0,    0,    0, 4632,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 4797, 4863, 4812, 4871,
     4883, 4902, 5093, 4916, 4924, 4932, 4942, 5101, 5113, 5121,
     5584,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4289, 4691,    0,    0, 1014,    0,    0,    0, 4728,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5062,
        0,    0,    0, 5699,    0,    0,    0,    0,    0,    0,
        0,    0, 4294, 4799,    0,    0,  999,    0,    0,    0,
     4858,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1073, 5817,    0,    0,    0,    0,    0,    0,    0, 3196,
     3227, 3229,    0, 3217, 3472, 3477, 3460, 3479,    0, 3584,

     3698, 3699, 3699, 3701, 3762, 3779,    0, 3808,    0, 3794,
     3809, 3833,    0, 3913, 3906, 3909, 3906, 4068,    0, 4085,
     4078, 4069, 4257, 4262, 4259, 4268, 4309,    0, 1063, 4345,
     4420, 4343,    0, 4349, 4356, 4348, 4394, 4431, 4742,    0,
     4759, 4743, 4778, 4847, 4930, 4930, 4970, 4958, 4993, 2051,
     4990, 5076, 5090, 5111, 5115, 5121, 5135, 5119, 5119, 5122,
     5117, 5138, 5138, 5161, 5172, 5170,    0, 5173,    0,    0,
     5935,    0,    0,  968,    0, 5150,    0, 5159,    0, 5039,
      848,    0, 1563, 3079, 5149,    0, 5158,    0, 5183,  863,
        0, 5207, 5168, 5260,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  718, 5175,    0,    0,  851,    0,    0,
        0, 5204,    0,    0, 6053,  874, 5285, 5290,  790, 6182,
        0,  762,    0,    0,    0,    0,    0,    0,    0, 6298,
        0,    0,    0,    0,    0,    0,    0, 6422,    0,  743,
        0,    0,    0,    0,    0,    0,    0, 6538,    0,    0,
        0,    0,    0,    0,    0, 5307, 5392, 5400, 5408, 5416,
     5432, 6169, 6177, 6656,    0,    0,    0,    0,    0,    0,
        0, 6771,    0,    0,    0,    0,    0,    0,    0, 6889,
     5245,    0,    0,    0, 5242, 5327, 5413, 5422,    0, 5427,
     5410, 5451, 5460, 5483, 5480, 5545, 5536, 5564,    0,    0,

      738, 5575,    0, 5564, 5596,    0, 5663, 5690,    0, 5695,
        0,    0, 9675, 5680,    0, 5723,    0,    0, 5738, 5769,
        0, 5791,    0, 5810,    0,    0, 5811, 5838, 5897, 5913,
     5932, 5931,  785,  753,  735,  735, 5942, 6001, 6031, 6045,
        0, 6048, 6065, 6136, 6170, 6163, 6156, 6159,    0,    0,
        0, 6170,    0,    0, 7007,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4564, 5223,    0,    0,  656,
        0,    0,    0, 5332,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4567, 6117, 9675, 7136,    0,    0,
        0, 7252, 9675, 7376,    0,    0,    0, 7492, 7610, 7725,

     6170, 6175,    0, 6161, 6168,    0, 6167, 6165, 2011, 6183,
     6183,  736,    0,    0, 6184,    0, 3391, 6177, 6172, 6174,
     6173, 6175, 6176,    0, 6194,    0, 6193, 6181,    0, 6181,
        0, 6181, 6201, 9675,  710,  703,  599,    0,    0, 6205,
     6205, 6208, 6224,    0, 6215, 6229,    0, 6220, 6249,    0,
        0,    0,    0,    0,    0,    0,    0,  397,    0,  347,
      311,    0,  296, 6276, 6290, 6294, 6308, 6377,    0, 6433,
     6381, 6376,  339, 6389, 6438,    0, 6408, 6401, 6408,    0,
        0, 6401,    0, 6401,    0, 6400,    0,  376,  370,  361,
     6400, 6401,    0,    0, 6401,    0, 6416, 6417,    0, 6397,

     6402,    0,    0, 6404,    0,    0, 6423, 6420,    0,    0,
      332, 6415, 6429, 6421, 6432, 6428,    0,    0, 6447, 9675,
     9675, 9675,    0, 6464, 6452,    0, 6467, 5056, 6178,    0,
     6455, 6497, 6497, 6503, 6515,    0,    0, 6530,    0,    0,
        0,    0,  157,  125, 6536, 6549, 6607, 6625, 6652, 6636,
     9675, 6650, 6665, 6721, 9675,    0, 9675,  183,    0,  121,
      163, 6747, 6751, 6760, 9675, 9675, 7860, 7871, 7882, 7891,
      146, 7896, 7901, 7906, 7911, 7916, 7921, 7926, 7931, 7936,
     7941, 7952, 7957, 7961, 7964, 7969, 7974, 7979, 7990, 7995,
     7999, 8002, 8007, 8012, 8017, 8022, 8027, 8032, 8037, 8042,

     8047, 8052, 8057, 8062, 8067, 8078, 8083, 8087, 8090, 8095,
     8100, 8105, 8110, 8115, 8120, 8125, 8130, 8135, 8140, 8145,
     8150, 8155, 8160, 8165, 8170, 8175, 8180, 8185, 8190, 8195,
     8200, 8205, 8214, 8219, 8223, 8226, 8231, 8236, 8241, 8246,
     8251, 8256, 8261, 8266, 8271, 8276, 8281, 8286, 8291, 8299,
     8299, 8304, 8309, 8314, 8319, 8324, 8329, 8334, 8339, 8344,
     8349, 8354, 8359, 8364, 8369, 8374, 8379, 8384, 8389, 8400,
     8405, 8410, 8415, 8420, 8425, 8430, 8435, 8440, 8445, 8450,
     8455, 8460, 8465, 8470, 8475, 8480, 8485, 8490, 8495, 8500,
     8505, 8510, 8515, 8520, 8525, 8530, 8535, 8540, 8545, 8550,

     8555, 8566, 8571, 8576, 8581, 8586, 8591, 8596, 8601, 8606,
     8611, 8616, 8621, 8626, 8631, 8636, 8641, 8646, 8651, 8656,
     8661, 8666, 8671, 8676, 8681, 8686, 8691, 8696, 8701, 8706,
     8711, 8716, 8721, 8726, 8731, 8736, 8741, 8746, 8751, 8756,
     8761, 8766, 8771, 8776, 8781, 8786, 8791, 8796, 8801, 8806,
     8811, 8816, 8821, 8826, 8831, 8836, 8841, 8846, 8851, 8856,
     8861, 8866, 8871, 8876, 8881, 8886, 8891, 8896, 8901, 8906,
     8911, 8918, 8918, 8923, 8928, 8933, 8938, 8943, 8948, 8953,
     8958, 8963, 8968, 8973, 8978, 8983, 8988, 8993, 8998, 9003,
     9008, 9019, 9024, 9028, 9031, 9036, 9041, 9046, 9057, 9062,

     9067, 9078, 9083, 9088, 9093, 9098, 9103, 9108, 9113, 9118,
     9123, 9128, 9133, 9144, 9149, 9153, 9156, 9161, 9166, 9171,
     9182, 9187, 9192, 9197, 9202, 9207, 9212, 9217, 9222, 9227,
     9232, 9237, 9242, 9247, 9252, 9257, 9262, 9267, 9272, 9277,
     9282, 9291, 9296, 9301, 9306, 9311, 9316, 9321, 9326, 9331,
     9336, 9341, 9346, 9354, 9354, 9359, 9364, 9369, 9374, 9379,
     9384, 9389, 9394, 9399, 9404, 9409, 9414, 9419, 9424, 9429,
     9434, 9439, 9444, 9449, 9454, 9465, 9470, 9475, 9480, 9485,
     9490, 9495, 9500, 9511, 9516, 9521, 9526, 9531, 9536, 9541,
     9546, 9551, 9556, 9561, 9566, 9571, 9576, 9581, 9586, 9591,

     9596, 9601, 9606, 9617, 9622, 9627, 9638, 9643, 9648, 9653,
     9658, 9663
    } ;

static yyconst flex_int16_t yy_def[1713] =
    {   0,
     1366,    1, 1366, 1366, 1366, 1366, 1366, 1366, 1367, 1368,
     1366, 1366, 1369, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1370, 1366, 1366, 1366, 1371, 1366,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   46,   30,   46,   46,
     1366, 1366, 1366, 1366,   30,   46,   46, 1366, 1366, 1366,
     1372, 1373, 1372, 1372, 1374, 1375, 1376, 1376, 1366, 1377,
     1366, 1378, 1379, 1379, 1380, 1366, 1366, 1366, 1381, 1366,
     1366, 1366, 1382, 1366, 1366, 1383, 1384, 1385, 1366, 1386,
     1366, 1387, 1366, 1388, 1366, 1389, 1390, 1391, 1392, 1366,

     1393, 1366, 1394, 1366, 1395, 1366, 1366, 1396, 1397, 1396,
     1396, 1398, 1399, 1400, 1400, 1366, 1401, 1366, 1402, 1403,
     1403, 1404, 1366, 1366, 1366, 1405, 1366, 1406, 1366, 1366,
     1407, 1408, 1409, 1366, 1410, 1366, 1411, 1366, 1412, 1366,
     1366, 1366, 1366, 1413, 1414, 1413, 1413, 1415, 1416, 1417,
     1417, 1366, 1418, 1366, 1419, 1420, 1420, 1421, 1366, 1366,
     1366, 1422, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1423, 1424, 1423, 1423, 1425, 1426,
     1427, 1427, 1366, 1428, 1366, 1429, 1430, 1430, 1431, 1366,
     1366, 1366, 1432, 1433, 1433, 1366, 1434, 1435, 1436, 1366,

     1437, 1366, 1438, 1366, 1439, 1366, 1366, 1366, 1440, 1441,
     1440, 1440, 1442, 1443, 1444, 1444, 1366, 1445, 1366, 1446,
     1447, 1447, 1448, 1366, 1366, 1366, 1449, 1450, 1366,  229,
     1366,  229,  229,  229,  229,  229,  229,  229, 1451, 1452,
     1451, 1451, 1451, 1453, 1454, 1366, 1455, 1455, 1455, 1456,
     1457, 1366, 1458, 1459, 1459, 1460, 1366, 1366, 1366, 1461,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
     1366, 1366, 1366, 1366,  229,  229, 1366,  229,  229,  229,
      229,  229,  229,  229, 1462, 1463, 1464, 1464, 1464, 1464,
     1464, 1465, 1466, 1466, 1464, 1467, 1366, 1468, 1469, 1366,
     1470, 1471, 1366, 1472, 1473, 1472, 1472, 1474, 1475, 1476,
     1477, 1366, 1478, 1479, 1478, 1478, 1480, 1481, 1482, 1366,
      370, 1483, 1484, 1483, 1483, 1483, 1485, 1486, 1366, 1487,
     1487, 1488, 1489, 1366, 1490, 1491, 1491, 1492, 1366, 1366,
     1366, 1493,  370,  370,  370,  370,  370,  370, 1494, 1495,

     1496, 1496, 1496, 1497, 1498, 1498, 1496, 1499, 1366, 1500,
     1501, 1366, 1502, 1503, 1366, 1504, 1505, 1504, 1504, 1506,
     1507, 1508, 1366,  423, 1509, 1510, 1509, 1509, 1509, 1511,
     1512, 1366, 1513, 1513, 1514, 1515, 1366, 1516, 1517, 1517,
     1518, 1366, 1366, 1366, 1519,  423,  423,  423,  423,  423,
      423, 1520, 1521, 1522, 1522, 1522, 1523, 1524, 1524, 1522,
     1525, 1366, 1526, 1527, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366,  477,  477, 1528,
     1529, 1528, 1528, 1528, 1530, 1531, 1366, 1532, 1532, 1532,
     1533, 1534, 1366, 1535, 1536, 1536, 1537, 1366, 1366, 1366,

     1538,  477,  477,  477,  477,  477,  477, 1539, 1540, 1541,
     1541, 1541, 1542, 1543, 1543, 1541, 1544, 1366, 1545, 1546,
     1547, 1366, 1548, 1549, 1548, 1548, 1550, 1551, 1552, 1366,
      530, 1553, 1554, 1553, 1553, 1553, 1555, 1556, 1366, 1557,
     1557, 1558, 1559, 1366, 1560, 1561, 1561, 1562, 1366, 1366,
     1366, 1563,  530,  530,  530,  530,  530,  530, 1564, 1565,
     1566, 1566, 1566, 1567, 1568, 1568, 1566, 1569, 1366, 1570,
     1571, 1572, 1366,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573, 1573, 1574,
     1575, 1575, 1575, 1576, 1577, 1577, 1575, 1578, 1366, 1579,

     1580,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573, 1366,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573, 1366, 1581, 1582, 1581, 1581, 1583, 1584, 1585, 1585,
     1366, 1586, 1366, 1587, 1588, 1588, 1589, 1366, 1366, 1366,

     1590,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573, 1591, 1591, 1592, 1592, 1366, 1593, 1594, 1595,
     1366, 1596, 1366, 1597, 1366, 1598, 1366, 1599, 1600, 1600,
     1601, 1602, 1603, 1603, 1604, 1366,  736,  736,  736,  736,
      736,  736, 1605, 1606, 1607, 1607, 1607, 1608, 1609, 1609,
     1607, 1610, 1366, 1611, 1612,  736,  736,  736,  736,  736,
     1613, 1613, 1614, 1614, 1366, 1615, 1616, 1617, 1366, 1618,
     1366, 1619, 1366, 1620, 1366, 1621, 1622, 1622, 1623, 1366,
      780,  780,  780,  780,  780,  780, 1624, 1625, 1626, 1626,
     1626, 1627, 1628, 1628, 1626, 1629, 1366, 1630, 1631,  780,

      780,  780,  780,  780, 1632, 1632, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366,  821,  821,  821,  821,  821,  821,  821,  821, 1633,
     1634, 1635, 1635, 1635, 1636, 1637, 1637, 1635, 1638, 1366,
     1639, 1640,  821,  821,  821,  821,  821, 1641, 1641, 1642,
     1643, 1643, 1644, 1366,  854,  854,  854,  854,  854,  854,
     1645, 1646, 1647, 1647, 1647, 1648, 1649, 1649, 1647, 1650,
     1366, 1651, 1652,  854,  854,  854,  854,  854, 1653, 1653,
     1654, 1366,  882,  882,  882,  882, 1655, 1655,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882, 1366,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882, 1366,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
     1366,  971,  971, 1656, 1657, 1656, 1656, 1656, 1658, 1659,
     1366, 1660, 1660, 1660, 1661, 1662, 1366, 1663, 1664, 1664,
     1665, 1366, 1366, 1366, 1666,  971,  971,  971,  971,  971,

      971, 1667, 1668, 1669, 1669, 1669, 1670, 1671, 1671, 1669,
     1672, 1366, 1673, 1674, 1366, 1015, 1675, 1675, 1015, 1676,
     1677, 1366, 1678, 1679, 1678, 1678, 1680, 1681, 1682, 1366,
     1030, 1030, 1030, 1030, 1683, 1683, 1030, 1684, 1685, 1366,
     1686, 1687, 1686, 1686, 1688, 1689, 1690, 1366, 1048, 1048,
     1048, 1048, 1691, 1691, 1048, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1064, 1064, 1064, 1064, 1692, 1692,
     1064, 1366, 1072, 1072, 1072, 1072, 1693, 1693, 1072, 1366,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,

     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1366, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1366, 1366, 1366, 1366, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1366, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1694, 1695, 1696, 1696, 1696, 1697, 1698,
     1698, 1696, 1699, 1366, 1700, 1701, 1155, 1155, 1155, 1155,
     1155, 1702, 1702, 1080, 1703, 1703, 1366, 1704, 1705, 1705,
     1706, 1366, 1366, 1707, 1708, 1708, 1709, 1366, 1366, 1366,

     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1366, 1366, 1366, 1366, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1155,
     1155, 1155, 1155, 1155, 1710, 1710, 1155, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1366,
     1080, 1080, 1366, 1080, 1366, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1366, 1366, 1366,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1155, 1711,

     1711, 1080, 1080, 1080, 1080, 1080, 1366, 1366, 1080, 1080,
     1366, 1080, 1366, 1080, 1080, 1080, 1080, 1080, 1080, 1366,
     1366, 1366, 1080, 1080, 1080, 1080, 1080, 1712, 1712, 1080,
     1366, 1366, 1366, 1080, 1366, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1366, 1366, 1366, 1080, 1366, 1080,
     1366, 1366, 1366, 1080, 1366, 1080, 1366, 1366, 1080, 1366,
     1366, 1366, 1366, 1366, 1366,    0, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366
    } ;

static yyconst flex_int16_t yy_nxt[9812] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   39,   49,   39,   50,   39,
       51,    4,   52,   53,   54,   55,   31,   32,   33,   34,
       56,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   57,   48,   39,   49,   39,   50,   39,
       58,   59,   60,    4,   61,   62,   62,   63,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   64,   65,   65,   66,    4,    4,
       67,   68,    4,   69,   70,   71,   72,   73,   74,   75,
       76,    4,   77,   78,   79,    4,   80,   97,   80,   80,
       84,   80,  141,  141,  141,  141,  321,  321,  321,  321,
      465,  228,  163,   98,  142,   99,   99,   99,   99,   99,
       99,  100,  101,  101,  101,  101,  102,  103,  103,  104,
      105,  106,  163,  164, 1362,  165,  165,  165,  165,  165,
      165,  165,  165,  166,  167, 1361,  168,  168,  168,  168,
      168,  168,  168,  168, 1360,   85,  329,  329,  169,  170,

      170,  170,  170,  170,  170,  170,  170,  322,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  331,  331,  331,  331,
      328,  328,  333,  394,  394,   86,  334,  334,  334,  334,
      333,  334,  335,  335,  335,  335,  335,  335,  335,  335,
      335,   87, 1301,   88,   88,   88,   88,   88,   88,   89,
       90,   90,   90,   90,   91,   92,   92,   93,   94,   95,
      107,  107,  107,  107,  107,  107,  107,  107,  346,  346,
      346,  346,  347,  573, 1300,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      574,  575,  576,  573,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      574,  575,  576, 1333,  108,  109,  109,  110,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  111,  112,  112,  113,  447,  447,
      114,  115, 1322,  116,  117,  118,  119,  120,  121,  122,
      123, 1321,  124,  125,  126,  129,  171, 1320,  172,  172,
      172,  172,  172,  172,  172,  172,  107,  143,  261,  232,

      174,  232,  208, 1311,  107,  143,  262,  173,  174,  232,
      208,  263,  264,  280,  232,  232,  232,  577,  232,  503,
      503,  265,  579, 1301,  232,  578,  232,  281,  261,  232,
      232,  232,  232,  232,  602,  130,  262,  173, 1018,  232,
      232,  263,  264,  280,  232,  232,  232,  577,  232,  337,
      338,  265,  579,  340,  232,  578,  232,  281,  232,  371,
      232,  341,  603,  232,  602,  424,  232,  371,  342,  342,
      342,  342,  342,  424, 1300,  131,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  396,  396,  396,  396,  393,
      393,  132,  603,  133,  133,  133,  133,  133,  133,  134,

      135,  135,  135,  135,  136,  137,  137,  138,  139,  140,
      143,  143,  143,  143,  143,  143,  143,  143,  398,  398,
      398,  398,  604,  398, 1017,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      605,  606,  604,  607,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      605,  606,  612,  607,  144,  145,  145,  146,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  147,  148,  148,  149,  618,  619,
      150,  151,  612,  152,  153,  154,  155,  156,  157,  158,
      159, 1290,  160,  161,  162,  174,  174,  174,  174,  174,
      174,  174,  174,  408,  408,  408,  408,  409,  618,  619,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  620,  621,  622,  623,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  620,  621,  622,  623,  175,

      176,  176,  177,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  178,
      179,  179,  180,  554,  554,  181,  182, 1289,  183,  184,
      185,  186,  187,  188,  189,  190, 1288,  191,  192,  193,
      195,  196,  232,  624,  232,  266,  613, 1273,   83, 1156,
      625,  614,  267,   83,  232,  268, 1237,  269,  232,  628,
      629,  232, 1236,  451,  451,  451,  451,  232,  451,  232,
      630,  631,  232,  624,  232,  266,  613,  232, 1235,  232,
      625,  614,  267,  232,  232,  268,  232,  269,  232,  628,
      629,  232,  141,  141,  141,  141, 1234,  232,  479,  232,

      630,  631, 1215,   83,  142,  763,  479,  232,   83,  232,
      197,  706,   83,  232,  479,  707,  232,  997,  997,  531,
       83,  708,  479,   83,  715,   83,  198,  531,  199,  199,
      199,  199,  199,  199,  200,  201,  201,  201,  201,  202,
      203,  203,  204,  205,  206,  208,  208,  208,  208,  208,
      208,  208,  208,  449,  449,  449,  449,  446,  446,  232,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  632,  638,  639,  640,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  632,  638,  639,  640,  209,
      210,  210,  211,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  212,
      213,  213,  214,  232,  996,  215,  216,  641,  217,  218,
      219,  220,  221,  222,  223,  224, 1170,  225,  226,  227,
      229,  230,  971,  229,  229,  229,  229,  229,  229,  229,
      229,  231,  461,  461,  461,  461,  462,  641,  232,  233,
      232,  234,  232,  232,  232,  232,  232,  232,  232,  235,
      232,  236,  232,  232,  232,  237,  232,  232,  238,  232,

      232,  232,  232,  642,  644,  645,  648,  232,  232,  233,
      232,  234,  232,  232,  232,  232,  232,  232,  232,  235,
      232,  236,  232,  232,  232,  237,  232,  232,  238,  232,
      232,  232,  232,  642,  644,  645,  648,  239,  240,  240,
      241,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  243,  244,  244,
      245, 1155,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  256,  257, 1113,  258,  259,  260,  270,  232,
      646,  232,  271,  626,  651,  649,  272,  647,  650,  232,
      572,  232,  855,  652,  273,  232,  653,  627,  232,  360,

      360,  360,  360,  360,  360,  360,  360,  822,  270,  232,
      646,  232,  271,  626,  651,  649,  272,  647,  650,  232,
      232,  232,  232,  652,  273,  232,  653,  627,  232,  781,
      232,  737,  274,  654, 1018, 1017,  232,  655, 1016,  232,
      656,  275,  505,  505,  505,  505,  502,  502,  659,  232,
      232,  232,  232,  401,  402, 1015,  276, 1008,  660,  277,
      232,  232,  274,  654,  278,  232,  232,  655,  232,  232,
      656,  275,  404,  404,  404,  404,  404,  950,  659,  232,
      665,  232,  507,  507,  507,  507,  276,  507,  660,  277,
      232,  232,  232,  666,  278,  232,  929,  671,  232,  672,

      232,  581,  232,  667,  676,  279,  232,  232,  553,  232,
      665,  232,  867,  657,  232,  310,  658,  669,  530,  668,
      232,  311,  232,  666,  854,  232,  232,  671,  670,  672,
      232,  312,  232,  667,  676,  279,  232,  232,  232,  232,
      232,  232,  282,  657,  232,  310,  658,  669,  232,  668,
      283,  311,  677,  284,  285,  232,  232,  232,  670,  194,
      502,  312,  517,  517,  517,  517,  518,  678,  232,  836,
      232,  477,  282,  679,  558,  558,  558,  558,  232,  558,
      283,  821,  677,  284,  285,  163,  682,  232,  286,  232,
      287,  232,  680,  681,  682,  889,  288,  678,  890,  232,

      891,  232,  289,  679,  446,  232,  582,  582,  232,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  286,  232,
      287,  232,  680,  681,  580,  889,  288,  793,  890,  232,
      891,  232,  289,  290,  232,  232,  291,  292,  232,  892,
      893,  293,  894,  895,  232,  899,  232,  294,  295,  232,
      232,  232,  900,  232,  568,  568,  568,  568,  569,  232,
      901,  232,  296,  290,  232,  232,  291,  292,  232,  892,
      893,  293,  894,  895,  232,  899,  232,  294,  295,  232,
      232,  232,  900,  232,  598,  598,  598,  598,  599,  232,
      901,  232,  296,  423,  780,  232,  232,  232,  232,  232,

      232,  297,  902,  318,  319,  903,  904,  232,  128,  232,
      393,  298,  299,  232,  232,  232,  232,  369,  369,  369,
      369,  369,  369,  369,  369,  905,  232,  232,  906,  232,
      232,  297,  902,  318,  319,  903,  904,  232,  232,  232,
      232,  298,  299,  232,  232,  232,  232,  661,  232,  749,
      232,  907,  370,  300,  232,  905,  662,  232,  906,  908,
      663,  664,  301,  232,  909,  232,  302,  736,  232,   96,
      232,   83,  328,  232,  910,  232,  303,  661,  232,  232,
      232,  907,  232,  300,  232,  911,  662,  232,  912,  908,
      663,  664,  301,  232,  909,  232,  302,  556,  556,  556,

      556,  553,  553,  232,  910,  232,  303,  705,  703,  232,
      738,  738,  232,  304,  232,  911,  232,  305,  912,  913,
      306,  307,  914,  915,  232,  916,  232,  702,  736,  643,
      232,  308,  309,  232,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  304,  232,  595,  232,  305,  229,  913,
      306,  307,  914,  915,  232,  916,  232,  232,  313,  232,
      232,  308,  309,  232,  917,  615,  918,  232,  919,  314,
      920,  616,  315,  316,  232,  317,  232,  617,  320,  580,
      673,  232,  232, 1366,  921,  674,  572,  232,  313,  232,
      565,  675,  232,  232,  917,  615,  918,  232,  919,  314,

      920,  616,  315,  316,  232,  317,  232,  617,  320,  232,
      673,  232,  232,  232,  921,  674,  232,  276,  514,  458,
      277,  675,  232,  232,  413,  278,  922,  232,  232,  923,
      232,  924,  925,  926,  232,  927,  896,  232,  310,  325,
      405,  351,  343,  232,  311,  327,  232,  276,  232,  232,
      277,  897,  898,  928,  312,  278,  922,  232,  232,  923,
      232,  924,  925,  926,  232,  927,  896,  232,  310,  973,
      742,  742,  742,  742,  311,  742,  326,  973,  232,  232,
      324,  897,  898,  928,  312,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  350,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      752,  752,  752,  752,  753,   97,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  584,  584,  584,  584,  581,
      581,   98,   85,   99,   99,   99,   99,   99,   99,  100,
      101,  101,  101,  101,  102,  103,  103,  104,  105,  106,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  587,  587,  587,  587,
      232,  587,   86,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  329,  329,  329,  329,  329,  329,   87,  323,
       88,   88,   88,   88,   88,   88,   89,   90,   90,   90,
       90,   91,   92,   92,   93,   94,   95,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  370,  370,  370,  370,  370,  370,  370,
      370,  207,  321,  321,  321,  321,  930,  127,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,   82,  931,  932,  930,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  322,  931,  932,   81,  372,  373,  373,
      374,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  376,  377,  377,
      378, 1366,  379,  380,  381, 1366,  382,  383,  384,  385,
      386,  387,  388,  389, 1366,  390,  391,  392,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  410,  410,  410,  410,  410,  410,

      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      412,  128, 1270, 1270, 1270, 1270,  128,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  454,  455,
      130, 1366,  786,  786,  786,  786,  128,  786,  933,  934,
     1366,  128, 1133, 1134, 1135,  128, 1136,  457,  457,  457,
      457,  457, 1366,  128, 1366, 1366,  128,  935,  128,  422,
      422,  422,  422,  422,  422,  422,  422, 1366,  933,  934,

      131,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      712,  712,  712,  712,  712,  712,  132,  935,  133,  133,
      133,  133,  133,  133,  134,  135,  135,  135,  135,  136,
      137,  137,  138,  139,  140,  423,  423,  423,  423,  423,
      423,  423,  423,  740,  740,  740,  740,  737,  737, 1366,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  936,  937,  938,  939,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  936,  937,  938,  939,  425,
      426,  426,  427,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  429,
      430,  430,  431, 1366,  432,  433,  434, 1366,  435,  436,
      437,  438,  439,  440,  441,  442, 1366,  443,  444,  445,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,

      466,  466,  466,  466,  466,  466,  466,  466,  467, 1366,
      165,  165,  165,  165,  165,  165,  165,  165,  469,  469,
      469,  469,  469,  469,  469,  469,  940, 1366,  470,  468,
      168,  168,  168,  168,  168,  168,  168,  168,  170,  170,
      170,  170,  170,  170,  170,  170, 1366, 1366, 1366,  471,
      394,  394,  394,  394,  394,  394,  940,  472, 1366,  468,
     1366,  473,  473,  473,  473,  473,  473,  473,  473,  171,
     1366,  172,  172,  172,  172,  172,  172,  172,  172,  471,
      474,  796,  796,  796,  796,  797,  475,  472,  475, 1366,
      173,  476,  476,  476,  476,  476,  476,  476,  476,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  941, 1366,
      474,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      173,  477,  478, 1366,  477,  477,  477,  477,  477,  477,
      477,  477,  760,  760,  760,  760,  760,  760,  941,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  942,  943,  946,  947,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  942,  943,  946,  947,  480,  481,

      481,  482,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  484,  485,
      485,  486,  196,  487,  488,  489,  490,  491,  492,  493,
      494,  495,  496,  497,  498, 1366,  499,  500,  501,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  510,  511,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  196,  513,  513,  513,
      513,  513,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519, 1366, 1366,
     1366,  197,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  784,  784,  784,  784,  781,  781,  198, 1366,  199,
      199,  199,  199,  199,  199,  200,  201,  201,  201,  201,
      202,  203,  203,  204,  205,  206,  529,  529,  529,  529,
      529,  529,  529,  529, 1366,  197,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  447,  447,  447,  447,  447,
      447,  198, 1366,  199,  199,  199,  199,  199,  199,  200,
      201,  201,  201,  201,  202,  203,  203,  204,  205,  206,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,

      527,  527,  530,  530,  530,  530,  530,  530,  530,  530,
      804,  804,  804,  804,  804,  804, 1366,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  948,  949,  951,  952,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  948,  949,  951,  952,  532,  533,  533,  534,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  536,  537,  537,  538,

     1366,  539,  540,  541, 1366,  542,  543,  544,  545,  546,
      547,  548,  549, 1366,  550,  551,  552,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  561,  562,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567, 1366,  564,  564,  564,  564,  564,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  229,  230, 1366,  229,  229,
      229,  229,  229,  229,  229,  229,  231,  825,  825,  825,
      825,  822,  822,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  960,  961,
      962,  963,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  960,  961,
      962,  963,  239,  240,  240,  241,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  243,  244,  244,  245, 1366,  246,  247,  248,
      249,  250,  251,  252,  253,  254,  255,  256,  257, 1366,
      258,  259,  260,  174,  174,  174,  174,  174,  174,  174,

      174,  828,  828,  828,  828,  479,  828, 1366,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  964,  965,  966,  967,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  964,  965,  966,  967,  175,  176,  176,
      177,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  178,  179,  179,
      180, 1366, 1366,  181,  182, 1366,  183,  184,  185,  186,

      187,  188,  189,  190, 1366,  191,  192,  193,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  591,  592,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  968,  594,  594,  594,  594,  594,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  608,  969,  633,  839,  839,
      839,  839,  840,  968,  634,  973, 1366,  635,  609,  636,
      610,  970, 1366,  973,  611,  637,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  608,  969,  633,  503,  503,
      503,  503,  503,  503,  634,  745,  746,  635,  609,  636,
      610,  970,  782,  782,  611,  637,  682,  682,  682,  682,
      682,  682,  682,  682,  748,  748,  748,  748,  748, 1081,
      780,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682, 1082, 1083, 1084, 1081,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682, 1082, 1083, 1084, 1366,

      683,  684,  684,  685,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      686,  687,  687,  688, 1366, 1366,  689,  690, 1366,  691,
      692,  693,  694,  695,  696,  697,  698, 1366,  699,  700,
      701,  716,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754, 1275, 1275, 1275, 1275,  717,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  789,  790,  476,  476,  476,  476,
      476,  476,  476,  476, 1366, 1366,  718,  847,  847,  847,
      847,  847,  847,  792,  792,  792,  792,  792,  860,  860,
      860,  860,  719,  860,  720,  720,  720,  720,  720,  720,
      721,  722,  722,  722,  722,  723,  724,  724,  725,  726,
      727,  370,  370,  370,  370,  370,  370,  370,  370,  858,
      858,  858,  858,  855,  855, 1366,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371, 1085, 1086, 1087, 1088,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371, 1085, 1086, 1087, 1088,  372,  373,  373,  374,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  376,  377,  377,  378, 1366,
      379,  380,  381, 1366,  382,  383,  384,  385,  386,  387,
      388,  389, 1366,  390,  391,  392,  764,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,

      795,  795,  795,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  466,
      466,  466,  466,  466,  466,  466,  466, 1366,  808,  808,
      808,  808,  808,  808,  808,  808,  765, 1089,  807, 1001,
     1001, 1001, 1001,  810, 1001,  810, 1366,  809,  811,  811,
      811,  811,  811,  811,  811,  811,  476,  476,  476,  476,
      476,  476,  476,  476, 1366, 1366, 1366, 1089,  807, 1366,
     1366, 1366, 1366,  815, 1366,  815,  766,  809,  816,  816,
      816,  816,  816,  816,  816,  816,  870,  870,  870,  870,
      871, 1366,  767, 1366,  768,  768,  768,  768,  768,  768,

      769,  770,  770,  770,  770,  771,  772,  772,  773,  774,
      775,  423,  423,  423,  423,  423,  423,  423,  423,  554,
      554,  554,  554,  554,  554, 1366,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424, 1090, 1091, 1092, 1093,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424, 1090, 1091, 1092, 1093,  425,  426,  426,  427,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  429,  430,  430,  431, 1366,
      432,  433,  434, 1094,  435,  436,  437,  438,  439,  440,
      441,  442, 1095,  443,  444,  445,  469,  469,  469,  469,
      469,  469,  469,  469,  813,  813,  813,  813,  813,  813,
      813,  813, 1366, 1094, 1366,  812, 1096, 1097, 1098,  817,
     1366,  817, 1095,  814,  818,  818,  818,  818,  818,  818,
      818,  818,  473,  473,  473,  473,  473,  473,  473,  473,
     1011, 1011, 1011, 1011, 1012,  812, 1096, 1097, 1098, 1366,
      819,  474,  819,  814, 1099,  820,  820,  820,  820,  820,
      820,  820,  820,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  474,  477,  478, 1099,  477,  477,  477,  477,  477,
      477,  477,  477,  878,  878,  878,  878,  878,  878, 1366,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479, 1100, 1101, 1102, 1103,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479, 1100, 1101, 1102, 1103,  480,
      481,  481,  482,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  484,
      485,  485,  486, 1366,  487,  488,  489,  490,  491,  492,
      493,  494,  495,  496,  497,  498, 1366,  499,  500,  501,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  832,
      833,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838, 1366,  835,  835,
      835,  835,  835,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  530,
      530,  530,  530,  530,  530,  530,  530,  582,  582,  582,
      582,  582,  582, 1366,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531, 1104,
     1105, 1106, 1107,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531, 1104,
     1105, 1106, 1107,  532,  533,  533,  534,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  536,  537,  537,  538, 1366,  539,  540,
      541, 1366,  542,  543,  544,  545,  546,  547,  548,  549,
     1366,  550,  551,  552,  856,  856,  856,  856,  856,  856,

      856,  856,  856,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  863,  864,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869, 1366,
      866,  866,  866,  866,  866,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  229,  230, 1366,  229,  229,  229,  229,  229,  229,
      229,  229,  231,  886,  886,  886,  886,  886,  886,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232, 1108, 1109, 1110, 1111,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232, 1108, 1109, 1110, 1111,  239,  240,
      240,  241,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  243,  244,
      244,  245, 1112,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  256,  257,  944,  258,  259,  260,  953,
      954, 1366,  955,  956, 1114, 1117,  945, 1118,  823,  823,
      957, 1366, 1112,  856,  856, 1119,  958, 1120,  959,  999,

      999,  999,  999,  996,  996,  944,  821, 1366, 1366,  953,
      954,  854,  955,  956, 1114, 1117,  945, 1118, 1366, 1366,
      957, 1004, 1005, 1366, 1366, 1119,  958, 1120,  959,  971,
      972, 1366,  971,  971,  971,  971,  971,  971,  971,  971,
     1007, 1007, 1007, 1007, 1007, 1121, 1366,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973, 1115, 1116, 1122, 1121,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  973, 1115, 1116, 1122, 1366,  974,  975,  975,  976,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  978,  979,  979,  980,
     1366,  981,  982,  983,  984,  985,  986,  987,  988,  989,
      990,  991,  992, 1366,  993,  994,  995,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  998,  998,  998,  998,
      998,  998,  998,  998,  998, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013,  716,  715, 1366, 1366,
     1366, 1366,  715, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027,  738,  738,  738,  738,  738,  738,
     1258,  717,  715, 1157, 1157, 1366, 1366,  715, 1366, 1259,
     1366,  715, 1034, 1034, 1034, 1034, 1034, 1034, 1260,  715,
     1366, 1155,  715, 1366,  715, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1047, 1047, 1047, 1047, 1047, 1047, 1047,

     1047,  718, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041,  782,  782,  782,  782,  782,  782,  719, 1366,  720,
      720,  720,  720,  720,  720,  721,  722,  722,  722,  722,
      723,  724,  724,  725,  726,  727, 1020,   97,  763, 1366,
     1366, 1366, 1366,  763, 1052, 1052, 1052, 1052, 1052, 1052,
     1366, 1366, 1366,   98, 1366,   99,   99,   99,   99,   99,
       99,  100,  101,  101,  101,  101,  102,  103,  103,  104,
      105,  106, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1366, 1366,
     1366,  717, 1366,  763, 1366, 1123, 1124, 1366,  763, 1366,

     1125, 1366,  763,  823,  823,  823,  823,  823,  823, 1366,
      763, 1366, 1056,  763, 1056,  763, 1126, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1123, 1124, 1058, 1366, 1058,
     1125,  718, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1068, 1068, 1068, 1068, 1068, 1068, 1126,  719, 1366,  720,
      720,  720,  720,  720,  720,  721,  722,  722,  722,  722,
      723,  724,  724,  725,  726,  727,  350, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045,  808,  808,  808,  808,  808,  808,  808,
      808,  811,  811,  811,  811,  811,  811,  811,  811, 1366,

     1127, 1366,  809,  811,  811,  811,  811,  811,  811,  811,
      811,  856,  856,  856,  856,  856,  856, 1060, 1366, 1060,
     1366,   85, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1127, 1062,  809, 1062, 1366, 1366, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
     1366,   86,  818,  818,  818,  818,  818,  818,  818,  818,
     1076, 1076, 1076, 1076, 1076, 1076, 1128,   87, 1129,   88,
       88,   88,   88,   88,   88,   89,   90,   90,   90,   90,
       91,   92,   92,   93,   94,   95,  370,  370,  370,  370,

      370,  370,  370,  370, 1366, 1366, 1128, 1130, 1129, 1131,
     1366,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371, 1132, 1130, 1137, 1131,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371, 1132, 1366, 1137, 1366,
      372,  373,  373,  374,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      376,  377,  377,  378,  196,  379,  380,  381, 1366,  382,

      383,  384,  385,  386,  387,  388,  389, 1366,  390,  391,
      392,  764, 1366,  813,  813,  813,  813,  813,  813,  813,
      813,  818,  818,  818,  818,  818,  818,  818,  818, 1138,
     1139, 1366,  814,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820, 1343,
     1140, 1159, 1159, 1159, 1159, 1156, 1156, 1366, 1259, 1138,
     1139,  765,  814,  197, 1366, 1366, 1366, 1260, 1141, 1142,
     1143, 1366, 1145, 1146, 1144, 1147, 1148, 1149, 1150,  198,
     1140,  199,  199,  199,  199,  199,  199,  200,  201,  201,
      201,  201,  202,  203,  203,  204,  205,  206, 1141, 1142,

     1143,  766, 1145, 1146, 1144, 1147, 1148, 1149, 1150, 1151,
     1152, 1153, 1154, 1366, 1366, 1366, 1366,  767, 1366,  768,
      768,  768,  768,  768,  768,  769,  770,  770,  770,  770,
      771,  772,  772,  773,  774,  775, 1038, 1366, 1366, 1151,
     1152, 1153, 1154, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1162, 1162, 1162, 1162,  973, 1162, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1166, 1167, 1173, 1173,
     1173, 1173, 1174, 1366, 1366, 1366,  765,  997,  997,  997,
      997,  997,  997, 1201, 1202, 1169, 1169, 1169, 1169, 1169,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1172, 1172, 1172, 1172, 1172, 1172, 1181, 1181, 1181, 1181,
     1181, 1181, 1366, 1201, 1202, 1366,  766, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1157, 1157, 1157, 1157, 1157,
     1157, 1366,  767, 1366,  768,  768,  768,  768,  768,  768,
      769,  770,  770,  770,  770,  771,  772,  772,  773,  774,
      775,  412, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,  591,  592,
     1203, 1366, 1366,  591,  592, 1366, 1366, 1366, 1366, 1366,
     1185, 1366, 1366, 1366, 1366, 1186, 1366,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594, 1366, 1366, 1366,
     1203,  130, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1254, 1254, 1254, 1254, 1254, 1254,
     1366,  131, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1366, 1366, 1366, 1366, 1204, 1205, 1206,  132, 1207,  133,
      133,  133,  133,  133,  133,  134,  135,  135,  135,  135,
      136,  137,  137,  138,  139,  140,  423,  423,  423,  423,
      423,  423,  423,  423, 1204, 1205, 1206, 1208, 1207, 1209,

     1366,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424, 1210, 1208, 1211, 1209,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424, 1210, 1366, 1211, 1366,
      425,  426,  426,  427,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      429,  430,  430,  431, 1212,  432,  433,  434, 1213,  435,
      436,  437,  438,  439,  440,  441,  442, 1366,  443,  444,

      445,  477,  478, 1366,  477,  477,  477,  477,  477,  477,
      477,  477, 1366, 1366, 1212, 1214, 1216, 1217, 1213,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479, 1218, 1214, 1216, 1217,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479, 1218, 1366, 1366, 1366,  480,  481,
      481,  482,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  484,  485,

      485,  486, 1219,  487,  488,  489,  490,  491,  492,  493,
      494,  495,  496,  497,  498, 1366,  499,  500,  501,  530,
      530,  530,  530,  530,  530,  530,  530, 1366, 1366, 1220,
     1221, 1222, 1219, 1366,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531, 1220,
     1221, 1222, 1223,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531, 1366,
     1366, 1224, 1223,  532,  533,  533,  534,  535,  535,  535,

      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  536,  537,  537,  538, 1225,  539,  540,
      541, 1224,  542,  543,  544,  545,  546,  547,  548,  549,
     1366,  550,  551,  552,  229,  230, 1366,  229,  229,  229,
      229,  229,  229,  229,  229,  231, 1366, 1225, 1226, 1227,
     1228, 1366,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232, 1229, 1226, 1227,
     1228,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232, 1229, 1366, 1366,
     1366,  239,  240,  240,  241,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  243,  244,  244,  245, 1230,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257, 1366,  258,
      259,  260,  971,  972, 1366,  971,  971,  971,  971,  971,
      971,  971,  971, 1366, 1366, 1230, 1231, 1232, 1233, 1366,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973, 1238, 1231, 1232, 1233,  973,

      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973, 1238, 1366, 1366, 1366,  974,
      975,  975,  976,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  978,
      979,  979,  980, 1239,  981,  982,  983,  984,  985,  986,
      987,  988,  989,  990,  991,  992, 1366,  993,  994,  995,
      229,  230, 1366,  229,  229,  229,  229,  229,  229,  229,
      229,  231, 1366, 1239, 1240, 1241, 1242, 1366,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232, 1243, 1240, 1241, 1242,  232,  232,  232,
      232,  232, 1184,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232, 1243, 1366, 1366, 1366,  239,  240,  240,
      241,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  243,  244,  244,
      245, 1366,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  256,  257, 1244,  258,  259,  260, 1187, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,

     1063, 1063, 1063, 1063, 1063, 1245, 1246, 1247, 1248, 1249,
     1261, 1264, 1265, 1366, 1244, 1266, 1267, 1268, 1269, 1271,
     1272, 1274, 1276, 1277, 1262, 1278, 1279, 1280, 1281, 1282,
     1263, 1283, 1284, 1285, 1286, 1245, 1246, 1247, 1248, 1249,
     1287, 1264, 1265,  717, 1291, 1266, 1267, 1268, 1269, 1271,
     1272, 1274, 1276, 1277, 1292, 1278, 1279, 1280, 1281, 1282,
     1293, 1283, 1284, 1285, 1286, 1294, 1295, 1296, 1297, 1366,
     1287, 1344, 1366, 1366, 1291, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366,  718, 1292, 1262, 1366, 1366, 1366, 1366,
     1293, 1263, 1366, 1366, 1366, 1294, 1295, 1296, 1297,  719,

     1298,  720,  720,  720,  720,  720,  720,  721,  722,  722,
      722,  722,  723,  724,  724,  725,  726,  727,  370,  370,
      370,  370,  370,  370,  370,  370, 1366, 1366, 1302, 1303,
     1298, 1304, 1366,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371, 1302, 1303,
     1305, 1304,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371, 1366, 1366,
     1305, 1366,  372,  373,  373,  374,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  376,  377,  377,  378, 1306,  379,  380,  381,
     1309,  382,  383,  384,  385,  386,  387,  388,  389, 1310,
      390,  391,  392, 1193, 1270, 1270, 1270, 1270, 1312, 1275,
     1275, 1275, 1275, 1314, 1315, 1316, 1306, 1317, 1318, 1319,
     1309, 1323, 1324, 1366, 1325, 1326, 1327, 1330, 1331, 1310,
     1366, 1366, 1332, 1334, 1335, 1366, 1366, 1336, 1312, 1337,
     1338, 1307, 1366, 1314, 1315, 1316, 1313, 1317, 1318, 1319,
     1366, 1323, 1324,  765, 1325, 1326, 1327, 1330, 1331, 1308,
      591,  592, 1332, 1334, 1335,  591,  592, 1336, 1339, 1337,

     1338, 1307, 1328, 1340, 1341, 1342, 1313, 1329, 1345,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594, 1308,
     1366, 1366, 1366,  766, 1366, 1366, 1366, 1366, 1339, 1366,
     1366, 1366, 1366, 1340, 1341, 1342, 1346, 1347, 1345,  767,
     1348,  768,  768,  768,  768,  768,  768,  769,  770,  770,
      770,  770,  771,  772,  772,  773,  774,  775,  423,  423,
      423,  423,  423,  423,  423,  423, 1346, 1347, 1349, 1350,
     1348, 1351, 1366,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424, 1349, 1350,

     1352, 1351,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424, 1366, 1366,
     1352, 1366,  425,  426,  426,  427,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  429,  430,  430,  431, 1353,  432,  433,  434,
     1354,  435,  436,  437,  438,  439,  440,  441,  442, 1366,
      443,  444,  445,  477,  478, 1366,  477,  477,  477,  477,
      477,  477,  477,  477, 1366, 1366, 1353, 1355, 1356, 1357,
     1354,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479, 1358, 1355, 1356, 1357,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479, 1358, 1366, 1366, 1366,
      480,  481,  481,  482,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  485,  485,  486, 1359,  487,  488,  489,  490,  491,
      492,  493,  494,  495,  496,  497,  498, 1366,  499,  500,
      501,  530,  530,  530,  530,  530,  530,  530,  530, 1366,

     1366, 1363, 1364, 1365, 1359, 1366,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531, 1363, 1364, 1365, 1366,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531, 1366, 1366, 1366, 1366,  532,  533,  533,  534,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  536,  537,  537,  538, 1366,
      539,  540,  541, 1366,  542,  543,  544,  545,  546,  547,

      548,  549, 1366,  550,  551,  552,  229,  230, 1366,  229,
      229,  229,  229,  229,  229,  229,  229,  231, 1366, 1366,
     1366, 1366, 1366, 1366,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232, 1366,
     1366, 1366, 1366,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232, 1366,
     1366, 1366, 1366,  239,  240,  240,  241,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242,  243,  244,  244,  245, 1366,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
     1366,  258,  259,  260,  971,  972, 1366,  971,  971,  971,
      971,  971,  971,  971,  971, 1366, 1366, 1366, 1366, 1366,
     1366, 1366,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973, 1366, 1366, 1366,
     1366,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973, 1366, 1366, 1366,

     1366,  974,  975,  975,  976,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  978,  979,  979,  980, 1366,  981,  982,  983,  984,
      985,  986,  987,  988,  989,  990,  991,  992, 1366,  993,
      994,  995,  716, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366,  717, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366,  718, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366,  719, 1366,  720,  720,  720,  720,  720,
      720,  721,  722,  722,  722,  722,  723,  724,  724,  725,
      726,  727,  370,  370,  370,  370,  370,  370,  370,  370,
     1366, 1366, 1366, 1366, 1366, 1366, 1366,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371, 1366, 1366, 1366, 1366,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371, 1366, 1366, 1366, 1366,  372,  373,  373,  374,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  376,  377,  377,  378,
     1366,  379,  380,  381, 1366,  382,  383,  384,  385,  386,
      387,  388,  389, 1366,  390,  391,  392,  764, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366,  765, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366,  766, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366,  767, 1366,  768,  768,  768,  768,  768,

      768,  769,  770,  770,  770,  770,  771,  772,  772,  773,
      774,  775,  423,  423,  423,  423,  423,  423,  423,  423,
     1366, 1366, 1366, 1366, 1366, 1366, 1366,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424, 1366, 1366, 1366, 1366,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424, 1366, 1366, 1366, 1366,  425,  426,  426,  427,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  429,  430,  430,  431,
     1366,  432,  433,  434, 1366,  435,  436,  437,  438,  439,
      440,  441,  442, 1366,  443,  444,  445,  477,  478, 1366,
      477,  477,  477,  477,  477,  477,  477,  477, 1366, 1366,
     1366, 1366, 1366, 1366, 1366,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
     1366, 1366, 1366, 1366,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

     1366, 1366, 1366, 1366,  480,  481,  481,  482,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  484,  485,  485,  486, 1366,  487,
      488,  489,  490,  491,  492,  493,  494,  495,  496,  497,
      498, 1366,  499,  500,  501,  530,  530,  530,  530,  530,
      530,  530,  530, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531, 1366, 1366, 1366, 1366,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,

      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531, 1366, 1366, 1366, 1366,  532,
      533,  533,  534,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  536,
      537,  537,  538, 1366,  539,  540,  541, 1366,  542,  543,
      544,  545,  546,  547,  548,  549, 1366,  550,  551,  552,
       83, 1366,   83,   83,   83,   83, 1366,   83, 1366, 1366,
       83,   96, 1366,   96,   96,   96,   96, 1366,   96, 1366,
     1366,   96,  128, 1366,  128,  128,  128,  128, 1366,  128,
     1366, 1366,  128,  194,  194,  194,  194, 1366,  194, 1366,

     1366,  194,  328,  328,  328,  328,  328,  329,  329,  329,
      329,  329,  331,  331,  331,  331,  331,  332,  332,  332,
      332,  332,  333,  333, 1366,  333,  333,  334,  334,  334,
      334,  334,  336,  336,  336,  336,  336,  339,  339,  339,
      339,  339,  344,  344,  344,  344,  344,  349,  349,  349,
      349,  349,   83, 1366,   83,   83,   83,   83, 1366,   83,
     1366, 1366,   83,  352,  352,  352,  352,  353,  353,  353,
       83,   83,   83,   83,   83,  355,  355,  355,  355,  355,
      357,  357,  357,  357,  357,  359,  359,  359,  359,  359,
       96, 1366,   96,   96,   96,   96, 1366,   96, 1366, 1366,

       96,  361,  361,  361,  361,  362,  362,  362,   96,   96,
       96,   96,   96,  364,  364,  364,  364,  364,  366,  366,
      366,  366,  366,  368,  368,  368,  368,  368,  393,  393,
      393,  393,  393,  394,  394,  394,  394,  394,  396,  396,
      396,  396,  396,  397,  397,  397,  397,  397,  107,  107,
     1366,  107,  107,  398,  398,  398,  398,  398,  400,  400,
      400,  400,  400,  403,  403,  403,  403,  403,  406,  406,
      406,  406,  406,  411,  411,  411,  411,  411,  128, 1366,
      128,  128,  128,  128, 1366,  128, 1366, 1366,  128,  414,
      414,  414,  414,  415,  415,  415,  128,  128,  128,  128,

      128,  417,  417,  417,  417,  417,  419,  419,  419,  419,
      419,  421,  421,  421,  421,  421,  446,  446,  446,  446,
      446,  447,  447,  447,  447,  447,  449,  449,  449,  449,
      449,  450,  450,  450,  450,  450,  143,  143, 1366,  143,
      143,  451,  451,  451,  451,  451,  453,  453,  453,  453,
      453,  456,  456,  456,  456,  456,  459,  459,  459,  459,
      459,  464,  464,  464,  464,  464,  502,  502,  502,  502,
      502,  503,  503,  503,  503,  503,  505,  505,  505,  505,
      505,  506,  506,  506,  506,  506,  174,  174, 1366,  174,
      174,  507,  507,  507,  507,  507,  509,  509,  509,  509,

      509,  512,  512,  512,  512,  512,  515,  515,  515,  515,
      515,  520,  520,  520,  520,  520,  194,  194,  194,  194,
     1366,  194, 1366, 1366,  194,  521,  521,  521,  521,  522,
      522,  522,  194,  194,  194,  194,  194,  524,  524,  524,
      524,  524,  526,  526,  526,  526,  526,  528,  528,  528,
      528,  528,  553,  553,  553,  553,  553,  554,  554,  554,
      554,  554,  556,  556,  556,  556,  556,  557,  557,  557,
      557,  557,  208,  208, 1366,  208,  208,  558,  558,  558,
      558,  558,  560,  560,  560,  560,  560,  563,  563,  563,
      563,  563,  566,  566,  566,  566,  566,  571,  571,  571,

      571,  571,  228, 1366,  228,  581,  581,  581,  581,  581,
      582,  582,  582,  582,  582,  584,  584,  584,  584,  584,
      585,  585,  585,  585,  585,  232,  232, 1366,  232,  232,
      586,  586,  586,  586,  586,  588,  588,  588,  588,  588,
      590,  590,  590,  590,  590,  593,  593,  593,  593,  593,
      596,  596,  596,  596,  596,  601,  601,  601,  601,  601,
      334,  334,  334,  334,  334,  704,  704,  704,  704,  704,
      328,  328,  328,  328,  328,  709,  709,  709,  709,  709,
      710,  710,  710,  710,  710,  711,  711,  711,  711,  711,
      713,  713,  713,  713,  713,  714,  714,  714,  714,  714,

      715,  715,  715,  715,  715,  715, 1366,  715, 1366, 1366,
      715,  353,  353,  353,  353,  353,   83,   83,   83,   83,
       83,  728,  728,  728,  728,  728,  729,  729,  729,  729,
      729,  730,  730,  730,  730,  730,  731,  731,  731,  731,
      731,  362,  362,  362,  362,  362,   96,   96,   96,   96,
       96,  732,  732,  732,  732,  732,  733,  733,  733,  733,
      733,  734,  734,  734,  734,  734,  735,  735,  735,  735,
      735,  737,  737,  737,  737,  737,  738,  738,  738,  738,
      738,  740,  740,  740,  740,  740,  741,  741,  741,  741,
      741,  371,  371, 1366,  371,  371,  370,  370,  370, 1366,

      370,  742,  742,  742,  742,  742,  744,  744,  744,  744,
      744,  747,  747,  747,  747,  747,  750,  750,  750,  750,
      750,  755,  755,  755,  755,  755,  398,  398,  398,  398,
      398,  756,  756,  756,  756,  756,  393,  393,  393,  393,
      393,  757,  757,  757,  757,  757,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  761,  761,  761,  761,
      761,  762,  762,  762,  762,  762,  763,  763,  763,  763,
      763,  763, 1366,  763, 1366, 1366,  763,  415,  415,  415,
      415,  415,  128,  128,  128,  128,  128,  776,  776,  776,
      776,  776,  777,  777,  777,  777,  777,  778,  778,  778,

      778,  778,  779,  779,  779,  779,  779,  781,  781,  781,
      781,  781,  782,  782,  782,  782,  782,  784,  784,  784,
      784,  784,  785,  785,  785,  785,  785,  424,  424, 1366,
      424,  424,  423,  423,  423, 1366,  423,  786,  786,  786,
      786,  786,  788,  788,  788,  788,  788,  791,  791,  791,
      791,  791,  794,  794,  794,  794,  794,  799,  799,  799,
      799,  799,  451,  451,  451,  451,  451,  800,  800,  800,
      800,  800,  446,  446,  446,  446,  446,  801,  801,  801,
      801,  801,  802,  802,  802,  802,  802,  803,  803,  803,
      803,  803,  805,  805,  805,  805,  805,  806,  806,  806,

      806,  806,  822,  822,  822,  822,  822,  823,  823,  823,
      823,  823,  825,  825,  825,  825,  825,  826,  826,  826,
      826,  826,  479,  479, 1366,  479,  479,  827,  827,  827,
      827,  827,  829,  829,  829,  829,  829,  831,  831,  831,
      831,  831,  834,  834,  834,  834,  834,  837,  837,  837,
      837,  837,  842,  842,  842,  842,  842,  507,  507,  507,
      507,  507,  843,  843,  843,  843,  843,  502,  502,  502,
      502,  502,  844,  844,  844,  844,  844,  845,  845,  845,
      845,  845,  846,  846,  846,  846,  846,  848,  848,  848,
      848,  848,  849,  849,  849,  849,  849,  522,  522,  522,

      522,  522,  194,  194,  194,  194,  194,  850,  850,  850,
      850,  850,  851,  851,  851,  851,  851,  852,  852,  852,
      852,  852,  853,  853,  853,  853,  853,  855,  855,  855,
      855,  855,  856,  856,  856,  856,  856,  858,  858,  858,
      858,  858,  859,  859,  859,  859,  859,  531,  531, 1366,
      531,  531,  530,  530,  530, 1366,  530,  860,  860,  860,
      860,  860,  862,  862,  862,  862,  862,  865,  865,  865,
      865,  865,  868,  868,  868,  868,  868,  873,  873,  873,
      873,  873,  558,  558,  558,  558,  558,  874,  874,  874,
      874,  874,  553,  553,  553,  553,  553,  875,  875,  875,

      875,  875,  876,  876,  876,  876,  876,  877,  877,  877,
      877,  877,  879,  879,  879,  879,  879,  880,  880,  880,
      880,  880,  881,  881,  588,  588,  588,  588,  588,  882,
      882,  882,  882,  882,  581,  581,  581,  581,  581,  883,
      883,  883,  883,  883,  884,  884,  884,  884,  884,  885,
      885,  885,  885,  885,  887,  887,  887,  887,  887,  888,
      888,  888,  888,  888,  996,  996,  996,  996,  996,  997,
      997,  997,  997,  997,  999,  999,  999,  999,  999, 1000,
     1000, 1000, 1000, 1000,  682,  682, 1366,  682,  682, 1001,
     1001, 1001, 1001, 1001, 1003, 1003, 1003, 1003, 1003, 1006,

     1006, 1006, 1006, 1006, 1009, 1009, 1009, 1009, 1009, 1014,
     1014, 1014, 1014, 1014, 1019, 1019, 1019, 1019, 1019,  715,
      715,  715,  715,  715,  715, 1366,  715, 1366, 1366,  715,
     1021, 1021, 1021, 1021, 1022, 1022, 1022,  715,  715,  715,
      715,  715, 1024, 1024, 1024, 1024, 1024, 1026, 1026, 1026,
     1026, 1026, 1028, 1028, 1028, 1028, 1028,   83, 1366,   83,
       83,   83,   83, 1366,   83, 1366, 1366,   83,   83,   83,
       83,   83,   83,  353,  353,  353,  353,  353,   96, 1366,
       96,   96,   96,   96, 1366,   96, 1366, 1366,   96,   96,
       96,   96,   96,   96,  362,  362,  362,  362,  362,  742,

      742,  742,  742,  742, 1030, 1030, 1030, 1030, 1030,  737,
      737,  737,  737,  737, 1031, 1031, 1031, 1031, 1031, 1032,
     1032, 1032, 1032, 1032, 1033, 1033, 1033, 1033, 1033, 1035,
     1035, 1035, 1035, 1035, 1036, 1036, 1036, 1036, 1036, 1037,
     1037, 1037, 1037, 1037,  763,  763,  763,  763,  763,  763,
     1366,  763, 1366, 1366,  763, 1039, 1039, 1039, 1039, 1040,
     1040, 1040,  763,  763,  763,  763,  763, 1042, 1042, 1042,
     1042, 1042, 1044, 1044, 1044, 1044, 1044, 1046, 1046, 1046,
     1046, 1046,  128, 1366,  128,  128,  128,  128, 1366,  128,
     1366, 1366,  128,  128,  128,  128,  128,  128,  415,  415,

      415,  415,  415,  786,  786,  786,  786,  786, 1048, 1048,
     1048, 1048, 1048,  781,  781,  781,  781,  781, 1049, 1049,
     1049, 1049, 1049, 1050, 1050, 1050, 1050, 1050, 1051, 1051,
     1051, 1051, 1051, 1053, 1053, 1053, 1053, 1053, 1054, 1054,
     1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055,  829,  829,
      829,  829,  829, 1064, 1064, 1064, 1064, 1064,  822,  822,
      822,  822,  822, 1065, 1065, 1065, 1065, 1065, 1066, 1066,
     1066, 1066, 1066, 1067, 1067, 1067, 1067, 1067, 1069, 1069,
     1069, 1069, 1069, 1070, 1070, 1070, 1070, 1070, 1071, 1071,
     1071, 1071, 1071,  194,  194,  194,  194, 1366,  194, 1366,

     1366,  194,  194,  194,  194,  194,  194,  522,  522,  522,
      522,  522,  860,  860,  860,  860,  860, 1072, 1072, 1072,
     1072, 1072,  855,  855,  855,  855,  855, 1073, 1073, 1073,
     1073, 1073, 1074, 1074, 1074, 1074, 1074, 1075, 1075, 1075,
     1075, 1075, 1077, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1079, 1079, 1079, 1079, 1079,  881,  881,  881,
     1080, 1080, 1080, 1080, 1080, 1156, 1156, 1156, 1156, 1156,
     1157, 1157, 1157, 1157, 1157, 1159, 1159, 1159, 1159, 1159,
     1160, 1160, 1160, 1160, 1160,  973,  973, 1366,  973,  973,
     1161, 1161, 1161, 1161, 1161, 1163, 1163, 1163, 1163, 1163,

     1165, 1165, 1165, 1165, 1165, 1168, 1168, 1168, 1168, 1168,
     1171, 1171, 1171, 1171, 1171, 1176, 1176, 1176, 1176, 1176,
     1001, 1001, 1001, 1001, 1001, 1177, 1177, 1177, 1177, 1177,
      996,  996,  996,  996,  996, 1178, 1178, 1178, 1178, 1178,
     1179, 1179, 1179, 1179, 1179, 1180, 1180, 1180, 1180, 1180,
     1182, 1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183,
      593,  593,  593,  593,  593,  715,  715,  715,  715,  715,
      715, 1366,  715, 1366, 1366,  715, 1022, 1022, 1022, 1022,
     1022,  715,  715,  715,  715,  715, 1188, 1188, 1188, 1188,
     1188, 1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190,

     1190, 1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192, 1192,
     1192,  763,  763,  763,  763,  763,  763, 1366,  763, 1366,
     1366,  763, 1040, 1040, 1040, 1040, 1040,  763,  763,  763,
      763,  763, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195, 1195, 1196, 1196, 1196, 1196, 1196, 1197, 1197, 1197,
     1197, 1197, 1198, 1198, 1198, 1198, 1198, 1199, 1199, 1199,
     1199, 1199, 1200, 1200, 1200, 1200, 1200, 1163, 1163, 1163,
     1163, 1163, 1250, 1250, 1250, 1250, 1250, 1156, 1156, 1156,
     1156, 1156, 1251, 1251, 1251, 1251, 1251, 1252, 1252, 1252,
     1252, 1252, 1253, 1253, 1253, 1253, 1253, 1255, 1255, 1255,

     1255, 1255, 1256, 1256, 1256, 1256, 1256, 1257, 1257, 1257,
     1257, 1257,  581,  581,  581,  581,  581,  715,  715,  715,
      715,  715,  715, 1366,  715, 1366, 1366,  715,  715,  715,
      715,  715,  715, 1022, 1022, 1022, 1022, 1022,  763,  763,
      763,  763,  763,  763, 1366,  763, 1366, 1366,  763,  763,
      763,  763,  763,  763, 1040, 1040, 1040, 1040, 1040, 1299,
     1299, 1299, 1299, 1299,  593,  593,  593,  593,  593,  581,
      581,  581,  581,  581,    3, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366
    } ;

static yyconst flex_int16_t yy_chk[9812] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,   10,   80,    5,
        9,   80,   14,   14,   14,   14,   51,   51,   51,   51,
      163, 1371,  163,   10,   14,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   17,   17, 1361,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19, 1360,   19,   19,   19,   19,
       19,   19,   19,   19, 1358,    9,  337,  337,   19,   20,

       20,   20,   20,   20,   20,   20,   20,   51,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   66,   66,   66,   66,
       66,   66,   68,  401,  401,    9,   69,   69,   69,   69,
       68,   69,   71,   71,   71,   71,   71,   71,   71,   71,
       71,    9, 1344,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   77,   77,
       77,   77,   77,  233, 1343,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
      234,  235,  236,  233,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
      234,  235,  236, 1311,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,  454,  454,
       11,   11, 1290,   11,   11,   11,   11,   11,   11,   11,
       11, 1289,   11,   11,   11,   13,   22, 1288,   22,   22,
       22,   22,   22,   22,   22,   22,  115,  151,   31,   31,

      182,   31,  216, 1273,  115,  151,   31,   22,  182,   31,
      216,   31,   31,   37,   37,   31,   37,  237,   31,  510,
      510,   31,  238, 1263,   37,  237,   37,   37,   31,   31,
       37,   31,  248,   37,  261,   13,   31,   22, 1261,   31,
      248,   31,   31,   37,   37,   31,   37,  237,   31,   73,
       73,   31,  238,   73,   37,  237,   37,   37,  249,  381,
       37,   73,  262,   37,  261,  434,  249,  381,   73,   73,
       73,   73,   73,  434, 1260,   13,   89,   89,   89,   89,
       89,   89,   89,   89,   89,  113,  113,  113,  113,  113,
      113,   13,  262,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       16,   16,   16,   16,   16,   16,   16,   16,  116,  116,
      116,  116,  263,  116, 1258,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      264,  266,  263,  267,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      264,  266,  269,  267,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   16,  272,  273,
       16,   16,  269,   16,   16,   16,   16,   16,   16,   16,
       16, 1237,   16,   16,   16,   23,   23,   23,   23,   23,
       23,   23,   23,  124,  124,  124,  124,  124,  272,  273,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  274,  274,  275,  276,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  274,  274,  275,  276,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  561,  561,   23,   23, 1236,   23,   23,
       23,   23,   23,   23,   23,   23, 1235,   23,   23,   23,
       25,   25,   32,  277,   32,   32,  270, 1212,   85, 1170,
      278,  270,   32,   85,   32,   32, 1136,   32,   32,  280,
      281,   32, 1135,  152,  152,  152,  152,   39,  152,   39,
      283,  283,   32,  277,   32,   32,  270,   39, 1134,   39,
      278,  270,   32,   39,   32,   32,   39,   32,   32,  280,
      281,   32,  141,  141,  141,  141, 1133,   39,  489,   39,

      283,  283, 1101,   85,  141, 1040,  489,   39,   85,   39,
       25,  341,   85,   39,  490,  341,   39, 1004, 1004,  541,
       85,  341,  490,   85, 1022,   85,   25,  541,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   28,   28,   28,   28,   28,
       28,   28,   28,  149,  149,  149,  149,  149,  149, 1019,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  284,  286,  287,  288,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  284,  286,  287,  288,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28, 1016, 1008,   28,   28,  289,   28,   28,
       28,   28,   28,   28,   28,   28,  990,   28,   28,   28,
       30,   30,  981,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  160,  160,  160,  160,  160,  289,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,  290,  292,  293,  295,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  290,  292,  293,  295,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  974,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  929,   30,   30,   30,   33,   33,
      294,   33,   33,  279,  297,  296,   33,  294,  296,   33,
      881,   33,  867,  298,   33,   33,  299,  279,   33,   95,

       95,   95,   95,   95,   95,   95,   95,  836,   33,   33,
      294,   33,   33,  279,  297,  296,   33,  294,  296,   33,
       34,   33,   34,  298,   33,   33,  299,  279,   33,  793,
       34,  749,   34,  300,  708,  707,   34,  300,  703,   34,
      301,   34,  180,  180,  180,  180,  180,  180,  303,   35,
       34,   35,   34,  120,  120,  702,   35,  696,  304,   35,
       34,   35,   34,  300,   35,   35,   34,  300,   35,   34,
      301,   34,  120,  120,  120,  120,  120,  665,  303,   35,
      306,   35,  183,  183,  183,  183,   35,  183,  304,   35,
       36,   35,   36,  307,   35,   35,  643,  310,   35,  313,

       36,  595,   36,  308,  315,   36,   36,   47,  565,   36,
      306,   47,  547,  302,   47,   47,  302,  309,  539,  308,
       36,   47,   36,  307,  532,   47,   47,  310,  309,  313,
       36,   47,   36,  308,  315,   36,   36,   47,   38,   36,
       38,   47,   38,  302,   47,   47,  302,  309,   38,  308,
       38,   47,  316,   38,   38,   47,   47,   38,  309,  522,
      514,   47,  191,  191,  191,  191,  191,  317,   38,  496,
       38,  487,   38,  318,  217,  217,  217,  217,   38,  217,
       38,  480,  316,   38,   38,  465,  690,   38,   40,   40,
       40,   40,  319,  320,  690,  602,   40,  317,  603,   40,

      604,   40,   40,  318,  458,   40,  591,  591,   40,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   40,   40,
       40,   40,  319,  320,  591,  602,   40,  440,  603,   40,
      604,   40,   40,   41,   41,   40,   41,   41,   40,  605,
      606,   41,  607,  608,   41,  610,   41,   41,   42,   42,
       41,   42,  611,   41,  225,  225,  225,  225,  225,   42,
      612,   42,   42,   41,   41,   42,   41,   41,   42,  605,
      606,   41,  607,  608,   41,  610,   41,   41,   42,   42,
       41,   42,  611,   41,  258,  258,  258,  258,  258,   42,
      612,   42,   42,  432,  425,   42,   49,   43,   42,   43,

       49,   43,  613,   49,   49,  615,  616,   43,  415,   43,
      405,   43,   43,   43,   49,   49,   43,  106,  106,  106,
      106,  106,  106,  106,  106,  617,   49,   43,  618,   43,
       49,   43,  613,   49,   49,  615,  616,   43,   44,   43,
       44,   43,   43,   43,   49,   49,   43,  305,   44,  387,
       44,  619,  379,   44,   44,  617,  305,   44,  618,  620,
      305,  305,   45,   45,  621,   45,   45,  372,   44,  362,
       44,  353,  343,   45,  622,   45,   45,  305,   44,   45,
       44,  619,   45,   44,   44,  623,  305,   44,  624,  620,
      305,  305,   45,   45,  621,   45,   45,  214,  214,  214,

      214,  214,  214,   45,  622,   45,   45,  340,  326,   45,
      745,  745,   45,   46,   46,  623,   46,   46,  624,  625,
       46,   46,  626,  627,   46,  628,   46,  325,  745,  291,
       46,   46,   46,   46,  110,  110,  110,  110,  110,  110,
      110,  110,  110,   46,   46,  255,   46,   46,  246,  625,
       46,   46,  626,  627,   46,  628,   46,   48,   48,   48,
       46,   46,   46,   46,  629,  271,  630,   48,  631,   48,
      633,  271,   48,   48,   50,   48,   48,  271,   50,  239,
      314,   50,   50,  230,  634,  314,  228,   48,   48,   48,
      222,  314,   50,   50,  629,  271,  630,   48,  631,   48,

      633,  271,   48,   48,   50,   48,   48,  271,   50,   56,
      314,   50,   50,   56,  634,  314,   56,   56,  188,  157,
       56,  314,   50,   50,  129,   56,  635,   56,   56,  636,
       57,  637,  638,  639,   57,  640,  609,   57,   57,   56,
      121,   84,   74,   56,   57,   59,   56,   56,   57,   57,
       56,  609,  609,  641,   57,   56,  635,   56,   56,  636,
       57,  637,  638,  639,   57,  640,  609,   57,   57,  983,
      382,  382,  382,  382,   57,  382,   57,  983,   57,   57,
       54,  609,  609,  641,   57,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   83,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
      390,  390,  390,  390,  390,   96,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  245,  245,  245,  245,  245,
      245,   96,   83,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  250,  250,  250,  250,
      250,  250,   83,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  338,  338,  338,  338,  338,  338,   83,   53,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  107,  107,  107,  107,  107,  107,  107,
      107,   27,  321,  321,  321,  321,  644,   12,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,    8,  645,  646,  644,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  321,  645,  646,    7,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    3,  107,  107,  107,    0,  107,  107,  107,  107,
      107,  107,  107,  107,    0,  107,  107,  107,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      128,  130, 1209, 1209, 1209, 1209,  130,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  156,  156,
      128,    0,  435,  435,  435,  435,  130,  435,  647,  648,
        0,  130,  950,  950,  950,  130,  950,  156,  156,  156,
      156,  156,    0,  130,    0,    0,  130,  651,  130,  140,
      140,  140,  140,  140,  140,  140,  140,    0,  647,  648,

      128,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      347,  347,  347,  347,  347,  347,  128,  651,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  143,  143,  143,  143,  143,
      143,  143,  143,  378,  378,  378,  378,  378,  378,    0,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  652,  653,  654,  655,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  652,  653,  654,  655,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,    0,  143,  143,  143,    0,  143,  143,
      143,  143,  143,  143,  143,  143,    0,  143,  143,  143,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      164,  164,  164,  164,  164,  164,  164,  164,  165,    0,
      165,  165,  165,  165,  165,  165,  165,  165,  167,  167,
      167,  167,  167,  167,  167,  167,  656,    0,  168,  165,
      168,  168,  168,  168,  168,  168,  168,  168,  170,  170,
      170,  170,  170,  170,  170,  170,    0,    0,    0,  168,
      402,  402,  402,  402,  402,  402,  656,  170,    0,  165,
        0,  171,  171,  171,  171,  171,  171,  171,  171,  172,
        0,  172,  172,  172,  172,  172,  172,  172,  172,  168,
      171,  443,  443,  443,  443,  443,  173,  170,  173,    0,
      172,  173,  173,  173,  173,  173,  173,  173,  173,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  657,    0,
      171,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      172,  174,  174,    0,  174,  174,  174,  174,  174,  174,
      174,  174,  409,  409,  409,  409,  409,  409,  657,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  658,  659,  661,  662,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  658,  659,  661,  662,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  194,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,    0,  174,  174,  174,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  187,  187,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  195,  187,  187,  187,
      187,  187,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,    0,    0,
        0,  194,  200,  200,  200,  200,  200,  200,  200,  200,

      200,  431,  431,  431,  431,  431,  431,  194,    0,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  206,  206,  206,  206,
      206,  206,  206,  206,    0,  195,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  455,  455,  455,  455,  455,
      455,  195,    0,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  208,  208,  208,  208,  208,  208,  208,  208,
      462,  462,  462,  462,  462,  462,    0,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  663,  664,  666,  667,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  663,  664,  666,  667,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

        0,  208,  208,  208,    0,  208,  208,  208,  208,  208,
      208,  208,  208,    0,  208,  208,  208,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  221,  221,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,    0,  221,  221,  221,  221,  221,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  229,  229,    0,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  486,  486,  486,
      486,  486,  486,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  669,  671,
      672,  673,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  669,  671,
      672,  673,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,    0,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,    0,
      229,  229,  229,  231,  231,  231,  231,  231,  231,  231,

      231,  491,  491,  491,  491,  491,  491,    0,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  674,  675,  677,  678,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  674,  675,  677,  678,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,    0,    0,  231,  231,    0,  231,  231,  231,  231,

      231,  231,  231,  231,    0,  231,  231,  231,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  254,  254,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  679,  254,  254,  254,  254,  254,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  268,  680,  285,  499,  499,
      499,  499,  499,  679,  285,  984,    0,  285,  268,  285,
      268,  681,    0,  984,  268,  285,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  268,  680,  285,  511,  511,
      511,  511,  511,  511,  285,  386,  386,  285,  268,  285,
      268,  681,  789,  789,  268,  285,  324,  324,  324,  324,
      324,  324,  324,  324,  386,  386,  386,  386,  386,  890,
      789,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  891,  892,  894,  890,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  891,  892,  894,    0,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,    0,    0,  324,  324,    0,  324,
      324,  324,  324,  324,  324,  324,  324,    0,  324,  324,
      324,  351,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391, 1217, 1217, 1217, 1217,  351,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  439,  439,  475,  475,  475,  475,
      475,  475,  475,  475,    0,    0,  351,  518,  518,  518,
      518,  518,  518,  439,  439,  439,  439,  439,  542,  542,
      542,  542,  351,  542,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  370,  370,  370,  370,  370,  370,  370,  370,  538,
      538,  538,  538,  538,  538,    0,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  895,  896,  897,  898,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  895,  896,  897,  898,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,    0,
      370,  370,  370,    0,  370,  370,  370,  370,  370,  370,
      370,  370,    0,  370,  370,  370,  413,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  442,  442,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  466,
      466,  466,  466,  466,  466,  466,  466,    0,  467,  467,
      467,  467,  467,  467,  467,  467,  413,  900,  466,  691,
      691,  691,  691,  468,  691,  468,    0,  467,  468,  468,
      468,  468,  468,  468,  468,  468,  476,  476,  476,  476,
      476,  476,  476,  476,    0,    0,    0,  900,  466,    0,
        0,    0,    0,  471,    0,  471,  413,  467,  471,  471,
      471,  471,  471,  471,  471,  471,  550,  550,  550,  550,
      550,    0,  413,    0,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  423,  423,  423,  423,  423,  423,  423,  423,  562,
      562,  562,  562,  562,  562,    0,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  901,  902,  903,  904,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  901,  902,  903,  904,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,    0,
      423,  423,  423,  905,  423,  423,  423,  423,  423,  423,
      423,  423,  906,  423,  423,  423,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  470,  470,  470,  470,  470,
      470,  470,    0,  905,    0,  469,  908,  910,  911,  472,
        0,  472,  906,  470,  472,  472,  472,  472,  472,  472,
      472,  472,  473,  473,  473,  473,  473,  473,  473,  473,
      699,  699,  699,  699,  699,  469,  908,  910,  911,    0,
      474,  473,  474,  470,  912,  474,  474,  474,  474,  474,
      474,  474,  474,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  473,  477,  477,  912,  477,  477,  477,  477,  477,
      477,  477,  477,  569,  569,  569,  569,  569,  569,    0,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  914,  915,  916,  917,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  914,  915,  916,  917,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,    0,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,    0,  477,  477,  477,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  495,
      495,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,    0,  495,  495,
      495,  495,  495,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  530,
      530,  530,  530,  530,  530,  530,  530,  592,  592,  592,
      592,  592,  592,    0,  530,  530,  530,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  918,
      920,  921,  922,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  918,
      920,  921,  922,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,    0,  530,  530,
      530,    0,  530,  530,  530,  530,  530,  530,  530,  530,
        0,  530,  530,  530,  534,  534,  534,  534,  534,  534,

      534,  534,  534,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  546,  546,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,    0,
      546,  546,  546,  546,  546,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  573,  573,    0,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  599,  599,  599,  599,  599,  599,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,

      573,  573,  573,  573,  923,  924,  925,  926,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  923,  924,  925,  926,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  927,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  660,  573,  573,  573,  668,
      668,    0,  668,  668,  930,  932,  660,  934,  832,  832,
      668,    0,  927,  863,  863,  935,  668,  936,  668,  688,

      688,  688,  688,  688,  688,  660,  832,    0,    0,  668,
      668,  863,  668,  668,  930,  932,  660,  934,    0,    0,
      668,  695,  695,    0,    0,  935,  668,  936,  668,  682,
      682,    0,  682,  682,  682,  682,  682,  682,  682,  682,
      695,  695,  695,  695,  695,  937,    0,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  931,  931,  938,  937,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,

      682,  682,  931,  931,  938,    0,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
        0,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,    0,  682,  682,  682,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  715,  717,    0,    0,
        0,    0,  717,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  746,  746,  746,  746,  746,  746,
     1185,  715,  717, 1166, 1166,    0,    0,  717,    0, 1185,
        0,  717,  753,  753,  753,  753,  753,  753, 1185,  717,
        0, 1166,  717,    0,  717,  727,  727,  727,  727,  727,
      727,  727,  727,  775,  775,  775,  775,  775,  775,  775,

      775,  715,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  790,  790,  790,  790,  790,  790,  715,    0,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  716,  732,  765,    0,
        0,    0,    0,  765,  797,  797,  797,  797,  797,  797,
        0,    0,    0,  732,    0,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,    0,    0,
        0,  716,    0,  765,    0,  939,  941,    0,  765,    0,

      942,    0,  765,  833,  833,  833,  833,  833,  833,    0,
      765,    0,  807,  765,  807,  765,  943,  807,  807,  807,
      807,  807,  807,  807,  807,  939,  941,  809,    0,  809,
      942,  716,  809,  809,  809,  809,  809,  809,  809,  809,
      840,  840,  840,  840,  840,  840,  943,  716,    0,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  728,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  808,  808,  808,  808,  808,  808,  808,
      808,  810,  810,  810,  810,  810,  810,  810,  810,    0,

      944,    0,  808,  811,  811,  811,  811,  811,  811,  811,
      811,  864,  864,  864,  864,  864,  864,  812,    0,  812,
        0,  728,  812,  812,  812,  812,  812,  812,  812,  812,
      944,  814,  808,  814,    0,    0,  814,  814,  814,  814,
      814,  814,  814,  814,  815,  815,  815,  815,  815,  815,
      815,  815,  816,  816,  816,  816,  816,  816,  816,  816,
        0,  728,  817,  817,  817,  817,  817,  817,  817,  817,
      871,  871,  871,  871,  871,  871,  945,  728,  946,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  736,  736,  736,  736,

      736,  736,  736,  736,    0,    0,  945,  947,  946,  948,
        0,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  949,  947,  951,  948,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  949,    0,  951,    0,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  850,  736,  736,  736,    0,  736,

      736,  736,  736,  736,  736,  736,  736,    0,  736,  736,
      736,  763,    0,  813,  813,  813,  813,  813,  813,  813,
      813,  818,  818,  818,  818,  818,  818,  818,  818,  952,
      953,    0,  813,  819,  819,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,  820,  820,  820, 1328,
      954,  980,  980,  980,  980,  980,  980,    0, 1328,  952,
      953,  763,  813,  850,    0,    0,    0, 1328,  955,  956,
      957,    0,  958,  959,  957,  960,  961,  962,  963,  850,
      954,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  955,  956,

      957,  763,  958,  959,  957,  960,  961,  962,  963,  964,
      965,  966,  968,    0,    0,    0,    0,  763,    0,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  764,    0,    0,  964,
      965,  966,  968,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  985,  985,  985,  985,  985,  985,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  989,  989,  993,  993,
      993,  993,  993,    0,    0,    0,  764, 1005, 1005, 1005,
     1005, 1005, 1005, 1081, 1085,  989,  989,  989,  989,  989,

      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992, 1012, 1012, 1012, 1012,
     1012, 1012,    0, 1081, 1085,    0,  764, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1167, 1167, 1167, 1167, 1167,
     1167,    0,  764,    0,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  776,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994, 1017, 1017,
     1086,    0,    0, 1018, 1018,    0,    0,    0,    0,    0,
     1017,    0,    0,    0,    0, 1018,    0, 1017, 1017, 1017,

     1017, 1017, 1018, 1018, 1018, 1018, 1018,    0,    0,    0,
     1086,  776, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1174, 1174, 1174, 1174, 1174, 1174,
        0,  776, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
        0,    0,    0,    0, 1087, 1088, 1090,  776, 1091,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  780,  780,  780,  780,
      780,  780,  780,  780, 1087, 1088, 1090, 1092, 1091, 1093,

        0,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780, 1094, 1092, 1095, 1093,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780, 1094,    0, 1095,    0,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780, 1096,  780,  780,  780, 1097,  780,
      780,  780,  780,  780,  780,  780,  780,    0,  780,  780,

      780,  821,  821,    0,  821,  821,  821,  821,  821,  821,
      821,  821,    0,    0, 1096, 1098, 1102, 1104, 1097,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821, 1105, 1098, 1102, 1104,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821, 1105,    0,    0,    0,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,

      821,  821, 1107,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,    0,  821,  821,  821,  854,
      854,  854,  854,  854,  854,  854,  854,    0,    0, 1108,
     1110, 1114, 1107,    0,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854, 1108,
     1110, 1114, 1116,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,    0,
        0, 1119, 1116,  854,  854,  854,  854,  854,  854,  854,

      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854, 1120,  854,  854,
      854, 1119,  854,  854,  854,  854,  854,  854,  854,  854,
        0,  854,  854,  854,  882,  882,    0,  882,  882,  882,
      882,  882,  882,  882,  882,  882,    0, 1120, 1122, 1124,
     1127,    0,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882, 1128, 1122, 1124,
     1127,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882, 1128,    0,    0,
        0,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882, 1129,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,    0,  882,
      882,  882,  971,  971,    0,  971,  971,  971,  971,  971,
      971,  971,  971,    0,    0, 1129, 1130, 1131, 1132,    0,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971, 1137, 1130, 1131, 1132,  971,

      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971, 1137,    0,    0,    0,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971, 1138,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,    0,  971,  971,  971,
     1015, 1015,    0, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015,    0, 1138, 1139, 1140, 1142,    0, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,

     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1143, 1139, 1140, 1142, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1143,    0,    0,    0, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015,    0, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1144, 1015, 1015, 1015, 1020, 1062,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1063, 1063, 1063,

     1063, 1063, 1063, 1063, 1063, 1145, 1146, 1147, 1148, 1152,
     1186, 1201, 1202,    0, 1144, 1204, 1205, 1207, 1208, 1210,
     1211, 1215, 1218, 1219, 1186, 1220, 1221, 1222, 1223, 1225,
     1186, 1227, 1228, 1230, 1232, 1145, 1146, 1147, 1148, 1152,
     1233, 1201, 1202, 1020, 1240, 1204, 1205, 1207, 1208, 1210,
     1211, 1215, 1218, 1219, 1241, 1220, 1221, 1222, 1223, 1225,
     1242, 1227, 1228, 1230, 1232, 1243, 1245, 1246, 1248,    0,
     1233, 1329,    0,    0, 1240,    0,    0,    0,    0,    0,
        0,    0,    0, 1020, 1241, 1329,    0,    0,    0,    0,
     1242, 1329,    0,    0,    0, 1243, 1245, 1246, 1248, 1020,

     1249, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030,    0,    0, 1264, 1265,
     1249, 1266,    0, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1264, 1265,
     1267, 1266, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,    0,    0,
     1267,    0, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1268, 1030, 1030, 1030,
     1271, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1272,
     1030, 1030, 1030, 1038, 1270, 1270, 1270, 1270, 1274, 1275,
     1275, 1275, 1275, 1277, 1278, 1279, 1268, 1282, 1284, 1286,
     1271, 1291, 1292,    0, 1295, 1297, 1298, 1304, 1307, 1272,
        0,    0, 1308, 1312, 1313,    0,    0, 1314, 1274, 1315,
     1316, 1270,    0, 1277, 1278, 1279, 1275, 1282, 1284, 1286,
        0, 1291, 1292, 1038, 1295, 1297, 1298, 1304, 1307, 1270,
     1300, 1300, 1308, 1312, 1313, 1301, 1301, 1314, 1319, 1315,

     1316, 1270, 1300, 1324, 1325, 1327, 1275, 1301, 1331, 1300,
     1300, 1300, 1300, 1300, 1301, 1301, 1301, 1301, 1301, 1270,
        0,    0,    0, 1038,    0,    0,    0,    0, 1319,    0,
        0,    0,    0, 1324, 1325, 1327, 1332, 1333, 1331, 1038,
     1334, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1332, 1333, 1335, 1338,
     1334, 1345,    0, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1335, 1338,

     1346, 1345, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,    0,    0,
     1346,    0, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1347, 1048, 1048, 1048,
     1348, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,    0,
     1048, 1048, 1048, 1064, 1064,    0, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064,    0,    0, 1347, 1349, 1350, 1352,
     1348, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,

     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1353, 1349, 1350, 1352,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1353,    0,    0,    0,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1354, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1064, 1064,    0, 1064, 1064,
     1064, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,    0,

        0, 1362, 1363, 1364, 1354,    0, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1362, 1363, 1364,    0, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072,    0,    0,    0,    0, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,    0,
     1072, 1072, 1072,    0, 1072, 1072, 1072, 1072, 1072, 1072,

     1072, 1072,    0, 1072, 1072, 1072, 1080, 1080,    0, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,    0,    0,
        0,    0,    0,    0, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,    0,
        0,    0,    0, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,    0,
        0,    0,    0, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,

     1080, 1080, 1080, 1080, 1080, 1080, 1080,    0, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
        0, 1080, 1080, 1080, 1155, 1155,    0, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155,    0,    0,    0,    0,    0,
        0,    0, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155,    0,    0,    0,
        0, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155,    0,    0,    0,

        0, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155,    0, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,    0, 1155,
     1155, 1155, 1188,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1188,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1188,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1188,    0, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
        0,    0,    0,    0,    0,    0,    0, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192,    0,    0,    0,    0, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192,    0,    0,    0,    0, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
        0, 1192, 1192, 1192,    0, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192,    0, 1192, 1192, 1192, 1194,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1194,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1194,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1194,    0, 1194, 1194, 1194, 1194, 1194,

     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
        0,    0,    0,    0,    0,    0,    0, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198,    0,    0,    0,    0, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198,    0,    0,    0,    0, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,

     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
        0, 1198, 1198, 1198,    0, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198,    0, 1198, 1198, 1198, 1199, 1199,    0,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,    0,    0,
        0,    0,    0,    0,    0, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
        0,    0,    0,    0, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,

        0,    0,    0,    0, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,    0, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199,    0, 1199, 1199, 1199, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200,    0,    0,    0,    0,    0,    0,    0,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200,    0,    0,    0,    0, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200,    0,    0,    0,    0, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200,    0, 1200, 1200, 1200,    0, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200,    0, 1200, 1200, 1200,
     1367,    0, 1367, 1367, 1367, 1367,    0, 1367,    0,    0,
     1367, 1368,    0, 1368, 1368, 1368, 1368,    0, 1368,    0,
        0, 1368, 1369,    0, 1369, 1369, 1369, 1369,    0, 1369,
        0,    0, 1369, 1370, 1370, 1370, 1370,    0, 1370,    0,

        0, 1370, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1373,
     1373, 1373, 1374, 1374, 1374, 1374, 1374, 1375, 1375, 1375,
     1375, 1375, 1376, 1376,    0, 1376, 1376, 1377, 1377, 1377,
     1377, 1377, 1378, 1378, 1378, 1378, 1378, 1379, 1379, 1379,
     1379, 1379, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,
     1381, 1381, 1382,    0, 1382, 1382, 1382, 1382,    0, 1382,
        0,    0, 1382, 1383, 1383, 1383, 1383, 1384, 1384, 1384,
     1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386,
     1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388, 1388,
     1389,    0, 1389, 1389, 1389, 1389,    0, 1389,    0,    0,

     1389, 1390, 1390, 1390, 1390, 1391, 1391, 1391, 1392, 1392,
     1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393, 1394, 1394,
     1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1396, 1396,
     1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1398, 1398,
     1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1400, 1400,
        0, 1400, 1400, 1401, 1401, 1401, 1401, 1401, 1402, 1402,
     1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1404, 1404,
     1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405, 1406,    0,
     1406, 1406, 1406, 1406,    0, 1406,    0,    0, 1406, 1407,
     1407, 1407, 1407, 1408, 1408, 1408, 1409, 1409, 1409, 1409,

     1409, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411,
     1411, 1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413,
     1413, 1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415,
     1415, 1416, 1416, 1416, 1416, 1416, 1417, 1417,    0, 1417,
     1417, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419,
     1419, 1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421,
     1421, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423,
     1423, 1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425,
     1425, 1426, 1426, 1426, 1426, 1426, 1427, 1427,    0, 1427,
     1427, 1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429, 1429,

     1429, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431,
     1431, 1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433,
        0, 1433,    0,    0, 1433, 1434, 1434, 1434, 1434, 1435,
     1435, 1435, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437,
     1437, 1437, 1438, 1438, 1438, 1438, 1438, 1439, 1439, 1439,
     1439, 1439, 1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441,
     1441, 1441, 1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443,
     1443, 1443, 1444, 1444,    0, 1444, 1444, 1445, 1445, 1445,
     1445, 1445, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447,
     1447, 1447, 1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449,

     1449, 1449, 1450,    0, 1450, 1451, 1451, 1451, 1451, 1451,
     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453,
     1454, 1454, 1454, 1454, 1454, 1455, 1455,    0, 1455, 1455,
     1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457,
     1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459,
     1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461,
     1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463,
     1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465,
     1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467,
     1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469,

     1470, 1470, 1470, 1470, 1470, 1470,    0, 1470,    0,    0,
     1470, 1471, 1471, 1471, 1471, 1471, 1472, 1472, 1472, 1472,
     1472, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474,
     1474, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476,
     1476, 1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478,
     1478, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480,
     1480, 1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482,
     1482, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486,
     1486, 1487, 1487,    0, 1487, 1487, 1488, 1488, 1488,    0,

     1488, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490,
     1490, 1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492,
     1492, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494, 1494,
     1494, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496,
     1496, 1497, 1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498,
     1498, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500,
     1500, 1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502,
     1502, 1502,    0, 1502,    0,    0, 1502, 1503, 1503, 1503,
     1503, 1503, 1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505,
     1505, 1505, 1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507,

     1507, 1507, 1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509,
     1509, 1509, 1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511,
     1511, 1511, 1512, 1512, 1512, 1512, 1512, 1513, 1513,    0,
     1513, 1513, 1514, 1514, 1514,    0, 1514, 1515, 1515, 1515,
     1515, 1515, 1516, 1516, 1516, 1516, 1516, 1517, 1517, 1517,
     1517, 1517, 1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519,
     1519, 1519, 1520, 1520, 1520, 1520, 1520, 1521, 1521, 1521,
     1521, 1521, 1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523,
     1523, 1523, 1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525,
     1525, 1525, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527,

     1527, 1527, 1528, 1528, 1528, 1528, 1528, 1529, 1529, 1529,
     1529, 1529, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531,
     1531, 1531, 1532, 1532,    0, 1532, 1532, 1533, 1533, 1533,
     1533, 1533, 1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535,
     1535, 1535, 1536, 1536, 1536, 1536, 1536, 1537, 1537, 1537,
     1537, 1537, 1538, 1538, 1538, 1538, 1538, 1539, 1539, 1539,
     1539, 1539, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541,
     1541, 1541, 1542, 1542, 1542, 1542, 1542, 1543, 1543, 1543,
     1543, 1543, 1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545,
     1545, 1545, 1546, 1546, 1546, 1546, 1546, 1547, 1547, 1547,

     1547, 1547, 1548, 1548, 1548, 1548, 1548, 1549, 1549, 1549,
     1549, 1549, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551,
     1551, 1551, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553,
     1553, 1553, 1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555,
     1555, 1555, 1556, 1556, 1556, 1556, 1556, 1557, 1557,    0,
     1557, 1557, 1558, 1558, 1558,    0, 1558, 1559, 1559, 1559,
     1559, 1559, 1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561,
     1561, 1561, 1562, 1562, 1562, 1562, 1562, 1563, 1563, 1563,
     1563, 1563, 1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565,
     1565, 1565, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567,

     1567, 1567, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569,
     1569, 1569, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571,
     1571, 1571, 1572, 1572, 1573, 1573, 1573, 1573, 1573, 1574,
     1574, 1574, 1574, 1574, 1575, 1575, 1575, 1575, 1575, 1576,
     1576, 1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577, 1578,
     1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1580,
     1580, 1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581, 1582,
     1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583, 1583, 1584,
     1584, 1584, 1584, 1584, 1585, 1585,    0, 1585, 1585, 1586,
     1586, 1586, 1586, 1586, 1587, 1587, 1587, 1587, 1587, 1588,

     1588, 1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589, 1590,
     1590, 1590, 1590, 1590, 1591, 1591, 1591, 1591, 1591, 1592,
     1592, 1592, 1592, 1592, 1592,    0, 1592,    0,    0, 1592,
     1593, 1593, 1593, 1593, 1594, 1594, 1594, 1595, 1595, 1595,
     1595, 1595, 1596, 1596, 1596, 1596, 1596, 1597, 1597, 1597,
     1597, 1597, 1598, 1598, 1598, 1598, 1598, 1599,    0, 1599,
     1599, 1599, 1599,    0, 1599,    0,    0, 1599, 1600, 1600,
     1600, 1600, 1600, 1601, 1601, 1601, 1601, 1601, 1602,    0,
     1602, 1602, 1602, 1602,    0, 1602,    0,    0, 1602, 1603,
     1603, 1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604, 1605,

     1605, 1605, 1605, 1605, 1606, 1606, 1606, 1606, 1606, 1607,
     1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608, 1609,
     1609, 1609, 1609, 1609, 1610, 1610, 1610, 1610, 1610, 1611,
     1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612, 1613,
     1613, 1613, 1613, 1613, 1614, 1614, 1614, 1614, 1614, 1614,
        0, 1614,    0,    0, 1614, 1615, 1615, 1615, 1615, 1616,
     1616, 1616, 1617, 1617, 1617, 1617, 1617, 1618, 1618, 1618,
     1618, 1618, 1619, 1619, 1619, 1619, 1619, 1620, 1620, 1620,
     1620, 1620, 1621,    0, 1621, 1621, 1621, 1621,    0, 1621,
        0,    0, 1621, 1622, 1622, 1622, 1622, 1622, 1623, 1623,

     1623, 1623, 1623, 1624, 1624, 1624, 1624, 1624, 1625, 1625,
     1625, 1625, 1625, 1626, 1626, 1626, 1626, 1626, 1627, 1627,
     1627, 1627, 1627, 1628, 1628, 1628, 1628, 1628, 1629, 1629,
     1629, 1629, 1629, 1630, 1630, 1630, 1630, 1630, 1631, 1631,
     1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632, 1633, 1633,
     1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1635, 1635,
     1635, 1635, 1635, 1636, 1636, 1636, 1636, 1636, 1637, 1637,
     1637, 1637, 1637, 1638, 1638, 1638, 1638, 1638, 1639, 1639,
     1639, 1639, 1639, 1640, 1640, 1640, 1640, 1640, 1641, 1641,
     1641, 1641, 1641, 1642, 1642, 1642, 1642,    0, 1642,    0,

        0, 1642, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1645, 1645, 1645, 1645, 1645, 1646, 1646, 1646,
     1646, 1646, 1647, 1647, 1647, 1647, 1647, 1648, 1648, 1648,
     1648, 1648, 1649, 1649, 1649, 1649, 1649, 1650, 1650, 1650,
     1650, 1650, 1651, 1651, 1651, 1651, 1651, 1652, 1652, 1652,
     1652, 1652, 1653, 1653, 1653, 1653, 1653, 1654, 1654, 1654,
     1655, 1655, 1655, 1655, 1655, 1656, 1656, 1656, 1656, 1656,
     1657, 1657, 1657, 1657, 1657, 1658, 1658, 1658, 1658, 1658,
     1659, 1659, 1659, 1659, 1659, 1660, 1660,    0, 1660, 1660,
     1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662,

     1663, 1663, 1663, 1663, 1663, 1664, 1664, 1664, 1664, 1664,
     1665, 1665, 1665, 1665, 1665, 1666, 1666, 1666, 1666, 1666,
     1667, 1667, 1667, 1667, 1667, 1668, 1668, 1668, 1668, 1668,
     1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1670, 1670,
     1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672, 1672,
     1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674,
     1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676, 1676, 1676,
     1676,    0, 1676,    0,    0, 1676, 1677, 1677, 1677, 1677,
     1677, 1678, 1678, 1678, 1678, 1678, 1679, 1679, 1679, 1679,
     1679, 1680, 1680, 1680, 1680, 1680, 1681, 1681, 1681, 1681,

     1681, 1682, 1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683,
     1683, 1684, 1684, 1684, 1684, 1684, 1684,    0, 1684,    0,
        0, 1684, 1685, 1685, 1685, 1685, 1685, 1686, 1686, 1686,
     1686, 1686, 1687, 1687, 1687, 1687, 1687, 1688, 1688, 1688,
     1688, 1688, 1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690,
     1690, 1690, 1691, 1691, 1691, 1691, 1691, 1692, 1692, 1692,
     1692, 1692, 1693, 1693, 1693, 1693, 1693, 1694, 1694, 1694,
     1694, 1694, 1695, 1695, 1695, 1695, 1695, 1696, 1696, 1696,
     1696, 1696, 1697, 1697, 1697, 1697, 1697, 1698, 1698, 1698,
     1698, 1698, 1699, 1699, 1699, 1699, 1699, 1700, 1700, 1700,

     1700, 1700, 1701, 1701, 1701, 1701, 1701, 1702, 1702, 1702,
     1702, 1702, 1703, 1703, 1703, 1703, 1703, 1704, 1704, 1704,
     1704, 1704, 1704,    0, 1704,    0,    0, 1704, 1705, 1705,
     1705, 1705, 1705, 1706, 1706, 1706, 1706, 1706, 1707, 1707,
     1707, 1707, 1707, 1707,    0, 1707,    0,    0, 1707, 1708,
     1708, 1708, 1708, 1708, 1709, 1709, 1709, 1709, 1709, 1710,
     1710, 1710, 1710, 1710, 1711, 1711, 1711, 1711, 1711, 1712,
     1712, 1712, 1712, 1712, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366
    } ;

static yyconst flex_int16_t yy_rule_linenum[179] =
    {   0,
      261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
      271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
      291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
      301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
      351,  352,  353,  354,  355,  356,  357,  358,  359,  360,

      361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
      371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
      391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
      401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
      411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
      431,  432,  433,  434,  435,  436,  437,  440
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3261 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 260 "lib/SPARQLfedScanner.lpp"

#line 3425 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1367 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1366 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 179 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 179 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 180 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::GT_INSERT_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_WHERE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRBEFORE;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRAFTER;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_TZ;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_UUID;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRUUID;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 430 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 431 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 433 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 434 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 435 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 436 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 437 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 439 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 440 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 446 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4445 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1367 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1367 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1366);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 446 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::location_type*& yylloc, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    // bool foundNewLine = false;
    for (size_t i = skip; i < yyleng-skip; i++) {
	// if (foundNewLine)
	//     yylloc->step();
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    if ((yytext[i] == '\r' && (i == yyleng-skip -1 || yytext[i+1] != '\n'))
		|| yytext[i] == '\n') {
		yylloc->end.lines(1);
		// foundNewLine = true;
	    }
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


