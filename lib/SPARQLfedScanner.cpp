#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1399] =
    {   0,
        0,    0,  182,  180,    2,    1,    1,   69,  180,    2,
      180,  180,  180,    9,   10,   20,   68,   11,   86,    4,
       65,  158,  152,   36,   80,    3,   81,   67,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,   70,   71,   66,  180,   64,  180,  180,    7,    5,
        8,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,    2,    1,   79,    0,  168,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   78,    0,  167,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  171,  176,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  161,   60,    0,  164,
       12,  159,    0,  158,    0,    0,  153,  153,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   82,  151,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  157,    0,    0,  152,    0,    0,    0,    0,
        0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,   84,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       44,  117,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  172,  148,    0,    0,    0,   77,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      168,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  167,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,  162,    0,    0,  165,
        0,    0,    0,  159,    0,    0,  160,    0,    0,  153,
        0,  153,  153,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,  155,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       96,   43,   53,   75,   31,   24,  145,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  144,

      121,    0,  143,    0,    0,    0,   85,  118,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   87,    0,  142,
        0,    0,    0,    0,    0,   93,    0,    0,    0,    0,
        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  156,  156,  156,  156,  156,  156,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  176,
      176,  176,  176,  176,  176,    0,    0,    0,    0,  162,
        0,    0,  163,    0,  165,    0,    0,  166,    0,  160,
        0,  160,    0,  153,  153,  153,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  153,  153,  153,  153,
      153,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
      155,  155,  155,  155,  155,    0,    0,    0,  157,    0,
        0,    0,    0,    0,    0,    0,    0,   14,   58,    0,
        0,   97,    0,    0,    0,    0,    0,   46,    0,    0,
        0,    0,    0,   32,    0,   41,    0,   74,    0,    0,
        0,   25,    0,    0,    0,    0,    0,   39,    0,    0,
        0,    0,    0,   88,    0,    0,   37,    0,    0,    0,

       45,    0,    0,    0,    0,    0,    0,   95,    0,    0,
        0,    0,   57,    0,    0,    0,    0,    0,    0,  122,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  119,
        0,    0,   47,  110,  154,    0,  154,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  149,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  156,  156,

      156,  156,  156,  156,  156,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  176,  176,
      176,  176,  176,  176,  176,    0,    0,    0,    0,  163,
        0,  163,    0,  166,    0,  166,  153,  153,  153,  153,
      153,    0,    0,    0,  155,  155,  155,  155,  155,  155,
      155,    0,    0,    0,   94,   91,   40,    0,    0,    0,
        0,  140,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,   52,   27,    0,  113,    0,    0,  131,    0,
        0,  132,    0,  103,   33,    0,   61,    0,  111,   26,
        0,    0,   30,    0,   54,    0,  136,    0,   99,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  129,    0,    0,    0,    0,    0,    0,    0,
      102,   59,   62,    0,   50,    0,   22,  154,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  154,
      154,  154,  154,  154,  154,    0,    0,    0,  150,    0,
        0,  170,    0,    0,    0,    0,    0,    0,  169,    0,
        0,    0,    0,    0,    0,    0,  100,    0,    0,   42,
        0,    0,   48,    0,    0,    0,  139,   63,    0,   29,
       49,    0,    0,    0,    0,    0,    0,   34,    0,   15,

        0,    0,    0,  146,    0,   16,    0,    0,  123,  124,
      125,   38,   73,    0,    0,    0,    0,  101,    0,    0,
      137,    0,    0,   35,  154,  154,  154,  154,  154,    0,
        0,    0,    0,  174,    0,    0,  175,    0,    0,    0,
        0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
        0,    0,    0,  133,    0,    0,    0,   72,  114,    0,
       18,  138,    0,  115,    0,   56,    0,    0,  107,  128,
        0,  120,    0,    0,    0,    0,  126,    0,  105,   90,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   23,   17,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   55,  130,    0,  109,    0,    0,  116,    0,
        0,    0,   21,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  134,  135,    0,  147,  108,  106,   76,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  178,
        0,    0,    0,    0,    0,  177,    0,   89,  179,  178,
        0,    0,  141,  177,  179,    0,  104,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,   99,   99,  100,  101,  101,  101,  101,  101,  102,
      103,  101,  104,  105,  106,  107,  106,  108,  106,  106,
      109,  110,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  113,  113,  113,  115,  115,  115,  115,  116,
      115,  115,  117,  118,  118,  118,  118,  118,  118,  119,
      120,  121,  121,  122,  123,  124,  124,  124,  124,  124,

      124,  124,  124,  125,  126,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  128,  129,  130,  131,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  133,  134,  135,  136,
      137,  137,  138,  139,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121
    } ;

static yyconst flex_int32_t yy_meta[140] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    4,
        3,    3,    3,    3,    3,    3,    3,    5,    6,    3,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    3,
        1,    3,    3,    3,    3,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        3,   10,    3,    1,   11,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        1,    1,    1,    3,    3,   12,   13,   12,   12,   12,

       12,   12,   12,   14,   12,   12,   12,   12,   15,   12,
       12,   12,   12,   12,   12,   12,   15,   12,   16,   17,
       18,   19,   20,   20,   21,   20,   20,   20,   20,   20,
       20,   20,   20,   22,   20,   20,   20,   20,   22
    } ;

static yyconst flex_int16_t yy_base[1763] =
    {   0,
        0,    0, 2167,11928,  138,11928, 2163, 2019,  134,   38,
       55, 2002,  168,  142,11928,   71,  192,11928,  210,  127,
    11928,  289,  350,11928,  457,11928, 1902,  151,    0,  579,
      344,  455,  284,  349,  456,  285,  682,  470,  643,  692,
      729,  740,  764,  779,  800,  824,  855,  881,  903,  927,
      941,  222,11928, 1858, 1880,    0,  942,  985,11928, 1816,
    11928,    0,  130,  133,  135,  226,    0,  980, 1810,    0,
      342,  341,  996,    0, 1021,  240,11928,11928, 1129, 1898,
     1130,    0,  350,    0, 1047,    0, 1054,    0,  466, 1095,
        0,    0,    0,  934,    0, 1079,    0, 1130,    0, 1173,

     1256,    0,  137,  439,  209, 1173,    0, 1299, 1788,    0,
     1198, 1197, 1213,    0, 1238,11928, 1358, 1871, 1359,    0,
     1242,    0, 1348,    0, 1355,    0, 1402,  668,11928, 1486,
        0,  210,  456,  213, 1403,    0, 1529, 1785,    0, 1428,
     1427, 1443,    0, 1468,  141, 1563, 1631,11928, 1571, 1641,
    11928, 1651, 1662, 1691, 1712, 1726, 1788, 1917, 1769,    0,
      239,  494,  240, 1580,    0, 1960, 1784,    0, 1722, 1487,
     1759,    0, 1790, 2048, 2155,11928,    0,    0,    0, 1723,
        0, 1851,    0, 1858,    0, 1755,11928, 2274,    0,  273,
      569,  275, 1868,    0, 2317, 1766,    0, 1893, 1892, 1910,

        0, 1986, 1843, 2420, 2541, 2670, 1831,  280,  356,  339,
      442,  709,  455, 1763, 1691,    0,  297,  300,  768,  407,
     1989,    0, 2713, 1709,    0, 2014, 1918, 2021,    0, 2093,
      465,  463,  646,  443, 1773,  358,  651, 2179,  704,  665,
      871,  708,  706,  755,  738,  650,  771,  778,  860,  741,
      728, 1762,  809,  894, 2188,  464,  803,  825,  891,  767,
      379,  917,  862,  947,  927,  930,  801,  918,  991,  998,
      949, 2180,  981, 2185, 2189,  977, 1678, 1691, 2274,  986,
     1729, 1727, 1693, 2275, 1697, 1716, 2182, 1695, 2181, 1853,
     2184, 1370,11928,11928, 2027,  292,  613,11928, 1694,    0,

        0,  119, 1087,    0, 2230,    0,  735,    0, 1729, 1613,
        0,    0,    0,    0, 2260,    0,  121,    0,    0,    0,
    11928, 2328,    0,    0,    0,    0,    0,    0,    0, 1562,
        0, 1617,    0,    0,    0,    0,    0,    0,    0, 2813,
     2931, 1574, 1544,    0,  583, 1078,  622, 2269,    0, 2974,
     1555,    0, 2372, 2029, 2379,    0, 2422,    0,    0,  249,
     1813,    0, 2404,    0,    0, 2190, 1524,    0,    0,    0,
        0, 2475,    0,  315,    0,    0,    0,11928, 2584,    0,
        0,    0,    0,    0,    0,    0, 1491, 3074, 3192, 1346,
     1323,    0,  636, 1307,  748, 2468,    0, 3235, 1294,    0,

     2501, 2396, 2508,    0, 2637,    0,    0,  443, 2250,    0,
     2533,    0,    0, 2524, 1285,    0,    0,    0,    0, 2585,
        0,  521,    0,    0,    0, 1198, 2734, 2821, 2629, 2829,
     2849, 2754, 2879, 2858, 2899, 2703, 2762, 2939, 2963, 3346,
     3475,    0,    0, 3097, 1117,  956,    0,  805,  835, 2648,
      922, 2899,    0, 3518,  974,    0, 2939, 2907, 3028,    0,
     3076,    0,    0,    0,  575, 2747,    0, 3022,    0,    0,
     2814,  962,    0,    0,    0,    0, 3125,    0,  682,    0,
        0,    0,    0,  981,    0,    0,    0,    0,    0,    0,
        0, 3618, 3736,  903,  873,    0,  952, 1319,  954, 3037,

        0, 3779,  866,    0, 3150, 3050, 3157,    0, 3194,    0,
        0,  814, 2853,    0, 3134,    0,    0, 2877,  817,    0,
        0,    0,    0, 3280,    0,  921,    0,    0,    0,    0,
     3882, 4003,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  954, 3163,    0, 3289,    0,    0, 3242,  785,    0,
        0,    0,    0, 3313,    0, 1019,    0,    0,    0,  283,
      470,  574, 1695, 1699, 1734, 2165, 2185, 2157, 2195, 2276,
     2277,    0, 2279, 2276, 2279, 2264, 2269, 2271, 2270, 2271,
     2606, 2808, 2812, 2827, 3073, 3086, 3235, 3354, 3354,    0,
     3358, 3354, 3363, 3363, 3367, 3378, 3368, 3378, 3384,    0,

        0, 3388, 3371, 3373, 3418, 3419,    0,    0, 3407, 3417,
     3422, 3424, 3431, 3447, 3432, 3465, 3459, 3459, 3465, 3471,
     3462, 3473, 3478, 3459, 1341, 3478, 3467, 3611, 3467,    0,
     3481, 3470, 3484, 3475, 3474,    0, 3478, 3489, 3474, 3478,
     3488, 3480, 4124,    0, 1091, 1588, 1259, 3451,    0, 4167,
      779,    0, 3477, 3476, 3592,    0, 3620,  770,  778,    0,
        0,    0,    0,  659,  645,    0,    0,    0,    0,    0,
        0,    0, 3652, 3675, 3758,    0, 3555,    0, 3816,    0,
     3823,    0, 3747, 3937,    0,    0,    0,    0,    0, 3858,
        0,    0,    0,    0,    0, 2271, 3537,    0, 3849,    0,

        0, 3737,  667,    0,    0,    0,    0, 3937,    0, 1021,
        0,    0,    0, 4267, 4385,    0,    0,    0,    0,    0,
        0,    0, 4031, 4075, 4035,    0, 3851,    0, 4075,    0,
     4117,    0, 3981, 4176,    0,    0,    0,    0,    0,    0,
        0, 2651, 3839,    0, 4220,    0,    0, 3857,  647,    0,
        0,    0,    0, 4229,    0, 1091,    0,    0,    0, 4503,
     4621,    0,    0,    0,    0,    0,    0,    0, 4334, 4313,
     4347, 4168, 4393, 4406, 4414, 4434, 4442, 4450, 4464, 4472,
     4511, 4519, 4527, 4750, 4879,    0,    0,    0, 2791, 3992,
        0, 4473,    0,    0, 4100,  644,    0,    0,    0,    0,

     4486,    0, 1309,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4985,    0,    0,    0,    0,
        0, 3343, 4124,    0, 4511,    0,    0, 4261,  603,    0,
        0,    0,    0, 4554,    0, 1312,    0,    0,    0, 5104,
     5222,    0,    0,    0,    0,    0,    0,    0,  670, 5343,
     5464,    0,    0,    0,    0,    0,    0,    0,    0, 3609,
     3621,    0, 3609, 3622, 3627, 3611, 3647,    0, 3682, 3684,
     3685, 3688, 3738, 3741, 3750,    0, 3757,    0, 3777, 3976,
     4006,    0, 4043, 4039, 4042, 4039, 4042,    0, 4318, 4379,
     4395, 4403, 4436, 4513, 4522, 4583,    0, 4619, 4607, 4619,

        0, 4624, 4624, 4615, 4614, 4624, 4621,    0, 4638, 4619,
     4642, 4640,    0, 4626, 4634, 4633, 4645, 4632, 4641,    0,
      655,  646,  577, 4637, 4633, 4656, 4659, 4646, 4652, 4696,
     4649, 4649, 4671, 4675, 4697, 4699, 4712, 4724, 4722,    0,
     4740, 4741,    0,    0, 5585, 5706,    0,  482,  458,    0,
     1260, 2052, 4328, 2865, 4504,    0, 5749,  464,    0, 4717,
     4669, 4724,    0, 4752,    0,    0, 1374, 4386,    0, 4699,
        0,    0, 4604,  462,    0,    0,    0,    0, 4813,    0,
     1359,    0,    0,    0, 5852, 5973, 6016,  443,  508,    0,
        0,    0,    0,    0,    0,    0,  355, 4860, 6116, 6234,

        0,    0,    0,    0,    0,    0,    0,    0,  424,    0,
        0,    0,    0,    0,    0,    0,  295, 4833, 6352, 6470,
        0,    0,    0,    0,    0,    0,    0,    0, 4921, 4998,
     5006, 5014, 5022, 5030, 5038, 5046, 6599, 6728,    0,    0,
        0,    0,    0,    0, 6846, 6964,    0,    0,    0,    0,
        0,    0,    0,    0, 7085, 7206,    0, 4816, 4836, 4839,
     4849,    0, 4854, 4837, 4903, 4911, 5032, 5054, 5064, 5082,
     5084,    0,    0,  339, 5095,    0, 5084, 5090,    0, 5100,
     5101,    0, 5106,    0,    0, 5091,    0, 5104,    0,    0,
     5091, 5097,    0, 5089,    0, 5108,    0, 5111,    0, 5110,

     5111, 5113, 5099, 5118, 5117,  343,  322,  253, 5102, 5104,
     5104, 5118,    0, 5121, 5112, 5113, 5127, 5120, 5143, 5149,
        0,    0,    0, 5168,    0, 5168,    0, 7327, 7448,    0,
        0, 3714, 4689,    0, 4981,    0,    0, 4819,  159,    0,
        0,    0,    0, 5156,    0, 1649,    0,    0,    0, 7569,
        0,    0,    0,    0,    0,    0,    0,    0, 7690, 3722,
     3725,11928, 5199,    0,    0,    0,    0,    0,11928, 5251,
        0,    0,    0,    0,    0, 7811, 5224, 5226, 5228, 5227,
     5229, 5230, 5389, 5232, 5240, 5241, 5244, 5247, 5248, 5249,
     5396, 5357, 5364, 5367, 5358, 5368, 5369, 5250, 5373, 5252,

     5375, 5377, 5446, 5370, 5456, 5380, 5457, 5390, 5382, 5385,
     5386, 5391, 5393, 5459, 5458, 5462, 5463, 5439, 5464, 5465,
     5468, 5472, 5485, 5474,    0,    0,    0,    0,    0,    0,
        0,    0, 5475, 5479, 5484, 5506, 5480, 5511, 5561, 5613,
     5577, 5482, 5578, 5580, 5516, 5753, 5649, 5581, 5584, 5586,
     5590, 5881, 5768, 5517, 5594, 5591, 5588, 5595, 5596, 5721,
     5599, 5601, 5722, 5604, 5871, 5605, 5872, 5873, 5606, 5633,
     5874, 5638, 5725, 5726, 7854,  115, 5729, 5875, 5753, 5849,
     5872, 5871, 7973,    0,    0,    0, 4978,    0, 5907,    0,
     5914,    0, 5113, 5877, 5878, 5880, 5885, 5890, 8111,    0,

        0,    0, 5699,    0, 5939,    0, 5946,    0, 5869, 6107,
     5889, 6108, 5893, 5894, 6109, 5895, 6110, 6111, 6039, 6114,
     3999, 5107, 6117, 6102, 6117, 8249, 8387, 6122, 6116,    0,
      149,    0,    0,    0,    0,    0,    0,    0, 6122, 6124,
     6109, 8525, 8663, 6129,    0,  142,    0,    0,    0,    0,
        0,    0,    0, 6128, 6129, 6130, 6131, 6133, 6134, 6135,
     6167, 6168, 6171, 6159, 8801, 8939, 6180,    0,    0,    0,
     6225, 6228, 6229, 6215,    0,    0,    0,    0, 6232,11928,
     6231, 6236, 6234, 6237, 6235,11928, 6241, 6240,11928, 6239,
     6240, 6273, 6244,    0, 6243, 6276, 6249,11928, 9078, 9100,

     9116, 9136, 9152, 9169, 9187, 9203,  180, 9212, 9218, 9224,
     9230, 9236, 9253, 9264, 9270, 9276, 9282, 9299, 9310, 9315,
     9319, 9325, 9331, 9337, 9348, 9357, 9363, 9369, 9375, 9381,
     9398, 9409, 9415, 9421, 9427, 9438, 9447, 9453, 9459, 9465,
     9471, 9485, 9495, 9501, 9507, 9513, 9519, 9534, 9545, 9550,
     9554, 9560, 9566, 9572, 9583, 9592, 9598, 9604, 9610, 9616,
      741, 9629, 9647, 9656, 9662, 9668, 9674, 9680, 9686, 9697,
     9706, 9712, 9718, 9724, 9730, 9736, 9742, 9748, 9754, 9760,
     9777, 9788, 9794, 9800, 9806, 9812, 9818, 9824, 9830, 9836,
     9842, 9848, 9854, 9865, 9874, 9880, 9886, 9892, 9898, 9904,

     9910, 9916, 9922, 9928, 9934, 9940, 9946, 9952, 9958, 9964,
     9981, 9992, 9998,10004,10010,10016,10022,10033,10042,10048,
    10054,10060,10066,10072,10078,10084,10090,10096,10102,10108,
    10114,10120,10126,10132,10146,10156,10162,10168,10174,10180,
    10186,10192,10198,10204,10210,10216,10222,10228,10234,10240,
    10246,10252,10258,10264,10270,10276,10282,10293,10302,10308,
    10314,10320,10326,10332,10338,10344,10350,10356,10362,10368,
    10374,10380,10386,10392,  413,10405,10415,10421,10427,10433,
    10439,10445,10451,10457,10463,10469,10482,10492,10498,10504,
    10510,10516,10522,10539,10550,10556,10562,10568,10585,10596,

    10602,10619,10630,10636,10642,10648,10654,10660,10666,10672,
    10678,10684,10690,10696,10707,10716,10733,10744,10750,10756,
    10762,10779,10790,10796,10802,10808,10814,10820,10826,10832,
    10838,10844,10850,10856,10867,10876,10890,10900,10906,10912,
    10918,10924,10930,10936,10942,10948,10954,10960,10975,10986,
    10992,10998,11004,11010,11016,11022,11028,11034,11040,11046,
    11052,11063,11072, 2331,11085,11095,11108,11118,11124,11130,
    11136,11142,11148,11154,11160,11166,11172,11178,11184,11190,
    11196,11202,11208,11221,11242,11242,11248,11254,11260,11266,
    11272,11289,11305,11314,11331,11331,11337,11343,11349,11355,

    11361,11378,11394,11403,11417,11427,11438,11447,11460,11477,
    11487,11493,11499,11505,11511,11517,11523,11529,11535,11541,
    11547,11560,11570,11587,11598,11604,11621,11632,11638,11644,
    11661,11683,11694,11699,11703,11709,11715,11721,11727,11732,
    11736,11742,11748,11754,11760,11777,11788,11794,11800,11806,
    11812,11818,11835,11846,11852,11858,11864,11870,11876,11893,
    11904,11910
    } ;

static yyconst flex_int16_t yy_def[1763] =
    {   0,
     1398,    1, 1398, 1398, 1398, 1398, 1398, 1398, 1399, 1400,
     1401, 1398, 1402, 1398, 1398, 1403, 1398, 1398, 1398, 1398,
     1398, 1398, 1404, 1398, 1405, 1398, 1398, 1406, 1407, 1398,
       30,   31,   32,   32,   32,   32,   32,   32,   32,   31,
       31,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32, 1398, 1398, 1398, 1398,   30,   32,   32, 1398, 1398,
     1398, 1408, 1408, 1398, 1408, 1398, 1409, 1398, 1410, 1411,
     1398, 1398, 1398, 1412, 1398, 1398, 1398, 1398, 1413, 1398,
     1398, 1414, 1398, 1415, 1398, 1416, 1398, 1417, 1398, 1418,
     1419, 1420, 1421, 1398, 1422, 1398, 1423, 1398, 1424, 1398,

     1425, 1426, 1426, 1398, 1426, 1398, 1427, 1398, 1428, 1429,
     1398, 1398, 1398, 1430, 1398, 1398, 1431, 1398, 1398, 1432,
     1398, 1433, 1398, 1434, 1398, 1435, 1398, 1398, 1398, 1436,
     1437, 1437, 1398, 1437, 1398, 1438, 1398, 1439, 1440, 1398,
     1398, 1398, 1441, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1442, 1442, 1398, 1443,
     1443, 1398, 1443, 1398, 1444, 1398, 1445, 1446, 1398, 1398,
     1398, 1447, 1398, 1448, 1448, 1398, 1449, 1450, 1451, 1398,
     1452, 1398, 1453, 1398, 1454, 1398, 1398, 1455, 1456, 1456,
     1398, 1456, 1398, 1457, 1398, 1458, 1459, 1398, 1398, 1398,

     1460, 1398, 1461, 1462, 1462, 1463,  205,  205,  205,  205,
      205,  205,  205, 1398, 1398, 1464, 1464, 1464, 1465, 1464,
     1398, 1466, 1398, 1467, 1468, 1398, 1398, 1398, 1469, 1398,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205, 1398, 1398, 1398, 1470,  205,  205, 1398,  205, 1471,

     1472, 1471, 1471, 1473, 1471, 1471, 1471, 1474, 1474, 1475,
     1475, 1472, 1471, 1476, 1398, 1477, 1477, 1478, 1479, 1480,
     1398, 1481, 1482, 1483, 1482, 1482, 1484, 1485, 1486, 1487,
     1488, 1398, 1489, 1490, 1489, 1489, 1491, 1492, 1493, 1494,
     1494, 1398, 1398, 1495, 1495, 1496, 1495, 1398, 1497, 1398,
     1498, 1499, 1398, 1398, 1398, 1500, 1398, 1501, 1502, 1501,
     1501, 1503, 1501, 1501, 1504, 1504, 1505, 1505, 1502, 1501,
     1506, 1398, 1507, 1507, 1508, 1509, 1510, 1398, 1511, 1512,
     1513, 1512, 1512, 1514, 1515, 1516, 1517, 1518, 1518, 1398,
     1398, 1519, 1519, 1520, 1519, 1398, 1521, 1398, 1522, 1523,

     1398, 1398, 1398, 1524, 1398, 1525, 1526, 1525, 1525, 1527,
     1525, 1525, 1528, 1528, 1529, 1529, 1526, 1525, 1530, 1398,
     1531, 1531, 1532, 1533, 1534, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1535,
     1535,  441,  441, 1398, 1398, 1398, 1536, 1536, 1536, 1537,
     1536, 1398, 1538, 1398, 1539, 1540, 1398, 1398, 1398, 1541,
     1398,  441, 1542, 1543, 1542, 1542, 1544, 1542, 1542, 1545,
     1545, 1546, 1546, 1543, 1542, 1547, 1398, 1548, 1548, 1549,
     1550, 1551, 1552, 1398, 1553, 1554, 1553, 1553, 1555, 1556,
     1557, 1558, 1558, 1398, 1398, 1559, 1559, 1560, 1559, 1398,

     1561, 1398, 1562, 1563, 1398, 1398, 1398, 1564, 1398, 1565,
     1566, 1565, 1565, 1567, 1565, 1565, 1568, 1568, 1569, 1569,
     1566, 1565, 1570, 1398, 1571, 1571, 1572, 1573, 1574, 1575,
     1576, 1576,  532,  532,  532,  532,  532,  532,  532, 1577,
     1578, 1577, 1577, 1579, 1577, 1577, 1580, 1580, 1581, 1581,
     1578, 1577, 1582, 1398, 1583, 1583, 1584, 1585, 1586,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532, 1587, 1588, 1588, 1398, 1588, 1398, 1589, 1398,
     1590, 1591, 1398, 1398, 1398, 1592, 1398,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532, 1593,
     1593, 1593, 1594, 1594, 1398, 1595, 1398, 1596, 1398, 1597,
     1398, 1598, 1398, 1599, 1600, 1600, 1601, 1601, 1601, 1602,
     1603, 1603, 1604, 1605, 1606, 1605, 1605, 1607, 1605, 1605,

     1608, 1608, 1609, 1609, 1606, 1605, 1610, 1398, 1611, 1611,
     1612, 1613, 1614, 1615, 1615,  715,  715,  715,  715, 1616,
     1616, 1616, 1617, 1617, 1398, 1618, 1398, 1619, 1398, 1620,
     1398, 1621, 1398, 1622, 1623, 1623, 1624, 1624, 1624, 1625,
     1626, 1625, 1625, 1627, 1625, 1625, 1628, 1628, 1629, 1629,
     1626, 1625, 1630, 1398, 1631, 1631, 1632, 1633, 1634, 1635,
     1635,  761,  761,  761,  761, 1636, 1636, 1636, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1637, 1637,  785, 1638, 1639, 1638, 1638,
     1640, 1638, 1638, 1641, 1641, 1642, 1642, 1639, 1638, 1643,

     1398, 1644, 1644, 1645, 1646, 1647,  785,  785,  785,  785,
      785,  785, 1648, 1648, 1648, 1649, 1650, 1650, 1651, 1652,
     1653, 1652, 1652, 1654, 1652, 1652, 1655, 1655, 1656, 1656,
     1653, 1652, 1657, 1398, 1658, 1658, 1659, 1660, 1661, 1662,
     1662,  841,  841,  841,  841, 1663, 1663, 1663, 1664, 1665,
     1665,  851,  851,  851, 1666, 1666, 1666,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851, 1667, 1667,  946, 1398, 1398, 1668,
     1668, 1668, 1669, 1668, 1398, 1670, 1398, 1671, 1672, 1398,
     1398, 1398, 1673, 1398, 1674, 1675, 1674, 1674, 1676, 1674,
     1674, 1677, 1677, 1678, 1678, 1675, 1674, 1679, 1398, 1680,
     1680, 1681, 1682, 1683, 1684, 1684, 1398,  987, 1685, 1686,
     1687, 1686, 1686, 1688, 1689, 1690, 1691, 1692, 1693, 1693,

     1000, 1000, 1000, 1000, 1000, 1694, 1694, 1694, 1695, 1696,
     1697, 1696, 1696, 1698, 1699, 1700, 1701, 1702, 1703, 1703,
     1020, 1020, 1020, 1020, 1020, 1704, 1704, 1704, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1705, 1705, 1038, 1038,
     1038, 1706, 1706, 1706, 1707, 1707, 1046, 1046, 1046, 1046,
     1046, 1708, 1708, 1708, 1709, 1709, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1710, 1710, 1711,
     1712, 1711, 1711, 1713, 1711, 1711, 1714, 1714, 1715, 1715,
     1712, 1711, 1716, 1398, 1717, 1717, 1718, 1719, 1720, 1710,
     1150, 1150, 1150, 1150, 1150, 1721, 1721, 1721, 1722, 1723,
     1723, 1398, 1724, 1725, 1725, 1726, 1726, 1726, 1398, 1727,
     1728, 1728, 1729, 1729, 1729, 1722, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,

     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1150, 1150, 1150, 1150, 1150, 1730,
     1730, 1730, 1176, 1176, 1176, 1176, 1176, 1176, 1724, 1727,
     1176, 1176, 1176, 1176, 1176, 1398, 1731, 1176, 1176, 1176,
     1176, 1398, 1732, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1398, 1275, 1176, 1176, 1176, 1176,
     1398, 1398, 1731, 1733, 1734, 1735, 1398, 1736, 1398, 1737,
     1398, 1738, 1398, 1176, 1176, 1176, 1176, 1398, 1732, 1739,

     1740, 1741, 1398, 1742, 1398, 1743, 1398, 1744, 1398, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1745, 1745, 1176, 1398, 1398, 1746, 1746, 1327, 1327, 1747,
     1398, 1748, 1749, 1748, 1748, 1750, 1751, 1752, 1176, 1176,
     1398, 1753, 1753, 1343, 1754, 1398, 1755, 1756, 1755, 1755,
     1757, 1758, 1759, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1398, 1398, 1760, 1760, 1366, 1761, 1761, 1762,
     1176, 1176, 1398, 1343, 1343, 1755, 1755, 1754, 1176, 1398,
     1398, 1366, 1366, 1176, 1176, 1398, 1343, 1176, 1398, 1366,
     1366, 1176, 1176, 1343, 1366, 1176, 1176,    0, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398
    } ;

static yyconst flex_int16_t yy_nxt[12068] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   39,   51,   39,
       52,    4,   53,   54,   55,   56,   31,   32,   33,   34,
       57,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   58,   48,   49,   50,   39,   51,   39,
       59,   60,   61,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   62,   63,    4,   64,   65,   66,   67,   68,
       69,   70,   71,    4,   72,   73,   74,   75,    4,   76,
       80,   91,   76,  128,  128,  128,  128,  152,  152,  152,
      152,  152,  152,  152,  152,  129,  426,   92,  145,   93,
       93,   93,   93,   93,   93,   94,   95,   95,   95,   95,
       96,   97,   97,   98,   99,   99,  100,  102,  103,  118,
      104,  105,  106,  107,  108,  109,  110,  111,  203,  112,
      113,  114,  115,  131,  132,   81,  133,  134,  135,  136,

      137,  138,  139,  140, 1299,  141,  142,  143,  144,  145,
      146, 1283,  147,  147,  147,  147,  147,  147,  147,  147,
      660,  660, 1322,  292,  292,  292,  292,  148,  149,  119,
      150,  150,  150,  150,  150,  150,  150,  150,  299, 1398,
     1398,   76,  151,  299,   76,  101,  299,  299,  299,  299,
      299,  299,  299,  101,  947,   82,   82,   82,   82,   82,
       82,   83,   84,   84,   84,   84,   85,   86,   86,   87,
       88,   88,   89,  189,  190, 1211,  191,  192,  193,  194,
      195,  196,  197,  198,  293,  199,  200,  201,  202,  120,
      120,  120,  120,  120,  120,  121,  122,  122,  122,  122,

      123,  124,  124,  125,  126,  126,  127,  153,  206,  154,
      154,  154,  154,  154,  154,  154,  154,  101,  130,  240,
      206,  130,  858,  241,  207,  101,  130,  242,  155,  130,
      207,  207,  531,  207,  207,  243,  249,  300,  300,  300,
      300,  300,  300,  300,  300,  300, 1210,  158,  158,  240,
      714,  714,  858,  241,  207,  158,  158,  242,  155,  156,
      207,  207,  531,  207,  207,  243,  249,  206,  658, 1209,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  231,
      207,  188,  207,  188,  206,  533,  206,  232,  207,  188,
      207,  188,  233,  234,  532,  207,  207,  244,  207,  207,

      207,  564,  235, 1189,  601,  207,  245,  206,  207,  231,
      207,  159,  207,  207, 1175,  533,  207,  232,  207,  849,
      207,  849,  233,  234,  532,  207,  207,  244,  207,  207,
      207,  564,  235, 1398, 1398, 1169,  245,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  314,  314,  314,  314,  315,  316,  316,
      317,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      206,  206,  160,  161, 1168,  162,  163,  164,  165,  166,
      167,  168,  169,  206,  170,  171,  172,  173,  175,  176,
      207,  206,  206,  206,  236,  207,  537,  563,  207,  246,

      534,  237,  247,  207,  238,  207,  239,  248,  859,  207,
      252,  561,  596,  207, 1162,  207,  207,  560,  253,  207,
      207,  254,  255,  207,  236,  207,  537,  563,  207,  246,
      534,  237,  247,  207,  238,  207,  239,  248,  859,  207,
      252,  561,  596,  207,  760,  760,  207,  560,  253,  207,
     1161,  254,  255,  101,  101,  101,  101,  643,  101, 1139,
      177,  329,  329,  329,  329,  329,  329,  329,  329,  330,
      130,  130,  130,  130,  945,  130,  178,  945,  179,  179,
      179,  179,  179,  179,  180,  181,  181,  181,  181,  182,
      183,  183,  184,  185,  185,  186,  204,  205, 1108,  204,

      204,  204,  204,  204,  204,  204,  204,  206,  158,  158,
      158,  158,  860,  158,  207,  208,  207,  209,  207,  207,
      207,  207,  207,  207,  207,  210,  207,  211,  207,  207,
      207,  212,  207,  207,  213,  207,  207,  207,  207, 1398,
     1398,  206,  860,  207,  207,  208,  207,  209,  207,  207,
      207,  207,  207,  207,  207,  210,  207,  211,  207,  207,
      207,  212,  207,  207,  213,  207,  207,  207,  207,  128,
      128,  128,  128, 1107,  206,  214,  807,  807,  206,  206,
     1106,  129,  207,  188,  188,  188,  188,  530,  188,  207,
      565,  341,  207,  206,  207,  562,  581,  659,  493,  341,

      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  207,  227,  228,  229,  230,  250,  571,  207,
      565,  207,  207,  572,  207,  562,  581,  256,  207,  257,
      341,  251,  206,  207,  206,  258,  206,  206,  341,  443,
      207,  259,  389,  570,  389,  203,  535,  250,  571,  203,
      207,  207,  389,  572,  536,  577,  206,  256,  207,  257,
      576,  251,  341,  207,  260,  258,  206,  261,  262,  206,
      207,  259,  263,  570,  988,  265,  535,  207,  264,  207,
      207,  580,  587,  206,  536,  577,  207,  207,  987,  266,
      576,  207,  578,  579,  260,  206,  586,  261,  262,  206,

     1398, 1398,  263,  207,  267,  265,  206,  207,  264,  207,
      207,  580,  587,  207,  268,  269,  207,  207,  207,  266,
      582,  207,  578,  579,  600,  207,  586,  583,  207,  206,
      270,  206,  663,  207,  267,  271,  664,  206,  597,  272,
      207,  609,  665,  207,  268,  269,  207,  986,  207,  273,
      582,  207,  985,  206,  600,  207,  389,  583,  207,  274,
      270,  588,  589,  275,  389,  271,  276,  277,  597,  272,
      207,  609,  598,  207,  974,  207,  207,  278,  279,  273,
      207,  207,  539,  539,  539,  539,  207,  539,  206,  274,
      206,  588,  589,  275,  207,  584,  276,  277,  280,  206,

      207,  207,  598,  207,  281,  207,  207,  278,  279,  585,
      603,  573,  188,  443,  282,  840,  840,  574,  283,  206,
      207,  443,  206,  575,  207,  584,  599,  207,  280,  284,
      207,  207,  285,  286,  281,  287,  207,  590,  288,  585,
      603,  573,  207,  443,  282,  206,  206,  574,  283,  207,
      207,  443,  207,  575,  207,  206,  599,  207,  206,  284,
      207,  829,  285,  286,  602,  287,  207,  590,  288,  289,
      290,  610,  207,  207,  606,  206,  207,  206,  207,  207,
      291,  207,  207,  607,  207,  246,  608,  207,  247,  492,
      207,  207,  207,  248,  602,  604,  207,  614,  492,  289,

      290,  610,  605,  207,  606,  206,  207,  296,  207,  206,
      291,  207,  625,  607,  206,  246,  608,  207,  247,  206,
      207,  207,  207,  248,  207,  604,  206,  614,  280,  611,
      443,  207,  605,  631,  281,  618,  207,  612,  443, 1398,
     1398,  613,  625,  174,  282,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  207,  539,  539,  158,  280,  611,
      493,  207,  493,  631,  281,  618,  297,  612,  493,  796,
      493,  613,  440,  538,  282,  302,  303,  304,  304,  305,
      306,  306,  306,  306,  306,  306,  306,  307,  306,  306,
      306,  306,  306,  306,  308,  308,  308,  308,  308,  309,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  321,   79, 1398, 1398, 1398,
     1398,   79,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
       81,   79,  341,  341,  341,  341,   79,  341,   91,  643,

       79,  661,  661,  661,  661,  661,  661,  643,   79, 1398,
     1398,   79,  440,   79,   92,  145,   93,   93,   93,   93,
       93,   93,   94,   95,   95,   95,   95,   96,   97,   97,
       98,   99,   99,  100,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
       82,   82,   82,   82,   82,   82,   83,   84,   84,   84,
       84,   85,   86,   86,   87,   88,   88,   89,  339,  339,
      339,  339,  339,  339,  339,  339,  340,  340,  340,  340,
      340,  340,  340,  340,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  372,  373,  373,  374,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  342,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  920,  921,  922,  117,  923,  643,  947,  378,
      117,  292,  292,  292,  292,  643,  947,  343,  344,  345,
      130,  346,  347,  348,  349,  350,  351,  352,  353,  749,
      354,  355,  356,  357,  360,  361,  362,  362,  363,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  365,  365,  365,  365,  365,  366,  119,
      117,  389,  389,  389,  389,  117,  389, 1398, 1398,  117,
     1398, 1398,  293,  493,  493,  493,  493,  117,  493,  388,
      117,  388,  117,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384, 1150, 1150, 1398, 1398,  120,
      120,  120,  120,  120,  120,  121,  122,  122,  122,  122,
      123,  124,  124,  125,  126,  126,  127,  386,  386,  386,

      386,  386,  386,  386,  386,  387,  388,  388,  388,  388,
      388,  388,  388,  388,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  419,
      419,  419,  419,  420,  421,  421,  422,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  390,  427,  427,  427,  427,  427,  427,  427,
      427,  430,  430,  430,  430,  430,  430,  430,  430,  476,

      476,  476,  476,  477,  478,  478,  479,  391,  392,  393,
      739,  394,  395,  396,  397,  398,  399,  400,  401,  101,
      402,  403,  404,  405,  408,  409,  410,  410,  411,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  413,  413,  413,  413,  413,  414,  428,
      703,  147,  147,  147,  147,  147,  147,  147,  147,  431,
      340,  150,  150,  150,  150,  150,  150,  150,  150,  340,
      429,  152,  152,  152,  152,  152,  152,  152,  152,   90,
      432,  689,  434,  434,  434,  434,  434,  434,  434,  434,
      433,  463,  463,  463,  463,  463,  463,  463,  463,  463,

      429,  435,  643,  643,  643,  643,  206,  643,  299,  153,
      432,  154,  154,  154,  154,  154,  154,  154,  154,  206,
      433,  206,  206,  206,  626,  206,  627,  436,  632,  436,
      155,  435,  437,  437,  437,  437,  437,  437,  437,  437,
      636,  639,  628,  861,  206,  862,  438,  438,  438,  438,
      438,  438,  438,  438,  626,  206,  627,  206,  632,  637,
      155,  438,  438,  438,  438,  438,  438, 1398, 1398,  863,
      636,  639,  628,  861,  462,  862,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  637,
      206,  438,  438,  438,  438,  438,  438,  439,  462,  863,

      462,  206,  462,  462,  549,  440,  441,  204,  440,  440,
      440,  440,  440,  440,  440,  440,  442,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  462,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  299,  299,  299,  299,  299,  299,  444,
      491,  491,  491,  491,  491,  491,  491,  491,  204,  206,
      530,  519,  462,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  472,
      415,  206,  379,  367,  445,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  322,  310,  641,  298,  295,  446,
      447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
      457,  294,  458,  459,  460,  461,  439,  715,  715,  715,
      715,  715,  715,  187,  440,  441,  641,  440,  440,  440,
      440,  440,  440,  440,  440,  442,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  444,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  523,  523,  523,  523,  524,  525,
      525,  526,  116,  445,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      553,  553,  553,  553,  554,  555,  555,  556,  446,  447,
      448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
       78,  458,  459,  460,  461,  465,  466,  467,  467,  468,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  470,  470,  470,  470,  471,
      176,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  707,  707,  707,  707,  708,  709,  709,  710,  644,
      645,  177,  646,  647,  648,  649,  650,  651,  652,  653,
      947,  654,  655,  656,  657,   77, 1398,  178,  947,  179,
      179,  179,  179,  179,  179,  180,  181,  181,  181,  181,
      182,  183,  183,  184,  185,  185,  186,  176,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559,  206,  206,  206,
      206,  864,  206,  206,  566,  868,  206,  206,  615,  642,
      640,  616,  865,  619,  591,  638,  621,  567, 1398,  568,
      617,  592,  620,  569,  593,  622,  594,  866,  867,  623,
      624,  864,  595,  869,  566,  868, 1398, 1398,  615,  642,
      640,  616,  865,  619,  591,  638,  621,  567,  177,  568,
      617,  592,  620,  569,  593,  622,  594,  866,  867,  623,
      624, 1398,  595,  869,  178, 1398,  179,  179,  179,  179,
      179,  179,  180,  181,  181,  181,  181,  182,  183,  183,
      184,  185,  185,  186,  492,  492,  492,  492,  492,  492,

      492,  492,  206,  206,  101,  101,  101,  101,  101,  101,
      629,  870,  871,  633,  872,  873,  874,  875,  634,  876,
      877,  630,  878,  879,  635,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  674,  849,  662,  849, 1398,  849,
      629,  870,  871,  633,  872,  873,  874,  875,  634,  876,
      877,  630,  878,  879,  635,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  761,  761,  761,  761,  761,  761,
      494, 1398,  999,  999,  669,  669,  669,  669,  669,  669,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  675,
     1000, 1398, 1398, 1398, 1398,  495,  496,  497, 1398,  498,

      499,  500,  501,  502,  503,  504,  505, 1398,  506,  507,
      508,  509,  512,  513,  514,  514,  515,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  517,  517,  517,  517,  517,  518,  204,  205, 1398,
      204,  204,  204,  204,  204,  204,  204,  204,  206,  676,
      676,  676,  676,  676,  676,  677,  678,  678,  678,  678,
      679,  680,  680,  681,  682,  682,  683,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  715,

      715,  715,  715,  715,  715,  715,  715,  715,  753,  753,
      753,  753,  754,  755,  755,  756,  214,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713, 1398, 1398, 1398, 1398,
     1398,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226, 1398,  227,  228,  229,  230,  204,  205,
     1398,  204,  204,  204,  204,  204,  204,  204,  204, 1398,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  740,
      740,  740,  740,  740,  740,  740,  740,  740, 1398,  719,
      719,  719,  719,  719,  719,  724,  752,  752,  752,  752,

      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
      752,  752,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  214,  130,  130,
      130,  130,  130,  130,  772,  725,  772, 1398, 1398,  773,
      773,  773,  773,  773,  773,  773,  773, 1398, 1398,  880,
     1398, 1398,  215,  216,  217,  218,  219,  220,  221,  222,
      223,  224,  225,  226, 1398,  227,  228,  229,  230,  156,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  880,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  765,

      765,  765,  765,  765,  765,  726,  726,  726,  726,  726,
      726,  727,  728,  728,  728,  728,  729,  730,  730,  731,
      732,  732,  733,  437,  437,  437,  437,  437,  437,  437,
      437,  159,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759, 1398, 1019, 1019,  427,  427,  427,  427,  427,  427,
      427,  427,  786,  786,  786,  786,  443,  786, 1398,  777,
     1020,  777, 1398,  769,  778,  778,  778,  778,  778,  778,
      778,  778,  437,  437,  437,  437,  437,  437,  437,  437,
     1398, 1398,  160,  161, 1398,  162,  163,  164,  165,  166,

      167,  168,  169,  769,  170,  171,  172,  173,  542,  543,
      544,  544,  545,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  547,  547,  547,
      547,  547,  548,  340,  340,  340,  340,  340,  340,  340,
      340,  770,  770,  770,  770,  770,  770,  770,  770,  430,
      430,  430,  430,  430,  430,  430,  430,  881, 1398,  882,
      771,  808,  808,  808,  808,  808,  808, 1398,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  883,  434,  434,
      434,  434,  434,  434,  434,  434, 1398,  881,  776,  882,
      771, 1398,  786,  786,  779, 1398,  779,  435,  774,  780,

      780,  780,  780,  780,  780,  780,  780,  883, 1398,  342,
      785, 1398, 1398, 1398,  781, 1398,  781, 1398,  776,  782,
      782,  782,  782,  782,  782,  782,  782,  435,  158,  158,
      158,  158,  158,  158,  343,  344,  345, 1398,  346,  347,
      348,  349,  350,  351,  352,  353, 1398,  354,  355,  356,
      357,  340,  340,  340,  340,  340,  340,  340,  340,  157,
      157,  157,  157,  157,  157,  157,  157,  841,  841,  841,
      841,  841,  841,  947,  157,  157,  157,  157,  157,  157,
     1398,  947, 1398,  783,  783,  783,  783,  783,  783,  783,
      783,  188,  188,  188,  188,  188,  188, 1398,  783,  783,

      783,  783,  783,  783,  157,  157,  157,  157,  157,  157,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  800,
      800,  800,  800,  801,  802,  802,  803,  342,  783,  783,
      783,  783,  783,  783,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
     1398, 1398,  343,  344,  345, 1398,  346,  347,  348,  349,
      350,  351,  352,  353, 1398,  354,  355,  356,  357,  696,
      697,  698,  698,  699,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  701,  701,
      701,  701,  701,  702,  388,  388,  388,  388,  388,  388,

      388,  388,  784, 1398,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  784,  884,  784,  885,
      784,  784,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  884, 1398,  885,
     1398,  784,  833,  833,  833,  833,  834,  835,  835,  836,
      390,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      784, 1398, 1398, 1398, 1398,  391,  392,  393, 1398,  394,

      395,  396,  397,  398,  399,  400,  401, 1398,  402,  403,
      404,  405,  388,  388,  388,  388,  388,  388,  388,  388,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  841,
      841,  841,  841,  841,  841,  841,  841,  841, 1398,  812,
      812,  812,  812,  812,  812,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  850,  850,  850,
      850,  850,  850, 1398, 1398, 1398,  886, 1398,  390,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  839,  839,  839, 1398, 1398,
     1398, 1398, 1398,  391,  392,  393,  886,  394,  395,  396,
      397,  398,  399,  400,  401, 1398,  402,  403,  404,  405,
      742,  743,  744,  744,  745,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  747,
      747,  747,  747,  747,  748,  439,  207,  207,  207,  207,
      207,  207, 1398,  440,  441, 1398,  440,  440,  440,  440,
      440,  440,  440,  440,  442,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  887,  845,  845,  845,  845,  845,  845,

     1398, 1398, 1398,  888,  889,  890,  891,  444,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  892,  893,  894,
      895,  896,  897,  887,  898,  899,  900,  854,  854,  854,
      854,  854,  854,  888,  889,  890,  891, 1398, 1398, 1398,
     1398, 1398,  445, 1398, 1045, 1045, 1398,  892,  893,  894,
      895,  896,  897, 1398,  898,  899,  900,  901,  902,  903,
      904,  905, 1046, 1398,  906, 1398, 1398,  446,  447,  448,
      449,  450,  451,  452,  453,  454,  455,  456,  457,  907,
      458,  459,  460,  461,  439,  908,  909,  901,  902,  903,
      904,  905,  440,  441,  906,  440,  440,  440,  440,  440,

      440,  440,  440,  442,  910,  911, 1398,  912,  913,  907,
      914,  916,  917,  918,  919,  908,  909,  924,  925,  933,
      934,  915,  935,  936,  937,  938,  939,  940,  941,  942,
      943,  944, 1398, 1398,  910,  911,  444,  912,  913, 1398,
      914,  916,  917,  918,  919, 1398, 1398,  924,  925,  933,
      934,  915,  935,  936,  937,  938,  939,  940,  941,  942,
      943,  944,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  445,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  978,  978,
      978,  978,  979,  980,  980,  981,  446,  447,  448,  449,

      450,  451,  452,  453,  454,  455,  456,  457, 1398,  458,
      459,  460,  461,  789,  790,  791,  791,  792,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  794,  794,  794,  794,  794,  795,  492,  492,
      492,  492,  492,  492,  492,  492,  926,  927, 1055,  928,
      929, 1001, 1001, 1001, 1001, 1001, 1001,  930,  674, 1056,
     1057, 1058, 1059,  931, 1060,  932,  990,  990,  990,  990,
      990,  990,  990,  990,  990, 1398,  926,  927, 1055,  928,
      929,  989, 1061, 1398, 1398, 1398, 1398,  930, 1398, 1056,
     1057, 1058, 1059,  931, 1060,  932,  982,  982,  982,  982,

      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982, 1061,  675,  494,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984, 1398, 1062, 1398, 1063, 1064,  495,
      496,  497, 1065,  498,  499,  500,  501,  502,  503,  504,
      505, 1398,  506,  507,  508,  509,  492,  492,  492,  492,
      492,  492,  492,  492,  673, 1062, 1398, 1063, 1064,  673,
     1398, 1398, 1065,  676,  676,  676,  676,  676,  676,  677,
      678,  678,  678,  678,  679,  680,  680,  681,  682,  682,
      683, 1066, 1067, 1068, 1398, 1069, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1129, 1129, 1233, 1398,  673,
     1236, 1066, 1067, 1068,  673, 1069, 1234, 1398,  673, 1398,
     1070, 1398,  494, 1128, 1237, 1235,  673, 1398, 1398,  673,
     1238,  673,  996,  996,  996,  996,  996,  996,  996,  996,
      997,  341,  341,  341,  341,  341,  341,  495,  496,  497,
     1070,  498,  499,  500,  501,  502,  503,  504,  505, 1398,
      506,  507,  508,  509,  822,  823,  824,  824,  825,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  827,  827,  827,  827,  827,  828,  204,

      205, 1398,  204,  204,  204,  204,  204,  204,  204,  204,
      206,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  321, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1021, 1021, 1021, 1021, 1021, 1021, 1398,
     1398,   91, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010,  389,  389,  389,  389,  389,  389,   92,  214,   93,
       93,   93,   93,   93,   93,   94,   95,   95,   95,   95,
       96,   97,   97,   98,   99,   99,  100, 1398,   81, 1398,

     1398, 1398, 1398,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  224,  225,  226, 1071,  227,  228,  229,  230,
      204,  205, 1398,  204,  204,  204,  204,  204,  204,  204,
      204,  206, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004,  723,  724, 1398, 1398, 1071,  723, 1398, 1398, 1398,
     1398, 1005, 1005, 1005, 1005, 1005, 1005, 1072,   82,   82,
       82,   82,   82,   82,   83,   84,   84,   84,   84,   85,
       86,   86,   87,   88,   88,   89, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1017, 1073, 1009, 1072, 1398, 1074,
     1075, 1076,  725, 1077, 1361, 1398,  723, 1398, 1398,  214,

     1398,  723, 1398, 1234, 1398,  723, 1037, 1037, 1037, 1037,
     1037, 1037, 1235,  723, 1398, 1073,  723, 1398,  723, 1074,
     1075, 1076, 1398, 1077,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  226, 1398,  227,  228,  229,
      230,  945,  946, 1398,  945,  945,  945,  945,  945,  945,
      945,  945,  726,  726,  726,  726,  726,  726,  727,  728,
      728,  728,  728,  729,  730,  730,  731,  732,  732,  733,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1398,  378,  773,  773,
      773,  773,  773,  773,  773,  773, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398,  443,  443,  443,  443,  443,  443,
      948, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014,  119, 1047, 1047,
     1047, 1047, 1047, 1047, 1398,  949,  950,  951,  952,  953,
      954,  955,  956,  957,  958,  959,  960, 1398,  961,  962,
      963,  964,  967,  968,  969,  969,  970,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  972,  972,  972,  972,  972,  973,  340,  340,  340,
      340,  340,  340,  340,  340, 1398, 1398,  120,  120,  120,

      120,  120,  120,  121,  122,  122,  122,  122,  123,  124,
      124,  125,  126,  126,  127, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024,  770,  770,  770,  770,  770,  770,  770,
      770, 1398, 1398, 1025, 1025, 1025, 1025, 1025, 1025, 1029,
     1398, 1029,  771, 1078, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1031,  342, 1031, 1398, 1398, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032,  493,  493,  493,  493,  493,
      493, 1398,  771, 1078, 1398, 1398, 1398, 1398,  343,  344,
      345, 1398,  346,  347,  348,  349,  350,  351,  352,  353,

     1398,  354,  355,  356,  357,  340,  340,  340,  340,  340,
      340,  340,  340,  773,  773,  773,  773,  773,  773,  773,
      773, 1033, 1079, 1033, 1398, 1398, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034,  775,  775,  775,  775,  775,  775,
      775,  775, 1129, 1129, 1129, 1129,  947, 1129, 1080, 1035,
     1081, 1035, 1079,  776, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778, 1080, 1082,
     1081,  342, 1398,  776,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

     1151, 1151, 1151, 1151, 1151, 1151,  343,  344,  345, 1082,
      346,  347,  348,  349,  350,  351,  352,  353, 1398,  354,
      355,  356,  357,  388,  388,  388,  388,  388,  388,  388,
      388,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  442,  442,  442,
      442,  442,  442,  442,  442, 1398, 1398, 1398, 1398, 1398,
     1083, 1084,  442,  442,  442,  442,  442,  442, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1398, 1398, 1398,
     1398, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1083, 1084,  442,  442,  442,  442,  442,  442, 1398,  390,

     1041, 1041, 1041, 1041, 1041, 1041, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130,  391,  392,  393, 1398,  394,  395,
      396,  397,  398,  399,  400,  401, 1085,  402,  403,  404,
      405,  388,  388,  388,  388,  388,  388,  388,  388, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1093, 1085, 1094, 1051, 1051,
     1051, 1051, 1051, 1051, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1109, 1110, 1398, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1093, 1111, 1094, 1112, 1113,

     1114, 1398, 1117, 1118, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1109, 1110,  390,  643,  643,
      643,  643,  643,  643, 1119, 1398, 1111, 1398, 1112, 1113,
     1114, 1115, 1117, 1118, 1120, 1116, 1121, 1398, 1398, 1122,
     1398, 1398,  391,  392,  393, 1398,  394,  395,  396,  397,
      398,  399,  400,  401, 1119,  402,  403,  404,  405,  439,
     1123, 1115, 1124, 1125, 1120, 1116, 1121,  440,  441, 1122,
      440,  440,  440,  440,  440,  440,  440,  440,  442, 1126,
     1127, 1143, 1143, 1143, 1143, 1144, 1145, 1145, 1146, 1398,
     1123, 1398, 1124, 1125, 1151, 1151, 1151, 1151, 1151, 1151,

     1151, 1151, 1151, 1225, 1225, 1225, 1225, 1225, 1225, 1126,
     1127,  444, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147,  378, 1398,  445, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149,  321, 1398, 1176, 1398,
     1398,  446,  447,  448,  449,  450,  451,  452,  453,  454,
      455,  456,  457, 1398,  458,  459,  460,  461,  439, 1177,
     1178, 1398, 1179, 1180,  119, 1181,  440,  441, 1176,  440,

      440,  440,  440,  440,  440,  440,  440,  442, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1398, 1398, 1177,
     1178,   81, 1179, 1180, 1398, 1181, 1398, 1155, 1155, 1155,
     1155, 1155, 1155,  947,  947,  947,  947,  947,  947, 1398,
      444, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1182,
     1183, 1398, 1398, 1398,  120,  120,  120,  120,  120,  120,
      121,  122,  122,  122,  122,  123,  124,  124,  125,  126,
      126,  127, 1398, 1398, 1398,  445, 1398, 1398, 1398, 1182,
     1183,   82,   82,   82,   82,   82,   82,   83,   84,   84,
       84,   84,   85,   86,   86,   87,   88,   88,   89, 1398,

      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457, 1398,  458,  459,  460,  461,  176, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1398, 1184, 1225, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1398, 1398, 1398,  177, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1398, 1398,

     1398, 1398, 1185, 1186,  178, 1184,  179,  179,  179,  179,
      179,  179,  180,  181,  181,  181,  181,  182,  183,  183,
      184,  185,  185,  186,  492,  492,  492,  492,  492,  492,
      492,  492, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1207, 1208, 1212, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1220, 1187, 1188, 1190, 1191, 1192, 1193,
     1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
     1204, 1205, 1206, 1207, 1208, 1212, 1213, 1214, 1215, 1216,
     1217, 1218, 1219, 1220, 1221, 1398, 1398, 1398, 1222, 1398,

      494, 1398, 1362, 1398, 1398,  674, 1398, 1223, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1237, 1398, 1398, 1398,
     1224, 1398, 1238, 1398, 1221,  495,  496,  497, 1222,  498,
      499,  500,  501,  502,  503,  504,  505, 1223,  506,  507,
      508,  509,  492,  492,  492,  492,  492,  492,  492,  492,
     1224, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
      675,  207,  724,  207,  207,  207,  207,  207, 1248,  207,
     1229, 1229, 1229, 1229, 1229, 1229, 1243, 1249,  207, 1244,
     1242,  207, 1398, 1245,  207, 1251,  207,  207, 1398,  207,
     1398,  207, 1398,  207,  207,  207,  207,  207, 1248,  207,

     1398, 1398, 1398, 1398, 1398, 1250, 1243, 1249,  207, 1244,
     1242,  207,  725, 1245,  207, 1251,  207,  207,  494,  207,
      676,  676,  676,  676,  676,  676,  677,  678,  678,  678,
      678,  679,  680,  680,  681,  682,  682,  683, 1398, 1398,
     1398, 1398, 1398,  495,  496,  497, 1398,  498,  499,  500,
      501,  502,  503,  504,  505, 1398,  506,  507,  508,  509,
      204,  205, 1398,  204,  204,  204,  204,  204,  204,  204,
      204,  206,  726,  726,  726,  726,  726,  726,  727,  728,
      728,  728,  728,  729,  730,  730,  731,  732,  732,  733,
     1246, 1246, 1246, 1246,  207,  207, 1247, 1252, 1252, 1252,

     1252,  207, 1254, 1253,  207,  207,  207,  207, 1260, 1398,
      207, 1257,  207, 1261,  207, 1255, 1262,  207, 1256,  207,
     1258, 1259,  207,  207,  207,  207,  207,  207,  207, 1266,
      207,  207, 1254,  207,  207,  207,  207,  207, 1260,  214,
      207, 1257,  207, 1261,  207, 1255, 1262,  207, 1256,  207,
     1258, 1259,  207,  207, 1398, 1398,  207,  207,  207, 1266,
      207, 1398, 1398,  207,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  226,  207,  227,  228,  229,
      230,  204,  205,  207,  204,  204,  204,  204,  204,  204,
      204,  204,  206,  207,  207,  207,  207, 1263, 1267,  207,

      207,  207,  207, 1272, 1270,  207,  207, 1268, 1264,  207,
     1265,  207,  207,  207, 1269, 1271,  207,  207, 1398, 1278,
     1273,  207,  207,  207,  207,  207,  207, 1263, 1267,  207,
      207,  207,  207, 1272, 1270,  207, 1274, 1268, 1264,  207,
     1265,  207,  207,  207, 1269, 1271,  207,  207,  207, 1278,
     1273,  207,  207,  207,  207, 1398, 1398, 1398, 1398, 1398,
      214, 1398, 1398, 1398, 1398, 1398, 1274,  674, 1398, 1398,
     1398, 1398, 1398,  207, 1398, 1398, 1398, 1398,  207, 1398,
     1398, 1398, 1398,  207,  207,  215,  216,  217,  218,  219,
      220,  221,  222,  223,  224,  225,  226, 1398,  227,  228,

      229,  230,  945,  946,  987,  945,  945,  945,  945,  945,
      945,  945,  945, 1275,  207,  207, 1277,  207,  207, 1280,
     1294,  207,  675,  207,  724, 1312, 1296,  207,  207, 1310,
     1279,  207,  207,  207, 1311,  988,  207, 1295,  207, 1297,
     1276,  207,  207,  207,  207,  207, 1277,  207,  207, 1280,
     1294,  207, 1398,  207, 1398, 1312, 1296,  207,  207, 1310,
     1279,  207,  207,  207, 1311, 1398,  207, 1295,  207, 1297,
      207,  207,  207,  207,  725,  207, 1398, 1398, 1398, 1398,
     1398,  948,  676,  676,  676,  676,  676,  676,  677,  678,
      678,  678,  678,  679,  680,  680,  681,  682,  682,  683,

      207, 1398, 1398, 1398, 1398,  207,  949,  950,  951,  952,
      953,  954,  955,  956,  957,  958,  959,  960, 1398,  961,
      962,  963,  964,  945,  946, 1398,  945,  945,  945,  945,
      945,  945,  945,  945,  726,  726,  726,  726,  726,  726,
      727,  728,  728,  728,  728,  729,  730,  730,  731,  732,
      732,  733, 1284, 1398, 1246, 1246, 1246, 1246,  207,  207,
     1247, 1398,  207,  207, 1319, 1320,  207, 1313, 1285, 1314,
     1286, 1286, 1286, 1286, 1286, 1286, 1287, 1288, 1288, 1288,
     1288, 1289, 1290, 1290, 1291, 1292, 1292, 1293,  207,  207,
      207, 1281,  207,  207, 1319, 1320,  207, 1313, 1398, 1314,

     1398, 1398,  948, 1398, 1398, 1398, 1398, 1398, 1398, 1282,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1398,
      207, 1281, 1398, 1398, 1398, 1398, 1398,  949,  950,  951,
      952,  953,  954,  955,  956,  957,  958,  959,  960, 1282,
      961,  962,  963,  964, 1132, 1133, 1134, 1134, 1135, 1136,
     1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137, 1138,  204,
      205, 1300,  204,  204,  204,  204,  204,  204,  204,  204,
      206, 1398, 1252, 1252, 1252, 1252,  207, 1301, 1253, 1302,
     1302, 1302, 1302, 1302, 1302, 1303, 1304, 1304, 1304, 1304,

     1305, 1306, 1306, 1307, 1308, 1308, 1309, 1324,  207,  207,
      207,  207,  207, 1325,  207,  207,  207,  207, 1398, 1298,
     1315, 1159,  207, 1316, 1317, 1341, 1355, 1318, 1323, 1339,
      207,  207,  207, 1340, 1398, 1398, 1398, 1324,  207,  207,
      207,  207,  207, 1325,  207,  207, 1398,  207,  214, 1298,
     1315, 1398,  207, 1316, 1317, 1341, 1355, 1318, 1323, 1339,
      207,  207,  207, 1340, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1398,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  224,  225,  226, 1398,  227,  228,  229,  230,
      204,  205, 1398,  204,  204,  204,  204,  204,  204,  204,

      204,  206, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1398, 1398, 1398,  214,
     1398, 1398, 1398, 1398, 1398, 1398,  207, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398,  215,  216,  217,  218,  219,  220,

      221,  222,  223,  224,  225,  226,  207,  227,  228,  229,
      230,  542,  543,  544,  544,  545,  546,  546,  546,  546,
      546,  546,  546, 1160,  546,  546,  546,  546,  546,  546,
      547,  547,  547,  547,  547,  548,  340,  340,  340,  340,
      340,  340,  340,  340,  207,  207,  207,  207,  207, 1358,
     1356,  207, 1360, 1354,  207, 1363, 1364, 1365, 1366,  207,
     1357, 1372, 1373, 1359, 1374,  207,  207,  207,  207, 1379,
      207,  207,  207, 1371,  207,  207,  207,  207,  207, 1358,
     1356,  207, 1360, 1354,  207, 1363, 1364, 1365, 1366,  207,
     1357, 1372, 1373, 1359, 1374,  207,  207,  207,  207, 1379,

      207,  207,  207, 1371,  207,  207, 1380, 1398, 1398, 1398,
     1381, 1398,  342, 1398, 1398, 1398, 1398, 1398, 1398, 1283,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398,  207,  207, 1380,  343,  344,  345,
     1381,  346,  347,  348,  349,  350,  351,  352,  353, 1283,
      354,  355,  356,  357,  340,  340,  340,  340,  340,  340,
      340,  340,  207, 1385, 1386,  207, 1398, 1398, 1387,  207,
     1389, 1390,  207, 1283,  207, 1283, 1394,  207, 1283, 1395,
     1398,  207, 1283, 1398, 1388, 1391,  207, 1398, 1393, 1384,
     1398, 1392,  207, 1385, 1386,  207, 1275, 1276, 1387,  207,

     1389, 1390,  207, 1283,  207, 1283, 1394,  207, 1283, 1395,
      207,  207, 1283,  207, 1388, 1391,  207, 1398, 1393, 1397,
     1398, 1392, 1398, 1398, 1396, 1398, 1398, 1398, 1398, 1398,
      342, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
      207, 1398, 1398,  207, 1398, 1398, 1398, 1398, 1398, 1397,
     1398, 1398, 1398, 1398, 1396,  343,  344,  345, 1398,  346,
      347,  348,  349,  350,  351,  352,  353, 1398,  354,  355,
      356,  357,  388,  388,  388,  388,  388,  388,  388,  388,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  390, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398,  391,  392,  393, 1398,  394,  395,  396,
      397,  398,  399,  400,  401, 1398,  402,  403,  404,  405,
      388,  388,  388,  388,  388,  388,  388,  388, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  390, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398,  391,  392,  393, 1398,  394,  395,  396,  397,  398,

      399,  400,  401, 1398,  402,  403,  404,  405,  439, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  440,  441, 1398,  440,
      440,  440,  440,  440,  440,  440,  440,  442, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
      444, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398,  445, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457, 1398,  458,  459,  460,  461,  439, 1398, 1398,
     1398, 1398, 1398, 1398, 1398,  440,  441, 1398,  440,  440,
      440,  440,  440,  440,  440,  440,  442, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  444,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398,  445, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  446,
      447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
      457, 1398,  458,  459,  460,  461,  492,  492,  492,  492,
      492,  492,  492,  492, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398,  494, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398,  495,  496,  497,
     1398,  498,  499,  500,  501,  502,  503,  504,  505, 1398,
      506,  507,  508,  509,  492,  492,  492,  492,  492,  492,
      492,  492, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
      494, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398,  495,  496,  497, 1398,  498,
      499,  500,  501,  502,  503,  504,  505, 1398,  506,  507,

      508,  509,  204,  205, 1398,  204,  204,  204,  204,  204,
      204,  204,  204,  206, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398,  214, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398,  215,  216,  217,  218,
      219,  220,  221,  222,  223,  224,  225,  226, 1398,  227,
      228,  229,  230,  204,  205, 1398,  204,  204,  204,  204,
      204,  204,  204,  204,  206, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398,  214, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398,  215,  216,  217,
      218,  219,  220,  221,  222,  223,  224,  225,  226, 1398,
      227,  228,  229,  230,  945,  946, 1398,  945,  945,  945,
      945,  945,  945,  945,  945, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398,  948, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  949,  950,
      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
     1398,  961,  962,  963,  964,  945,  946, 1398,  945,  945,
      945,  945,  945,  945,  945,  945, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398,  948, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  949,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960, 1398,  961,  962,  963,  964,  945,  946, 1398,  945,
      945,  945,  945,  945,  945,  945,  945, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398,  948, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
      949,  950,  951,  952,  953,  954,  955,  956,  957,  958,

      959,  960, 1398,  961,  962,  963,  964,  204,  205, 1398,
      204,  204,  204,  204,  204,  204,  204,  204,  206, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  214, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226, 1398,  227,  228,  229,  230,  204,  205,
     1398,  204,  204,  204,  204,  204,  204,  204,  204,  206,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1241, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1241, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398,  214, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398,  215,  216,  217,  218,  219,  220,  221,  222,
      223,  224,  225,  226, 1398,  227,  228,  229,  230,  542,
      543,  544,  544,  545,  546,  546,  546,  546,  546,  546,
      546, 1321,  546,  546,  546,  546,  546,  546,  547,  547,
      547,  547,  547,  548, 1326, 1246, 1246, 1326, 1398, 1398,
     1327, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1328, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1329,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1328, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1329,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1284, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1285, 1398, 1286, 1286, 1286, 1286, 1286, 1286,

     1287, 1288, 1288, 1288, 1288, 1289, 1290, 1290, 1291, 1292,
     1292, 1293, 1342, 1252, 1252, 1342, 1398, 1398, 1343, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1344,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1344,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1300, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1301, 1398, 1302, 1302, 1302, 1302, 1302, 1302, 1303, 1304,
     1304, 1304, 1304, 1305, 1306, 1306, 1307, 1308, 1308, 1309,
     1326, 1246, 1246, 1326, 1398, 1398, 1327, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1328, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1329, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1328, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1329, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1284, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1285, 1398,
     1286, 1286, 1286, 1286, 1286, 1286, 1287, 1288, 1288, 1288,
     1288, 1289, 1290, 1290, 1291, 1292, 1292, 1293, 1326, 1246,
     1246, 1326, 1398, 1398, 1327, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1328, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1329, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1328, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1329, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1284, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1285, 1398, 1286, 1286,
     1286, 1286, 1286, 1286, 1287, 1288, 1288, 1288, 1288, 1289,
     1290, 1290, 1291, 1292, 1292, 1293, 1342, 1252, 1252, 1342,
     1398, 1398, 1343, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1344, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1344, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1300, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1301, 1398, 1302, 1302, 1302, 1302,
     1302, 1302, 1303, 1304, 1304, 1304, 1304, 1305, 1306, 1306,
     1307, 1308, 1308, 1309, 1342, 1252, 1252, 1342, 1398, 1398,
     1343, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1344, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1344, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1300, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1301, 1398, 1302, 1302, 1302, 1302, 1302, 1302,
     1303, 1304, 1304, 1304, 1304, 1305, 1306, 1306, 1307, 1308,

     1308, 1309, 1326, 1246, 1246, 1326, 1398, 1398, 1327, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1328,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1382, 1398, 1398, 1329, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1328,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1382, 1398, 1398, 1329, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1284, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1285, 1398, 1286, 1286, 1286, 1286, 1286, 1286, 1287, 1288,
     1288, 1288, 1288, 1289, 1290, 1290, 1291, 1292, 1292, 1293,
     1326, 1246, 1246, 1326, 1398, 1398, 1327, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1328, 1383, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1329, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1328, 1383, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1329, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1284, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1285, 1398,
     1286, 1286, 1286, 1286, 1286, 1286, 1287, 1288, 1288, 1288,
     1288, 1289, 1290, 1290, 1291, 1292, 1292, 1293,   79, 1398,
       79,   79,   79,   79,   79,   79,   79,   79,   79, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,   79,   79,   79,   79,

       90, 1398,   90,   90,   90,   90,   90,   90,   90,   90,
       90, 1398, 1398,   90, 1398, 1398,   90, 1398,   90,   90,
       90,   90,  101, 1398,  101, 1398,  101, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398,  101,  117, 1398,  117,  117,
      117,  117,  117,  117,  117,  117,  117, 1398, 1398, 1398,
     1398, 1398, 1398, 1398,  117,  117,  117,  117,  130, 1398,
      130, 1398,  130, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398,  130,  158, 1398, 1398,  158,  158,  158,  158,  158,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  158,  174,
      174,  174,  174,  174,  174,  174, 1398,  174, 1398, 1398,

      174, 1398, 1398,  174, 1398,  174,  174,  174,  174,  188,
     1398,  188, 1398,  188, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398,  188,  299,  299,  299, 1398,  299,  299,  301,
      301,  301,  301,  301,  301,  311,  311,  311,  311,  311,
      311,  312,  312,  312,  312,  312,  312,  319,  319,  319,
      319,  319,  319,   79, 1398,   79,   79,   79,   79,   79,
       79,   79,   79,   79, 1398, 1398, 1398, 1398, 1398, 1398,
     1398,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,  324,  324,  324,  324,  324,  324,  326,  326,  326,
      326,  326,  326,  328,  328,  328,  328,  328,  328,   90,

     1398,   90,   90,   90,   90,   90,   90,   90,   90,   90,
     1398, 1398,   90, 1398, 1398,   90, 1398,   90,   90,   90,
       90,  331,  331,  331,  331,  331,  332,  332,  332,  332,
       90,   90,   90,   90,   90,   90,  334,  334,  334,  334,
      334,  334,  336,  336,  336,  336,  336,  336,  338,  338,
      338,  338,  338,  338,  341, 1398,  341, 1398,  341, 1398,
      341, 1398, 1398, 1398, 1398, 1398,  341,  341,  101,  101,
      101, 1398,  101,  101,  359,  359,  359,  359,  359,  359,
      368,  368,  368,  368,  368,  368,  369,  369,  369,  369,
      369,  369,  376,  376,  376,  376,  376,  376,  117, 1398,

      117,  117,  117,  117,  117,  117,  117,  117,  117, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  381,  381,  381,  381,
      381,  381,  383,  383,  383,  383,  383,  383,  385,  385,
      385,  385,  385,  385,  389, 1398,  389, 1398,  389, 1398,
      389, 1398, 1398, 1398, 1398, 1398,  389,  389,  130,  130,
      130, 1398,  130,  130,  407,  407,  407,  407,  407,  407,
      416,  416,  416,  416,  416,  416,  417,  417,  417,  417,
      417,  417,  424,  424,  424,  424,  424,  424,  443,  443,
      443,  443,  443,  443,  443,  443, 1398,  443, 1398, 1398,

     1398, 1398, 1398,  443,  443,  443,  158,  158,  158, 1398,
      158,  158,  464,  464,  464,  464,  464,  464,  473,  473,
      473,  473,  473,  473,  474,  474,  474,  474,  474,  474,
      481,  481,  481,  481,  481,  481,  174,  174,  174,  174,
      174,  174,  174, 1398,  174, 1398, 1398,  174, 1398, 1398,
      174, 1398,  174,  174,  174,  174,  483,  483,  483,  483,
      483,  484,  484,  484,  484,  174,  174,  174,  174,  174,
      174,  486,  486,  486,  486,  486,  486,  488,  488,  488,
      488,  488,  488,  490,  490,  490,  490,  490,  490,  493,
     1398,  493, 1398,  493, 1398,  493, 1398, 1398, 1398, 1398,

     1398,  493,  493,  188,  188,  188, 1398,  188,  188,  511,
      511,  511,  511,  511,  511,  520,  520,  520,  520,  520,
      520,  521,  521,  521,  521,  521,  521,  528,  528,  528,
      528,  528,  528,  207,  207,  207,  207,  207, 1398,  207,
     1398,  207, 1398, 1398, 1398, 1398, 1398,  207,  207,  207,
      158, 1398, 1398,  158,  158,  158,  158,  158, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  158,  207,  207,  207,
     1398,  207,  207,  538,  538,  538,  538,  538,  538,  541,
      541,  541,  541,  541,  541,  550,  550,  550,  550,  550,
      550,  551,  551,  551,  551,  551,  551,  558,  558,  558,

      558,  558,  558,  643, 1398,  643, 1398,  643, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  643,  299,  299,  299,
      299,  299,  299,  660,  660,  660,  660,  660,  660,  661,
      661,  661,  661,  661,  661,  666,  666,  666,  666,  666,
      666,  667,  667,  667,  667,  667,  667,  668,  668,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  669,  670,
      670,  670,  670,  670,  670,  671,  671,  671,  671,  671,
      671,  672,  672,  672,  672,  672,  672,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673, 1398, 1398,
     1398, 1398, 1398, 1398, 1398,  673,  673,  673,  673,   79,

       79,   79,   79,   79,   79,  684,  684,  684,  684,  684,
      684,  685,  685,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  686,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  332,  332,  332,  332,  332,
      332,   90,   90,   90,   90,   90,   90,  690,  690,  690,
      690,  690,  690,  691,  691,  691,  691,  691,  691,  692,
      692,  692,  692,  692,  692,  693,  693,  693,  693,  693,
      693,  341, 1398,  341, 1398,  341, 1398,  341, 1398, 1398,
     1398, 1398, 1398,  341,  341,  341,  341,  341, 1398,  341,
      341,  340,  340,  340,  340, 1398,  340,  695,  695,  695,

      695,  695,  695,  704,  704,  704,  704,  704,  704,  705,
      705,  705,  705,  705,  705,  712,  712,  712,  712,  712,
      712,  101,  101,  101,  101,  101,  101,  714,  714,  714,
      714,  714,  714,  715,  715,  715,  715,  715,  715,  716,
      716,  716,  716,  716,  716,  717,  717,  717,  717,  717,
      717,  718,  718,  718,  718,  718,  718,  719,  719,  719,
      719,  719,  719,  720,  720,  720,  720,  720,  720,  721,
      721,  721,  721,  721,  721,  722,  722,  722,  722,  722,
      722,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  723,

      723,  723,  723,  117,  117,  117,  117,  117,  117,  734,
      734,  734,  734,  734,  734,  735,  735,  735,  735,  735,
      735,  736,  736,  736,  736,  736,  736,  737,  737,  737,
      737,  737,  737,  738,  738,  738,  738,  738,  738,  389,
     1398,  389, 1398,  389, 1398,  389, 1398, 1398, 1398, 1398,
     1398,  389,  389,  389,  389,  389, 1398,  389,  389,  388,
      388,  388,  388, 1398,  388,  741,  741,  741,  741,  741,
      741,  750,  750,  750,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  758,  758,  758,  758,  758,  758,  130,
      130,  130,  130,  130,  130,  760,  760,  760,  760,  760,

      760,  761,  761,  761,  761,  761,  761,  762,  762,  762,
      762,  762,  762,  763,  763,  763,  763,  763,  763,  764,
      764,  764,  764,  764,  764,  765,  765,  765,  765,  765,
      765,  766,  766,  766,  766,  766,  766,  767,  767,  767,
      767,  767,  767,  768,  768,  768,  768,  768,  768,  443,
      443,  443,  443,  443,  443,  443,  443, 1398,  443, 1398,
     1398, 1398, 1398, 1398,  443,  443,  443,  443,  443,  443,
     1398,  443,  443,  785,  785,  785,  785,  785,  785,  788,
      788,  788,  788,  788,  788,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  798,  798,  805,  805,  805,

      805,  805,  805,  158,  158,  158,  158,  158,  158,  807,
      807,  807,  807,  807,  807,  808,  808,  808,  808,  808,
      808,  809,  809,  809,  809,  809,  809,  810,  810,  810,
      810,  810,  810,  811,  811,  811,  811,  811,  811,  812,
      812,  812,  812,  812,  812,  813,  813,  813,  813,  813,
      813,  814,  814,  814,  814,  814,  814,  815,  815,  815,
      815,  815,  815,  484,  484,  484,  484,  484,  484,  174,
      174,  174,  174,  174,  174,  816,  816,  816,  816,  816,
      816,  817,  817,  817,  817,  817,  817,  818,  818,  818,
      818,  818,  818,  819,  819,  819,  819,  819,  819,  493,

     1398,  493, 1398,  493, 1398,  493, 1398, 1398, 1398, 1398,
     1398,  493,  493,  493,  493,  493, 1398,  493,  493,  492,
      492,  492,  492, 1398,  492,  821,  821,  821,  821,  821,
      821,  830,  830,  830,  830,  830,  830,  831,  831,  831,
      831,  831,  831,  838,  838,  838,  838,  838,  838,  188,
      188,  188,  188,  188,  188,  840,  840,  840,  840,  840,
      840,  841,  841,  841,  841,  841,  841,  842,  842,  842,
      842,  842,  842,  843,  843,  843,  843,  843,  843,  844,
      844,  844,  844,  844,  844,  845,  845,  845,  845,  845,
      845,  846,  846,  846,  846,  846,  846,  847,  847,  847,

      847,  847,  847,  848,  848,  848,  848,  848,  848,  207,
      207,  207,  207,  207, 1398,  207, 1398,  207, 1398, 1398,
     1398, 1398, 1398,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  539,  539,  539,  539,  539,  539,  850,  850,
      850,  850,  850,  850,  851,  851,  851,  851,  851,  851,
      852,  852,  852,  852,  852,  852,  853,  853,  853,  853,
      853,  853,  854,  854,  854,  854,  854,  854,  855,  855,
      855,  855,  855,  855,  856,  856,  856,  856,  856,  856,
      857,  857,  857,  857,  857,  857,  947,  947,  947, 1398,
      947, 1398,  947, 1398,  947, 1398, 1398, 1398, 1398, 1398,

      947,  947,  947,  643,  643,  643, 1398,  643,  643,  966,
      966,  966,  966,  966,  966,  975,  975,  975,  975,  975,
      975,  976,  976,  976,  976,  976,  976,  983,  983,  983,
      983,  983,  983,  299,  299,  299,  299,  299,  299,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
     1398, 1398, 1398, 1398, 1398, 1398, 1398,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  991,  991,  991,
      991,  991,  991,  993,  993,  993,  993,  993,  993,  995,
      995,  995,  995,  995,  995,   79, 1398,   79,   79,   79,
       79,   79,   79,   79,   79,   79, 1398, 1398, 1398, 1398,

     1398, 1398, 1398,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,  998,  998,  998,  998,  998,  998,   90,
     1398,   90,   90,   90,   90,   90,   90,   90,   90,   90,
     1398, 1398,   90, 1398, 1398,   90, 1398,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,  332,  332,  332,
      332,  332,  332,  341,  341,  341,  341,  341,  341,  999,
      999,  999,  999,  999,  999, 1001, 1001, 1001, 1001, 1001,
     1001, 1002, 1002, 1002, 1002, 1002, 1002, 1003, 1003, 1003,
     1003, 1003, 1003, 1004, 1004, 1004, 1004, 1004, 1004, 1005,
     1005, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006, 1006,

     1006, 1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008,
     1008, 1008, 1008,  341, 1398,  341, 1398,  341, 1398,  341,
     1398, 1398, 1398, 1398, 1398,  341,  341,  101,  101,  101,
      101,  101,  101,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723, 1398, 1398, 1398, 1398, 1398, 1398,
     1398,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723, 1011, 1011, 1011, 1011, 1011, 1011, 1013, 1013, 1013,
     1013, 1013, 1013, 1015, 1015, 1015, 1015, 1015, 1015,  117,
     1398,  117,  117,  117,  117,  117,  117,  117,  117,  117,
     1398, 1398, 1398, 1398, 1398, 1398, 1398,  117,  117,  117,

      117,  117,  117,  117,  117,  117,  117, 1018, 1018, 1018,
     1018, 1018, 1018,  389,  389,  389,  389,  389,  389, 1019,
     1019, 1019, 1019, 1019, 1019, 1021, 1021, 1021, 1021, 1021,
     1021, 1022, 1022, 1022, 1022, 1022, 1022, 1023, 1023, 1023,
     1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024, 1025,
     1025, 1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026,
     1026, 1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028,
     1028, 1028, 1028,  389, 1398,  389, 1398,  389, 1398,  389,
     1398, 1398, 1398, 1398, 1398,  389,  389,  130,  130,  130,
      130,  130,  130,  443,  443,  443,  443,  443,  443,  443,

      443, 1398,  443, 1398, 1398, 1398, 1398, 1398,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  786,  786,  786,
      786,  786,  786, 1037, 1037, 1037, 1037, 1037, 1037, 1038,
     1038, 1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039,
     1039, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1041, 1041,
     1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042, 1042, 1043,
     1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044, 1044,
     1044,  158,  158,  158,  158,  158,  158,  174,  174,  174,
      174,  174,  174,  174, 1398,  174, 1398, 1398,  174, 1398,
     1398,  174, 1398,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  484,  484,  484,  484,  484,  484,  493,
      493,  493,  493,  493,  493, 1045, 1045, 1045, 1045, 1045,
     1045, 1047, 1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048,
     1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049, 1049, 1050,
     1050, 1050, 1050, 1050, 1050, 1051, 1051, 1051, 1051, 1051,
     1051, 1052, 1052, 1052, 1052, 1052, 1052, 1053, 1053, 1053,
     1053, 1053, 1053, 1054, 1054, 1054, 1054, 1054, 1054,  493,
     1398,  493, 1398,  493, 1398,  493, 1398, 1398, 1398, 1398,
     1398,  493,  493,  188,  188,  188,  188,  188,  188,  207,
      207,  207,  207,  207, 1398,  207, 1398,  207, 1398, 1398,

     1398, 1398, 1398,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  947,  947,  947, 1398,  947, 1398,  947, 1398,
      947, 1398, 1398, 1398, 1398, 1398,  947,  947,  947,  947,
      947,  947, 1398,  947,  947, 1128, 1128, 1128, 1128, 1128,
     1128, 1131, 1131, 1131, 1131, 1131, 1131, 1140, 1140, 1140,
     1140, 1140, 1140, 1141, 1141, 1141, 1141, 1141, 1141, 1148,
     1148, 1148, 1148, 1148, 1148,  643,  643,  643,  643,  643,
      643, 1150, 1150, 1150, 1150, 1150, 1150, 1151, 1151, 1151,
     1151, 1151, 1151, 1152, 1152, 1152, 1152, 1152, 1152, 1153,
     1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,

     1154, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156,
     1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157, 1157, 1158,
     1158, 1158, 1158, 1158, 1158,  207,  207,  207,  207,  207,
     1398,  207, 1398,  207, 1398, 1398, 1398, 1398, 1398,  207,
      207,  207,  673,  673,  673,  673,  673,  673,  673,  673,
      673, 1398,  673,  673,  673,  673,  673,  673,  673, 1163,
     1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164,
     1164, 1165, 1165, 1165, 1165, 1165, 1165, 1166, 1166, 1166,
     1166, 1166, 1166, 1167, 1167, 1167, 1167, 1167, 1167,   79,
     1398,   79,   79,   79,   79,   79,   79,   79,   79,   79,

     1398, 1398, 1398, 1398, 1398, 1398, 1398,   79,   79,   79,
       79,  341, 1398,  341, 1398,  341, 1398,  341, 1398, 1398,
     1398, 1398, 1398,  341,  341,  341,  341,  341,  341,  341,
      341,  723,  723,  723,  723,  723,  723,  723,  723,  723,
     1398,  723,  723,  723,  723,  723,  723,  723, 1170, 1170,
     1170, 1170, 1170, 1170, 1171, 1171, 1171, 1171, 1171, 1171,
     1172, 1172, 1172, 1172, 1172, 1172, 1173, 1173, 1173, 1173,
     1173, 1173, 1174, 1174, 1174, 1174, 1174, 1174,  117, 1398,
      117,  117,  117,  117,  117,  117,  117,  117,  117, 1398,
     1398, 1398, 1398, 1398, 1398, 1398,  117,  117,  117,  117,

      389, 1398,  389, 1398,  389, 1398,  389, 1398, 1398, 1398,
     1398, 1398,  389,  389,  389,  389,  389,  389,  389,  389,
      443,  443,  443,  443,  443,  443,  443,  443, 1398,  443,
     1398, 1398, 1398, 1398, 1398,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  493, 1398,  493, 1398,  493, 1398,
      493, 1398, 1398, 1398, 1398, 1398,  493,  493,  493,  493,
      493,  493,  493,  493,  207,  207,  207,  207,  207, 1398,
      207, 1398,  207, 1398, 1398, 1398, 1398, 1398,  207,  207,
      207,  947,  947,  947, 1398,  947, 1398,  947, 1398,  947,
     1398, 1398, 1398, 1398, 1398,  947,  947,  947,  947,  947,

      947,  947,  947,  947, 1129, 1129, 1129, 1129, 1129, 1129,
     1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226,
     1226, 1226, 1227, 1227, 1227, 1227, 1227, 1227, 1228, 1228,
     1228, 1228, 1228, 1228, 1229, 1229, 1229, 1229, 1229, 1229,
     1230, 1230, 1230, 1230, 1230, 1230, 1231, 1231, 1231, 1231,
     1231, 1231, 1232, 1232, 1232, 1232, 1232, 1232,  643,  643,
      643,  643,  643,  643,  207,  207,  207,  207,  207, 1398,
      207, 1398,  207, 1398, 1398, 1398, 1398, 1398,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673, 1398, 1398,

     1398, 1398, 1398, 1398, 1398,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673, 1239, 1239, 1239, 1239, 1239,
     1239,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723, 1398, 1398, 1398, 1398, 1398, 1398, 1398,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723, 1240,
     1240, 1240, 1240, 1240, 1240,  947,  947,  947,  947,  947,
      947, 1283, 1398, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1398, 1398, 1283, 1398, 1398, 1283, 1398, 1283,
     1283, 1283, 1283, 1299, 1398, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1398, 1398, 1299, 1398, 1398, 1299,

     1398, 1299, 1299, 1299, 1299, 1330, 1330, 1330, 1330, 1330,
     1331, 1331, 1331, 1331, 1283, 1283, 1283, 1283, 1283, 1283,
     1333, 1333, 1333, 1333, 1333, 1333, 1335, 1335, 1335, 1335,
     1335, 1335, 1337, 1337, 1337, 1337, 1337, 1337, 1345, 1345,
     1345, 1345, 1345, 1346, 1346, 1346, 1346, 1299, 1299, 1299,
     1299, 1299, 1299, 1348, 1348, 1348, 1348, 1348, 1348, 1350,
     1350, 1350, 1350, 1350, 1350, 1352, 1352, 1352, 1352, 1352,
     1352,  207,  207,  207,  207,  207,  207, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1398, 1398,
     1283, 1398, 1398, 1283, 1398, 1283, 1283, 1283, 1283, 1331,

     1331, 1331, 1331, 1331, 1331, 1283, 1283, 1283, 1283, 1283,
     1283, 1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368, 1368,
     1368, 1368, 1368, 1369, 1369, 1369, 1369, 1369, 1369, 1370,
     1370, 1370, 1370, 1370, 1370, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1398, 1398, 1299, 1398,
     1398, 1299, 1398, 1299, 1299, 1299, 1299, 1346, 1346, 1346,
     1346, 1346, 1346, 1299, 1299, 1299, 1299, 1299, 1299, 1375,
     1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376, 1376, 1376,
     1376, 1377, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378,
     1378, 1378, 1378, 1283, 1283, 1283, 1283, 1283, 1283, 1283,

     1283, 1283, 1283, 1283, 1398, 1398, 1283, 1398, 1398, 1283,
     1398, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1331, 1331, 1331, 1331, 1331, 1331,    3, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398
    } ;

static yyconst flex_int16_t yy_chk[12068] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        9,   10,    5,   14,   14,   14,   14,   20,   20,   20,
       20,   20,   20,   20,   20,   14,  145,   10,  145,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   11,   13,
       11,   11,   11,   11,   11,   11,   11,   11, 1407,   11,
       11,   11,   11,   16,   16,    9,   16,   16,   16,   16,

       16,   16,   16,   16, 1346,   16,   16,   16,   16,   17,
       17, 1331,   17,   17,   17,   17,   17,   17,   17,   17,
      302,  302, 1276,   52,   52,   52,   52,   19,   19,   13,
       19,   19,   19,   19,   19,   19,   19,   19,   63,  317,
      317,   76,   19,   65,   76,  103,   63,   64,   64,   64,
       64,   65,   64,  103, 1139,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   28,   28, 1108,   28,   28,   28,   28,
       28,   28,   28,   28,   52,   28,   28,   28,   28,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   22,  208,   22,
       22,   22,   22,   22,   22,   22,   22,  105,  132,   33,
      296,  134,  560,   33,   36,  105,  132,   33,   22,  134,
       33,   36,  208,   33,   36,   33,   36,   66,   66,   66,
       66,   66,   66,   66,   66,   66, 1107,  161,  163,   33,
      360,  360,  560,   33,   36,  161,  163,   33,   22,   23,
       33,   36,  208,   33,   36,   33,   36,  210,  296, 1106,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   31,
       31,  190,   31,  192,  209,  210,  236,   31,   34,  190,
       31,  192,   31,   31,  209,   34,   31,   34,   34,   31,

       34,  236,   31, 1074,  261,  217,   34,  261,  218,   31,
       31,   23,   31,  217, 1017,  210,  218,   31,   34, 1575,
       31, 1575,   31,   31,  209,   34,   31,   34,   34,   31,
       34,  236,   31,  374,  374, 1009,   34,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   72,   72,   72,   72,   72,   72,   72,
       72,   83,   83,   83,   83,   83,   83,   83,   83,   83,
      211,  234,   23,   23,  997,   23,   23,   23,   23,   23,
       23,   23,   23,  213,   23,   23,   23,   23,   25,   25,
       32,  232,  256,  231,   32,   35,  213,  234,   32,   35,

      211,   32,   35,   32,   32,   35,   32,   35,  561,   38,
       38,  232,  256,   32,  989,  220,   38,  231,   38,   38,
       32,   38,   38,  220,   32,   35,  213,  234,   32,   35,
      211,   32,   35,   32,   32,   35,   32,   35,  561,   38,
       38,  232,  256,   32,  408,  408,   38,  231,   38,   38,
      988,   38,   38,  104,  104,  104,  104,  974,  104,  958,
       25,   89,   89,   89,   89,   89,   89,   89,   89,   89,
      133,  133,  133,  133,  949,  133,   25,  948,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   30,   30,  923,   30,

       30,   30,   30,   30,   30,   30,   30,   30,  162,  162,
      162,  162,  562,  162,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  422,
      422,  297,  562,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  128,
      128,  128,  128,  922,  233,   30,  465,  465,  246,  237,
      921,  128,   39,  191,  191,  191,  191,  849,  191,   39,
      237,  345,   39,  240,   39,  233,  246,  297,  829,  345,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   39,   30,   30,   30,   30,   37,  240,   39,
      237,   37,   39,  240,   39,  233,  246,   40,   37,   40,
      347,   37,  239,   37,  243,   40,  242,  212,  347,  796,
       40,   40,  749,  239,  393, 1461,  212,   37,  240, 1461,
       40,   37,  393,  240,  212,  243,  251,   40,   37,   40,
      242,   37,  703,   37,   41,   40,  245,   41,   41,  250,
       40,   40,   41,  239,  665,   42,  212,   41,   41,   42,
       40,  245,  251,  244,  212,  243,   42,   41,  664,   42,
      242,   42,  244,  244,   41,  260,  250,   41,   41,  247,

      479,  479,   41,   43,   43,   42,  248,   41,   41,   42,
       43,  245,  251,   43,   43,   43,   42,   41,   44,   42,
      247,   42,  244,  244,  260,   44,  250,  248,   44,  267,
       44,  257,  307,   43,   43,   45,  307,  253,  257,   45,
       43,  267,  307,   43,   43,   43,   45,  659,   44,   45,
      247,   45,  658,  258,  260,   44,  395,  248,   44,   46,
       44,  253,  253,   46,  395,   45,   46,   46,  257,   45,
       46,  267,  258,   46,  651,   46,   45,   46,   46,   45,
      549,   45,  219,  219,  219,  219,  219,  219,  249,   46,
      263,  253,  253,   46,   47,  249,   46,   46,   47,  241,

       46,   47,  258,   46,   47,   46,   47,   46,   46,  249,
      263,  241,  519,  448,   47,  512,  512,  241,   48,  259,
       48,  448,  254,  241,   47,  249,  259,   48,   47,   48,
       48,   47,   48,   48,   47,   48,   47,  254,   49,  249,
      263,  241,   49,  449,   47,  262,  268,  241,   48,   49,
       48,  449,   49,  241,   49,  265,  259,   48,  266,   48,
       48,  503,   48,   48,  262,   48,   50,  254,   49,   50,
       50,  268,   49,   50,  265,  264,   50,  271,   50,   49,
       51,   57,   49,  266,   49,   57,  266,   51,   57,  495,
       51,   57,   51,   57,  262,  264,   50,  271,  494,   50,

       50,  268,  264,   50,  265,  276,   50,   57,   50,  273,
       51,   57,  276,  266,  280,   57,  266,   51,   57,  269,
       51,   57,   51,   57,   58,  264,  270,  271,   58,  269,
      451,   58,  264,  280,   58,  273,   58,  270,  451,  526,
      526,  270,  276,  484,   58,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   58,  542,  542,  472,   58,  269,
      497,   58,  499,  280,   58,  273,   58,  270,  497,  455,
      499,  270,  446,  542,   58,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   79,   81,  556,  556,  710,
      710,   81,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       79,   81,  346,  346,  346,  346,   81,  346,   90,  645,

       81,  303,  303,  303,  303,  303,  303,  645,   81,  756,
      756,   81,  445,   81,   90,  426,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  100,  100,
      100,  100,  100,  100,  100,  100,  101,  101,  101,  101,
      101,  101,  101,  101,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  112,  112,  112,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  101,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  625,  625,  625,  119,  625,  647,  951,  117,
      119,  292,  292,  292,  292,  647,  951,  101,  101,  101,
      415,  101,  101,  101,  101,  101,  101,  101,  101,  399,
      101,  101,  101,  101,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  117,
      119,  394,  394,  394,  394,  119,  394,  803,  803,  119,
      836,  836,  292,  498,  498,  498,  498,  119,  498,  391,
      119,  390,  119,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  967,  967,  981,  981,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  130,  130,  130,  130,
      130,  130,  130,  130,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  141,
      141,  141,  141,  141,  141,  141,  141,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  130,  146,  146,  146,  146,  146,  146,  146,
      146,  149,  149,  149,  149,  149,  149,  149,  149,  170,

      170,  170,  170,  170,  170,  170,  170,  130,  130,  130,
      387,  130,  130,  130,  130,  130,  130,  130,  130,  367,
      130,  130,  130,  130,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  147,
      351,  147,  147,  147,  147,  147,  147,  147,  147,  150,
      343,  150,  150,  150,  150,  150,  150,  150,  150,  342,
      147,  152,  152,  152,  152,  152,  152,  152,  152,  332,
      150,  330,  153,  153,  153,  153,  153,  153,  153,  153,
      152,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      147,  153,  646,  646,  646,  646,  277,  646,  310,  154,
      150,  154,  154,  154,  154,  154,  154,  154,  154,  278,
      152,  283,  299,  288,  277,  285,  278,  155,  283,  155,
      154,  153,  155,  155,  155,  155,  155,  155,  155,  155,
      285,  288,  278,  563,  286,  564,  156,  156,  156,  156,
      156,  156,  156,  156,  277,  282,  278,  281,  283,  286,
      154,  156,  156,  156,  156,  156,  156, 1146, 1146,  565,
      285,  288,  278,  563,  159,  564,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  286,
      252,  156,  156,  156,  156,  156,  156,  157,  159,  565,

      159,  235,  159,  159,  224,  157,  157,  215,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  159,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  309,  309,  309,  309,  309,  309,  157,
      186,  186,  186,  186,  186,  186,  186,  186,  214,  207,
      203,  196,  159,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  167,
      138,  290,  118,  109,  157,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,   80,   69,  290,   60,   55,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,   54,  157,  157,  157,  157,  158,  361,  361,  361,
      361,  361,  361,   27,  158,  158,  290,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  158,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  199,  199,  199,  199,  199,  199,
      199,  199,   12,  158,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      227,  227,  227,  227,  227,  227,  227,  227,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
        8,  158,  158,  158,  158,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      174,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  354,  354,  354,  354,  354,  354,  354,  354,  295,
      295,  174,  295,  295,  295,  295,  295,  295,  295,  295,
      952,  295,  295,  295,  295,    7,    3,  174,  952,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  175,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  238,  272,  289,
      287,  566,  291,  274,  238,  568,  255,  275,  272,  291,
      289,  272,  567,  274,  255,  287,  275,  238,    0,  238,
      272,  255,  274,  238,  255,  275,  255,  567,  567,  275,
      275,  566,  255,  569,  238,  568,    0,    0,  272,  291,
      289,  272,  567,  274,  255,  287,  275,  238,  175,  238,
      272,  255,  274,  238,  255,  275,  255,  567,  567,  275,
      275,    0,  255,  569,  175,    0,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  188,  188,  188,  188,  188,  188,

      188,  188,  279,  284,  366,  366,  366,  366,  366,  366,
      279,  570,  571,  284,  573,  574,  575,  576,  284,  577,
      578,  279,  579,  580,  284,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  322, 1664,  305, 1664,    0, 1664,
      279,  570,  571,  284,  573,  574,  575,  576,  284,  577,
      578,  279,  579,  580,  284,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  409,  409,  409,  409,  409,  409,
      188,    0,  696,  696,  315,  315,  315,  315,  315,  315,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  322,
      696,    0,    0,    0,    0,  188,  188,  188,    0,  188,

      188,  188,  188,  188,  188,  188,  188,    0,  188,  188,
      188,  188,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  204,  204,    0,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  402,  402,
      402,  402,  402,  402,  402,  402,  204,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,    0,    0,    0,    0,
        0,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,    0,  204,  204,  204,  204,  205,  205,
        0,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  396,
      396,  396,  396,  396,  396,  396,  396,  396,    0,  372,
      372,  372,  372,  372,  372,  379,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  205,  414,  414,
      414,  414,  414,  414,  429,  379,  429,    0,    0,  429,
      429,  429,  429,  429,  429,  429,  429,    0,    0,  581,
        0,    0,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,    0,  205,  205,  205,  205,  206,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  581,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  420,

      420,  420,  420,  420,  420,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  436,  436,  436,  436,  436,  436,  436,
      436,  206,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,    0,  742,  742,  427,  427,  427,  427,  427,  427,
      427,  427,  450,  450,  450,  450,  450,  450,    0,  432,
      742,  432,    0,  427,  432,  432,  432,  432,  432,  432,
      432,  432,  437,  437,  437,  437,  437,  437,  437,  437,
        0,    0,  206,  206,    0,  206,  206,  206,  206,  206,

      206,  206,  206,  427,  206,  206,  206,  206,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  340,  340,  340,  340,  340,  340,  340,
      340,  428,  428,  428,  428,  428,  428,  428,  428,  430,
      430,  430,  430,  430,  430,  430,  430,  582,    0,  583,
      428,  466,  466,  466,  466,  466,  466,    0,  430,  431,
      431,  431,  431,  431,  431,  431,  431,  584,  434,  434,
      434,  434,  434,  434,  434,  434,    0,  582,  431,  583,
      428,    0,  789,  789,  433,    0,  433,  434,  430,  433,

      433,  433,  433,  433,  433,  433,  433,  584,    0,  340,
      789,    0,    0,    0,  435,    0,  435,    0,  431,  435,
      435,  435,  435,  435,  435,  435,  435,  434,  471,  471,
      471,  471,  471,  471,  340,  340,  340,    0,  340,  340,
      340,  340,  340,  340,  340,  340,    0,  340,  340,  340,
      340,  341,  341,  341,  341,  341,  341,  341,  341,  438,
      438,  438,  438,  438,  438,  438,  438,  513,  513,  513,
      513,  513,  513,  954,  438,  438,  438,  438,  438,  438,
        0,  954,    0,  439,  439,  439,  439,  439,  439,  439,
      439,  518,  518,  518,  518,  518,  518,    0,  439,  439,

      439,  439,  439,  439,  438,  438,  438,  438,  438,  438,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  458,
      458,  458,  458,  458,  458,  458,  458,  341,  439,  439,
      439,  439,  439,  439,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
        0,    0,  341,  341,  341,    0,  341,  341,  341,  341,
      341,  341,  341,  341,    0,  341,  341,  341,  341,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  388,  388,  388,  388,  388,  388,

      388,  388,  444,    0,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  444,  585,  444,  586,
      444,  444,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  585,    0,  586,
        0,  444,  506,  506,  506,  506,  506,  506,  506,  506,
      388,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      444,    0,    0,    0,    0,  388,  388,  388,    0,  388,

      388,  388,  388,  388,  388,  388,  388,    0,  388,  388,
      388,  388,  389,  389,  389,  389,  389,  389,  389,  389,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  515,
      515,  515,  515,  515,  515,  515,  515,  515,    0,  477,
      477,  477,  477,  477,  477,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  543,  543,  543,
      543,  543,  543,    0,    0,    0,  587,    0,  389,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  509,    0,    0,
        0,    0,    0,  389,  389,  389,  587,  389,  389,  389,
      389,  389,  389,  389,  389,    0,  389,  389,  389,  389,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  440,  548,  548,  548,  548,
      548,  548,    0,  440,  440,    0,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  588,  524,  524,  524,  524,  524,  524,

        0,    0,    0,  589,  591,  592,  593,  440,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  594,  595,  596,
      597,  598,  599,  588,  602,  603,  604,  554,  554,  554,
      554,  554,  554,  589,  591,  592,  593,    0,    0,    0,
        0,    0,  440,    0,  822,  822,    0,  594,  595,  596,
      597,  598,  599,    0,  602,  603,  604,  605,  606,  609,
      610,  611,  822,    0,  612,    0,    0,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  613,
      440,  440,  440,  440,  441,  614,  615,  605,  606,  609,
      610,  611,  441,  441,  612,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  616,  617,    0,  618,  619,  613,
      620,  621,  622,  623,  624,  614,  615,  626,  627,  629,
      631,  620,  632,  633,  634,  635,  637,  638,  639,  640,
      641,  642,    0,    0,  616,  617,  441,  618,  619,    0,
      620,  621,  622,  623,  624,    0,    0,  626,  627,  629,
      631,  620,  632,  633,  634,  635,  637,  638,  639,  640,
      641,  642,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  441,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  654,  654,
      654,  654,  654,  654,  654,  654,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,    0,  441,
      441,  441,  441,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  492,  492,
      492,  492,  492,  492,  492,  492,  628,  628,  860,  628,
      628,  697,  697,  697,  697,  697,  697,  628,  673,  861,
      863,  864,  865,  628,  866,  628,  677,  677,  677,  677,
      677,  677,  677,  677,  677,    0,  628,  628,  860,  628,
      628,  674,  867,    0,    0,    0,    0,  628,    0,  861,
      863,  864,  865,  628,  866,  628,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  867,  673,  492,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,    0,  869,  674,  870,  871,  492,
      492,  492,  872,  492,  492,  492,  492,  492,  492,  492,
      492,    0,  492,  492,  492,  492,  493,  493,  493,  493,
      493,  493,  493,  493,  675,  869,    0,  870,  871,  675,
        0,    0,  872,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  873,  874,  875,    0,  877,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,    0, 1132, 1132, 1160,    0,  675,
     1161,  873,  874,  875,  675,  877, 1160,    0,  675,    0,
      879,    0,  493, 1132, 1161, 1160,  675,    0,    0,  675,
     1161,  675,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  702,  702,  702,  702,  702,  702,  493,  493,  493,
      879,  493,  493,  493,  493,  493,  493,  493,  493,    0,
      493,  493,  493,  493,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  531,

      531,    0,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  684,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  743,  743,  743,  743,  743,  743,    0,
        0,  690,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  748,  748,  748,  748,  748,  748,  690,  531,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,    0,  684,    0,

        0,    0,    0,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  880,  531,  531,  531,  531,
      532,  532,    0,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  725,  723,    0,    0,  880,  725,    0,    0,    0,
        0,  708,  708,  708,  708,  708,  708,  881,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  883,  724,  881,    0,  884,
      885,  886,  723,  887, 1321,    0,  725,    0,    0,  532,

        0,  725,    0, 1321,    0,  725,  790,  790,  790,  790,
      790,  790, 1321,  725,    0,  883,  725,    0,  725,  884,
      885,  886,    0,  887,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  724,  532,  532,  532,
      532,  643,  643,    0,  643,  643,  643,  643,  643,  643,
      643,  643,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,    0,  734,  772,  772,
      772,  772,  772,  772,  772,  772,  724,  724,  724,  724,

      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  795,  795,  795,  795,  795,  795,
      643,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  734,  823,  823,
      823,  823,  823,  823,    0,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,    0,  643,  643,
      643,  643,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  714,  714,  714,
      714,  714,  714,  714,  714,    0,    0,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  770,  770,  770,  770,  770,  770,  770,
      770,    0,    0,  754,  754,  754,  754,  754,  754,  769,
        0,  769,  770,  889,  769,  769,  769,  769,  769,  769,
      769,  769,  771,  714,  771,    0,    0,  771,  771,  771,
      771,  771,  771,  771,  771,  828,  828,  828,  828,  828,
      828,    0,  770,  889,    0,    0,    0,    0,  714,  714,
      714,    0,  714,  714,  714,  714,  714,  714,  714,  714,

        0,  714,  714,  714,  714,  715,  715,  715,  715,  715,
      715,  715,  715,  773,  773,  773,  773,  773,  773,  773,
      773,  774,  890,  774,    0,    0,  774,  774,  774,  774,
      774,  774,  774,  774,  775,  775,  775,  775,  775,  775,
      775,  775,  953,  953,  953,  953,  953,  953,  891,  776,
      892,  776,  890,  775,  776,  776,  776,  776,  776,  776,
      776,  776,  777,  777,  777,  777,  777,  777,  777,  777,
      778,  778,  778,  778,  778,  778,  778,  778,  891,  893,
      892,  715,    0,  775,  779,  779,  779,  779,  779,  779,
      779,  779,  780,  780,  780,  780,  780,  780,  780,  780,

      968,  968,  968,  968,  968,  968,  715,  715,  715,  893,
      715,  715,  715,  715,  715,  715,  715,  715,    0,  715,
      715,  715,  715,  760,  760,  760,  760,  760,  760,  760,
      760,  781,  781,  781,  781,  781,  781,  781,  781,  782,
      782,  782,  782,  782,  782,  782,  782,  783,  783,  783,
      783,  783,  783,  783,  783,    0,    0,    0,    0,    0,
      894,  895,  783,  783,  783,  783,  783,  783,  792,  792,
      792,  792,  792,  792,  792,  792,  792,    0,    0,    0,
        0,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      894,  895,  783,  783,  783,  783,  783,  783,    0,  760,

      801,  801,  801,  801,  801,  801,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  760,  760,  760,    0,  760,  760,
      760,  760,  760,  760,  760,  760,  896,  760,  760,  760,
      760,  761,  761,  761,  761,  761,  761,  761,  761,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  898,  899,
      899,  900,  902,  903,  904,  905,  896,  906,  834,  834,
      834,  834,  834,  834,  907,  909,  910,  911,  912,  914,
      915,  916,  917,  918,  919,  924,  925,    0,  898,  899,
      899,  900,  902,  903,  904,  905,  926,  906,  927,  928,

      929,    0,  931,  932,  907,  909,  910,  911,  912,  914,
      915,  916,  917,  918,  919,  924,  925,  761,  973,  973,
      973,  973,  973,  973,  933,    0,  926,    0,  927,  928,
      929,  930,  931,  932,  934,  930,  935,    0,    0,  936,
        0,    0,  761,  761,  761,    0,  761,  761,  761,  761,
      761,  761,  761,  761,  933,  761,  761,  761,  761,  784,
      937,  930,  938,  939,  934,  930,  935,  784,  784,  936,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  941,
      942,  961,  961,  961,  961,  961,  961,  961,  961,    0,
      937,    0,  938,  939,  970,  970,  970,  970,  970,  970,

      970,  970,  970, 1133, 1133, 1133, 1133, 1133, 1133,  941,
      942,  784,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962, 1018,    0,  784,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  998,    0, 1058,    0,
        0,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,    0,  784,  784,  784,  784,  785, 1059,
     1060,    0, 1061, 1063, 1018, 1064,  785,  785, 1058,  785,

      785,  785,  785,  785,  785,  785,  785,  785,  979,  979,
      979,  979,  979,  979,  979,  979,  979,    0,    0, 1059,
     1060,  998, 1061, 1063,    0, 1064,    0,  979,  979,  979,
      979,  979,  979, 1138, 1138, 1138, 1138, 1138, 1138,    0,
      785, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1065,
     1066,    0,    0,    0, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018,    0,    0,    0,  785,    0,    0,    0, 1065,
     1066,  998,  998,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998,    0,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,    0,  785,  785,  785,  785,  816, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036,    0, 1067, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135,    0,    0,    0,  816, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287,    0,    0,

        0,    0, 1068, 1069,  816, 1067,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  840,  840,  840,  840,  840,  840,
      840,  840, 1068, 1069, 1070, 1071, 1075, 1077, 1078, 1080,
     1081, 1083, 1086, 1088, 1091, 1092, 1094, 1096, 1098, 1100,
     1101, 1102, 1103, 1104, 1105, 1109, 1110, 1111, 1112, 1114,
     1115, 1116, 1117, 1118, 1070, 1071, 1075, 1077, 1078, 1080,
     1081, 1083, 1086, 1088, 1091, 1092, 1094, 1096, 1098, 1100,
     1101, 1102, 1103, 1104, 1105, 1109, 1110, 1111, 1112, 1114,
     1115, 1116, 1117, 1118, 1119,    0,    0,    0, 1120,    0,

      840,    0, 1322,    0,    0, 1163,    0, 1124, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1322,    0,    0,    0,
     1126,    0, 1322,    0, 1119,  840,  840,  840, 1120,  840,
      840,  840,  840,  840,  840,  840,  840, 1124,  840,  840,
      840,  840,  841,  841,  841,  841,  841,  841,  841,  841,
     1126, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1163, 1177, 1170, 1178, 1180, 1179, 1181, 1182, 1184, 1184,
     1144, 1144, 1144, 1144, 1144, 1144, 1179, 1185, 1186, 1181,
     1178, 1187,    0, 1182, 1188, 1189, 1190, 1198,    0, 1200,
        0, 1177,    0, 1178, 1180, 1179, 1181, 1182, 1184, 1184,

        0,    0,    0,    0,    0, 1186, 1179, 1185, 1186, 1181,
     1178, 1187, 1170, 1182, 1188, 1189, 1190, 1198,  841, 1200,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,    0,    0,
        0,    0,    0,  841,  841,  841,    0,  841,  841,  841,
      841,  841,  841,  841,  841,    0,  841,  841,  841,  841,
      850,  850,    0,  850,  850,  850,  850,  850,  850,  850,
      850,  850, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1183, 1183, 1183, 1183, 1192, 1195, 1183, 1191, 1191, 1191,

     1191, 1193, 1192, 1191, 1194, 1196, 1197, 1204, 1199,    0,
     1199, 1195, 1201, 1201, 1202, 1193, 1202, 1206, 1194, 1209,
     1196, 1197, 1210, 1211, 1192, 1195, 1183, 1208, 1212, 1208,
     1213, 1193, 1192, 1191, 1194, 1196, 1197, 1204, 1199,  850,
     1199, 1195, 1201, 1201, 1202, 1193, 1202, 1206, 1194, 1209,
     1196, 1197, 1210, 1211,    0,    0, 1183, 1208, 1212, 1208,
     1213,    0,    0, 1191,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850, 1218,  850,  850,  850,
      850,  851,  851, 1203,  851,  851,  851,  851,  851,  851,
      851,  851,  851, 1205, 1207, 1215, 1214, 1203, 1214, 1216,

     1217, 1219, 1220, 1220, 1217, 1221, 1218, 1215, 1205, 1222,
     1207, 1224, 1233, 1203, 1216, 1219, 1234, 1237,    0, 1242,
     1222, 1235, 1223, 1205, 1207, 1215, 1214, 1203, 1214, 1216,
     1217, 1219, 1220, 1220, 1217, 1221, 1223, 1215, 1205, 1222,
     1207, 1224, 1233, 1236, 1216, 1219, 1234, 1237, 1238, 1242,
     1222, 1235, 1223, 1245, 1254,    0,    0,    0,    0,    0,
      851,    0,    0,    0,    0,    0, 1223, 1239,    0,    0,
        0,    0,    0, 1236,    0,    0,    0,    0, 1238,    0,
        0,    0,    0, 1245, 1254,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,    0,  851,  851,

      851,  851,  945,  945, 1233,  945,  945,  945,  945,  945,
      945,  945,  945, 1235, 1241, 1243, 1241, 1244, 1248, 1244,
     1248, 1249, 1239, 1250, 1240, 1257, 1250, 1251, 1256, 1255,
     1243, 1255, 1258, 1259, 1256, 1236, 1261, 1249, 1262, 1251,
     1238, 1264, 1266, 1269, 1241, 1243, 1241, 1244, 1248, 1244,
     1248, 1249,    0, 1250,    0, 1257, 1250, 1251, 1256, 1255,
     1243, 1255, 1258, 1259, 1256,    0, 1261, 1249, 1262, 1251,
     1270, 1264, 1266, 1269, 1240, 1272,    0,    0,    0,    0,
        0,  945, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239,

     1270,    0,    0,    0,    0, 1272,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,    0,  945,
      945,  945,  945,  946,  946,    0,  946,  946,  946,  946,
      946,  946,  946,  946, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1247,    0, 1246, 1246, 1246, 1246, 1260, 1263,
     1246,    0, 1273, 1274, 1273, 1274, 1277, 1260, 1247, 1263,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1260, 1263,
     1279, 1246, 1273, 1274, 1273, 1274, 1277, 1260,    0, 1263,

        0,    0,  946,    0,    0,    0,    0,    0,    0, 1246,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,    0,
     1279, 1246,    0,    0,    0,    0,    0,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946, 1246,
      946,  946,  946,  946,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  985,
      985, 1253,  985,  985,  985,  985,  985,  985,  985,  985,
      985,    0, 1252, 1252, 1252, 1252, 1280, 1253, 1252, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1281, 1265, 1267,
     1268, 1271, 1278, 1282, 1294, 1295, 1280, 1296,    0, 1252,
     1265,  985, 1297, 1267, 1268, 1298, 1311, 1271, 1278, 1296,
     1313, 1314, 1316, 1297,    0,    0,    0, 1281, 1265, 1267,
     1268, 1271, 1278, 1282, 1294, 1295,    0, 1296,  985, 1252,
     1265,    0, 1297, 1267, 1268, 1298, 1311, 1271, 1278, 1296,
     1313, 1314, 1316, 1297, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309,    0,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,    0,  985,  985,  985,  985,
      986,  986,    0,  986,  986,  986,  986,  986,  986,  986,

      986,  986, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307,    0,    0,    0,  986,
        0,    0,    0,    0,    0,    0, 1319,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  986,  986,  986,  986,  986,  986,

      986,  986,  986,  986,  986,  986, 1319,  986,  986,  986,
      986,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  999,  999,  999,  999,
      999,  999,  999,  999, 1310, 1312, 1315, 1317, 1318, 1317,
     1312, 1320, 1320, 1310, 1323, 1324, 1325, 1328, 1329, 1339,
     1315, 1340, 1341, 1318, 1344, 1354, 1355, 1356, 1357, 1356,
     1358, 1359, 1360, 1339, 1310, 1312, 1315, 1317, 1318, 1317,
     1312, 1320, 1320, 1310, 1323, 1324, 1325, 1328, 1329, 1339,
     1315, 1340, 1341, 1318, 1344, 1354, 1355, 1356, 1357, 1356,

     1358, 1359, 1360, 1339, 1361, 1362, 1363,    0,    0,    0,
     1364,    0,  999,    0,    0,    0,    0,    0,    0, 1367,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1361, 1362, 1363,  999,  999,  999,
     1364,  999,  999,  999,  999,  999,  999,  999,  999, 1367,
      999,  999,  999,  999, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1371, 1372, 1373, 1372,    0,    0, 1374, 1379,
     1381, 1382, 1385, 1383, 1384, 1382, 1387, 1388, 1390, 1391,
        0, 1393, 1395,    0, 1379, 1383, 1397,    0, 1385, 1371,
        0, 1384, 1371, 1372, 1373, 1372, 1361, 1362, 1374, 1379,

     1381, 1382, 1385, 1383, 1384, 1382, 1387, 1388, 1390, 1391,
     1392, 1393, 1395, 1396, 1379, 1383, 1397,    0, 1385, 1396,
        0, 1384,    0,    0, 1392,    0,    0,    0,    0,    0,
     1000,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1392,    0,    0, 1396,    0,    0,    0,    0,    0, 1396,
        0,    0,    0,    0, 1392, 1000, 1000, 1000,    0, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,    0, 1000, 1000,
     1000, 1000, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1019,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1019, 1019, 1019,    0, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019,    0, 1019, 1019, 1019, 1019,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1020,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1020, 1020, 1020,    0, 1020, 1020, 1020, 1020, 1020,

     1020, 1020, 1020,    0, 1020, 1020, 1020, 1020, 1037,    0,
        0,    0,    0,    0,    0,    0, 1037, 1037,    0, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1037,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1037,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037,    0, 1037, 1037, 1037, 1037, 1038,    0,    0,
        0,    0,    0,    0,    0, 1038, 1038,    0, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1038,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1038,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038,    0, 1038, 1038, 1038, 1038, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1045,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1045, 1045, 1045,
        0, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,    0,
     1045, 1045, 1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1046,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1046, 1046, 1046,    0, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046,    0, 1046, 1046,

     1046, 1046, 1055, 1055,    0, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1055,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,    0, 1055,
     1055, 1055, 1055, 1056, 1056,    0, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1056,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,    0,
     1056, 1056, 1056, 1056, 1128, 1128,    0, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1128,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
        0, 1128, 1128, 1128, 1128, 1129, 1129,    0, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1129,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129,    0, 1129, 1129, 1129, 1129, 1150, 1150,    0, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1150,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1150,    0, 1150, 1150, 1150, 1150, 1159, 1159,    0,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1159,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159,    0, 1159, 1159, 1159, 1159, 1176, 1176,
        0, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
        0,    0,    0,    0,    0,    0,    0,    0, 1176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1176,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176,    0, 1176, 1176, 1176, 1176, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1283, 1283, 1283, 1283,    0,    0,
     1283,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1283,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1283,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1283,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1283,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1283,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1283,    0, 1283, 1283, 1283, 1283, 1283, 1283,

     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1299, 1299, 1299, 1299,    0,    0, 1299,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1299,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1299,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1299,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1299,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1326, 1326, 1326, 1326,    0,    0, 1326,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1326,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1326,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1326,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1326,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1326,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1326,    0,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1327, 1327,
     1327, 1327,    0,    0, 1327,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1327,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1327,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1327,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1327,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1327,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1327,    0, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1342, 1342, 1342, 1342,
        0,    0, 1342,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1342,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1342,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1342,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1342,    0, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1343, 1343, 1343, 1343,    0,    0,
     1343,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1343,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1343,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1343,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1343,    0, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1365, 1365, 1365, 1365,    0,    0, 1365,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1365,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1365,    0,    0, 1365,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1365,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1365,    0,    0, 1365,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1365,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1365,    0, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1366, 1366, 1366, 1366,    0,    0, 1366,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1366, 1366,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1366,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1366, 1366,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1366,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1366,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1366,    0,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1399,    0,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,    0,
        0,    0,    0,    0,    0,    0, 1399, 1399, 1399, 1399,

     1400,    0, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400,    0,    0, 1400,    0,    0, 1400,    0, 1400, 1400,
     1400, 1400, 1401,    0, 1401,    0, 1401,    0,    0,    0,
        0,    0,    0,    0,    0, 1401, 1402,    0, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402,    0,    0,    0,
        0,    0,    0,    0, 1402, 1402, 1402, 1402, 1403,    0,
     1403,    0, 1403,    0,    0,    0,    0,    0,    0,    0,
        0, 1403, 1404,    0,    0, 1404, 1404, 1404, 1404, 1404,
        0,    0,    0,    0,    0,    0,    0,    0, 1404, 1405,
     1405, 1405, 1405, 1405, 1405, 1405,    0, 1405,    0,    0,

     1405,    0,    0, 1405,    0, 1405, 1405, 1405, 1405, 1406,
        0, 1406,    0, 1406,    0,    0,    0,    0,    0,    0,
        0,    0, 1406, 1408, 1408, 1408,    0, 1408, 1408, 1409,
     1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410,
     1410, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412, 1412,
     1412, 1412, 1412, 1413,    0, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413,    0,    0,    0,    0,    0,    0,
        0, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414,
     1414, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416,
     1416, 1416, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1418,

        0, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
        0,    0, 1418,    0,    0, 1418,    0, 1418, 1418, 1418,
     1418, 1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1420,
     1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422, 1422, 1422,
     1422, 1422, 1423, 1423, 1423, 1423, 1423, 1423, 1424, 1424,
     1424, 1424, 1424, 1424, 1425,    0, 1425,    0, 1425,    0,
     1425,    0,    0,    0,    0,    0, 1425, 1425, 1426, 1426,
     1426,    0, 1426, 1426, 1427, 1427, 1427, 1427, 1427, 1427,
     1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429, 1429, 1429,
     1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430, 1431,    0,

     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,    0,
        0,    0,    0,    0,    0,    0, 1431, 1431, 1431, 1431,
     1432, 1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433,
     1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434, 1435, 1435,
     1435, 1435, 1435, 1435, 1436,    0, 1436,    0, 1436,    0,
     1436,    0,    0,    0,    0,    0, 1436, 1436, 1437, 1437,
     1437,    0, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438,
     1439, 1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440,
     1440, 1440, 1441, 1441, 1441, 1441, 1441, 1441, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442,    0, 1442,    0,    0,

        0,    0,    0, 1442, 1442, 1442, 1443, 1443, 1443,    0,
     1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444, 1445, 1445,
     1445, 1445, 1445, 1445, 1446, 1446, 1446, 1446, 1446, 1446,
     1447, 1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448,
     1448, 1448, 1448,    0, 1448,    0,    0, 1448,    0,    0,
     1448,    0, 1448, 1448, 1448, 1448, 1449, 1449, 1449, 1449,
     1449, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451,
     1451, 1452, 1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453,
     1453, 1453, 1453, 1454, 1454, 1454, 1454, 1454, 1454, 1455,
        0, 1455,    0, 1455,    0, 1455,    0,    0,    0,    0,

        0, 1455, 1455, 1456, 1456, 1456,    0, 1456, 1456, 1457,
     1457, 1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458,
     1458, 1459, 1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460,
     1460, 1460, 1460, 1462, 1462, 1462, 1462, 1462,    0, 1462,
        0, 1462,    0,    0,    0,    0,    0, 1462, 1462, 1462,
     1463,    0,    0, 1463, 1463, 1463, 1463, 1463,    0,    0,
        0,    0,    0,    0,    0,    0, 1463, 1464, 1464, 1464,
        0, 1464, 1464, 1465, 1465, 1465, 1465, 1465, 1465, 1466,
     1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467,
     1467, 1468, 1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469,

     1469, 1469, 1469, 1470,    0, 1470,    0, 1470,    0,    0,
        0,    0,    0,    0,    0,    0, 1470, 1471, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1473,
     1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474,
     1474, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476,
     1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1478,
     1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479,
     1479, 1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481,
     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,    0,    0,
        0,    0,    0,    0,    0, 1481, 1481, 1481, 1481, 1482,

     1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483,
     1483, 1484, 1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485,
     1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486, 1486, 1487,
     1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488,
     1488, 1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490,
     1490, 1490, 1490, 1491, 1491, 1491, 1491, 1491, 1491, 1492,
     1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493,
     1493, 1494,    0, 1494,    0, 1494,    0, 1494,    0,    0,
        0,    0,    0, 1494, 1494, 1495, 1495, 1495,    0, 1495,
     1495, 1496, 1496, 1496, 1496,    0, 1496, 1497, 1497, 1497,

     1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498, 1499,
     1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500,
     1500, 1501, 1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502,
     1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503, 1503, 1504,
     1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505,
     1505, 1506, 1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507,
     1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508, 1509,
     1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510,
     1510, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511,    0,    0,    0,    0,    0,    0,    0, 1511,

     1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512, 1513,
     1513, 1513, 1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514,
     1514, 1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516, 1516,
     1516, 1516, 1516, 1517, 1517, 1517, 1517, 1517, 1517, 1518,
        0, 1518,    0, 1518,    0, 1518,    0,    0,    0,    0,
        0, 1518, 1518, 1519, 1519, 1519,    0, 1519, 1519, 1520,
     1520, 1520, 1520,    0, 1520, 1521, 1521, 1521, 1521, 1521,
     1521, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523,
     1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524, 1524, 1525,
     1525, 1525, 1525, 1525, 1525, 1526, 1526, 1526, 1526, 1526,

     1526, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528,
     1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1530,
     1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531, 1531,
     1531, 1532, 1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533,
     1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534, 1534, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1535,    0, 1535,    0,
        0,    0,    0,    0, 1535, 1535, 1535, 1536, 1536, 1536,
        0, 1536, 1536, 1537, 1537, 1537, 1537, 1537, 1537, 1538,
     1538, 1538, 1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539,
     1539, 1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541,

     1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1543,
     1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1544, 1545, 1545, 1545, 1545, 1545, 1545, 1546, 1546, 1546,
     1546, 1546, 1546, 1547, 1547, 1547, 1547, 1547, 1547, 1548,
     1548, 1548, 1548, 1548, 1548, 1549, 1549, 1549, 1549, 1549,
     1549, 1550, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551,
     1551, 1551, 1551, 1552, 1552, 1552, 1552, 1552, 1552, 1553,
     1553, 1553, 1553, 1553, 1553, 1554, 1554, 1554, 1554, 1554,
     1554, 1555, 1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556,
     1556, 1556, 1556, 1557, 1557, 1557, 1557, 1557, 1557, 1558,

        0, 1558,    0, 1558,    0, 1558,    0,    0,    0,    0,
        0, 1558, 1558, 1559, 1559, 1559,    0, 1559, 1559, 1560,
     1560, 1560, 1560,    0, 1560, 1561, 1561, 1561, 1561, 1561,
     1561, 1562, 1562, 1562, 1562, 1562, 1562, 1563, 1563, 1563,
     1563, 1563, 1563, 1564, 1564, 1564, 1564, 1564, 1564, 1565,
     1565, 1565, 1565, 1565, 1565, 1566, 1566, 1566, 1566, 1566,
     1566, 1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568, 1568,
     1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569, 1570,
     1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571, 1571, 1571,
     1571, 1572, 1572, 1572, 1572, 1572, 1572, 1573, 1573, 1573,

     1573, 1573, 1573, 1574, 1574, 1574, 1574, 1574, 1574, 1576,
     1576, 1576, 1576, 1576,    0, 1576,    0, 1576,    0,    0,
        0,    0,    0, 1576, 1576, 1576, 1577, 1577, 1577, 1577,
     1577, 1577, 1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579,
     1579, 1579, 1579, 1579, 1580, 1580, 1580, 1580, 1580, 1580,
     1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582, 1582, 1582,
     1582, 1582, 1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584,
     1584, 1584, 1584, 1584, 1585, 1585, 1585, 1585, 1585, 1585,
     1586, 1586, 1586, 1586, 1586, 1586, 1587, 1587, 1587,    0,
     1587,    0, 1587,    0, 1587,    0,    0,    0,    0,    0,

     1587, 1587, 1587, 1588, 1588, 1588,    0, 1588, 1588, 1589,
     1589, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590, 1590,
     1590, 1591, 1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592,
     1592, 1592, 1592, 1593, 1593, 1593, 1593, 1593, 1593, 1594,
     1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
        0,    0,    0,    0,    0,    0,    0, 1594, 1594, 1594,
     1594, 1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596,
     1596, 1596, 1596, 1597, 1597, 1597, 1597, 1597, 1597, 1598,
     1598, 1598, 1598, 1598, 1598, 1599,    0, 1599, 1599, 1599,
     1599, 1599, 1599, 1599, 1599, 1599,    0,    0,    0,    0,

        0,    0,    0, 1599, 1599, 1599, 1599, 1600, 1600, 1600,
     1600, 1600, 1600, 1601, 1601, 1601, 1601, 1601, 1601, 1602,
        0, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
        0,    0, 1602,    0,    0, 1602,    0, 1602, 1602, 1602,
     1602, 1603, 1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604,
     1604, 1604, 1604, 1605, 1605, 1605, 1605, 1605, 1605, 1606,
     1606, 1606, 1606, 1606, 1606, 1607, 1607, 1607, 1607, 1607,
     1607, 1608, 1608, 1608, 1608, 1608, 1608, 1609, 1609, 1609,
     1609, 1609, 1609, 1610, 1610, 1610, 1610, 1610, 1610, 1611,
     1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612,

     1612, 1613, 1613, 1613, 1613, 1613, 1613, 1614, 1614, 1614,
     1614, 1614, 1614, 1615,    0, 1615,    0, 1615,    0, 1615,
        0,    0,    0,    0,    0, 1615, 1615, 1616, 1616, 1616,
     1616, 1616, 1616, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
     1617, 1617, 1617, 1617,    0,    0,    0,    0,    0,    0,
        0, 1617, 1617, 1617, 1617, 1618, 1618, 1618, 1618, 1618,
     1618, 1619, 1619, 1619, 1619, 1619, 1619, 1620, 1620, 1620,
     1620, 1620, 1620, 1621, 1621, 1621, 1621, 1621, 1621, 1622,
        0, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
        0,    0,    0,    0,    0,    0,    0, 1622, 1622, 1622,

     1622, 1623, 1623, 1623, 1623, 1623, 1623, 1624, 1624, 1624,
     1624, 1624, 1624, 1625, 1625, 1625, 1625, 1625, 1625, 1626,
     1626, 1626, 1626, 1626, 1626, 1627, 1627, 1627, 1627, 1627,
     1627, 1628, 1628, 1628, 1628, 1628, 1628, 1629, 1629, 1629,
     1629, 1629, 1629, 1630, 1630, 1630, 1630, 1630, 1630, 1631,
     1631, 1631, 1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632,
     1632, 1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634,
     1634, 1634, 1634, 1635,    0, 1635,    0, 1635,    0, 1635,
        0,    0,    0,    0,    0, 1635, 1635, 1636, 1636, 1636,
     1636, 1636, 1636, 1637, 1637, 1637, 1637, 1637, 1637, 1637,

     1637,    0, 1637,    0,    0,    0,    0,    0, 1637, 1637,
     1637, 1638, 1638, 1638, 1638, 1638, 1638, 1639, 1639, 1639,
     1639, 1639, 1639, 1640, 1640, 1640, 1640, 1640, 1640, 1641,
     1641, 1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642, 1642,
     1642, 1643, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,
     1644, 1644, 1644, 1645, 1645, 1645, 1645, 1645, 1645, 1646,
     1646, 1646, 1646, 1646, 1646, 1647, 1647, 1647, 1647, 1647,
     1647, 1648, 1648, 1648, 1648, 1648, 1648, 1649, 1649, 1649,
     1649, 1649, 1649, 1649,    0, 1649,    0,    0, 1649,    0,
        0, 1649,    0, 1649, 1649, 1649, 1649, 1650, 1650, 1650,

     1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651, 1651, 1652,
     1652, 1652, 1652, 1652, 1652, 1653, 1653, 1653, 1653, 1653,
     1653, 1654, 1654, 1654, 1654, 1654, 1654, 1655, 1655, 1655,
     1655, 1655, 1655, 1656, 1656, 1656, 1656, 1656, 1656, 1657,
     1657, 1657, 1657, 1657, 1657, 1658, 1658, 1658, 1658, 1658,
     1658, 1659, 1659, 1659, 1659, 1659, 1659, 1660, 1660, 1660,
     1660, 1660, 1660, 1661, 1661, 1661, 1661, 1661, 1661, 1662,
        0, 1662,    0, 1662,    0, 1662,    0,    0,    0,    0,
        0, 1662, 1662, 1663, 1663, 1663, 1663, 1663, 1663, 1665,
     1665, 1665, 1665, 1665,    0, 1665,    0, 1665,    0,    0,

        0,    0,    0, 1665, 1665, 1665, 1666, 1666, 1666, 1666,
     1666, 1666, 1667, 1667, 1667,    0, 1667,    0, 1667,    0,
     1667,    0,    0,    0,    0,    0, 1667, 1667, 1667, 1668,
     1668, 1668,    0, 1668, 1668, 1669, 1669, 1669, 1669, 1669,
     1669, 1670, 1670, 1670, 1670, 1670, 1670, 1671, 1671, 1671,
     1671, 1671, 1671, 1672, 1672, 1672, 1672, 1672, 1672, 1673,
     1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674,
     1674, 1675, 1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676,
     1676, 1676, 1676, 1677, 1677, 1677, 1677, 1677, 1677, 1678,
     1678, 1678, 1678, 1678, 1678, 1679, 1679, 1679, 1679, 1679,

     1679, 1680, 1680, 1680, 1680, 1680, 1680, 1681, 1681, 1681,
     1681, 1681, 1681, 1682, 1682, 1682, 1682, 1682, 1682, 1683,
     1683, 1683, 1683, 1683, 1683, 1684, 1684, 1684, 1684, 1684,
        0, 1684,    0, 1684,    0,    0,    0,    0,    0, 1684,
     1684, 1684, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685,    0, 1685, 1686, 1686, 1686, 1686, 1686, 1686, 1687,
     1687, 1687, 1687, 1687, 1687, 1688, 1688, 1688, 1688, 1688,
     1688, 1689, 1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690,
     1690, 1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691, 1692,
        0, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,

        0,    0,    0,    0,    0,    0,    0, 1692, 1692, 1692,
     1692, 1693,    0, 1693,    0, 1693,    0, 1693,    0,    0,
        0,    0,    0, 1693, 1693, 1694, 1694, 1694, 1694, 1694,
     1694, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695, 1695,
        0, 1695, 1696, 1696, 1696, 1696, 1696, 1696, 1697, 1697,
     1697, 1697, 1697, 1697, 1698, 1698, 1698, 1698, 1698, 1698,
     1699, 1699, 1699, 1699, 1699, 1699, 1700, 1700, 1700, 1700,
     1700, 1700, 1701, 1701, 1701, 1701, 1701, 1701, 1702,    0,
     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,    0,
        0,    0,    0,    0,    0,    0, 1702, 1702, 1702, 1702,

     1703,    0, 1703,    0, 1703,    0, 1703,    0,    0,    0,
        0,    0, 1703, 1703, 1704, 1704, 1704, 1704, 1704, 1704,
     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705,    0, 1705,
        0,    0,    0,    0,    0, 1705, 1705, 1705, 1706, 1706,
     1706, 1706, 1706, 1706, 1707,    0, 1707,    0, 1707,    0,
     1707,    0,    0,    0,    0,    0, 1707, 1707, 1708, 1708,
     1708, 1708, 1708, 1708, 1709, 1709, 1709, 1709, 1709,    0,
     1709,    0, 1709,    0,    0,    0,    0,    0, 1709, 1709,
     1709, 1710, 1710, 1710,    0, 1710,    0, 1710,    0, 1710,
        0,    0,    0,    0,    0, 1710, 1710, 1710, 1711, 1711,

     1711, 1711, 1711, 1711, 1712, 1712, 1712, 1712, 1712, 1712,
     1713, 1713, 1713, 1713, 1713, 1713, 1714, 1714, 1714, 1714,
     1714, 1714, 1715, 1715, 1715, 1715, 1715, 1715, 1716, 1716,
     1716, 1716, 1716, 1716, 1717, 1717, 1717, 1717, 1717, 1717,
     1718, 1718, 1718, 1718, 1718, 1718, 1719, 1719, 1719, 1719,
     1719, 1719, 1720, 1720, 1720, 1720, 1720, 1720, 1721, 1721,
     1721, 1721, 1721, 1721, 1722, 1722, 1722, 1722, 1722,    0,
     1722,    0, 1722,    0,    0,    0,    0,    0, 1722, 1722,
     1722, 1723, 1723, 1723, 1723, 1723, 1723, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724,    0,    0,

        0,    0,    0,    0,    0, 1724, 1724, 1724, 1724, 1725,
     1725, 1725, 1725, 1725, 1725, 1726, 1726, 1726, 1726, 1726,
     1726, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
     1727, 1727,    0,    0,    0,    0,    0,    0,    0, 1727,
     1727, 1727, 1727, 1728, 1728, 1728, 1728, 1728, 1728, 1729,
     1729, 1729, 1729, 1729, 1729, 1730, 1730, 1730, 1730, 1730,
     1730, 1731,    0, 1731, 1731, 1731, 1731, 1731, 1731, 1731,
     1731, 1731,    0,    0, 1731,    0,    0, 1731,    0, 1731,
     1731, 1731, 1731, 1732,    0, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732,    0,    0, 1732,    0,    0, 1732,

        0, 1732, 1732, 1732, 1732, 1733, 1733, 1733, 1733, 1733,
     1734, 1734, 1734, 1734, 1735, 1735, 1735, 1735, 1735, 1735,
     1736, 1736, 1736, 1736, 1736, 1736, 1737, 1737, 1737, 1737,
     1737, 1737, 1738, 1738, 1738, 1738, 1738, 1738, 1739, 1739,
     1739, 1739, 1739, 1740, 1740, 1740, 1740, 1741, 1741, 1741,
     1741, 1741, 1741, 1742, 1742, 1742, 1742, 1742, 1742, 1743,
     1743, 1743, 1743, 1743, 1743, 1744, 1744, 1744, 1744, 1744,
     1744, 1745, 1745, 1745, 1745, 1745, 1745, 1746, 1746, 1746,
     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746,    0,    0,
     1746,    0,    0, 1746,    0, 1746, 1746, 1746, 1746, 1747,

     1747, 1747, 1747, 1747, 1747, 1748, 1748, 1748, 1748, 1748,
     1748, 1749, 1749, 1749, 1749, 1749, 1749, 1750, 1750, 1750,
     1750, 1750, 1750, 1751, 1751, 1751, 1751, 1751, 1751, 1752,
     1752, 1752, 1752, 1752, 1752, 1753, 1753, 1753, 1753, 1753,
     1753, 1753, 1753, 1753, 1753, 1753,    0,    0, 1753,    0,
        0, 1753,    0, 1753, 1753, 1753, 1753, 1754, 1754, 1754,
     1754, 1754, 1754, 1755, 1755, 1755, 1755, 1755, 1755, 1756,
     1756, 1756, 1756, 1756, 1756, 1757, 1757, 1757, 1757, 1757,
     1757, 1758, 1758, 1758, 1758, 1758, 1758, 1759, 1759, 1759,
     1759, 1759, 1759, 1760, 1760, 1760, 1760, 1760, 1760, 1760,

     1760, 1760, 1760, 1760,    0,    0, 1760,    0,    0, 1760,
        0, 1760, 1760, 1760, 1760, 1761, 1761, 1761, 1761, 1761,
     1761, 1762, 1762, 1762, 1762, 1762, 1762, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,

     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398
    } ;

static yyconst flex_int16_t yy_rule_linenum[181] =
    {   0,
      268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
      278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
      308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
      338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
      348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
      358,  359,  360,  361,  362,  363,  364,  365,  366,  367,

      368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
      378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
      388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
      398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
      408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
      418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
      428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  444,  445,  446,  449
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3769 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 267 "lib/SPARQLfedScanner.lpp"

#line 3933 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1399 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1398 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 181 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 181 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 182 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_VALUES;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::IT_SADI;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRBEFORE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRAFTER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_TZ;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_UUID;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRUUID;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRIREF;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext, yylloc); return token::PNAME_NS;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext, yylloc); return token::PNAME_LN;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 430 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 431 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 433 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 434 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 435 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 436 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 437 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 438 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 439 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 440 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 441 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 442 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 443 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 444 "lib/SPARQLfedScanner.lpp"
{return token::INSERTDATA;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 445 "lib/SPARQLfedScanner.lpp"
{return token::DELETEDATA;}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 446 "lib/SPARQLfedScanner.lpp"
{return token::DELETEWHERE;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 448 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 449 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 455 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4963 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1399 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1399 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1398);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 455 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::runtime_error("program flow exception -- imroper call to SPARQLfedScanner::typedLiteral"));
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::location_type*& yylloc, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    YaccDriver::unescapeString(yytext+skip, yyleng-skip-skip, space, yylloc);
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext, SPARQLfedParser::location_type*& yylloc){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	driver->error(*yylloc, std::string() + "Inexplicable lack of ':' in prefix: \"" + yytext + "\"");
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL)
	driver->error(*yylloc, std::string() + "Unknown prefix: \"" + ret.substr(0, index) + "\"");

    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


