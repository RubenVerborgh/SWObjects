#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 175
#define YY_END_OF_BUFFER 176
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1353] =
    {   0,
        0,    0,  176,  174,    2,    1,    1,   71,  174,    2,
      174,  174,  174,  174,    9,   10,   20,   70,   11,   88,
        4,   67,  155,  149,   38,   82,    3,   83,   69,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,   72,   73,   68,  174,   66,  174,  174,    7,    5,
        8,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
        2,    1,    0,   81,    0,  165,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    2,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   80,
        0,  164,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  168,  173,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  158,   37,    0,
      161,   12,  156,  156,  155,    0,  150,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   84,  148,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   85,
      152,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      154,    0,    0,  149,    0,    0,    0,    0,    0,   19,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  125,   86,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   46,    0,    0,    0,    0,    0,    0,
        0,    0,  169,  145,    0,    0,    0,   79,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
      165,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      153,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  153,  153,  153,  153,  153,  153,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    6,  164,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  173,  173,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  173,  173,  173,
      173,  173,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  170,  159,  159,    0,
      162,  162,    0,    0,  156,    0,    0,  157,  150,    0,
      150,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  150,  150,  150,  150,  150,  150,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  152,  152,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  152,  152,  152,  152,  152,  152,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,   45,   58,   77,   31,   23,
      142,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  141,    0,    0,  140,    0,    0,    0,
       87,  117,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
        0,  139,    0,    0,    0,    0,    0,   95,    0,    0,
        0,    0,  151,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    0,    0,    0,  153,  153,  153,  153,  153,  153,
      153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,  153,  153,  153,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  173,  173,
      173,  173,  173,  173,  173,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  173,  173,

      173,  173,  173,    0,    0,    0,  159,    0,    0,  160,
        0,  162,    0,    0,  163,    0,  157,    0,  157,  150,
      150,  150,  150,  150,  150,  150,  150,  150,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  150,  150,  150,  150,  150,    0,    0,    0,    0,
        0,    0,  152,  152,  152,  152,  152,  152,  152,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  152,  152,  152,  152,  152,    0,    0,  154,
        0,    0,    0,    0,    0,    0,    0,   14,   62,    0,
        0,   99,    0,    0,    0,    0,    0,   48,    0,    0,

        0,    0,    0,   32,    0,   43,    0,   76,    0,    0,
        0,   24,    0,    0,    0,    0,    0,   40,    0,    0,
        0,    0,    0,   90,    0,    0,   39,    0,    0,    0,
        0,   47,    0,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   52,  110,  151,    0,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      151,  151,  151,  151,  151,  151,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  153,  153,  153,  153,  153,    0,
        0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  173,  173,  173,  173,  173,    0,    0,  173,
        0,  160,    0,  160,    0,  163,    0,  163,  150,  150,
      150,  150,  150,    0,    0,  150,  152,  152,  152,  152,
      152,    0,    0,  152,    0,    0,   96,   93,   41,    0,
        0,    0,    0,  137,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  100,   57,   27,    0,  113,    0,    0,

      129,    0,    0,  130,    0,  105,   33,  118,    0,   63,
        0,  111,   25,    0,    0,   30,    0,   59,    0,  134,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  127,    0,    0,    0,    0,    0,    0,
      104,   36,   64,    0,   55,   26,  151,  151,  151,  151,
      151,  151,  151,  151,  151,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  151,  151,
      151,  151,  151,    0,    0,  147,    0,    0,  167,    0,
        0,    0,    0,  153,  166,    0,    0,    0,    0,  173,
      150,  152,    0,    0,  102,    0,    0,   44,    0,    0,

       53,    0,    0,    0,  136,   65,    0,   29,   54,    0,
        0,    0,    0,    0,    0,   34,    0,   15,    0,    0,
      143,    0,   16,    0,    0,  119,    0,    0,    0,    0,
       42,   75,    0,    0,  103,    0,  135,    0,    0,  151,
      151,  151,  151,  151,    0,    0,  151,    0,  171,    0,
        0,  172,    0,    0,    0,    0,    0,    0,   56,    0,
        0,    0,    0,    0,    0,  131,    0,    0,    0,   74,
      114,    0,   18,    0,  115,    0,   61,    0,    0,    0,
        0,  109,  126,    0,    0,    0,  151,    0,    0,   35,
      124,    0,  107,   92,    0,    0,   22,   17,    0,    0,

        0,    0,    0,    0,   60,  128,    0,  120,  121,  122,
      123,    0,  116,    0,    0,    0,   21,    0,    0,    0,
        0,    0,  132,  133,    0,  144,  108,   78,    0,    0,
        0,    0,    0,    0,    0,    0,   50,    0,    0,    0,
       49,   91,   51,    0,  138,    0,    0,    0,    0,    0,
      106,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       47,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,    1,   68,   69,   70,   71,

       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   83,   77,   84,   85,   86,   87,   88,   89,   90,
       91,   92,   93,   94,   95,   96,   96,   97,   98,   99,
       99,   99,   99,  100,  101,  101,  101,  101,  101,  102,
      103,  101,  104,  105,  106,  106,  106,  107,  106,  106,
      108,  109,  110,  110,  110,  110,  110,  110,  110,  111,
      111,  111,  111,  112,  112,  112,  112,  112,  112,  112,
      112,  113,  112,  112,  112,  114,  114,  114,  114,  115,
      114,  114,  116,  117,  117,  117,  117,  117,  117,  118,
      119,  120,  120,  121,  122,  123,  123,  123,  123,  123,

      123,  123,  123,  124,  125,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  127,  128,  129,  130,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  132,  133,  134,  135,
      136,  136,  136,  137,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120
    } ;

static yyconst flex_int32_t yy_meta[138] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        3,    3,    1,    3,    3,    3,    3,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    3,    1,    3,    1,    7,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    3,    8,    9,    9,    9,

        9,    9,    9,   10,    9,    9,    9,   11,    9,    9,
        9,    9,    9,    9,    9,   11,    9,   12,   13,   14,
        3,    7,    7,    3,    7,    7,    7,    7,    7,    7,
        7,    7,    3,    7,    7,    7,    3
    } ;

static yyconst flex_int16_t yy_base[1705] =
    {   0,
        0,    0, 1746, 9662,  136, 9662, 1735,  109,  137,   36,
      177, 1714, 1715,  302,  172, 9662,  342,  166, 9662,  181,
      124, 9662,  296,  381, 9662,  484, 9662, 1691,  524,    0,
      643,  291,  481,  742,  783,  812,  853,  306,  901,  506,
      952,  997, 1012, 1060, 1101, 1126, 1177,  871, 1220, 1060,
     1238,  177, 9662, 1658, 1689,    0, 1273, 1290, 9662, 1542,
     9662,    0,    0,  120,  128,    0,  119,    0,  131,  129,
        0,  284,    0,  482, 1530,    0,  310,  137, 1273,    0,
      210, 9662, 1600, 9662, 1386, 1493,  796,    0,    0,    0,
      849,    0, 1297,    0, 1303,    0,  747, 1330,    0,    0,

        0,  900,    0, 1338,    0, 1363,    0, 1022, 1503,    0,
        0, 1139, 1326,    0,  410,    0,  219,  427,    0, 1380,
        0, 1253, 1336,    0, 1543,  458, 1549,    0, 1409, 9662,
     1657, 1419, 1663,    0,    0,    0, 1565,    0, 1588,    0,
     1594,    0, 1386,  579, 9662, 1774,    0,    0, 1653, 1665,
        0,  561,    0,  220,  690,    0, 1800,    0, 1625, 1278,
        0, 1823,  624, 1829,    0,  239, 1928, 1940, 9662, 1950,
     1962, 9662, 1972, 1994, 2026, 2049, 2081,    0,    0, 1928,
     1960,    0, 1085,    0,  223,  770,    0, 1969,    0, 1998,
     1257,    0, 2121,  863, 2127,    0, 2143, 2179, 9662,    0,

        0,    0, 2137,    0, 2187,    0, 2212,    0, 1437, 9662,
     2311,    0,    0, 2351, 2359,    0, 1600,    0,  225,  880,
        0, 2353,    0, 2376, 1247,    0, 2378,  944, 2390,    0,
     1322, 2492, 1262, 2531,    0,  128,  307,  301,  290,  508,
      309, 1195,    0, 2571,    0, 2579,    0, 1656, 1172,    0,
      255,  276, 1691,    0, 2573,    0, 2596, 1147,    0, 2598,
      974, 2610,    0,  301,  424,  449,  464,    0,  491,  496,
     2692,  740,  729,  746,  731,  735,  758,  796,  826,  824,
      838,  863,  837,  842,    0,  863,  857, 2693,  870,  916,
      950,  964,  964, 1219,  991,  991, 1102,  994, 1048, 1002,

      991, 1021, 1115, 1045, 1122, 1051, 1099, 1233, 1120, 1113,
     1213, 1216, 1126,    0, 1179, 2694, 1174, 1178, 1185, 1212,
     1232, 1669, 9662, 9662, 2683, 1151, 1142, 9662,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   95, 1891,    0,
      447,    0, 1128,    0,    0,    0, 1923,    0,    0, 9662,
     9662, 2813,    0, 1147,    0,    0,    0,    0,    0,    0,
        0,    0, 1145,    0,    0,    0,    0,    0,    0,    0,
     2930,    0, 1112,    0, 2654,    0, 2724,    0, 1975, 1058,
        0,  686, 1387,    0, 2718,    0, 2741, 1076,    0, 2743,
     1484, 2755,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  195, 2228,    0,    0, 1074,    0,    0,    0, 2410,
        0,    0, 9662, 9662, 3055,    0, 1104,    0,    0,    0,
        0,    0,    0,    0, 3172,    0, 1057,    0, 2781,    0,
     2789,    0, 2780, 1035,    0,  865, 1614,    0, 2789,    0,
     2812, 1033,    0, 2971, 1755, 2977,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  287, 2797,    0,    0, 1030,
        0,    0,    0, 2804,    0,    0, 1094, 3076, 3086, 3108,
     3288, 3298, 3139, 3320, 3350, 3372, 3382, 3402, 3415,    0,
        0, 1013,    0, 3042,    0, 3254,    0, 2847,  979,    0,
     1105, 1215, 3035,    0, 3250,    0, 3455,  987,    0, 3457,

     2145, 3469,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  302, 3089,    0,    0,  932,    0,    0,    0, 3267,
        0,    0,    0,  962,    0,    0,    0,    0,    0,    0,
        0, 3568,    0,  929,    0, 3316,    0, 3608,    0, 3332,
      890,    0, 1218, 3006,    0, 3602,    0, 3625,  908,    0,
     3627, 2292, 3639,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  360, 3485,    0,    0,  891,    0,    0,    0,
     3645,    0,    0,    0, 3747,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  737, 3665,    0,    0,  890,    0,    0,    0,

     3770,    0,    0, 1230, 1236, 1238, 1282, 1294, 1965, 1964,
     3840, 2056, 2093, 2107, 2108,    0, 2517, 2514, 2517, 2502,
     2572, 2679, 2678, 2679, 2680, 2685, 2688, 2688, 2690, 2702,
     2939, 2952, 2943,    0, 2947, 3063, 3189, 3179, 3183, 3194,
     3250, 3283, 3350,    0,  957, 3439, 3422, 3424, 3439, 3589,
        0,    0, 3577, 3587, 3592, 3767, 3760, 3771, 3756, 3825,
     3839, 3849, 3840, 3851, 3856, 3840,  959, 3857, 3846, 3862,
     3846,    0, 3863, 3851, 3865, 3856, 3855,    0, 3861, 3859,
     3869, 3861, 3930,    0,    0, 3970, 3978,    0, 3847,    0,
     1245, 3056,    0, 3972,    0, 3995,  872,    0, 3997, 3911,

     4009,    0,  851,  863,    0,  801,  797,    0,    0,    0,
        0,    0,    0, 4122, 4253, 4123,    0,    0,    0, 4025,
        0, 4048,    0, 4054,    0, 4077, 4384,    0,    0,    0,
     4157,    0,    0,    0, 4501,    0,    0,    0,    0,    0,
        0,    0,    0,  906, 4083,    0,    0,  817,    0,    0,
        0, 4096,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4626, 4752, 4255,    0,    0,    0, 4105,    0, 4130,
        0, 4190,    0, 4171, 4878,    0,    0,    0, 4995,    0,
        0,    0,    0,    0,    0,    0,    0, 1218, 4196,    0,
        0,  815,    0,    0,    0, 4215,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 4322, 4371, 4337, 4381, 4393,
     4408, 4428, 4450, 4468, 4618, 4628, 4638, 4648, 4658, 5114,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1236, 4345,    0,    0,  813,    0,    0,    0, 4367,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4590,    0,
        0,    0, 5230,    0,    0,    0,    0,    0,    0,    0,
        0, 4086, 4418,    0,    0,  801,    0,    0,    0, 4581,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  861,
     5349,    0,    0,    0,    0,    0,    0,    0, 3870, 4153,
     4285,    0, 4358, 4397, 4526, 4509, 4528,    0, 4511, 4645,

     4646, 4646, 4648, 4651, 4660,    0, 4666,    0, 4652, 4668,
     4685,    0, 4696, 4689, 4692, 4689, 4692,    0, 4727, 4720,
     4711, 4718, 4724, 4725, 4735, 4722,    0,  866, 4737, 4725,
     4737,    0, 4742, 4742, 4733, 4733, 4742, 4733,    0, 4750,
     4731, 4751, 4737, 4745, 4748, 4761, 4748, 4757, 4159, 4753,
     4750, 4769, 4776, 4797, 4772, 4774, 4775, 4796, 4797, 4791,
     4820, 4818, 4821,    0,    0, 5468,    0,    0,  777,    0,
     4746,    0, 4797,    0, 4788,  743,    0, 1248, 1629, 4794,
        0, 4803,    0, 4829,  760,    0, 4831, 4836, 4848,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  456, 4854,

        0,    0,  758,    0,    0,    0, 4860,    0,    0, 5587,
      765, 5627, 5632,  761, 5744,    0,  727,    0,    0,    0,
        0,    0,    0,    0, 5861,    0,    0,    0,    0,    0,
        0,    0, 5986,    0,  711,    0,    0,    0,    0,    0,
        0,    0, 6103,    0,    0,    0,    0,    0,    0,    0,
     4962, 5731, 5741, 5751, 5761, 5771, 5788, 5798, 6222,    0,
        0,    0,    0,    0,    0,    0, 6338,    0,    0,    0,
        0,    0,    0,    0, 6457, 4945,    0,    0,    0, 4943,
     4973, 4976, 4985,    0, 5016, 5028, 5066, 5105, 5102, 5098,
     5108, 5179, 5209,    0,    0,  696, 5221,    0, 5210, 5243,

        0, 5312, 5340,    0, 5345,    0,    0, 9662, 5331,    0,
     5372,    0,    0, 5413, 5450,    0, 5442,    0, 5461,    0,
        0, 5462, 5578, 5580, 5566, 5585, 5667,  636,  569,  615,
      579, 5746, 5748,    0, 5763, 5754, 5755, 5769, 5775, 5778,
        0,    0,    0, 5789,    0,    0, 6576,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4218, 5724,    0,
        0,  493,    0,    0,    0, 5735,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5623,  548, 9662, 6706,
        0,    0,    0, 6823, 9662, 6948,    0,    0,    0, 7065,
     7184, 7300, 5818, 5824,    0, 5838, 5845,    0, 5844, 5868,

      704, 5916, 5941,  564,    0,    0, 5954,    0, 1564, 5951,
     5946, 5947, 5946, 5948, 5949,    0, 5967,    0, 5965, 5953,
        0, 5953,    0, 5953, 5968, 9662,  515,  507,  489,  479,
        0,    0, 5957, 5969,    0, 5960,    0, 5964, 5962,    0,
        0,    0,    0,    0,    0,    0,    0,  337,    0,  293,
      264,    0,  240, 5962, 5976, 5979, 5966, 5980,    0, 6668,
     5981, 5969,  298, 5974, 6063,    0, 5989, 5982, 6001,    0,
        0, 6005,    0, 6009,    0, 6009,    0,  342,  322,  304,
      298,    0,    0, 6006, 6021, 6022,    0, 5981, 6617,    0,
        0, 6014,    0,    0, 6034, 6028,    0,    0,  289, 6025,

     6098, 6088, 6098, 6094,    0,    0, 6143, 9662, 9662, 9662,
     9662, 6168,    0, 6214, 5972, 4331,    0, 6200, 6215, 6215,
     6302, 6315,    0,    0, 6331,    0,    0,    0,  125,  111,
     6336, 6348, 6410, 6452, 6453, 6438, 9662, 6480, 6523, 6553,
     9662,    0, 9662,  202,    0,  111,  144, 6553, 6557, 6566,
     9662, 9662, 7436, 7449, 7458, 7471, 7480, 7489, 7500, 7509,
      136, 7515, 7521, 7527, 7533, 7539, 7545, 7551, 7557, 7563,
     7569, 7582, 7588, 7593, 7597, 7603, 7609, 7615, 7628, 7634,
     7639, 7643, 7649, 7655, 7661, 7667, 7673, 7679, 7685, 7691,
     7697, 7703, 7709, 7715, 7721, 7734, 7740, 7745, 7749, 7755,

     7761, 7767, 7773, 7779, 7785, 7791, 7797, 7803, 7809, 7815,
     7821, 7827, 7833, 7839, 7845, 7851, 7857, 7863, 7869, 7875,
     7881, 7887, 7898, 7904, 7909, 7913, 7919, 7925, 7931, 7937,
     7943, 7949, 7955, 7961, 7967, 7973, 7979, 7985, 7991,  598,
     8000, 8006, 8012, 8018, 8024, 8030, 8036, 8042, 8048, 8054,
     8060, 8066, 8075, 8081, 8087, 8093, 8099, 8105, 8111, 8117,
     8123, 8136, 8142, 8148, 8154, 8160, 8166, 8172, 8178, 8184,
     8190, 8196, 8202, 8208, 8214, 8220, 8226, 8232, 8238, 8244,
     8250, 8256, 8262, 8268, 8274, 8280, 8286, 8292, 8298, 8304,
     8310, 8316, 8322, 8335, 8341, 8347, 8353, 8359, 8365, 8371,

     8377, 8383, 8389, 8395, 8401, 8407, 8413, 8419, 8425, 8431,
     8437, 8443, 8449, 8455, 8461, 8467, 8473, 8479, 8485, 8491,
     8497, 8503, 8509, 8515, 8521, 8527, 8533, 8539, 8545, 8551,
     8557, 8563, 8569, 8575, 8581, 8587, 8593, 8599, 8605, 8611,
     8617, 8623, 8629, 8635, 8641, 8647, 8653, 8659, 8665, 8671,
     8677, 8683, 8689, 8695, 8701, 8707, 8713, 8719, 8725, 8731,
     8737, 8743, 8749,  830, 8755, 8761, 8767, 8773, 8779, 8785,
     8791, 8797, 8803, 8809, 8815, 8821, 8827, 8833, 8839, 8845,
     8851, 8857, 8863, 8876, 8882, 8887, 8891, 8897, 8903, 8909,
     8922, 8928, 8934, 8947, 8953, 8959, 8965, 8971, 8977, 8983,

     8989, 8995, 9001, 9007, 9013, 9026, 9032, 9037, 9041, 9047,
     9053, 9059, 9072, 9078, 9084, 9090, 9096, 9102, 9108, 9114,
     9120, 9126, 9132, 9138, 9144, 9150, 9156, 9162, 9168, 9174,
     9180, 9186, 9192, 9203, 9209, 9215, 9221, 9227, 9233, 9239,
     9245, 9251, 9257, 9263, 9269, 9279, 9278, 9284, 9290, 9296,
     9302, 9308, 9314, 9320, 9326, 9332, 9338, 9344, 9350, 9356,
     9362, 9368, 9374, 9380, 9386, 9392, 9398, 9411, 9417, 9423,
     9429, 9435, 9441, 9447, 9453, 9466, 9472, 9478, 9484, 9490,
     9496, 9502, 9508, 9514, 9520, 9526, 9532, 9538, 9544, 9550,
     9556, 9562, 9568, 9574, 9580, 9593, 9599, 9605, 9618, 9624,

     9630, 9636, 9642, 9648
    } ;

static yyconst flex_int16_t yy_def[1705] =
    {   0,
     1352,    1, 1352, 1352, 1352, 1352, 1352, 1352, 1353, 1354,
     1355, 1352, 1352, 1356, 1352, 1352, 1357, 1352, 1352, 1352,
     1352, 1352, 1352, 1358, 1352, 1359, 1352, 1352, 1360, 1361,
     1352,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   47,   31,   47,
       47, 1352, 1352, 1352, 1352,   31,   47,   47, 1352, 1352,
     1352, 1362, 1363, 1362, 1362, 1364, 1365, 1366, 1366, 1352,
     1367, 1352, 1368, 1369, 1369, 1370, 1352, 1352, 1352, 1371,
     1352, 1352, 1352, 1352, 1372, 1352, 1352, 1373, 1374, 1375,
     1352, 1376, 1352, 1377, 1352, 1378, 1352, 1379, 1380, 1381,

     1382, 1352, 1383, 1352, 1384, 1352, 1385, 1352, 1352, 1386,
     1387, 1386, 1386, 1388, 1389, 1390, 1390, 1352, 1391, 1352,
     1392, 1393, 1393, 1394, 1352, 1352, 1352, 1395, 1352, 1352,
     1396, 1352, 1352, 1397, 1398, 1399, 1352, 1400, 1352, 1401,
     1352, 1402, 1352, 1352, 1352, 1352, 1403, 1404, 1403, 1403,
     1405, 1406, 1407, 1407, 1352, 1408, 1352, 1409, 1410, 1410,
     1411, 1352, 1352, 1352, 1412, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1413, 1414, 1413,
     1413, 1415, 1416, 1417, 1417, 1352, 1418, 1352, 1419, 1420,
     1420, 1421, 1352, 1352, 1352, 1422, 1423, 1423, 1352, 1424,

     1425, 1426, 1352, 1427, 1352, 1428, 1352, 1429, 1352, 1352,
     1352, 1430, 1431, 1430, 1430, 1432, 1433, 1434, 1434, 1352,
     1435, 1352, 1436, 1437, 1437, 1438, 1352, 1352, 1352, 1439,
     1440, 1352,  232, 1441,  232,  232,  232,  232,  232,  232,
      232, 1442, 1443, 1442, 1442, 1442, 1444, 1445, 1352, 1446,
     1446, 1446, 1447, 1448, 1352, 1449, 1450, 1450, 1451, 1352,
     1352, 1352, 1452,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232, 1352, 1352, 1352, 1453,  232,  232, 1352,  232,  232,
      232,  232,  232,  232,  232, 1454, 1455, 1456, 1456, 1456,
     1456, 1457, 1458, 1458, 1456, 1459, 1352, 1460, 1461, 1352,
     1352, 1462, 1463, 1352, 1464, 1465, 1464, 1464, 1466, 1467,
     1468, 1469, 1352, 1470, 1471, 1470, 1470, 1472, 1473, 1474,
     1352,  371, 1475, 1476, 1475, 1475, 1475, 1477, 1478, 1352,
     1479, 1479, 1480, 1481, 1352, 1482, 1483, 1483, 1484, 1352,
     1352, 1352, 1485,  371,  371,  371,  371,  371,  371, 1486,

     1487, 1488, 1488, 1488, 1489, 1490, 1490, 1488, 1491, 1352,
     1492, 1493, 1352, 1352, 1494, 1495, 1352, 1496, 1497, 1496,
     1496, 1498, 1499, 1500, 1352,  425, 1501, 1502, 1501, 1501,
     1501, 1503, 1504, 1352, 1505, 1505, 1506, 1507, 1352, 1508,
     1509, 1509, 1510, 1352, 1352, 1352, 1511,  425,  425,  425,
      425,  425,  425, 1512, 1513, 1514, 1514, 1514, 1515, 1516,
     1516, 1514, 1517, 1352, 1518, 1519, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,  479,
      479, 1520, 1521, 1520, 1520, 1520, 1522, 1523, 1352, 1524,
     1524, 1524, 1525, 1526, 1352, 1527, 1528, 1528, 1529, 1352,

     1352, 1352, 1530,  479,  479,  479,  479,  479,  479, 1531,
     1532, 1533, 1533, 1533, 1534, 1535, 1535, 1533, 1536, 1352,
     1537, 1538, 1539, 1352, 1540, 1541, 1540, 1540, 1542, 1543,
     1544, 1352,  532, 1545, 1546, 1545, 1545, 1545, 1547, 1548,
     1352, 1549, 1549, 1550, 1551, 1352, 1552, 1553, 1553, 1554,
     1352, 1352, 1352, 1555,  532,  532,  532,  532,  532,  532,
     1556, 1557, 1558, 1558, 1558, 1559, 1560, 1560, 1558, 1561,
     1352, 1562, 1563, 1564, 1352,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
     1565, 1566, 1567, 1567, 1567, 1568, 1569, 1569, 1567, 1570,

     1352, 1571, 1572,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575, 1352,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575, 1352, 1573, 1574, 1573, 1573, 1575, 1576, 1577,
     1577, 1352, 1578, 1352, 1579, 1580, 1580, 1581, 1352, 1352,

     1352, 1582,  575,  575,  575,  575,  575,  575,  575,  575,
      575, 1583, 1583, 1584, 1584, 1352, 1585, 1586, 1587, 1352,
     1588, 1352, 1589, 1352, 1590, 1352, 1591, 1592, 1592, 1593,
     1594, 1595, 1595, 1596, 1352,  735,  735,  735,  735,  735,
      735, 1597, 1598, 1599, 1599, 1599, 1600, 1601, 1601, 1599,
     1602, 1352, 1603, 1604,  735,  735,  735,  735,  735, 1605,
     1605, 1606, 1606, 1352, 1607, 1608, 1609, 1352, 1610, 1352,
     1611, 1352, 1612, 1352, 1613, 1614, 1614, 1615, 1352,  779,
      779,  779,  779,  779,  779, 1616, 1617, 1618, 1618, 1618,
     1619, 1620, 1620, 1618, 1621, 1352, 1622, 1623,  779,  779,

      779,  779,  779, 1624, 1624, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
      820,  820,  820,  820,  820,  820,  820,  820, 1625, 1626,
     1627, 1627, 1627, 1628, 1629, 1629, 1627, 1630, 1352, 1631,
     1632,  820,  820,  820,  820,  820, 1633, 1633, 1634, 1635,
     1635, 1636, 1352,  853,  853,  853,  853,  853,  853, 1637,
     1638, 1639, 1639, 1639, 1640, 1641, 1641, 1639, 1642, 1352,
     1643, 1644,  853,  853,  853,  853,  853, 1645, 1645, 1646,
     1352,  881,  881,  881,  881, 1647, 1647,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,

      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881, 1352,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881, 1352,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881, 1352,  966,  966, 1648, 1649,
     1648, 1648, 1648, 1650, 1651, 1352, 1652, 1652, 1652, 1653,
     1654, 1352, 1655, 1656, 1656, 1657, 1352, 1352, 1352, 1658,
      966,  966,  966,  966,  966,  966, 1659, 1660, 1661, 1661,

     1661, 1662, 1663, 1663, 1661, 1664, 1352, 1665, 1666, 1352,
     1010, 1667, 1667, 1010, 1668, 1669, 1352, 1670, 1671, 1670,
     1670, 1672, 1673, 1674, 1352, 1025, 1025, 1025, 1025, 1675,
     1675, 1025, 1676, 1677, 1352, 1678, 1679, 1678, 1678, 1680,
     1681, 1682, 1352, 1043, 1043, 1043, 1043, 1683, 1683, 1043,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1059,
     1059, 1059, 1059, 1684, 1684, 1059, 1352, 1067, 1067, 1067,
     1067, 1685, 1685, 1067, 1352, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1352, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1352, 1352, 1352,
     1352, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1352, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1686, 1687, 1688, 1688, 1688,
     1689, 1690, 1690, 1688, 1691, 1352, 1692, 1693, 1147, 1147,
     1147, 1147, 1147, 1694, 1694, 1075, 1695, 1695, 1352, 1696,
     1697, 1697, 1698, 1352, 1352, 1699, 1700, 1700, 1701, 1352,
     1352, 1352, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1352, 1352, 1352, 1352, 1352,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1147,
     1147, 1147, 1147, 1147, 1702, 1702, 1147, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1352,
     1075, 1075, 1352, 1075, 1352, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1352, 1352, 1352,
     1352, 1075, 1075, 1075, 1075, 1075, 1147, 1703, 1703, 1075,
     1075, 1075, 1075, 1075, 1352, 1352, 1075, 1075, 1352, 1075,

     1352, 1075, 1075, 1075, 1075, 1075, 1075, 1352, 1352, 1352,
     1352, 1075, 1075, 1075, 1704, 1704, 1075, 1352, 1352, 1352,
     1075, 1352, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1352, 1352, 1352, 1075, 1352, 1075, 1352, 1352, 1352, 1075,
     1352, 1075, 1352, 1352, 1075, 1352, 1352, 1352, 1352, 1352,
     1352,    0, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352
    } ;

static yyconst flex_int16_t yy_nxt[9800] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   40,   50,   40,
       51,   40,   52,    4,   53,   54,   55,   56,   32,   33,
       34,   35,   57,   37,   38,   39,   40,   40,   41,   42,
       43,   44,   45,   46,   47,   58,   49,   40,   50,   40,
       51,   40,   59,   60,   61,    4,    4,   62,   63,   64,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   65,   66,   66,   67,    4,
        4,   68,   69,    4,   70,   71,   72,   73,   74,   75,
       76,   77,    4,   78,   79,   80,    4,   81,   83,   99,
       81,  231,   84,   86,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  100, 1348,  101,  101,  101,  101,
      101,  101,  102,  103,  103,  103,  103,  104,  105,  105,
      106,  107,  108,  144,  144,  144,  144, 1347,  322,  322,
      322,  322,  575,  166,  167,  145,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  330,  330,  169,  170,

       87,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,   81,  575, 1346,   81,  172,  330,  330,  330,  330,
      330,  330,  330,  330,  331,  331,  331,  331,  331,  331,
      331,  331,  332,  332,  332,  332,  329,  329,  334, 1289,
       88,  323,  335,  335,  335,  335,  334,  335,  346,  346,
      346,  346,  347, 1288,  467,   89,  166,   90,   90,   90,
       90,   90,   90,   91,   92,   92,   92,   92,   93,   94,
       94,   95,   96,   97,  110,  111,  112,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  113,  114,  114,  115,  395,  395,  116,  117,

     1320,  118,  119,  120,  121,  122,  123,  124,  125, 1311,
      126,  127,  128,  132,  174, 1310,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  109,  146,  264,  235,
      177,  235,  211, 1309,  109,  146,  265,  176,  177,  235,
      211,  266,  267,  283,  235,  235,  235,  576,  235,  577,
      578,  268,  581, 1308,  235,  604,  235,  284,  264,  235,
      235,  235,  235,  235, 1299,  133,  265,  176, 1289,  235,
      235,  266,  267,  283,  235,  235,  235,  576,  235,  577,
      578,  268,  581,  235,  235,  604,  235,  284,  449,  449,
      235,  235, 1013,  235,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  505,  505,  134,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      135, 1288,  136,  136,  136,  136,  136,  136,  137,  138,
      138,  138,  138,  139,  140,  140,  141,  142,  143,  147,
      148,  149,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  150,  151,  151,
      152,  556,  556,  153,  154, 1012,  155,  156,  157,  158,
      159,  160,  161,  162,  605,  163,  164,  165,  178,  179,
      180,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  181,  182,  182,  183,

      606, 1281,  184,  185,  605,  186,  187,  188,  189,  190,
      191,  192,  193, 1280,  194,  195,  196,  198,  199,  235,
      607,  235,  269,  397,  397,  397,  397,  394,  394,  270,
      606,  235,  271, 1279,  272,  235,  608,  609,  235, 1278,
      399,  399,  399,  399,  235,  399,  235,  579,  706,  235,
      607,  235,  269,  707,  235,  580,  235,  992,  992,  270,
      235,  235,  271,  235,  272,  235,  608,  609,  235,  409,
      409,  409,  409,  410,  235, 1263,  235,  579,  338,  339,
      144,  144,  144,  144,  235,  580,  235,  200,  341, 1148,
      235, 1227,  145,  235, 1228,  342,  342,  342,  342,  342,

     1230,  231,  201,  231,  202,  202,  202,  202,  202,  202,
      203,  204,  204,  204,  204,  205,  206,  206,  207,  208,
      209,  212,  213,  214,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  215,
      216,  216,  217, 1229, 1251,  218,  219, 1226,  220,  221,
      222,  223,  224,  225,  226,  227, 1252,  228,  229,  230,
      232,  233, 1253,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  234,  451,  451,  451,  451,  448,  448,
      235,  236,  235,  237,  235,  235,  235,  235,  235,  235,
      235,  238,  235,  239,  235,  235,  235,  240,  235,  235,

      241,  235,  235,  235,  235, 1260, 1260, 1260, 1260,  235,
      235,  236,  235,  237,  235,  235,  235,  235,  235,  235,
      235,  238,  235,  239,  235,  235,  235,  240,  235,  235,
      241,  235,  235,  235,  235,  463,  463,  463,  463,  464,
      242,  243,  244,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  246,  247,
      247,  248, 1207,  249,  250,  251,  252,  253,  254,  255,
      256,  257,  258,  259,  260,  762,  261,  262,  263,  273,
      235,  614,  235,  274,  615,  620,  621,  275,  617,  616,
      235,  714,  235,  372,  618,  276,  235,  622,  623,  235,

      619,  372,   85,  453,  453,  453,  453,   85,  453,  273,
      235,  614,  235,  274,  615,  620,  621,  275,  617,  616,
      235,  235,  235,  235,  618,  276,  235,  622,  623,  235,
      619,  235,  235,  277,  880,  880,  235,  235,  584,  584,
      235,  624,  278,  361,  361,  361,  361,  361,  361,  361,
      235,  235,  235,  235,  991,  582, 1162,  279,  966,   85,
      280,  235,  235,  277,   85,  281,  235,  235,   85,  235,
      235,  624,  278, 1147,  625,  626,   85, 1108,  574,   85,
      235,   85,  235,  509,  509,  509,  509,  279,  509,  627,
      280,  235,  235,  235,  630,  281,  235,  854,  631,  235,

      628,  235,  634,  235,  625,  626,  282,  235,  235,  821,
      235,  780,  235,  736,  629,  235,  313,  632,  633,  627,
      640,  235,  314,  235,  630, 1013,  235,  235,  631, 1012,
      628,  235,  634,  235, 1011, 1010,  282,  235,  235,  235,
      235,  235,  235,  285,  629,  235,  313,  632,  633,  235,
      640,  286,  314,  641,  287,  288,  235,  235,  235,  355,
      355,  355,  355,  355,  355,  355,  355,  355, 1003,  235,
      949,  235,  426,  285,  519,  519,  519,  519,  520,  235,
      426,  286,  928,  641,  287,  288,  583,  555,  235,  289,
      235,  290,  235,  560,  560,  560,  560,  291,  560,  642,

      235,  643,  235,  292,  866,  532,  235,  737,  737,  235,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  289,
      235,  290,  235,  644,  735,  853,  197,  291,  504,  642,
      235,  643,  235,  292,  293,  235,  235,  294,  295,  235,
      646,  647,  296,  650,  653,  235,  654,  235,  297,  298,
      235,  235,  235,  644,  235,  570,  570,  570,  570,  571,
      235,  655,  235,  299,  293,  235,  235,  294,  295,  235,
      646,  647,  296,  650,  653,  235,  654,  235,  297,  298,
      235,  235,  235,  835,  235,  600,  600,  600,  600,  601,
      235,  655,  235,  299,  479,  658,  235,  235,  235,  235,

      235,  235,  300,  651,  319,  320,  652,  661,  235,  820,
      235,  166,  301,  302,  235,  235,  235,  235,  370,  370,
      370,  370,  370,  370,  370,  658,  448,  235,  235,  792,
      235,  235,  300,  651,  319,  320,  652,  661,  235,  235,
      235,  235,  301,  302,  235,  235,  235,  235,  662,  235,
      425,  235,  648,  779,  303,  235,  656,  667,  235,  649,
      657,  668,  659,  304,  235,  660,  235,  305,  131,  235,
      394,  235,  748,  371,  235,  673,  235,  306,  662,  235,
      235,  235,  648,  235,  303,  235,  656,  667,  235,  649,
      657,  668,  659,  304,  235,  660,  235,  305,  507,  507,

      507,  507,  504,  504,  235,  673,  235,  306,  735,   98,
      235,   85,  481,  235,  307,  235,  674,  235,  308,  678,
      481,  309,  310,  679,  329,  235,  680,  235,  704,  703,
      645,  235,  311,  312,  235,  395,  395,  395,  395,  395,
      395,  395,  395,  597,  307,  235,  674,  235,  308,  678,
      669,  309,  310,  679,  671,  235,  680,  235,  235,  315,
      235,  235,  311,  312,  235,  672,  670,  681,  235,  682,
      316,  888,  663,  317,  318,  235,  889,  235,  890,  321,
      669,  664,  235,  235,  671,  665,  666,  232,  235,  315,
      235,  582, 1352,  235,  235,  672,  670,  681,  235,  682,

      316,  888,  663,  317,  318,  235,  889,  235,  890,  321,
      235,  664,  235,  235,  235,  665,  666,  235,  279,  781,
      781,  280,  481,  235,  235,  533,  281,  235,  235,  235,
      481,  235,  891,  533,  235,  313,  779,  822,  822,  574,
      326,  314,  892,  567,  235,  235,  235,  235,  279,  402,
      403,  280,  683,  516,  820,  968,  281,  235,  235,  235,
      683,  235,  891,  968,  235,  313,  405,  405,  405,  405,
      405,  314,  892,  327,  460,  235,  235,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  351,  357,  357,  357,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  396,  396,  396,  396,  396,  396,  396,  396,
      415,  413,  406,   99,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  100,   87,
      101,  101,  101,  101,  101,  101,  102,  103,  103,  103,
      103,  104,  105,  105,  106,  107,  108,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  424,  424,  424,  424,  424,  424,  424,   88,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  352,

      741,  741,  741,  741,   89,  741,   90,   90,   90,   90,
       90,   90,   91,   92,   92,   92,   92,   93,   94,   94,
       95,   96,   97,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  531,  531,  531,  531,  531,  531,  531,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372, 1265, 1265, 1265, 1265,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  751,  751,  751,  751,  752,

      373,  374,  375,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  377,  378,
      378,  379,  350,  380,  381,  382,  343,  383,  384,  385,
      386,  387,  388,  389,  390,  328,  391,  392,  393,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  414,  131,
      322,  322,  322,  322,  131,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  558,  558,  558,  558,  555,  555,  325,
      133,  456,  457,  324,  210,  130,  131,  785,  785,  785,
      785,  131,  785,  323,  129,  131,  968,   82,  459,  459,
      459,  459,  459,  131,  968, 1352,  131, 1352,  131,  449,
      449,  449,  449,  449,  449,  449,  449, 1352, 1352, 1352,
      134,  450,  450,  450,  450,  450,  450,  450,  450,  586,
      586,  586,  586,  583,  583,  135, 1352,  136,  136,  136,
      136,  136,  136,  137,  138,  138,  138,  138,  139,  140,
      140,  141,  142,  143,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  589,  589,  589,  589,  235,  589,
     1352,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426, 1352, 1352, 1352, 1352,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  795,  795,  795,  795,
      796,  427,  428,  429,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  431,
      432,  432,  433, 1352,  434,  435,  436, 1352,  437,  438,

      439,  440,  441,  442,  443,  444, 1352,  445,  446,  447,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  469, 1352,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      472,  470,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  893,  473,  330,  330,  330,  330,  330,  330,
     1352,  470,  894,  474,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  505,  505,  505,  505,  505,  505,
      505,  505,  893,  473, 1352,  476,  711,  711,  711,  711,
      711,  711,  894,  474,  174, 1352,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  506,  506,  506,  506,
      506,  506,  506,  506,  477,  476,  477,  176, 1352,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  739,  739,
      739,  739,  736,  736,  512,  513, 1352,  176,  479,  480,

     1352,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  515,  515,  515,  515,  515,  898, 1352,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  899,  900,  901,  898,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  899,  900,  901, 1352,  199,  482,  483,
      484,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  486,  487,  487,  488,

     1352,  489,  490,  491,  492,  493,  494,  495,  496,  497,
      498,  499,  500,  199,  501,  502,  503,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  200,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  838,  838,  838,  838,
      839,  201, 1352,  202,  202,  202,  202,  202,  202,  203,
      204,  204,  204,  204,  205,  206,  206,  207,  208,  209,
     1352, 1352,  200,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  201, 1352,  202,

      202,  202,  202,  202,  202,  203,  204,  204,  204,  204,
      205,  206,  206,  207,  208,  209,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  395,  395,  395,  395,  395,  395, 1352,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533, 1352, 1352, 1352, 1352,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  869,  869,  869,  869,  870,  534,  535,
      536,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  538,  539,  539,  540,
     1352,  541,  542,  543, 1352,  544,  545,  546,  547,  548,
      549,  550,  551, 1352,  552,  553,  554,  556,  556,  556,
      556,  556,  556,  556,  556,  557,  557,  557,  557,  557,
      557,  557,  557,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  563,  564,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569, 1352,  566,
      566,  566,  566,  566,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  232,
      233, 1352,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  234,  759,  759,  759,  759,  759,  759,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  902,  903,  904,  905,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  902,  903,  904,  905, 1352,  242,
      243,  244,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  246,  247,  247,
      248, 1352,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  906,  261,  262,  263,  178,  179,
      180,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  181,  182,  182,  183,
     1352, 1352,  184,  185,  906,  186,  187,  188,  189,  190,
      191,  192,  193, 1352,  194,  195,  196,  584,  584,  584,
      584,  584,  584,  584,  584,  585,  585,  585,  585,  585,
      585,  585,  585,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  593,  594,  599,  599,  599,  599,  599,  599,

      599,  599,  599,  599,  599,  599,  599,  599, 1352,  596,
      596,  596,  596,  596,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  610,
      907,  635,  908,  909,  675,  910,  911,  912,  636,  676,
      913,  637,  611,  638,  612,  677,  914,  915,  613,  639,
      737,  737,  737,  737,  737,  737,  737,  737, 1352,  610,
      907,  635,  908,  909,  675,  910,  911,  912,  636,  676,
      913,  637,  611,  638,  612,  677,  914,  915,  613,  639,
      684,  685,  686,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  687,  688,

      688,  689, 1352, 1352,  690,  691, 1352,  692,  693,  694,
      695,  696,  697,  698,  699, 1352,  700,  701,  702,  715,
      738,  738,  738,  738,  738,  738,  738,  738,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  744,  745,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750, 1352,  747,  747,  747,  747,  747,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753, 1352, 1352,  716,  781,  781,  781,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,
      782,  782,  782,  783,  783,  783,  783,  780,  780,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  788,  789,
      449,  449,  449,  449,  449,  449,  717,  803,  803,  803,
      803,  803,  803, 1352, 1352,  791,  791,  791,  791,  791,
     1352,  718, 1352,  719,  719,  719,  719,  719,  719,  720,
      721,  721,  721,  721,  722,  723,  723,  724,  725,  726,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      824,  824,  824,  824,  821,  821, 1352,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  916,  917,  918,  919,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  916,  917,  918,  919, 1352,  373,  374,  375,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  377,  378,  378,  379, 1352,
      380,  381,  382, 1352,  383,  384,  385,  386,  387,  388,
      389,  390, 1352,  391,  392,  393,  763,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  468,  468,  468,  468,

      468,  468,  468,  468,  468,  468,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  920,  806,  764,  859,
      859,  859,  859,  809,  859,  809, 1352,  808,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  822,  822,
      822,  822,  822,  822,  822,  822,  920,  806,  827,  827,
      827,  827,  481,  827,  814, 1352,  814,  808,  765,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  996,
      996,  996,  996,  766,  996,  767,  767,  767,  767,  767,
      767,  768,  769,  769,  769,  769,  770,  771,  771,  772,
      773,  774,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  505,  505,  505,  505,  505,  505, 1352,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  921,  922,  923,  924,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  921,  922,  923,  924, 1352,  427,
      428,  429,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  431,  432,  432,
      433, 1352,  434,  435,  436, 1352,  437,  438,  439,  440,

      441,  442,  443,  444,  925,  445,  446,  447,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  926,  811,
     1352, 1352, 1352, 1352,  925,  816, 1352,  816, 1352,  813,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      823,  823,  823,  823,  823,  823,  823,  823,  926,  811,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  813,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      846,  846,  846,  846,  846,  846, 1352,  818, 1352,  818,
      927,  476,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  855,  855,  855,  855,  855,  855,  855,  855,
      927,  476,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  479,  480, 1352,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  857,  857,  857,  857,  854,
      854, 1352,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  929,  930,  931,
      932,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  929,  930,  931,
      932, 1352,  482,  483,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      486,  487,  487,  488, 1352,  489,  490,  491,  492,  493,
      494,  495,  496,  497,  498,  499,  500, 1352,  501,  502,
      503,  831,  832,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837, 1352,  834,  834,
      834,  834,  834,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  556,  556,

      556,  556,  556,  556, 1352,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      933,  934,  935,  936,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      933,  934,  935,  936, 1352,  534,  535,  536,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  538,  539,  539,  540, 1352,  541,  542,
      543, 1352,  544,  545,  546,  547,  548,  549,  550,  551,

     1352,  552,  553,  554,  856,  856,  856,  856,  856,  856,
      856,  856,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  862,  863,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868, 1352,  865,  865,
      865,  865,  865,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  877,  877,
      877,  877,  877,  877,  232,  233, 1352,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  234,  584,  584,
      584,  584,  584,  584,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  937,
      938,  939,  940,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  937,
      938,  939,  940, 1352,  242,  243,  244,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  246,  247,  247,  248,  941,  249,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  259,  260,  895,
      261,  262,  263,  885,  885,  885,  885,  885,  885,  942,
      943,  945,  946,  947,  896,  897,  941,  948,  950,  951,

      956,  944,  952,  953,  957,  958,  959,  960,  961,  895,
      954,  962,  963,  964,  965, 1076,  955, 1352, 1352,  942,
      943,  945,  946,  947,  896,  897, 1352,  948,  950,  951,
      956,  944,  952,  953,  957,  958,  959,  960,  961, 1352,
      954,  962,  963,  964,  965, 1076,  955,  966,  967, 1352,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      994,  994,  994,  994,  991,  991, 1352,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968, 1352, 1352, 1352, 1352,  968,  968,  968,  968,

      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968, 1006, 1006, 1006, 1006, 1007,  969,  970,  971,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  973,  974,  974,  975, 1352,
      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987, 1352,  988,  989,  990,  992,  992,  992,  992,
      992,  992,  992,  992,  993,  993,  993,  993,  993,  993,
      993,  993,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  999, 1000, 1005, 1005, 1005, 1005, 1005, 1005, 1005,

     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1352, 1002, 1002,
     1002, 1002, 1002, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,  715,  714,
     1352, 1352, 1352, 1352,  714, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1128, 1129, 1130, 1352, 1131,  716,  714,  855,  855, 1352,
     1352,  714, 1352, 1352, 1077,  714,  737,  737,  737,  737,

      737,  737, 1352,  714,  853, 1352,  714, 1352,  714, 1029,
     1029, 1029, 1029, 1029, 1029, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1077,  717, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
      718, 1352,  719,  719,  719,  719,  719,  719,  720,  721,
      721,  721,  721,  722,  723,  723,  724,  725,  726, 1015,
       99,  762, 1352, 1352, 1352, 1352,  762, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1352,  100, 1352,  101,  101,  101,
      101,  101,  101,  102,  103,  103,  103,  103,  104,  105,
      105,  106,  107,  108, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,  781,
      781,  781,  781,  781,  781, 1352,  716, 1352,  762, 1149,
     1149, 1352, 1352,  762, 1352, 1078, 1352,  762, 1047, 1047,
     1047, 1047, 1047, 1047, 1352,  762, 1147, 1051,  762, 1051,
      762, 1352, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1053, 1352, 1053, 1078,  717, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1352, 1352, 1352,
     1352,  718, 1352,  719,  719,  719,  719,  719,  719,  720,
      721,  721,  721,  721,  722,  723,  723,  724,  725,  726,
      351,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810, 1079,  808,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810, 1055, 1352, 1055, 1352, 1330, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1080, 1252,
     1352, 1079,  808, 1352, 1352, 1253, 1352,   87,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  822,  822,
      822,  822,  822,  822, 1352, 1057, 1352, 1057, 1080,  813,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1063, 1063, 1063, 1063, 1063, 1063, 1352,   88,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815, 1352,  813,

     1352, 1352,   89, 1352,   90,   90,   90,   90,   90,   90,
       91,   92,   92,   92,   92,   93,   94,   94,   95,   96,
       97,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  855,  855,  855,  855,  855,  855, 1352,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372, 1081, 1082, 1083, 1084,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372, 1081, 1082, 1083, 1084, 1352,  373,  374,

      375,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  377,  378,  378,  379,
     1352,  380,  381,  382,  199,  383,  384,  385,  386,  387,
      388,  389,  390, 1352,  391,  392,  393,  763,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819, 1352,  764,
     1352, 1352, 1352,  200, 1071, 1071, 1071, 1071, 1071, 1071,

     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,  201, 1093,
      202,  202,  202,  202,  202,  202,  203,  204,  204,  204,
      204,  205,  206,  206,  207,  208,  209, 1352, 1352,  765,
     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1093,
     1095, 1096, 1097, 1098,  766, 1099,  767,  767,  767,  767,
      767,  767,  768,  769,  769,  769,  769,  770,  771,  771,
      772,  773,  774, 1033, 1100, 1101, 1102, 1103, 1094, 1104,
     1095, 1096, 1097, 1098, 1105, 1099, 1106, 1107, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1352, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1100, 1101, 1102, 1103, 1124, 1104,

     1125, 1126, 1127, 1132, 1105, 1133, 1106, 1107, 1109, 1110,
     1111, 1112, 1113, 1114, 1115,  764, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1134, 1352, 1135, 1138, 1124, 1139,
     1125, 1126, 1127, 1132, 1136, 1133, 1140, 1141, 1137, 1142,
     1352, 1143, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1352, 1352, 1352, 1352, 1134,  765, 1135, 1138, 1352, 1139,
     1144, 1145, 1146, 1352, 1136, 1352, 1140, 1141, 1137, 1142,
      766, 1143,  767,  767,  767,  767,  767,  767,  768,  769,
      769,  769,  769,  770,  771,  771,  772,  773,  774,  414,
     1144, 1145, 1146, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1151, 1151, 1151, 1151, 1148, 1148, 1154, 1154, 1154,
     1154,  968, 1154, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1352, 1352, 1352, 1158, 1159, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164,  133, 1161, 1161, 1161, 1161, 1161, 1165, 1165, 1165,
     1165, 1166, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167,  992,  992,  992,
      992,  992,  992, 1173, 1173, 1173, 1173, 1173, 1173, 1352,
     1352,  134, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1352, 1352, 1352, 1193,  135, 1194,  136,  136,

      136,  136,  136,  136,  137,  138,  138,  138,  138,  139,
      140,  140,  141,  142,  143,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425, 1193, 1352, 1194, 1195, 1196,
     1197, 1352,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426, 1198, 1195, 1196,
     1197,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426, 1198, 1199, 1352,
     1352, 1352,  427,  428,  429,  430,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      431,  432,  432,  433, 1200,  434,  435,  436, 1199,  437,
      438,  439,  440,  441,  442,  443,  444, 1352,  445,  446,
      447,  479,  480, 1352,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479, 1200, 1352, 1201, 1202, 1203, 1204,
     1352,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481, 1201, 1202, 1203, 1204,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481, 1352, 1352, 1352, 1352,
     1352,  482,  483,  484,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  486,
      487,  487,  488, 1205,  489,  490,  491,  492,  493,  494,
      495,  496,  497,  498,  499,  500, 1352,  501,  502,  503,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
     1352, 1352, 1206, 1205, 1208, 1209, 1352,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533, 1206, 1210, 1208, 1209,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533, 1352, 1210, 1352, 1352, 1352,  534,  535,  536,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  538,  539,  539,  540, 1352,
      541,  542,  543, 1211,  544,  545,  546,  547,  548,  549,
      550,  551, 1352,  552,  553,  554,  232,  233, 1352,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  234,
     1352, 1212, 1213, 1211, 1214, 1352,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235, 1212, 1213, 1215, 1214,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235, 1352, 1352, 1215, 1352, 1352,  242,  243,  244,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  246,  247,  247,  248, 1216,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260, 1352,  261,  262,  263,  966,  967, 1352,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966, 1216, 1352,

     1217, 1218, 1219, 1220, 1352,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
     1217, 1218, 1219, 1220,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
     1352, 1352, 1352, 1352, 1352,  969,  970,  971,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  973,  974,  974,  975, 1352,  976,  977,
      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,

     1352,  988,  989,  990,  232,  233, 1352,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  234, 1352, 1221,
     1222, 1223, 1224, 1352,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235, 1221,
     1222, 1223, 1224,  235,  235,  235,  235,  235, 1176,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235, 1352,
     1352, 1352, 1352, 1352,  242,  243,  244,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  246,  247,  247,  248, 1225,  249,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  259,  260, 1248,
      261,  262,  263,  593,  594, 1352, 1352, 1249,  593,  594,
     1352, 1352, 1352, 1177, 1352, 1250, 1225, 1352, 1178, 1352,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
     1179, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1231, 1232, 1233, 1234, 1235, 1236,  716, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1237, 1238,
     1239, 1231, 1232, 1233, 1234, 1235, 1236, 1149, 1149, 1149,
     1149, 1149, 1149, 1352, 1352, 1352, 1352,  717, 1244, 1244,
     1244, 1244, 1244, 1244, 1352, 1352, 1352, 1352, 1237, 1238,
     1239, 1254,  718, 1255,  719,  719,  719,  719,  719,  719,
      720,  721,  721,  721,  721,  722,  723,  723,  724,  725,
      726,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371, 1254, 1352, 1255, 1256, 1257, 1258, 1352,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372, 1259, 1256, 1257, 1258,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372, 1259, 1261, 1352, 1352, 1352,  373,  374,
      375,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  377,  378,  378,  379,
     1262,  380,  381,  382, 1261,  383,  384,  385,  386,  387,
      388,  389,  390, 1264,  391,  392,  393, 1185, 1266, 1267,

     1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
     1262, 1282, 1283, 1284, 1285, 1286, 1290, 1291, 1292, 1352,
     1293, 1294, 1297, 1264, 1298, 1300, 1302, 1303, 1266, 1267,
     1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277,
     1304, 1282, 1283, 1284, 1285, 1286, 1290, 1291, 1292,  764,
     1293, 1294, 1297, 1305, 1298, 1300, 1302, 1303, 1306, 1352,
     1307, 1312, 1313, 1314, 1265, 1265, 1265, 1265, 1329, 1317,
     1304, 1318, 1319, 1352, 1352, 1321, 1249,  593,  594, 1352,
     1352, 1352, 1352, 1305, 1250, 1352, 1352, 1315, 1306,  765,
     1307, 1312, 1313, 1314,  596,  596,  596,  596,  596, 1317,

     1352, 1318, 1319, 1301,  766, 1321,  767,  767,  767,  767,
      767,  767,  768,  769,  769,  769,  769,  770,  771,  771,
      772,  773,  774,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425, 1301, 1352, 1322, 1323, 1324, 1325, 1352,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426, 1322, 1323, 1324, 1325,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426, 1352, 1326, 1352, 1352, 1352,

      427,  428,  429,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  431,  432,
      432,  433, 1327,  434,  435,  436, 1326,  437,  438,  439,
      440,  441,  442,  443,  444, 1352,  445,  446,  447,  479,
      480, 1352,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479, 1327, 1352, 1328, 1331, 1332, 1333, 1352,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481, 1328, 1331, 1332, 1333,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481, 1352, 1352, 1352, 1352, 1352,  482,
      483,  484,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  487,  487,
      488, 1334,  489,  490,  491,  492,  493,  494,  495,  496,
      497,  498,  499,  500, 1352,  501,  502,  503,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532, 1352, 1352,
     1335, 1334, 1336, 1337, 1352,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

     1335, 1338, 1336, 1337,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
     1352, 1338, 1352, 1352, 1352,  534,  535,  536,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  538,  539,  539,  540, 1352,  541,  542,
      543, 1339,  544,  545,  546,  547,  548,  549,  550,  551,
     1352,  552,  553,  554,  232,  233, 1352,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  234, 1352, 1340,
     1341, 1339, 1342, 1352,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235, 1340,
     1341, 1343, 1342,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235, 1352,
     1352, 1343, 1352, 1352,  242,  243,  244,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  246,  247,  247,  248, 1344,  249,  250,  251,
      252,  253,  254,  255,  256,  257,  258,  259,  260, 1352,
      261,  262,  263,  966,  967, 1352,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966, 1344, 1352, 1345, 1349,
     1350, 1351, 1352,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968, 1345, 1349,
     1350, 1351,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968, 1352, 1260,
     1260, 1260, 1260,  969,  970,  971,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  973,  974,  974,  975, 1352,  976,  977,  978,  979,

      980,  981,  982,  983,  984,  985,  986,  987, 1295,  988,
      989,  990,  715,  593,  594, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1316, 1352, 1352, 1296, 1352, 1352, 1352,
      596,  596,  596,  596,  596, 1352, 1352, 1352, 1295, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1296, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,  716,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,  717,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352,  718, 1352,  719,  719,  719,  719,
      719,  719,  720,  721,  721,  721,  721,  722,  723,  723,
      724,  725,  726,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372, 1352, 1352, 1352, 1352,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372, 1352, 1352, 1352, 1352, 1352,
      373,  374,  375,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  377,  378,
      378,  379, 1352,  380,  381,  382, 1352,  383,  384,  385,
      386,  387,  388,  389,  390, 1352,  391,  392,  393,  763,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352,  764, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352,  765, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352,  766, 1352,  767,  767,
      767,  767,  767,  767,  768,  769,  769,  769,  769,  770,
      771,  771,  772,  773,  774,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425, 1352, 1352, 1352, 1352, 1352,

     1352, 1352,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426, 1352, 1352, 1352,
     1352,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426, 1352, 1352, 1352,
     1352, 1352,  427,  428,  429,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      431,  432,  432,  433, 1352,  434,  435,  436, 1352,  437,
      438,  439,  440,  441,  442,  443,  444, 1352,  445,  446,

      447,  479,  480, 1352,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479, 1352, 1352, 1352, 1352, 1352, 1352,
     1352,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481, 1352, 1352, 1352, 1352,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481, 1352, 1352, 1352, 1352,
     1352,  482,  483,  484,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  486,

      487,  487,  488, 1352,  489,  490,  491,  492,  493,  494,
      495,  496,  497,  498,  499,  500, 1352,  501,  502,  503,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
     1352, 1352, 1352, 1352, 1352, 1352, 1352,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533, 1352, 1352, 1352, 1352,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533, 1352, 1352, 1352, 1352, 1352,  534,  535,  536,

      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  538,  539,  539,  540, 1352,
      541,  542,  543, 1352,  544,  545,  546,  547,  548,  549,
      550,  551, 1352,  552,  553,  554,   85, 1352,   85,   85,
       85,   85,   85, 1352, 1352,   85, 1352, 1352,   85,   98,
     1352,   98,   98,   98,   98,   98, 1352, 1352,   98, 1352,
     1352,   98,  109,  109,  109, 1352,  109,  109,  109,  109,
      109,  131, 1352,  131,  131,  131,  131,  131, 1352, 1352,
      131, 1352, 1352,  131,  146,  146,  146, 1352,  146,  146,
      146,  146,  146,  177,  177,  177, 1352,  177,  177,  177,

      177,  177,  197,  197,  197,  197,  197, 1352, 1352,  197,
     1352, 1352,  197,  211,  211,  211, 1352,  211,  211,  211,
      211,  211,  329,  329,  329,  329,  329,  329,  330,  330,
      330,  330,  330,  330,  332,  332,  332,  332,  332,  332,
      333,  333,  333,  333,  333,  333,  334,  334,  334, 1352,
      334,  334,  335,  335,  335,  335,  335,  335,  337,  337,
      337,  337,  337,  337,  340,  340,  340,  340,  340,  340,
      344,  344,  344,  344,  344,  344,  349,  349,  349,  349,
      349,  349,   85, 1352,   85,   85,   85,   85,   85, 1352,
     1352,   85, 1352, 1352,   85,  353,  353,  353,  353,  353,

      354,  354,  354,  354,   85,   85,   85,   85,   85,   85,
      356,  356,  356,  356,  356,  356,  358,  358,  358,  358,
      358,  358,  360,  360,  360,  360,  360,  360,   98, 1352,
       98,   98,   98,   98,   98, 1352, 1352,   98, 1352, 1352,
       98,  362,  362,  362,  362,  362,  363,  363,  363,  363,
       98,   98,   98,   98,   98,   98,  365,  365,  365,  365,
      365,  365,  367,  367,  367,  367,  367,  367,  369,  369,
      369,  369,  369,  369,  394,  394,  394,  394,  394,  394,
      395,  395,  395,  395,  395,  395,  397,  397,  397,  397,
      397,  397,  398,  398,  398,  398,  398,  398,  109,  109,

      109, 1352,  109,  109,  399,  399,  399,  399,  399,  399,
      401,  401,  401,  401,  401,  401,  404,  404,  404,  404,
      404,  404,  407,  407,  407,  407,  407,  407,  412,  412,
      412,  412,  412,  412,  131, 1352,  131,  131,  131,  131,
      131, 1352, 1352,  131, 1352, 1352,  131,  416,  416,  416,
      416,  416,  417,  417,  417,  417,  131,  131,  131,  131,
      131,  131,  419,  419,  419,  419,  419,  419,  421,  421,
      421,  421,  421,  421,  423,  423,  423,  423,  423,  423,
      448,  448,  448,  448,  448,  448,  449,  449,  449,  449,
      449,  449,  451,  451,  451,  451,  451,  451,  452,  452,

      452,  452,  452,  452,  146,  146,  146, 1352,  146,  146,
      453,  453,  453,  453,  453,  453,  455,  455,  455,  455,
      455,  455,  458,  458,  458,  458,  458,  458,  461,  461,
      461,  461,  461,  461,  466,  466,  466,  466,  466,  466,
      504,  504,  504,  504,  504,  504,  505,  505,  505,  505,
      505,  505,  507,  507,  507,  507,  507,  507,  508,  508,
      508,  508,  508,  508,  177,  177,  177, 1352,  177,  177,
      509,  509,  509,  509,  509,  509,  511,  511,  511,  511,
      511,  511,  514,  514,  514,  514,  514,  514,  517,  517,
      517,  517,  517,  517,  522,  522,  522,  522,  522,  522,

      197,  197,  197,  197,  197, 1352, 1352,  197, 1352, 1352,
      197,  523,  523,  523,  523,  523,  524,  524,  524,  524,
      197,  197,  197,  197,  197,  197,  526,  526,  526,  526,
      526,  526,  528,  528,  528,  528,  528,  528,  530,  530,
      530,  530,  530,  530,  555,  555,  555,  555,  555,  555,
      556,  556,  556,  556,  556,  556,  558,  558,  558,  558,
      558,  558,  559,  559,  559,  559,  559,  559,  211,  211,
      211, 1352,  211,  211,  560,  560,  560,  560,  560,  560,
      562,  562,  562,  562,  562,  562,  565,  565,  565,  565,
      565,  565,  568,  568,  568,  568,  568,  568,  573,  573,

      573,  573,  573,  573,  177,  177,  177, 1352,  177,  177,
      177,  177,  177,  583,  583,  583,  583,  583,  583,  584,
      584,  584,  584,  584,  584,  586,  586,  586,  586,  586,
      586,  587,  587,  587,  587,  587,  587,  235,  235,  235,
     1352,  235,  235,  588,  588,  588,  588,  588,  588,  590,
      590,  590,  590,  590,  590,  592,  592,  592,  592,  592,
      592,  595,  595,  595,  595,  595,  595,  598,  598,  598,
      598,  598,  598,  603,  603,  603,  603,  603,  603,  683,
      683,  683, 1352,  683,  683,  683,  683,  683,  335,  335,
      335,  335,  335,  335,  705,  705,  705,  705,  705,  705,

      329,  329,  329,  329,  329,  329,  708,  708,  708,  708,
      708,  708,  709,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  710,  712,  712,  712,  712,  712,  712,
      713,  713,  713,  713,  713,  713,  714,  714,  714,  714,
      714,  714,  714, 1352, 1352,  714, 1352, 1352,  714,  354,
      354,  354,  354,  354,  354,   85,   85,   85,   85,   85,
       85,  727,  727,  727,  727,  727,  727,  728,  728,  728,
      728,  728,  728,  729,  729,  729,  729,  729,  729,  730,
      730,  730,  730,  730,  730,  363,  363,  363,  363,  363,
      363,   98,   98,   98,   98,   98,   98,  731,  731,  731,

      731,  731,  731,  732,  732,  732,  732,  732,  732,  733,
      733,  733,  733,  733,  733,  734,  734,  734,  734,  734,
      734,  736,  736,  736,  736,  736,  736,  737,  737,  737,
      737,  737,  737,  739,  739,  739,  739,  739,  739,  740,
      740,  740,  740,  740,  740,  372,  372,  372, 1352,  372,
      372,  371,  371,  371,  371, 1352,  371,  741,  741,  741,
      741,  741,  741,  743,  743,  743,  743,  743,  743,  746,
      746,  746,  746,  746,  746,  749,  749,  749,  749,  749,
      749,  754,  754,  754,  754,  754,  754,  399,  399,  399,
      399,  399,  399,  755,  755,  755,  755,  755,  755,  394,

      394,  394,  394,  394,  394,  756,  756,  756,  756,  756,
      756,  757,  757,  757,  757,  757,  757,  758,  758,  758,
      758,  758,  758,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  762,  762,  762,  762,  762,
      762,  762, 1352, 1352,  762, 1352, 1352,  762,  417,  417,
      417,  417,  417,  417,  131,  131,  131,  131,  131,  131,
      775,  775,  775,  775,  775,  775,  776,  776,  776,  776,
      776,  776,  777,  777,  777,  777,  777,  777,  778,  778,
      778,  778,  778,  778,  780,  780,  780,  780,  780,  780,
      781,  781,  781,  781,  781,  781,  783,  783,  783,  783,

      783,  783,  784,  784,  784,  784,  784,  784,  426,  426,
      426, 1352,  426,  426,  425,  425,  425,  425, 1352,  425,
      785,  785,  785,  785,  785,  785,  787,  787,  787,  787,
      787,  787,  790,  790,  790,  790,  790,  790,  793,  793,
      793,  793,  793,  793,  798,  798,  798,  798,  798,  798,
      453,  453,  453,  453,  453,  453,  799,  799,  799,  799,
      799,  799,  448,  448,  448,  448,  448,  448,  800,  800,
      800,  800,  800,  800,  801,  801,  801,  801,  801,  801,
      802,  802,  802,  802,  802,  802,  804,  804,  804,  804,
      804,  804,  805,  805,  805,  805,  805,  805,  821,  821,

      821,  821,  821,  821,  822,  822,  822,  822,  822,  822,
      824,  824,  824,  824,  824,  824,  825,  825,  825,  825,
      825,  825,  481,  481,  481, 1352,  481,  481,  826,  826,
      826,  826,  826,  826,  828,  828,  828,  828,  828,  828,
      830,  830,  830,  830,  830,  830,  833,  833,  833,  833,
      833,  833,  836,  836,  836,  836,  836,  836,  841,  841,
      841,  841,  841,  841,  509,  509,  509,  509,  509,  509,
      842,  842,  842,  842,  842,  842,  504,  504,  504,  504,
      504,  504,  843,  843,  843,  843,  843,  843,  844,  844,
      844,  844,  844,  844,  845,  845,  845,  845,  845,  845,

      847,  847,  847,  847,  847,  847,  848,  848,  848,  848,
      848,  848,  524,  524,  524,  524,  524,  524,  197,  197,
      197,  197,  197,  197,  849,  849,  849,  849,  849,  849,
      850,  850,  850,  850,  850,  850,  851,  851,  851,  851,
      851,  851,  852,  852,  852,  852,  852,  852,  854,  854,
      854,  854,  854,  854,  855,  855,  855,  855,  855,  855,
      857,  857,  857,  857,  857,  857,  858,  858,  858,  858,
      858,  858,  533,  533,  533, 1352,  533,  533,  532,  532,
      532,  532, 1352,  532,  859,  859,  859,  859,  859,  859,
      861,  861,  861,  861,  861,  861,  864,  864,  864,  864,

      864,  864,  867,  867,  867,  867,  867,  867,  872,  872,
      872,  872,  872,  872,  560,  560,  560,  560,  560,  560,
      873,  873,  873,  873,  873,  873,  555,  555,  555,  555,
      555,  555,  874,  874,  874,  874,  874,  874,  875,  875,
      875,  875,  875,  875,  876,  876,  876,  876,  876,  876,
      878,  878,  878,  878,  878,  878,  879,  879,  879,  879,
      879,  879,  590,  590,  590,  590,  590,  590,  881,  881,
      881,  881,  881,  881,  583,  583,  583,  583,  583,  583,
      882,  882,  882,  882,  882,  882,  883,  883,  883,  883,
      883,  883,  884,  884,  884,  884,  884,  884,  886,  886,

      886,  886,  886,  886,  887,  887,  887,  887,  887,  887,
      991,  991,  991,  991,  991,  991,  992,  992,  992,  992,
      992,  992,  994,  994,  994,  994,  994,  994,  995,  995,
      995,  995,  995,  995,  683,  683,  683, 1352,  683,  683,
      996,  996,  996,  996,  996,  996,  998,  998,  998,  998,
      998,  998, 1001, 1001, 1001, 1001, 1001, 1001, 1004, 1004,
     1004, 1004, 1004, 1004, 1009, 1009, 1009, 1009, 1009, 1009,
     1014, 1014, 1014, 1014, 1014, 1014,  714,  714,  714,  714,
      714,  714,  714, 1352, 1352,  714, 1352, 1352,  714, 1016,
     1016, 1016, 1016, 1016, 1017, 1017, 1017, 1017,  714,  714,

      714,  714,  714,  714, 1019, 1019, 1019, 1019, 1019, 1019,
     1021, 1021, 1021, 1021, 1021, 1021, 1023, 1023, 1023, 1023,
     1023, 1023,   85, 1352,   85,   85,   85,   85,   85, 1352,
     1352,   85, 1352, 1352,   85,   85,   85,   85,   85,   85,
       85,  354,  354,  354,  354,  354,  354,   98, 1352,   98,
       98,   98,   98,   98, 1352, 1352,   98, 1352, 1352,   98,
       98,   98,   98,   98,   98,   98,  363,  363,  363,  363,
      363,  363,  741,  741,  741,  741,  741,  741, 1025, 1025,
     1025, 1025, 1025, 1025,  736,  736,  736,  736,  736,  736,
     1026, 1026, 1026, 1026, 1026, 1026, 1027, 1027, 1027, 1027,

     1027, 1027, 1028, 1028, 1028, 1028, 1028, 1028, 1030, 1030,
     1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1031, 1031,
     1032, 1032, 1032, 1032, 1032, 1032,  762,  762,  762,  762,
      762,  762,  762, 1352, 1352,  762, 1352, 1352,  762, 1034,
     1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035,  762,  762,
      762,  762,  762,  762, 1037, 1037, 1037, 1037, 1037, 1037,
     1039, 1039, 1039, 1039, 1039, 1039, 1041, 1041, 1041, 1041,
     1041, 1041,  131, 1352,  131,  131,  131,  131,  131, 1352,
     1352,  131, 1352, 1352,  131,  131,  131,  131,  131,  131,
      131,  417,  417,  417,  417,  417,  417,  785,  785,  785,

      785,  785,  785, 1043, 1043, 1043, 1043, 1043, 1043,  780,
      780,  780,  780,  780,  780, 1044, 1044, 1044, 1044, 1044,
     1044, 1045, 1045, 1045, 1045, 1045, 1045, 1046, 1046, 1046,
     1046, 1046, 1046, 1048, 1048, 1048, 1048, 1048, 1048, 1049,
     1049, 1049, 1049, 1049, 1049, 1050, 1050, 1050, 1050, 1050,
     1050,  828,  828,  828,  828,  828,  828, 1059, 1059, 1059,
     1059, 1059, 1059,  821,  821,  821,  821,  821,  821, 1060,
     1060, 1060, 1060, 1060, 1060, 1061, 1061, 1061, 1061, 1061,
     1061, 1062, 1062, 1062, 1062, 1062, 1062, 1064, 1064, 1064,
     1064, 1064, 1064, 1065, 1065, 1065, 1065, 1065, 1065, 1066,

     1066, 1066, 1066, 1066, 1066,  197,  197,  197,  197,  197,
     1352, 1352,  197, 1352, 1352,  197,  197,  197,  197,  197,
      197,  197,  524,  524,  524,  524,  524,  524,  859,  859,
      859,  859,  859,  859, 1067, 1067, 1067, 1067, 1067, 1067,
      854,  854,  854,  854,  854,  854, 1068, 1068, 1068, 1068,
     1068, 1068, 1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070,
     1070, 1070, 1070, 1070, 1072, 1072, 1072, 1072, 1072, 1072,
     1073, 1073, 1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074,
     1074, 1074,  880,  880,  880, 1075, 1075, 1075, 1075, 1075,
     1075, 1148, 1148, 1148, 1148, 1148, 1148, 1149, 1149, 1149,

     1149, 1149, 1149, 1151, 1151, 1151, 1151, 1151, 1151, 1152,
     1152, 1152, 1152, 1152, 1152,  968,  968,  968, 1352,  968,
      968, 1153, 1153, 1153, 1153, 1153, 1153, 1155, 1155, 1155,
     1155, 1155, 1155, 1157, 1157, 1157, 1157, 1157, 1157, 1160,
     1160, 1160, 1160, 1160, 1160, 1163, 1163, 1163, 1163, 1163,
     1163, 1168, 1168, 1168, 1168, 1168, 1168,  996,  996,  996,
      996,  996,  996, 1169, 1169, 1169, 1169, 1169, 1169,  991,
      991,  991,  991,  991,  991, 1170, 1170, 1170, 1170, 1170,
     1170, 1171, 1171, 1171, 1171, 1171, 1171, 1172, 1172, 1172,
     1172, 1172, 1172, 1174, 1174, 1174, 1174, 1174, 1174, 1175,

     1175, 1175, 1175, 1175, 1175,  595,  595,  595,  595,  595,
      595,  714,  714,  714,  714,  714,  714,  714, 1352, 1352,
      714, 1352, 1352,  714, 1017, 1017, 1017, 1017, 1017, 1017,
      714,  714,  714,  714,  714,  714, 1180, 1180, 1180, 1180,
     1180, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182,
     1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183, 1183,
     1184, 1184, 1184, 1184, 1184, 1184,  762,  762,  762,  762,
      762,  762,  762, 1352, 1352,  762, 1352, 1352,  762, 1035,
     1035, 1035, 1035, 1035, 1035,  762,  762,  762,  762,  762,
      762, 1186, 1186, 1186, 1186, 1186, 1186, 1187, 1187, 1187,

     1187, 1187, 1187, 1188, 1188, 1188, 1188, 1188, 1188, 1189,
     1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190,
     1190, 1191, 1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192,
     1192, 1192, 1192, 1155, 1155, 1155, 1155, 1155, 1155, 1240,
     1240, 1240, 1240, 1240, 1240, 1148, 1148, 1148, 1148, 1148,
     1148, 1241, 1241, 1241, 1241, 1241, 1241, 1242, 1242, 1242,
     1242, 1242, 1242, 1243, 1243, 1243, 1243, 1243, 1243, 1245,
     1245, 1245, 1245, 1245, 1245, 1246, 1246, 1246, 1246, 1246,
     1246, 1247, 1247, 1247, 1247, 1247, 1247,  583,  583,  583,
      583,  583,  583,  714,  714,  714,  714,  714,  714,  714,

     1352, 1352,  714, 1352, 1352,  714,  714,  714,  714,  714,
      714,  714, 1017, 1017, 1017, 1017, 1017, 1017,  762,  762,
      762,  762,  762,  762,  762, 1352, 1352,  762, 1352, 1352,
      762,  762,  762,  762,  762,  762,  762, 1035, 1035, 1035,
     1035, 1035, 1035, 1287, 1287, 1287, 1287, 1287, 1287,  595,
      595,  595,  595,  595,  595,  583,  583,  583,  583,  583,
      583,    3, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352

    } ;

static yyconst flex_int16_t yy_chk[9800] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    8,   10,
        5, 1361,    8,    9,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   10, 1347,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   15,   15,   15,   15, 1346,   52,   52,
       52,   52,  236,   18,   18,   15,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,  338,  338,   20,   20,

        9,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   81,  236, 1344,   81,   20,   64,   64,   64,   64,
       64,   64,   64,   64,   65,   65,   65,   65,   65,   65,
       65,   65,   67,   67,   67,   67,   67,   67,   69, 1330,
        9,   52,   70,   70,   70,   70,   69,   70,   78,   78,
       78,   78,   78, 1329,  166,    9,  166,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  402,  402,   11,   11,

     1299,   11,   11,   11,   11,   11,   11,   11,   11, 1281,
       11,   11,   11,   14,   23, 1280,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,  117,  154,   32,   32,
      185,   32,  219, 1279,  117,  154,   32,   23,  185,   32,
      219,   32,   32,   38,   38,   32,   38,  237,   32,  238,
      239,   32,  241, 1278,   38,  264,   38,   38,   32,   32,
       38,   32,  251,   38, 1263,   14,   32,   23, 1253,   32,
      251,   32,   32,   38,   38,   32,   38,  237,   32,  238,
      239,   32,  241,  252,   38,  264,   38,   38,  456,  456,
       38,  252, 1251,   38,   72,   72,   72,   72,   72,   72,

       72,   72,   72,  512,  512,   14,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       14, 1250,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,  563,  563,   17,   17, 1248,   17,   17,   17,   17,
       17,   17,   17,   17,  265,   17,   17,   17,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      266, 1230,   24,   24,  265,   24,   24,   24,   24,   24,
       24,   24,   24, 1229,   24,   24,   24,   26,   26,   33,
      267,   33,   33,  115,  115,  115,  115,  115,  115,   33,
      266,   33,   33, 1228,   33,   33,  269,  270,   33, 1227,
      118,  118,  118,  118,   40,  118,   40,  240,  341,   33,
      267,   33,   33,  341,   40,  240,   40,  999,  999,   33,
       40,   33,   33,   40,   33,   33,  269,  270,   33,  126,
      126,  126,  126,  126,   40, 1204,   40,  240,   74,   74,
      144,  144,  144,  144,   40,  240,   40,   26,   74, 1162,
       40, 1129,  144,   40, 1129,   74,   74,   74,   74,   74,

     1131, 1440,   26, 1440,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29, 1130, 1178,   29,   29, 1128,   29,   29,
       29,   29,   29,   29,   29,   29, 1178,   29,   29,   29,
       31,   31, 1178,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,  152,  152,  152,  152,  152,  152,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31, 1201, 1201, 1201, 1201,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,  163,  163,  163,  163,  163,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31, 1096,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31, 1035,   31,   31,   31,   34,
       34,  272,   34,   34,  273,  275,  276,   34,  274,  273,
       34, 1017,   34,  382,  274,   34,   34,  277,  277,   34,

      274,  382,   87,  155,  155,  155,  155,   87,  155,   34,
       34,  272,   34,   34,  273,  275,  276,   34,  274,  273,
       34,   35,   34,   35,  274,   34,   34,  277,  277,   34,
      274,   35, 1014,   35, 1564, 1564, 1011,   35,  593,  593,
       35,  278,   35,   97,   97,   97,   97,   97,   97,   97,
       36,   35,   36,   35, 1003,  593,  985,   36,  976,   87,
       36,   35,   36,   35,   87,   36,   36,   35,   87,   36,
       35,  278,   35,  969,  279,  280,   87,  928,  880,   87,
       36,   87,   36,  186,  186,  186,  186,   36,  186,  281,
       36,   37,   36,   37,  283,   36,   36,  866,  284,   36,

      282,   37,  287,   37,  279,  280,   37,   37,   48,  835,
       37,  792,   48,  748,  282,   48,   48,  286,  286,  281,
      289,   37,   48,   37,  283,  707,   48,   48,  284,  706,
      282,   37,  287,   37,  704,  703,   37,   37,   48,   39,
       37,   39,   48,   39,  282,   48,   48,  286,  286,   39,
      289,   39,   48,  290,   39,   39,   48,   48,   39,   91,
       91,   91,   91,   91,   91,   91,   91,   91,  697,   39,
      667,   39,  436,   39,  194,  194,  194,  194,  194,   39,
      436,   39,  645,  290,   39,   39,  597,  567,   39,   41,
       41,   41,   41,  220,  220,  220,  220,   41,  220,  291,

       41,  292,   41,   41,  549,  541,   41,  744,  744,   41,
      102,  102,  102,  102,  102,  102,  102,  102,  102,   41,
       41,   41,   41,  293,  744,  534,  524,   41,  516,  291,
       41,  292,   41,   41,   42,   42,   41,   42,   42,   41,
      295,  296,   42,  298,  300,   42,  301,   42,   42,   43,
       43,   42,   43,  293,   42,  228,  228,  228,  228,  228,
       43,  302,   43,   43,   42,   42,   43,   42,   42,   43,
      295,  296,   42,  298,  300,   42,  301,   42,   42,   43,
       43,   42,   43,  498,   42,  261,  261,  261,  261,  261,
       43,  302,   43,   43,  489,  304,   43,   50,   44,   43,

       44,   50,   44,  299,   50,   50,  299,  306,   44,  482,
       44,  467,   44,   44,   44,   50,   50,   44,  108,  108,
      108,  108,  108,  108,  108,  304,  460,   50,   44,  442,
       44,   50,   44,  299,   50,   50,  299,  306,   44,   45,
       44,   45,   44,   44,   44,   50,   50,   44,  307,   45,
      434,   45,  297,  427,   45,   45,  303,  309,   45,  297,
      303,  310,  305,   46,   46,  305,   46,   46,  417,   45,
      406,   45,  388,  380,   46,  313,   46,   46,  307,   45,
       46,   45,  297,   46,   45,   45,  303,  309,   45,  297,
      303,  310,  305,   46,   46,  305,   46,   46,  183,  183,

      183,  183,  183,  183,   46,  313,   46,   46,  373,  363,
       46,  354,  491,   46,   47,   47,  315,   47,   47,  317,
      491,   47,   47,  318,  343,   47,  319,   47,  327,  326,
      294,   47,   47,   47,   47,  112,  112,  112,  112,  112,
      112,  112,  112,  258,   47,   47,  315,   47,   47,  317,
      311,   47,   47,  318,  312,   47,  319,   47,   49,   49,
       49,   47,   47,   47,   47,  312,  311,  320,   49,  321,
       49,  604,  308,   49,   49,   51,  605,   49,  606,   51,
      311,  308,   51,   51,  312,  308,  308,  249,   49,   49,
       49,  242,  233,   51,   51,  312,  311,  320,   49,  321,

       49,  604,  308,   49,   49,   51,  605,   49,  606,   51,
       57,  308,   51,   51,   57,  308,  308,   57,   57,  788,
      788,   57,  492,   51,   51,  543,   57,   58,   57,   57,
      492,   58,  607,  543,   58,   58,  788,  831,  831,  231,
       57,   58,  608,  225,   57,   58,   58,   57,   57,  122,
      122,   57,  691,  191,  831,  978,   57,   58,   57,   57,
      691,   58,  607,  978,   58,   58,  122,  122,  122,  122,
      122,   58,  608,   58,  160,   58,   58,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   85,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   93,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,  113,  113,  113,  113,  113,  113,  113,  113,
      132,  129,  123,   98,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,   98,   85,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  143,  143,  143,  143,  143,  143,  143,   85,
      120,  120,  120,  120,  120,  120,  120,  120,  120,   86,

      383,  383,  383,  383,   85,  383,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  209,  209,  209,  209,  209,  209,  209,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109, 1209, 1209, 1209, 1209,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  391,  391,  391,  391,  391,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,   83,  109,  109,  109,   75,  109,  109,  109,
      109,  109,  109,  109,  109,   60,  109,  109,  109,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  131,  133,
      322,  322,  322,  322,  133,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  217,  217,  217,  217,  217,  217,   55,
      131,  159,  159,   54,   28,   13,  133,  437,  437,  437,
      437,  133,  437,  322,   12,  133,  979,    7,  159,  159,
      159,  159,  159,  133,  979,    3,  133,    0,  133,  149,
      149,  149,  149,  149,  149,  149,  149,    0,    0,    0,
      131,  150,  150,  150,  150,  150,  150,  150,  150,  248,
      248,  248,  248,  248,  248,  131,    0,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,  253,  253,  253,  253,  253,  253,
        0,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,    0,    0,    0,    0,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  445,  445,  445,  445,
      445,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,    0,  146,  146,  146,    0,  146,  146,

      146,  146,  146,  146,  146,  146,    0,  146,  146,  146,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  168,    0,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      171,  168,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  609,  171,  339,  339,  339,  339,  339,  339,
        0,  168,  610,  173,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  180,  180,  180,  180,  180,  180,
      180,  180,  609,  171,    0,  174,  347,  347,  347,  347,
      347,  347,  610,  173,  175,    0,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  181,  181,  181,  181,
      181,  181,  181,  181,  176,  174,  176,  175,    0,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  379,  379,
      379,  379,  379,  379,  190,  190,    0,  175,  177,  177,

        0,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  190,  190,  190,  190,  190,  612,    0,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  613,  614,  615,  612,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  613,  614,  615,    0,  197,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

        0,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  198,  177,  177,  177,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  197,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  501,  501,  501,  501,
      501,  197,    0,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
        0,    0,  198,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  198,    0,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  403,  403,  403,  403,  403,  403,    0,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,    0,    0,    0,    0,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  211,  211,  552,  552,  552,  552,  552,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
        0,  211,  211,  211,    0,  211,  211,  211,  211,  211,
      211,  211,  211,    0,  211,  211,  211,  214,  214,  214,
      214,  214,  214,  214,  214,  215,  215,  215,  215,  215,
      215,  215,  215,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  224,  224,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,    0,  224,
      224,  224,  224,  224,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  232,
      232,    0,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  410,  410,  410,  410,  410,  410,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  617,  618,  619,  620,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  617,  618,  619,  620,    0,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,    0,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  621,  232,  232,  232,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
        0,    0,  234,  234,  621,  234,  234,  234,  234,  234,
      234,  234,  234,    0,  234,  234,  234,  244,  244,  244,
      244,  244,  244,  244,  244,  246,  246,  246,  246,  246,
      246,  246,  246,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  257,  257,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,    0,  257,
      257,  257,  257,  257,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  271,
      622,  288,  623,  624,  316,  625,  626,  627,  288,  316,
      628,  288,  271,  288,  271,  316,  629,  630,  271,  288,
      375,  375,  375,  375,  375,  375,  375,  375,    0,  271,
      622,  288,  623,  624,  316,  625,  626,  627,  288,  316,
      628,  288,  271,  288,  271,  316,  629,  630,  271,  288,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,    0,    0,  325,  325,    0,  325,  325,  325,
      325,  325,  325,  325,  325,    0,  325,  325,  325,  352,
      377,  377,  377,  377,  377,  377,  377,  377,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  387,  387,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,    0,  387,  387,  387,  387,  387,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,    0,    0,  352,  429,  429,  429,
      429,  429,  429,  429,  429,  431,  431,  431,  431,  431,
      431,  431,  431,  433,  433,  433,  433,  433,  433,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  441,  441,
      457,  457,  457,  457,  457,  457,  352,  464,  464,  464,
      464,  464,  464,    0,    0,  441,  441,  441,  441,  441,
        0,  352,    0,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      488,  488,  488,  488,  488,  488,    0,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  631,  632,  633,  635,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  631,  632,  633,  635,    0,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,    0,
      371,  371,  371,    0,  371,  371,  371,  371,  371,  371,
      371,  371,    0,  371,  371,  371,  415,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  468,  468,  468,  468,

      468,  468,  468,  468,  468,  468,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  636,  468,  415,  544,
      544,  544,  544,  470,  544,  470,    0,  469,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  484,  484,
      484,  484,  484,  484,  484,  484,  636,  468,  493,  493,
      493,  493,  493,  493,  473,    0,  473,  469,  415,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  692,
      692,  692,  692,  415,  692,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  513,  513,  513,  513,  513,  513,    0,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  637,  638,  639,  640,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  637,  638,  639,  640,    0,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,    0,  425,  425,  425,    0,  425,  425,  425,  425,

      425,  425,  425,  425,  641,  425,  425,  425,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  642,  471,
        0,    0,    0,    0,  641,  474,    0,  474,    0,  472,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      486,  486,  486,  486,  486,  486,  486,  486,  642,  471,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  472,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      520,  520,  520,  520,  520,  520,    0,  476,    0,  476,
      643,  475,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  536,  536,  536,  536,  536,  536,  536,  536,
      643,  475,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  479,  479,    0,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  540,  540,  540,  540,  540,
      540,    0,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  646,  647,  648,
      649,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  479,  646,  647,  648,
      649,    0,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,    0,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,    0,  479,  479,
      479,  497,  497,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,    0,  497,  497,
      497,  497,  497,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  564,  564,

      564,  564,  564,  564,    0,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      650,  653,  654,  655,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      650,  653,  654,  655,    0,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,    0,  532,  532,
      532,    0,  532,  532,  532,  532,  532,  532,  532,  532,

        0,  532,  532,  532,  538,  538,  538,  538,  538,  538,
      538,  538,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  548,  548,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,    0,  548,  548,
      548,  548,  548,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  571,  571,
      571,  571,  571,  571,  575,  575,    0,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  594,  594,
      594,  594,  594,  594,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  656,
      657,  658,  659,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  656,
      657,  658,  659,    0,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  660,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  611,
      575,  575,  575,  601,  601,  601,  601,  601,  601,  661,
      662,  663,  664,  665,  611,  611,  660,  666,  668,  669,

      671,  662,  670,  670,  673,  674,  675,  676,  677,  611,
      670,  679,  680,  681,  682,  889,  670,    0,    0,  661,
      662,  663,  664,  665,  611,  611,    0,  666,  668,  669,
      671,  662,  670,  670,  673,  674,  675,  676,  677,    0,
      670,  679,  680,  681,  682,  889,  670,  683,  683,    0,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      689,  689,  689,  689,  689,  689,    0,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,    0,    0,    0,    0,  683,  683,  683,  683,

      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  700,  700,  700,  700,  700,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,    0,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,    0,  683,  683,  683,  686,  686,  686,  686,
      686,  686,  686,  686,  687,  687,  687,  687,  687,  687,
      687,  687,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  696,  696,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,    0,  696,  696,
      696,  696,  696,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  714,  716,
        0,    0,    0,    0,  716,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  726,  726,  726,  726,  726,  726,  726,
      949,  949,  949,    0,  949,  714,  716,  862,  862,    0,
        0,  716,    0,    0,  890,  716,  745,  745,  745,  745,

      745,  745,    0,  716,  862,    0,  716,    0,  716,  752,
      752,  752,  752,  752,  752,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  890,  714,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      714,    0,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  715,
      731,  764,    0,    0,    0,    0,  764,  774,  774,  774,
      774,  774,  774,  774,    0,  731,    0,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  789,
      789,  789,  789,  789,  789,    0,  715,    0,  764, 1158,
     1158,    0,    0,  764,    0,  891,    0,  764,  796,  796,
      796,  796,  796,  796,    0,  764, 1158,  806,  764,  806,
      764,    0,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  808,    0,  808,  891,  715,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,    0,    0,    0,
        0,  715,    0,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      727,  807,  807,  807,  807,  807,  807,  807,  807,  807,

      807,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  893,  807,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  811,    0,  811,    0, 1316,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  894, 1316,
        0,  893,  807,    0,    0, 1316,    0,  727,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  832,  832,
      832,  832,  832,  832,    0,  813,    0,  813,  894,  812,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      839,  839,  839,  839,  839,  839,    0,  727,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,    0,  812,

        0,    0,  727,    0,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  863,  863,  863,  863,  863,  863,    0,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  895,  896,  897,  899,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  895,  896,  897,  899,    0,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
        0,  735,  735,  735,  849,  735,  735,  735,  735,  735,
      735,  735,  735,    0,  735,  735,  735,  762,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,    0,  762,
        0,    0,    0,  849,  870,  870,  870,  870,  870,  870,

      900,  901,  902,  903,  904,  905,  907,  909,  849,  910,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,    0,    0,  762,
      900,  901,  902,  903,  904,  905,  907,  909,  911,  910,
      913,  914,  915,  916,  762,  917,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  763,  919,  920,  921,  922,  911,  923,
      913,  914,  915,  916,  924,  917,  925,  926,  929,  930,
      930,  931,  933,  934,  935,    0,  936,  937,  938,  940,
      941,  942,  943,  944,  919,  920,  921,  922,  945,  923,

      946,  947,  948,  950,  924,  951,  925,  926,  929,  930,
      930,  931,  933,  934,  935,  763,  936,  937,  938,  940,
      941,  942,  943,  944,  952,    0,  953,  955,  945,  956,
      946,  947,  948,  950,  954,  951,  957,  958,  954,  959,
        0,  960,  971,  971,  971,  971,  971,  971,  971,  971,
        0,    0,    0,    0,  952,  763,  953,  955,    0,  956,
      961,  962,  963,    0,  954,    0,  957,  958,  954,  959,
      763,  960,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  775,
      961,  962,  963,  973,  973,  973,  973,  973,  973,  973,

      973,  975,  975,  975,  975,  975,  975,  980,  980,  980,
      980,  980,  980,  982,  982,  982,  982,  982,  982,  982,
      982,  982,    0,    0,    0,  984,  984,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  775,  984,  984,  984,  984,  984,  988,  988,  988,
      988,  988,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989, 1000, 1000, 1000,
     1000, 1000, 1000, 1007, 1007, 1007, 1007, 1007, 1007,    0,
        0,  775, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051,    0,    0,    0, 1076,  775, 1080,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779, 1076,    0, 1080, 1081, 1082,
     1083,    0,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779, 1085, 1081, 1082,
     1083,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779, 1085, 1086,    0,
        0,    0,  779,  779,  779,  779,  779,  779,  779,  779,

      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779, 1087,  779,  779,  779, 1086,  779,
      779,  779,  779,  779,  779,  779,  779,    0,  779,  779,
      779,  820,  820,    0,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820, 1087,    0, 1088, 1089, 1090, 1091,
        0,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820, 1088, 1089, 1090, 1091,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820,  820,  820,  820,  820,    0,    0,    0,    0,
        0,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820, 1092,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,    0,  820,  820,  820,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
        0,    0, 1093, 1092, 1097, 1099,    0,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853, 1093, 1100, 1097, 1099,  853,  853,  853,  853,

      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,    0, 1100,    0,    0,    0,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,    0,
      853,  853,  853, 1102,  853,  853,  853,  853,  853,  853,
      853,  853,    0,  853,  853,  853,  881,  881,    0,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
        0, 1103, 1105, 1102, 1109,    0,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,

      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881, 1103, 1105, 1111, 1109,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,    0,    0, 1111,    0,    0,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881, 1114,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,    0,  881,  881,  881,  966,  966,    0,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966, 1114,    0,

     1115, 1117, 1119, 1122,    0,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
     1115, 1117, 1119, 1122,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
        0,    0,    0,    0,    0,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,    0,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

        0,  966,  966,  966, 1010, 1010,    0, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,    0, 1123,
     1124, 1125, 1126,    0, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1123,
     1124, 1125, 1126, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,    0,
        0,    0,    0,    0, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,

     1010, 1010, 1010, 1010, 1010, 1010, 1127, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1177,
     1010, 1010, 1010, 1012, 1012,    0,    0, 1177, 1013, 1013,
        0,    0,    0, 1012,    0, 1177, 1127,    0, 1013,    0,
     1012, 1012, 1012, 1012, 1012, 1013, 1013, 1013, 1013, 1013,
     1015, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1132, 1133, 1135, 1136, 1137, 1138, 1015, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1139, 1140,
     1144, 1132, 1133, 1135, 1136, 1137, 1138, 1159, 1159, 1159,
     1159, 1159, 1159,    0,    0,    0,    0, 1015, 1166, 1166,
     1166, 1166, 1166, 1166,    0,    0,    0,    0, 1139, 1140,
     1144, 1193, 1015, 1194, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1193,    0, 1194, 1196, 1197, 1199,    0, 1025, 1025,

     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1200, 1196, 1197, 1199, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1200, 1202,    0,    0,    0, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1203, 1025, 1025, 1025, 1202, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1207, 1025, 1025, 1025, 1033, 1210, 1211,

     1212, 1213, 1214, 1215, 1217, 1219, 1220, 1222, 1224, 1225,
     1203, 1233, 1234, 1236, 1238, 1239, 1254, 1255, 1256,    0,
     1257, 1258, 1261, 1207, 1262, 1264, 1267, 1268, 1210, 1211,
     1212, 1213, 1214, 1215, 1217, 1219, 1220, 1222, 1224, 1225,
     1269, 1233, 1234, 1236, 1238, 1239, 1254, 1255, 1256, 1033,
     1257, 1258, 1261, 1272, 1262, 1264, 1267, 1268, 1274,    0,
     1276, 1284, 1285, 1286, 1265, 1265, 1265, 1265, 1315, 1292,
     1269, 1295, 1296,    0,    0, 1300, 1315, 1288, 1288,    0,
        0,    0,    0, 1272, 1315,    0,    0, 1288, 1274, 1033,
     1276, 1284, 1285, 1286, 1288, 1288, 1288, 1288, 1288, 1292,

        0, 1295, 1296, 1265, 1033, 1300, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1265,    0, 1301, 1302, 1303, 1304,    0,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1301, 1302, 1303, 1304, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043,    0, 1307,    0,    0,    0,

     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1312, 1043, 1043, 1043, 1307, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043,    0, 1043, 1043, 1043, 1059,
     1059,    0, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1312,    0, 1314, 1318, 1319, 1320,    0, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1314, 1318, 1319, 1320, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,

     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059,    0,    0,    0,    0,    0, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1321, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059, 1059, 1059,    0, 1059, 1059, 1059, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,    0,    0,
     1322, 1321, 1325, 1331,    0, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

     1322, 1332, 1325, 1331, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
        0, 1332,    0,    0,    0, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067,    0, 1067, 1067,
     1067, 1333, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
        0, 1067, 1067, 1067, 1075, 1075,    0, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,    0, 1334,
     1335, 1333, 1336,    0, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1334,
     1335, 1338, 1336, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,    0,
        0, 1338,    0,    0, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1339, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,    0,
     1075, 1075, 1075, 1147, 1147,    0, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1339,    0, 1340, 1348,
     1349, 1350,    0, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1340, 1348,
     1349, 1350, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,    0, 1260,
     1260, 1260, 1260, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147,    0, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1260, 1147,
     1147, 1147, 1180, 1289, 1289,    0,    0,    0,    0,    0,
        0,    0,    0, 1289,    0,    0, 1260,    0,    0,    0,
     1289, 1289, 1289, 1289, 1289,    0,    0,    0, 1260,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1260,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1180,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1180,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1180,    0, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184,    0,    0,    0,    0,    0,    0,    0,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184,    0,    0,    0,    0, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,

     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184,    0,    0,    0,    0,    0,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184,    0, 1184, 1184, 1184,    0, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184,    0, 1184, 1184, 1184, 1186,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1186,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1186,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1186,    0, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190,    0,    0,    0,    0,    0,

        0,    0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190,    0,    0,    0,
        0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190,    0,    0,    0,
        0,    0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190,    0, 1190, 1190, 1190,    0, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190,    0, 1190, 1190,

     1190, 1191, 1191,    0, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191,    0,    0,    0,    0,    0,    0,
        0, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191,    0,    0,    0,    0,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191,    0,    0,    0,    0,
        0, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191,    0, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191,    0, 1191, 1191, 1191,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
        0,    0,    0,    0,    0,    0,    0, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192,    0,    0,    0,    0, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192,    0,    0,    0,    0,    0, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,    0,
     1192, 1192, 1192,    0, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192,    0, 1192, 1192, 1192, 1353,    0, 1353, 1353,
     1353, 1353, 1353,    0,    0, 1353,    0,    0, 1353, 1354,
        0, 1354, 1354, 1354, 1354, 1354,    0,    0, 1354,    0,
        0, 1354, 1355, 1355, 1355,    0, 1355, 1355, 1355, 1355,
     1355, 1356,    0, 1356, 1356, 1356, 1356, 1356,    0,    0,
     1356,    0,    0, 1356, 1357, 1357, 1357,    0, 1357, 1357,
     1357, 1357, 1357, 1358, 1358, 1358,    0, 1358, 1358, 1358,

     1358, 1358, 1359, 1359, 1359, 1359, 1359,    0,    0, 1359,
        0,    0, 1359, 1360, 1360, 1360,    0, 1360, 1360, 1360,
     1360, 1360, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363,
     1363, 1363, 1363, 1363, 1364, 1364, 1364, 1364, 1364, 1364,
     1365, 1365, 1365, 1365, 1365, 1365, 1366, 1366, 1366,    0,
     1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368,
     1368, 1368, 1368, 1368, 1369, 1369, 1369, 1369, 1369, 1369,
     1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371,
     1371, 1371, 1372,    0, 1372, 1372, 1372, 1372, 1372,    0,
        0, 1372,    0,    0, 1372, 1373, 1373, 1373, 1373, 1373,

     1374, 1374, 1374, 1374, 1375, 1375, 1375, 1375, 1375, 1375,
     1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377, 1377, 1377,
     1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378, 1379,    0,
     1379, 1379, 1379, 1379, 1379,    0,    0, 1379,    0,    0,
     1379, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381, 1381,
     1382, 1382, 1382, 1382, 1382, 1382, 1383, 1383, 1383, 1383,
     1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1385, 1385,
     1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386, 1386, 1386,
     1387, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388,
     1388, 1388, 1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390,

     1390,    0, 1390, 1390, 1391, 1391, 1391, 1391, 1391, 1391,
     1392, 1392, 1392, 1392, 1392, 1392, 1393, 1393, 1393, 1393,
     1393, 1393, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395,
     1395, 1395, 1395, 1395, 1396,    0, 1396, 1396, 1396, 1396,
     1396,    0,    0, 1396,    0,    0, 1396, 1397, 1397, 1397,
     1397, 1397, 1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399,
     1399, 1399, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401,
     1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402, 1402, 1402,
     1403, 1403, 1403, 1403, 1403, 1403, 1404, 1404, 1404, 1404,
     1404, 1404, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406,

     1406, 1406, 1406, 1406, 1407, 1407, 1407,    0, 1407, 1407,
     1408, 1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409,
     1409, 1409, 1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411,
     1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412,
     1413, 1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414,
     1414, 1414, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416,
     1416, 1416, 1416, 1416, 1417, 1417, 1417,    0, 1417, 1417,
     1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419, 1419,
     1419, 1419, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421,
     1421, 1421, 1421, 1421, 1422, 1422, 1422, 1422, 1422, 1422,

     1423, 1423, 1423, 1423, 1423,    0,    0, 1423,    0,    0,
     1423, 1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425,
     1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427,
     1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1429,
     1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430,
     1431, 1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432,
     1432, 1432, 1433, 1433, 1433, 1433, 1433, 1433, 1434, 1434,
     1434,    0, 1434, 1434, 1435, 1435, 1435, 1435, 1435, 1435,
     1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437,
     1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438, 1439, 1439,

     1439, 1439, 1439, 1439, 1441, 1441, 1441,    0, 1441, 1441,
     1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442, 1443,
     1443, 1443, 1443, 1443, 1443, 1444, 1444, 1444, 1444, 1444,
     1444, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446,
        0, 1446, 1446, 1447, 1447, 1447, 1447, 1447, 1447, 1448,
     1448, 1448, 1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449,
     1449, 1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451,
     1451, 1451, 1451, 1452, 1452, 1452, 1452, 1452, 1452, 1453,
     1453, 1453,    0, 1453, 1453, 1453, 1453, 1453, 1454, 1454,
     1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455,

     1456, 1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457,
     1457, 1457, 1458, 1458, 1458, 1458, 1458, 1458, 1459, 1459,
     1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460,
     1461, 1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462,
     1462, 1462, 1462,    0,    0, 1462,    0,    0, 1462, 1463,
     1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464,
     1464, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466,
     1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1468,
     1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469,
     1469, 1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471,

     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1472, 1473,
     1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474,
     1474, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476,
     1476, 1476, 1476, 1477, 1477, 1477, 1477, 1477, 1477, 1478,
     1478, 1478, 1478, 1478, 1478, 1479, 1479, 1479,    0, 1479,
     1479, 1480, 1480, 1480, 1480,    0, 1480, 1481, 1481, 1481,
     1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1482, 1483,
     1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486,
     1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487, 1487, 1488,

     1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489,
     1489, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491,
     1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492, 1492, 1493,
     1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494, 1494, 1494,
     1494, 1494,    0,    0, 1494,    0,    0, 1494, 1495, 1495,
     1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496, 1496, 1496,
     1497, 1497, 1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498,
     1498, 1498, 1499, 1499, 1499, 1499, 1499, 1499, 1500, 1500,
     1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501,
     1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503,

     1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504, 1505, 1505,
     1505,    0, 1505, 1505, 1506, 1506, 1506, 1506,    0, 1506,
     1507, 1507, 1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508,
     1508, 1508, 1509, 1509, 1509, 1509, 1509, 1509, 1510, 1510,
     1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511, 1511,
     1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513,
     1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515,
     1515, 1515, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516,
     1517, 1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518, 1518,
     1518, 1518, 1519, 1519, 1519, 1519, 1519, 1519, 1520, 1520,

     1520, 1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521, 1521,
     1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523, 1523,
     1523, 1523, 1524, 1524, 1524,    0, 1524, 1524, 1525, 1525,
     1525, 1525, 1525, 1525, 1526, 1526, 1526, 1526, 1526, 1526,
     1527, 1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528, 1528,
     1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1530, 1530,
     1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531, 1531, 1531,
     1532, 1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533, 1533,
     1533, 1533, 1534, 1534, 1534, 1534, 1534, 1534, 1535, 1535,
     1535, 1535, 1535, 1535, 1536, 1536, 1536, 1536, 1536, 1536,

     1537, 1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538,
     1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540,
     1540, 1540, 1540, 1540, 1541, 1541, 1541, 1541, 1541, 1541,
     1542, 1542, 1542, 1542, 1542, 1542, 1543, 1543, 1543, 1543,
     1543, 1543, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1545,
     1545, 1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546, 1546,
     1547, 1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548,
     1548, 1548, 1549, 1549, 1549,    0, 1549, 1549, 1550, 1550,
     1550, 1550,    0, 1550, 1551, 1551, 1551, 1551, 1551, 1551,
     1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553, 1553,

     1553, 1553, 1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555,
     1555, 1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556, 1556,
     1557, 1557, 1557, 1557, 1557, 1557, 1558, 1558, 1558, 1558,
     1558, 1558, 1559, 1559, 1559, 1559, 1559, 1559, 1560, 1560,
     1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561, 1561, 1561,
     1562, 1562, 1562, 1562, 1562, 1562, 1563, 1563, 1563, 1563,
     1563, 1563, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566,
     1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567, 1567, 1567,
     1568, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569, 1569,
     1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571,

     1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1572,
     1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574,
     1574, 1574, 1575, 1575, 1575, 1575, 1575, 1575, 1576, 1576,
     1576, 1576, 1576, 1576, 1577, 1577, 1577,    0, 1577, 1577,
     1578, 1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579,
     1579, 1579, 1580, 1580, 1580, 1580, 1580, 1580, 1581, 1581,
     1581, 1581, 1581, 1581, 1582, 1582, 1582, 1582, 1582, 1582,
     1583, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584,
     1584, 1584, 1584,    0,    0, 1584,    0,    0, 1584, 1585,
     1585, 1585, 1585, 1585, 1586, 1586, 1586, 1586, 1587, 1587,

     1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588, 1588,
     1589, 1589, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590,
     1590, 1590, 1591,    0, 1591, 1591, 1591, 1591, 1591,    0,
        0, 1591,    0,    0, 1591, 1592, 1592, 1592, 1592, 1592,
     1592, 1593, 1593, 1593, 1593, 1593, 1593, 1594,    0, 1594,
     1594, 1594, 1594, 1594,    0,    0, 1594,    0,    0, 1594,
     1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596, 1596,
     1596, 1596, 1597, 1597, 1597, 1597, 1597, 1597, 1598, 1598,
     1598, 1598, 1598, 1598, 1599, 1599, 1599, 1599, 1599, 1599,
     1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1601, 1601,

     1601, 1601, 1602, 1602, 1602, 1602, 1602, 1602, 1603, 1603,
     1603, 1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604, 1604,
     1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606, 1606,
     1606, 1606, 1606,    0,    0, 1606,    0,    0, 1606, 1607,
     1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1609, 1609,
     1609, 1609, 1609, 1609, 1610, 1610, 1610, 1610, 1610, 1610,
     1611, 1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612,
     1612, 1612, 1613,    0, 1613, 1613, 1613, 1613, 1613,    0,
        0, 1613,    0,    0, 1613, 1614, 1614, 1614, 1614, 1614,
     1614, 1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616,

     1616, 1616, 1616, 1617, 1617, 1617, 1617, 1617, 1617, 1618,
     1618, 1618, 1618, 1618, 1618, 1619, 1619, 1619, 1619, 1619,
     1619, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621,
     1621, 1621, 1621, 1622, 1622, 1622, 1622, 1622, 1622, 1623,
     1623, 1623, 1623, 1623, 1623, 1624, 1624, 1624, 1624, 1624,
     1624, 1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626, 1626,
     1626, 1626, 1626, 1627, 1627, 1627, 1627, 1627, 1627, 1628,
     1628, 1628, 1628, 1628, 1628, 1629, 1629, 1629, 1629, 1629,
     1629, 1630, 1630, 1630, 1630, 1630, 1630, 1631, 1631, 1631,
     1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632, 1632, 1633,

     1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634,
        0,    0, 1634,    0,    0, 1634, 1635, 1635, 1635, 1635,
     1635, 1635, 1636, 1636, 1636, 1636, 1636, 1636, 1637, 1637,
     1637, 1637, 1637, 1637, 1638, 1638, 1638, 1638, 1638, 1638,
     1639, 1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640, 1640,
     1640, 1640, 1641, 1641, 1641, 1641, 1641, 1641, 1642, 1642,
     1642, 1642, 1642, 1642, 1643, 1643, 1643, 1643, 1643, 1643,
     1644, 1644, 1644, 1644, 1644, 1644, 1645, 1645, 1645, 1645,
     1645, 1645, 1646, 1646, 1646, 1647, 1647, 1647, 1647, 1647,
     1647, 1648, 1648, 1648, 1648, 1648, 1648, 1649, 1649, 1649,

     1649, 1649, 1649, 1650, 1650, 1650, 1650, 1650, 1650, 1651,
     1651, 1651, 1651, 1651, 1651, 1652, 1652, 1652,    0, 1652,
     1652, 1653, 1653, 1653, 1653, 1653, 1653, 1654, 1654, 1654,
     1654, 1654, 1654, 1655, 1655, 1655, 1655, 1655, 1655, 1656,
     1656, 1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657, 1657,
     1657, 1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659, 1659,
     1659, 1659, 1659, 1660, 1660, 1660, 1660, 1660, 1660, 1661,
     1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662,
     1662, 1663, 1663, 1663, 1663, 1663, 1663, 1664, 1664, 1664,
     1664, 1664, 1664, 1665, 1665, 1665, 1665, 1665, 1665, 1666,

     1666, 1666, 1666, 1666, 1666, 1667, 1667, 1667, 1667, 1667,
     1667, 1668, 1668, 1668, 1668, 1668, 1668, 1668,    0,    0,
     1668,    0,    0, 1668, 1669, 1669, 1669, 1669, 1669, 1669,
     1670, 1670, 1670, 1670, 1670, 1670, 1671, 1671, 1671, 1671,
     1671, 1671, 1672, 1672, 1672, 1672, 1672, 1672, 1673, 1673,
     1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674, 1674,
     1675, 1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676, 1676,
     1676, 1676, 1676,    0,    0, 1676,    0,    0, 1676, 1677,
     1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678,
     1678, 1679, 1679, 1679, 1679, 1679, 1679, 1680, 1680, 1680,

     1680, 1680, 1680, 1681, 1681, 1681, 1681, 1681, 1681, 1682,
     1682, 1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1683,
     1683, 1684, 1684, 1684, 1684, 1684, 1684, 1685, 1685, 1685,
     1685, 1685, 1685, 1686, 1686, 1686, 1686, 1686, 1686, 1687,
     1687, 1687, 1687, 1687, 1687, 1688, 1688, 1688, 1688, 1688,
     1688, 1689, 1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690,
     1690, 1690, 1690, 1691, 1691, 1691, 1691, 1691, 1691, 1692,
     1692, 1692, 1692, 1692, 1692, 1693, 1693, 1693, 1693, 1693,
     1693, 1694, 1694, 1694, 1694, 1694, 1694, 1695, 1695, 1695,
     1695, 1695, 1695, 1696, 1696, 1696, 1696, 1696, 1696, 1696,

        0,    0, 1696,    0,    0, 1696, 1697, 1697, 1697, 1697,
     1697, 1697, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699,
     1699, 1699, 1699, 1699, 1699,    0,    0, 1699,    0,    0,
     1699, 1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701, 1701,
     1701, 1701, 1701, 1702, 1702, 1702, 1702, 1702, 1702, 1703,
     1703, 1703, 1703, 1703, 1703, 1704, 1704, 1704, 1704, 1704,
     1704, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,

     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352

    } ;

static yyconst flex_int16_t yy_rule_linenum[175] =
    {   0,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
      307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
      317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
      337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
      347,  348,  349,  350,  351,  352,  353,  354,  355,  356,

      357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
      367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
      397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
      407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
      427,  428,  429,  432
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3254 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 256 "lib/SPARQLfedScanner.lpp"

#line 3418 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1353 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1352 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 175 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 175 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 176 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 257 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 258 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 259 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 260 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::GT_INSERT_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_WHERE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA224;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 431 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 438 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4418 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1353 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1353 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1352);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 438 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


