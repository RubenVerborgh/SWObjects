#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1041] =
    {   0,
        0,    0,  114,  112,    2,    1,    1,   68,  112,    2,
      112,  112,  112,   11,   12,   13,   65,   47,   66,   41,
       67,   92,  107,   50,   61,   59,   62,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   48,   49,
      112,  112,   51,  112,  112,  112,   38,  112,   39,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,    2,    1,
       60,    0,  104,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  111,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   58,    0,  103,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      105,    0,   94,    0,   96,   93,   93,   92,    0,  108,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,   90,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   64,  110,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   91,    0,    0,  107,    0,    0,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  106,   87,    0,    0,    0,   57,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      104,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      111,  111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  111,  111,  111,  111,  111,  111,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  103,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   95,   95,    0,   97,   97,    0,    0,
       93,    0,    0,   98,  108,    0,  108,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  108,
      108,  108,  108,  108,  108,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  110,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      110,  110,  110,  110,  110,  110,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       55,   24,   16,   84,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   83,    0,   82,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   69,   81,    0,    0,    0,    0,  109,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    2,    0,    0,    0,  111,  111,  111,
      111,  111,  111,  111,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  111,  111,  111,
      111,  111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   95,    0,    0,  100,    0,   97,    0,    0,
       99,    0,   98,    0,   98,  108,  108,  108,  108,  108,
      108,  108,  108,  108,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  108,  108,  108,
      108,  108,    0,    0,    0,    0,    0,    0,  110,  110,

      110,  110,  110,  110,  110,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  110,  110,
      110,  110,  110,    0,    0,   91,    0,    0,    0,    0,
        0,    0,    0,    5,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,   33,   54,    0,   17,    0,    0,
        0,    0,    0,   32,    0,    0,    0,    0,   70,    0,
       31,    0,    0,    0,   40,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,  109,    0,  109,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  109,  109,  109,
      109,  109,  109,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  111,
      111,  111,  111,  111,    0,    0,  111,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  100,    0,
      100,    0,   99,    0,   99,  108,  108,  108,  108,  108,
        0,    0,  108,  110,  110,  110,  110,  110,    0,    0,
      110,    0,    0,   73,   30,    0,   80,    0,    0,    0,
        0,    0,    0,   36,   20,   20,    0,    0,    0,   75,

        0,   76,    0,   26,    0,   43,   18,    0,    0,   23,
        0,    0,   79,    0,    0,    0,    0,    0,    0,    0,
       45,    0,   19,  109,  109,  109,  109,  109,  109,  109,
      109,  109,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  109,  109,  109,  109,  109,
        0,    0,   89,  102,    0,    0,    0,    0,  111,  101,
        0,    0,    0,    0,  108,  110,    0,    0,   35,    0,
       29,    0,    0,   46,    0,   22,   28,    0,    0,    0,
        0,   27,    0,    6,    0,    0,    0,   86,    7,    0,
       34,   53,    0,  109,  109,  109,  109,  109,    0,    0,

      109,    0,    0,    0,    0,    0,    0,   77,    0,    0,
       52,    0,    9,    3,    0,   44,    0,  109,   37,    0,
       72,   15,    8,    0,    0,    0,   42,   74,    0,   14,
        0,   78,    0,   56,    0,    0,    0,   71,   85,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   67,   74,   75,   76,   77,   78,   79,   80,
       81,   67,   82,   83,   84,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1053] =
    {   0,
        0,    0,  647,11971,  118,11971,  642,  619,  117,  146,
      245,  624,  352,  123,11971,11971,  110,11971,  111,  612,
    11971,  114,  451,11971,  545,11971,  607,  644,    0,  745,
      107,  112,  336,   92,  330,  167,  341,   97,  120,  537,
      351,  543,  826,  548,  831,  874,  168,  882,  296,11971,
      572,  602,    0,  868,  913,  556,11971,  534,11971,  878,
      907,  924,  941,  958,  975,  345,  992,   95, 1009,  104,
     1026, 1043, 1060, 1077, 1094,  171, 1097, 1114,  140,11971,
    11971, 1209,  603, 1210, 1138, 1154, 1244,  378, 1261, 1202,
     1278, 1288, 1305,  362, 1316, 1351, 1367, 1382,  542, 1399,

     1416, 1426, 1436, 1453,  581, 1534, 1568, 1585, 1602, 1619,
     1636, 1653, 1670, 1687,  326, 1704,  786, 1721, 1738, 1755,
     1772, 1789,  174, 1792, 1809,11971, 1899,  595, 1905, 1833,
     1849, 1934, 1159, 1951, 1968, 1978, 1988, 2005,  683,  573,
    11971,  585,  563,  583,  846,  127,  186, 1246,  350, 2089,
     2123, 2140, 2157, 2174, 2191, 2208, 1897, 2225,  793, 2242,
     1206, 2259, 2276, 2293, 2310, 2327,  231, 2330, 2347, 2423,
        0,11971, 2365, 2381, 2396, 1313, 2458, 2413, 2475, 2485,
     2502, 1471,11971, 2583, 2617, 2634, 2651, 2668, 2685, 2702,
     2719, 2736,  884, 2753, 1874, 2770, 2787, 2804, 2821, 2838,

      408, 2841, 2858,  581, 2918, 2939,    0, 2920, 2926, 2934,
     2928, 2933, 2950, 2967, 2984, 3001, 3018, 3035,  483, 3052,
     3069, 3086, 3103, 3120, 2016, 3137, 3154, 3171, 3188, 3205,
      437, 3208, 3225, 3285, 3286, 3291, 3296, 3337, 3336, 3347,
     3345, 3355, 3356, 3386, 3404, 3398, 3399, 3443, 3451, 3413,
     3456, 3498, 3441, 3507, 3512, 3517, 3552, 3554, 3563, 3568,
     3582, 3602, 3610, 3621, 3630, 3665, 3644, 3681, 3683, 3696,
     3726, 3731, 3736,  695,11971,11971, 3794, 3867, 3742,11971,
     3872, 3873, 3878, 3883, 3884, 3918, 3923, 3917, 3934, 3951,
     3968, 3985, 4002, 4019, 4036, 4053, 4070, 1177, 4087, 4104,

    11971, 4199, 4122,  518, 4139, 4169, 4186, 4234, 4251, 4268,
     4285, 4302,  502, 4319, 4336, 4353, 4370, 4387, 4404, 4421,
        0,    0, 4438, 4455, 4472, 4489, 4506, 4523, 4540,  456,
     3891, 4557, 4574, 4591, 2420, 4608, 4625, 4642, 4659, 3261,
      630, 4149, 4676,    0,    0,    0,    0,    0,    0, 4693,
     4710, 4727, 4744, 4761, 4778, 4795, 4812, 4829, 4846, 1857,
     4863, 4880,11971, 4970, 4898,  498, 4915, 4940, 4957, 5005,
     5022, 5039, 5056,  327,  353,  595,  567,  894,  917, 1250,
     1249, 1944,  515,  486,    0,    0,    0, 5073, 5090, 5107,
     5124, 5141, 5158, 5175,  356, 5192, 5209, 5226, 5243, 5260,

     2510, 5277, 5294, 5311, 5328, 5345,  702, 5348, 5365,    0,
        0,    0,    0,    0,    0, 5382, 5399, 5416, 5433, 5450,
     5467, 5484, 5501, 5518, 5535, 2411, 5552, 5569, 5586,  383,
     5603, 5620, 5637, 5654, 5671, 5688, 5705,    0,    0, 5722,
     5739, 5756, 5773, 5790, 5807, 5824,  330, 5841, 5858, 5875,
     5892, 4196, 5909, 5926, 5943, 5960, 5977,  731, 5980, 5997,
        0,    0,    0,    0,    0,    0, 6014, 6031, 6048, 6065,
     6082, 6099, 6116, 6133, 6150, 6167, 4920, 6184, 6201,    0,
     6261, 6262, 6263, 6271, 6272, 6273, 6281, 6282, 6312, 6320,
     6321, 6322, 6330, 6324, 6341, 6358, 6375, 6392, 6409, 6426,

     6443, 6460, 6477, 4965, 6494, 6511, 6580, 6582, 6574, 6588,
     6590, 6598, 6625, 6633, 6639, 6653, 6673, 6663, 6681, 6693,
     6704, 6716, 6724, 6735, 6751, 6765, 6782, 6792, 6774, 6793,
     6820, 6809, 6837, 6843, 6851, 6860, 6888, 6878, 6899, 6901,
     6909, 6936, 6918, 6946, 6957, 6976, 6987, 6997, 6963, 7015,
     7021, 7027, 7032, 7042, 7055, 7066, 7082, 7143, 7177, 7194,
     7211, 7228, 7245, 7262, 7279, 7296, 3409, 7313, 7070, 7330,
     7347, 7364, 7381, 7398, 1122, 7401, 7418, 7478, 7479, 7480,
     7488, 7489, 7490, 7498, 7492, 7509, 7604,  414, 7563, 7555,
     7574, 7589, 7532, 7639, 7656, 7666, 7676, 7693, 7611, 7788,

     7711, 7728, 7758, 7817, 7775, 7852, 7869,    0,    0,    0,
        0,    0,    0,    0, 7886, 7903, 7920, 7937, 7954, 7971,
     7988, 8005, 8022, 8039, 7051, 8056, 8073,    0,    0,    0,
        0,    0, 8090, 8107, 8197,  408, 8203, 8131, 8147, 8232,
     7735, 8249, 8266, 8276, 8286, 8303, 7795, 8393, 8321, 8338,
     8363, 1945, 3344, 2966,  397,  382, 2995, 3355, 3433,  374,
      371,  370,  356,  326,  309,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 8380, 8428, 8445, 8462, 8479, 8496,
     8513, 8530, 8547, 8564, 7515, 8581, 8598,    0,    0,    0,
        0,    0, 8615, 8632, 8708, 8650, 8667, 8684,    0,    0,

        0,    0,    0,    0,    0, 8743, 8760, 8777, 8794, 8811,
     8828, 8845, 8862, 8879, 8896, 7740, 8913, 8930,    0,    0,
        0,    0,    0, 8947, 8964,  255, 8207, 8212, 8218, 9024,
     9025, 8990, 9019, 9052, 9087, 9089, 9095, 9100, 9110, 9145,
     9151, 9157, 9163, 9165, 9200, 9202, 9212, 9210, 9211, 9220,
     9221, 9255, 9260, 9261, 9271, 9279, 9306, 9314, 9320, 9325,
     9266, 9337, 9360, 9365, 9371, 9383, 9381, 9402, 9418, 9426,
     9420, 9436, 9441, 9478, 9479, 9489, 9487, 9495, 9526, 9537,
     9543, 9532,    0,    0,    0, 9537, 9554, 9571, 9588, 9605,
     9622, 9639,  146, 8701, 9656, 9673, 9690, 9707, 7814, 9724,

     9741, 9758, 9775, 9792, 1201, 9795, 9812,    0,    0,    0,
        0,    0,    0, 9829, 9846, 9863, 9880, 9897, 9914, 9931,
     9948, 9965, 9982, 8171, 9999,10016, 9538,10076,10077,  233,
    10042,  160,10071,10088,10105,10122,10139,10156,10173,    0,
        0,    0,    0,    0,10190,10207,    0,  199,10224,  151,
    10241,10258,10275,10292,10309,10326,10343,  176,  159,  156,
      153,  143,  130,  119,  101,    0,    0,    0,    0,    0,
    10360,10377,    0,    0,    0,    0,    0,    0,10394,10411,
        0,10471,10472,10473,10481,10483,10489,10491,10526,10537,
    10539,10531,10545,10547,10582,10584,10592,10598,10600,10612,

    10635,10640,10650,10649,10658,10663,10677,10693,10701,10707,
    10712,10724,10735,10758,10763,10775,10773,10812,10781,10793,
    10820,10832,10821,    0,    0,    0,    0,    0,    0,    0,
        0,    0,10826,10843,10860,10877,10894,10911,10928,10945,
    10962,10979, 8343,10996,11013,    0,    0,    0,    0,    0,
    11030,11047,10831,11971,    0,11064,11081,11098,    0,11971,
        0,11115,11132,11149,    0,    0,11216,11211,11221,11222,
    11227,11271,11272,11262,11285,11273,11312,11313,11322,11323,
    11331,11333,11374,11343,11373,11384,11382,11393,11394,11421,
    11431,11432,11440,    0,    0,    0,    0,    0,11434,11451,

        0,11511,11523,11522,11528,11562,11570,11517,11576,11586,
    11578,11620,11621,11626,11632,11634,11644,    0,11671,11679,
    11681,11687,11689,11695,11729,11738,11730,11739,11750,11744,
    11781,11787,11793,11792,11802,11801,11836,11842,11844,11971,
    11922,11927,11932,11935,  116,11940,11945,11947,11952,11957,
    11962,11965
    } ;

static yyconst flex_int16_t yy_def[1053] =
    {   0,
     1040,    1, 1040, 1040, 1040, 1040, 1040, 1040, 1041, 1042,
     1040, 1040, 1043, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1044, 1040, 1040, 1040, 1045, 1040,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1040, 1040,
     1040, 1040,   30,   30,   30,   30, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1041, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1042, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1043, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1044,
      170, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1045,   30,   30,   23,   30,   30,   30,
       30, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30, 1040, 1040, 1040, 1040,   30,   30, 1040,
       30,   30,   30,   30,   30,   30,   30, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1046, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
      106,  106, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040,  106,  106,  106,  106,  106,  106, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1047, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040,  150,  150,  150, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,  150,
      150,  150,  150,  150,  150, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040,  184,  184, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
      184,  184,  184,  184,  184,  184, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1048,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040,   30,   30,   30,
       30,   30,   30,   30, 1040, 1040, 1046,  587, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1049,

     1040, 1040, 1040, 1050, 1040, 1040, 1040,  106,  106,  106,
      106,  106,  106,  106, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040,  106,  106,  106,
      106,  106, 1040, 1040, 1047,  635, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1051, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040,  150,  150,  150,  150,  150,
      150,  150,  150,  150, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040,  150,  150,  150,
      150,  150, 1040, 1040, 1052, 1040, 1040, 1040,  184,  184,

      184,  184,  184,  184,  184, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,  184,  184,
      184,  184,  184, 1040, 1040, 1048,   30,   30,   30,   30,
       30, 1040, 1040,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  558,  558,  558, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040,  558,  558,  558,
      558,  558,  558, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040,   30,   30,   30,  587,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,  106,
      106,  106,  106,  106, 1040, 1040,  106,  635, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040,  150,  150,  150,  150,  150,
     1040, 1040,  150,  184,  184,  184,  184,  184, 1040, 1040,
      184,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  558,  558,  558,  558,  558,  558,  558,
      558,  558, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040,  558,  558,  558,  558,  558,
     1040, 1040,   30, 1040,  587, 1040, 1040, 1040,  106, 1040,
      635, 1040, 1040, 1040,  150,  184,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  558,  558,  558,  558,  558, 1040, 1040,

      558,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  558,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,    0,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040
    } ;

static yyconst flex_int16_t yy_nxt[12091] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   39,   40,
       41,   42,   43,   44,   45,   46,   39,   47,   39,   48,
       39,   39,   49,    4,   50,   51,   52,   53,   31,   32,
       33,   34,   54,   55,   37,   38,   39,   39,   40,   41,
       42,   43,   44,   45,   46,   56,   47,   39,   48,   39,
       39,   57,   58,   59,    4,   60,   61,   62,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   63,   64,   64,

       65,    4,    4,   66,   67,    4,   68,   69,   70,   71,
       72,   73,   74,   75,    4,   76,   77,   78,    4,   79,
      204,  865,   79,   83,  140,  140,  140,  140,  142,  144,
      143,  145,  147,  245,  148,  234,  141,  208,  251,  865,
      208,   79,  252,  235,   79,  208,  149,  146,  208,  236,
      863,  238,  208,  208,  239,  208,  240,  208,  237,  380,
      208,  208,  245,  863,  234,  208,  208,  251,  208,  208,
       84,  252,  235,  861,  208,  149,  861,  208,  236,  859,
      238,  208,  208,  239,  208,  240,  208,  237,  380,  208,
      208,  287,  287,  287,  208,  287,  859,  208,  288,  288,

      288,  288,  288,  288,  288,  635,  381,   85,  208,  271,
      960,  248,  208,  208,  587,  208,  208,   86,  382,   87,
       87,   87,   87,   87,   87,   88,   89,   89,   89,   89,
       90,   91,   91,   92,   93,   94,   96,  208,  271,  954,
      249,  208,  208,  783,  208,  208,   97,  382,   98,   98,
       98,   98,   98,   98,   99,  100,  100,  100,  100,  101,
      102,  102,  103,  104,  105,  106,  297,  297,  298,  359,
      359,  360,  480,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  274,  274,  274,

      274,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  425,  425,  426,  665,
      107,  108,  109,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  110,  111,  111,  112,  665,  374,  113,  114,
      275,  115,  116,  117,  118,  119,  120,  121,  122,  652,
      123,  124,  125,  128,  241,  383,  246,  383,  242,  250,
      384,  208,  243,  653,  247,  208,  663,  208,  208,  256,
      244,  208,  208,  257,  208,  654,  208,  258,  652,  208,
      663,  661,  208,  241,  661,  246,  208,  242,  250,  208,

      208,  243,  656,  247,  208,  129,  208,  208,  256,  244,
      208,  208,  257,  208,  654,  208,  258,  656,  208,  848,
      830,  208,  349,  349,  349,  208,  349,  438,  208,  286,
      286,  286,  286,  286,  286,  286,  286,  170,  286,  286,
      286,  286,  130,  286,  286,  286,  311,  311,  311,  311,
      311,  311,  131,  385,  132,  132,  132,  132,  132,  132,
      133,  134,  134,  134,  134,  135,  136,  136,  137,  138,
      139,  150,  305,  305,  305,  305,  305,  305,  305,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,  476,  476,  477,  384,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  503,  503,  504,  384,  151,  152,  153,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  154,  155,
      155,  156,  127,  321,  157,  158,   95,  159,  160,  161,
      162,  163,  164,  165,  166,  253,  167,  168,  169,  171,
      172,  259,   82,  254,  140,  140,  140,  140,  208,  255,
      205,  375,  208,  143,  208,  208,  141,  377,  208,  208,
      260,  208,  264,  208,  253,  376,  208,  208,  480,  657,

      259,  208,  254,  377,  208,  374,  364,  208,  255,  302,
      655,  208,  655,  208,  208,  656,  280,  208,  208,  260,
      208,  264,  208,  277,  376,  208,  208,  276,  657,  279,
      208,  183,  146,  208,  126,  173,  314,  314,  314,  314,
      314,  314,  314,   81,   80,  174, 1040,  175,  175,  175,
      175,  175,  175,  176,  177,  177,  177,  177,  178,  179,
      179,  180,  181,  182,  184,  320,  320,  320,  320,  320,
      320, 1040,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  274,  274,  274,  274,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  624,  624,  625, 1040,  185,
      186,  187,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  188,  189,  189,  190, 1040, 1040,  191,  192,  275,
      193,  194,  195,  196,  197,  198,  199,  200, 1040,  201,
      202,  203,  205,  206, 1040,  205,  207,  373,  373,  373,
      373,  373,  373,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  209,  208,  208,  208,
      210,  208,  208,  211,  208,  208,  208,  684,  684,  685,

     1040,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  209,  208,  208,  208,  210,
      208,  208,  211,  208,  208,  208,  715,  715,  716, 1040,
      212,  213,  214,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  216,  217,  217,  218, 1040,  219,  220,  221,
      222,  223,  224,  225,  226,  227,  228,  229,  230,  261,
      231,  232,  233,  265,  378, 1040,  145,  208, 1040,  262,
      263,  208,  208, 1040,  208, 1040,  208, 1040,  379,  208,
      350,  350,  350,  350,  350,  350,  350, 1040,  261,  415,
      415,  415,  265,  415, 1040, 1040,  208, 1040,  262,  263,

      208,  208,  266,  208,  246,  208,  267,  379,  208,  208,
      268, 1040,  247,  208,  658,  208,  208,  272,  273,  208,
      269,  270,  208,  208, 1040,  278,  659,  208, 1040, 1040,
      208,  266,  660,  246,  660,  267, 1040,  661,  208,  268,
     1040,  247,  208, 1040,  208,  208,  272,  273,  208,  269,
      270,  208,  208, 1040,  208,  659,  208,  249,  208,  208,
     1040,  208,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281, 1040,
      466,  466,  466,  208,  466, 1040,  249,  208, 1040, 1040,
      208,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  283,  283,  283,  283,  283,
      283,  283,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  284,  284,  284,  281,  281,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  290,  291,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  293,
      293,  293,  293,  292,  294,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  301,   82,  823,  823,  824,
     1040,   82,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  367,  367,  367,  367,  367,  367,  367,
     1040, 1040,   84,   82,  147,  662,  148,  662,   82,  381,
      663, 1040,   82,  584,  584,  584,  584,  584,  149, 1040,
       82,  382, 1040,   82, 1040,   82,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  942,  942,  943,   85,

      416,  416,  416,  416,  416,  416,  416,  149, 1040,   86,
      382,   87,   87,   87,   87,   87,   87,   88,   89,   89,
       89,   89,   90,   91,   91,   92,   93,   94,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,   96,  431,  431,  431,
      431,  431,  431,  431, 1040, 1040,   97, 1040,   98,   98,
       98,   98,   98,   98,   99,  100,  100,  100,  100,  101,
      102,  102,  103,  104,  105,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  321,  437,  437,  437,  437,  437,
      437, 1040,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322, 1040, 1040, 1040, 1040,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322, 1040, 1040, 1040, 1040,  323,
      324,  325,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  327,  328,  328,  329, 1040,  330,  331,  332, 1040,
      333,  334,  335,  336,  337,  338,  339,  340, 1040,  341,
      342,  343,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  346,  346,  346,  346,  346,  346,  346,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  347,
      347,  347,  344,  344,  106,  106,  106,  106,  106,  106,
      106,  106, 1040,  106,  106,  106,  106, 1040,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  349,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  352,  353,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  355,  355,  355,  355,  354,  356,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      363,  127, 1040, 1040, 1040, 1040,  127,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366, 1040, 1040,
     1040, 1040,  129,  632,  632,  632,  632,  632,  127,  664,
      858,  664,  858,  127,  665,  859, 1040,  127,  467,  467,
      467,  467,  467,  467,  467,  127, 1040, 1040,  127, 1040,
      127,  150,  150,  150,  150,  150,  150,  150,  150,  130,
      150,  150,  150,  150, 1040,  150,  150,  150, 1040,  131,

     1040,  132,  132,  132,  132,  132,  132,  133,  134,  134,
      134,  134,  135,  136,  136,  137,  138,  139,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  385,  386, 1040,  385,
      494,  494,  494,  494,  494,  494,  494,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387, 1040, 1040, 1040, 1040,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
     1040, 1040, 1040, 1040,  388,  389,  390,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  392,  393,  393,  394,
     1040,  395,  396,  397,  398,  399,  400,  401,  402,  403,

      404,  405,  406, 1040,  407,  408,  409,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  412,  412,
      412,  412,  412,  412,  412,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  413,  413,  413,  410,  410,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      418,  419,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  421,  421,  421,  421,  420,  422,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  172,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  692,  692,  692,
      692,  692, 1040,  173,  615,  615,  615,  615,  615,  615,
      615, 1040, 1040,  174, 1040,  175,  175,  175,  175,  175,
      175,  176,  177,  177,  177,  177,  178,  179,  179,  180,
      181,  182,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,

      436,  436,  436,  438,  675,  675,  675,  675,  675,  675,
      675,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439, 1040, 1040, 1040, 1040,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439, 1040, 1040, 1040, 1040,  440,  441,
      442,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      444,  445,  445,  446, 1040,  447,  448,  449, 1040,  450,
      451,  452,  453,  454,  455,  456,  457, 1040,  458,  459,

      460,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  463,  463,  463,  463,  463,  463,  463,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  464,  464,

      464,  461,  461,  184,  184,  184,  184,  184,  184,  184,
      184, 1040,  184,  184,  184,  184, 1040,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  469,  470,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  472,  472,  472,  472,  471,  473,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  471,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  208,
     1040,  208,  484,  208,  482,  208,  208,  208,  208,  208,
     1040,  208,  483,  208,  208,  208,  208,  481, 1040,  208,
      208,  860,  208,  860,  208, 1040,  861,  208,  208, 1040,
      208,  484,  208,  482,  208,  208,  208,  208,  208, 1040,

      208,  483,  208,  208,  208,  208,  481, 1040,  208,  208,
      862,  208,  862,  208, 1040,  863,  208,  485,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  488,  488,  488,  488,  488,
      488,  488,  486,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  489,  489,  489,  486,  486,  208,  208,  208,  208,
      208,  208,  208,  208, 1040,  208,  208,  208,  208, 1040,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  492,

      492,  492,  208,  492,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  496,  497,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      499,  499,  499,  499,  498,  500,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  208,  508, 1040, 1040,
      507,  208,  208,  208,  208, 1040,  208,  208,  509,  208,
     1040,  208, 1040, 1040,  208,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  208,  508, 1040, 1040,  507,
      208,  208,  208,  208,  653,  208,  208,  509,  208,  510,
      208, 1040, 1040,  208, 1040,  658,  654,  511,  208,  513,
     1040,  208,  208,  512,  208,  208,  208,  659,  208, 1040,
      208,  514,  208,  208,  515,  208,  208,  208,  510, 1040,

      516,  517, 1040,  208,  208,  654,  511,  208,  513, 1040,
      208,  208,  512,  208,  208,  208,  659,  208, 1040,  208,
      514,  208,  208,  515,  208,  208,  208,  208,  518,  516,
      517,  208,  208,  208,  208,  519, 1040,  520, 1040,  208,
      208,  521, 1040,  208,  208,  208,  208,  208,  864,  208,
      864, 1040,  208,  865,  208, 1040,  208,  518,  208, 1040,
      208,  525, 1040,  208,  519, 1040,  520, 1040,  208,  208,
      521,  522,  208,  208,  208,  208,  208, 1040,  208,  522,
     1040,  208,  532,  208,  208,  523,  208,  208,  208,  208,
      525,  208,  208,  524, 1040, 1040,  208,  208, 1040,  208,

      522,  526,  527, 1040,  208,  813,  813,  813,  522,  813,
     1040,  532, 1040,  208,  524,  208, 1040,  208,  208, 1040,
      208,  208,  524, 1040, 1040,  208,  208,  528,  208, 1040,
      526,  527, 1040,  208,  529, 1040, 1040,  530, 1040,  208,
      534, 1040, 1040,  208, 1040,  531,  208,  533,  208, 1040,
     1040, 1040,  208,  208, 1040,  208,  528,  208,  208, 1040,
      208, 1040,  208,  529, 1040,  208,  530,  535,  208,  534,
     1040, 1040,  208, 1040,  531,  208,  533,  208, 1040, 1040,
     1040,  208,  208, 1040,  208, 1040,  208,  208, 1040,  208,
     1040,  208,  536,  208,  208,  537,  535,  208, 1040,  208,

      208, 1040,  208,  538,  208, 1040, 1040,  539,  208,  208,
     1040,  208, 1040,  208, 1040,  540,  208, 1040, 1040, 1040,
     1040,  536,  208,  208,  537, 1040,  208,  208,  208,  208,
      208,  208,  538,  208, 1040, 1040,  539,  208,  208, 1040,
      208,  542,  208,  208,  540,  208, 1040,  208,  541, 1040,
      208,  208,  208,  543, 1040,  208,  208, 1040,  208,  208,
     1040,  544,  208, 1040,  545, 1040,  208, 1040, 1040,  208,
      542,  208,  208,  546, 1040,  208,  208,  541,  208,  208,
      208, 1040,  543,  548,  208,  208, 1040,  208,  549,  208,
      544,  208,  208,  545, 1040,  208, 1040, 1040,  208, 1040,

      208, 1040,  546, 1040,  208,  547,  208,  208, 1040, 1040,
      208,  551,  548,  208,  208, 1040, 1040,  549,  208, 1040,
      550,  208,  208, 1040,  208, 1040,  208,  552,  208,  208,
     1040,  208, 1040, 1040,  547,  208,  553,  208, 1040,  208,
      551,  208,  208, 1040,  208, 1040, 1040, 1040, 1040,  550,
     1040,  208, 1040,  208, 1040,  208,  552,  208,  208, 1040,
      208, 1040,  554,  556, 1040,  553,  208,  208,  555, 1040,
      208,  208,  208,  208,  208, 1040,  208,  208, 1040,  208,
     1040,  208,  557,  208,  208, 1040, 1040,  208, 1040, 1040,
      208,  554,  556, 1040, 1040, 1040,  208,  555, 1040, 1040,

      208,  208, 1040,  208, 1040,  208,  208, 1040,  208, 1040,
      208,  557,  208,  208,  558, 1040,  208, 1040,  579,  208,
     1040, 1040,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558, 1040, 1040, 1040, 1040,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558, 1040, 1040, 1040, 1040,  559,
      560,  561,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  562,  563,  563,  564, 1040, 1040,  565,  566, 1040,

      567,  568,  569,  570,  571,  572,  573,  574,  208,  575,
      576,  577,  208,  208,  208,  208, 1040,  208,  208,  208,
      208,  208, 1040,  208,  208,  208,  208, 1040,  208,  208,
     1040,  208,  208, 1040, 1040,  578, 1040,  208, 1040, 1040,
     1040,  208,  208,  208,  208, 1040,  208,  208,  208,  208,
      208, 1040,  208,  208,  208,  208, 1040,  208,  208,  208,
      208,  208, 1040,  208,  208, 1040,  208, 1040,  208, 1040,
     1040,  208, 1040, 1040, 1040,  322,  322,  322,  322,  322,
      322,  322,  322, 1040,  322,  322,  322,  322,  208,  322,
      322,  322,  208,  208, 1040,  208, 1040,  208, 1040, 1040,

      208,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  281,  281,  281,  281,  281,
      282,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  282,  282,  282,  282,  282,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      581,  581,  581,  281,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  588,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
     1040, 1040,  589,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82, 1040, 1040,  590,
      706,  706,  706,  706,  706,  706,  706, 1040, 1040,  591,

     1040,  592,  592,  592,  592,  592,  592,  593,  594,  594,
      594,  594,  595,  596,  596,  597,  598,  599,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,

      313,  313,  313,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,

      606,  606,  606,  606,  606,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  608,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      611,  611,  611,  611,  611,  611,  611,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  612,  612,  612,  609,
      609,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      614,  614,  614, 1040,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  616,  616,  616,  616,  616,  616,  616,  617,
      618,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  620,  620,  620,  620,  619,  621,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  628,  628,  628,  628,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  344,  344,  344,  344,  344,  345,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      345,  345,  345,  345,  345,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  344,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  636,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  723,  723,  723,  723,
      723, 1040, 1040,  637,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127, 1040, 1040,
      638,  731,  731,  731,  731,  731, 1040, 1040, 1040, 1040,
      639, 1040,  640,  640,  640,  640,  640,  640,  641,  642,
      642,  642,  642,  643,  644,  644,  645,  646,  647,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  666,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  669,  669,  669,  669,  669,
      669,  669,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  670,  670,  670,  667,  667,  387,  387,  387,  387,
      387,  387,  387,  387, 1040,  387,  387,  387,  387, 1040,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  673,
      673,  673,  387,  673,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  677,  678,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      680,  680,  680,  680,  679,  681,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,

      410,  410,  410,  410,  410,  411,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  411,
      411,  411,  411,  411,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  410,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  699,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  702,  702,  702,  702,  702,  702,
      702,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      703,  703,  703,  700,  700,  439,  439,  439,  439,  439,
      439,  439,  439, 1040,  439,  439,  439,  439, 1040,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  705,  705,  705, 1040,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  707,  707,  707,  707,  707,  707,  707,

      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      708,  709,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  711,  711,  711,  711,  710,  712,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  461,  461,  461,  461,  461,  462,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  462,  462,  462,  462,  462,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,

      461,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  208,  208,  208, 1040,  208,  208,  208,  208,
      208,  208,  208,  208,  208, 1040,  208,  208,  208,  208,
      208,  208,  208,  208, 1040, 1040,  208,  208, 1040,  208,
      208,  208,  208,  208, 1040,  208,  208,  208,  208,  208,
      208,  208,  208,  208, 1040,  208,  208,  208,  208,  208,
      208,  208,  208,  208, 1040,  208,  208,  208,  208,  208,
      208,  208,  208,  208, 1040,  208,  208,  208,  208,  208,
      208,  208, 1040, 1040, 1040,  208, 1040, 1040,  208, 1040,
     1040, 1040,  208, 1040, 1040, 1040,  208, 1040, 1040,  208,
      208,  208,  208, 1040,  208,  208,  208,  208,  208,  208,

      208, 1040, 1040, 1040,  208, 1040, 1040,  208,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  486,  486,  486,  486,  486,  487,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  485,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  487,  487,  487,  487,  487,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  728,  728,  728,  728,  728,  728,  728,

      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      486,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  734,  735, 1040,  736,  737, 1040, 1040,  208,
     1040,  208,  208,  208, 1040,  208, 1040,  208,  208,  208,
      208,  208, 1040,  208, 1040,  738,  208, 1040,  208,  739,
     1040,  734,  735,  208,  736,  737,  208, 1040,  208, 1040,
      208,  208,  208,  740,  208, 1040,  208,  208,  208,  208,
      208,  741,  208, 1040,  738,  208,  208,  208,  739, 1040,
      208,  742,  208,  208,  208,  208, 1040, 1040,  208, 1040,
      208,  208,  740,  743,  208, 1040, 1040,  208, 1040, 1040,
      741, 1040, 1040, 1040,  208,  208, 1040, 1040,  208,  208,

      742,  208,  208,  208,  208, 1040,  745,  208,  208,  208,
      208,  208,  743,  208,  208, 1040,  208, 1040,  208,  744,
     1040,  208,  208,  208, 1040, 1040,  746,  208, 1040,  208,
      208, 1040, 1040,  208,  208,  745, 1040,  208,  208,  747,
      208,  208, 1040,  208,  748,  208, 1040,  208,  744,  208,
      208,  208,  208, 1040, 1040,  746, 1040,  208,  208,  749,
     1040,  208, 1040,  208,  208,  208, 1040,  208,  747,  208,
      208,  750,  208,  748,  208, 1040,  208, 1040,  208, 1040,
      208,  208,  751,  208, 1040, 1040,  208,  752,  749, 1040,
      208, 1040,  208,  208,  208, 1040,  208,  753,  208,  208,

      751,  208, 1040, 1040, 1040,  208,  208, 1040, 1040,  208,
      208,  751,  208,  208, 1040,  208,  752, 1040,  756,  208,
     1040,  208,  208,  208,  754,  208,  753,  208,  208,  757,
      208,  755, 1040,  208,  208,  208, 1040,  208,  208,  208,
      208,  208,  208,  759,  208, 1040, 1040,  756,  208, 1040,
      208,  208,  208,  754,  208, 1040,  208,  208,  757,  208,
      755,  208,  208,  208,  758,  208,  208,  208,  208,  208,
      208, 1040,  759,  760,  761, 1040, 1040, 1040,  208,  208,
     1040, 1040,  208,  208,  208,  208,  208, 1040,  208,  762,
      208,  208,  208,  758,  208, 1040,  208,  208, 1040,  208,

     1040,  208,  760,  761, 1040,  208, 1040,  208,  208, 1040,
      764,  208, 1040,  208,  208, 1040, 1040,  208,  762,  208,
      208,  208, 1040,  208, 1040,  208,  208, 1040,  208,  208,
      208, 1040, 1040,  208,  208,  763,  208,  208,  765,  764,
      208, 1040,  208, 1040,  208,  767,  766,  208,  208,  208,
      208,  769,  208, 1040,  208,  208, 1040,  208,  208,  208,
     1040, 1040,  208,  208,  763,  208,  208,  765,  768,  208,
     1040,  208, 1040,  208,  767,  766,  208,  208,  208,  208,
      769,  208, 1040,  208,  208, 1040,  208,  208,  208,  771,
     1040,  208,  208,  770,  208,  208, 1040,  768,  208, 1040,

     1040, 1040,  208, 1040,  208,  208,  208, 1040,  208, 1040,
      208,  776, 1040,  208, 1040,  772,  208,  208,  771,  773,
      208,  208,  770,  208,  208, 1040, 1040,  208,  208,  775,
      774,  208,  208,  208,  208,  208, 1040,  208,  208, 1040,
      776, 1040,  208, 1040,  772,  208,  208,  777,  773, 1040,
      208, 1040, 1040,  208, 1040, 1040,  208,  208,  775,  774,
      208,  208,  208,  208,  208,  778,  208,  208,  208,  208,
     1040,  208,  208,  208,  208,  208,  777,  208, 1040, 1040,
      208, 1040, 1040,  208,  779,  208, 1040,  208, 1040,  208,
      208,  208,  208, 1040,  778,  208,  208,  208,  208,  780,

      208,  208,  208,  208,  208, 1040,  208,  208, 1040,  208,
      781,  208,  208,  779,  208, 1040,  208,  782, 1040,  208,
     1040, 1040, 1040,  208, 1040,  208, 1040,  208,  780,  208,
      208, 1040,  208, 1040, 1040, 1040,  208, 1040, 1040,  781,
      208, 1040, 1040,  208, 1040, 1040,  782,  844,  844,  844,
      844,  844,  208, 1040, 1040, 1040,  208, 1040, 1040,  208,
      783,  784, 1040,  783,  814,  814,  814,  814,  814,  814,
      814,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785, 1040, 1040, 1040, 1040,  785,

      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785, 1040, 1040, 1040, 1040,  786,  787,
      788,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      790,  791,  791,  792, 1040,  793,  794,  795,  796,  797,
      798,  799,  800,  801,  802,  803,  804, 1040,  805,  806,
      807,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  810,  810,  810,  810,  810,  810,  810,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  811,  811,
      811,  808,  808,  558,  558,  558,  558,  558,  558,  558,
      558, 1040,  558,  558,  558,  558, 1040,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  813,  813,  813,

      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  816,  817,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  819,  819,  819,  819,  818,  820,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  208,
      208,  208, 1040,  208,  208,  208,  208,  208,  208,  208,
      208,  208, 1040,  208,  208,  208,  208,  208,  208,  208,
      828, 1040, 1040,  208, 1040, 1040,  208, 1040,  208,  208,
      208, 1040,  827,  208,  208,  208,  208,  208,  208,  208,
      208, 1040,  208,  208,  208,  208,  208,  208,  208,  587,
     1040, 1040,  208, 1040,  587,  208,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,

      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      588,  870,  870,  870,  870,  870,  587, 1040, 1040, 1040,
     1040,  587, 1040, 1040, 1040,  587,  833,  833,  833,  833,
      833,  833,  833,  587, 1040, 1040,  587, 1040,  587,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831, 1040, 1040,  589,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
     1040, 1040, 1040, 1040,  590,  839,  839,  839,  839,  839,

      839, 1040, 1040, 1040,  591, 1040,  592,  592,  592,  592,
      592,  592,  593,  594,  594,  594,  594,  595,  596,  596,
      597,  598,  599,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  301,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  851,
      851,  851,  851,  851,  851,  851,  878,  878,  878,  878,
      878,   84,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95, 1040, 1040,   85,  857,
      857,  857,  857,  857,  857, 1040, 1040, 1040,   86, 1040,
       87,   87,   87,   87,   87,   87,   88,   89,   89,   89,

       89,   90,   91,   91,   92,   93,   94,   96,  933,  933,
      933,  933,  933,  933,  933, 1040, 1040,   97, 1040,   98,
       98,   98,   98,   98,   98,   99,  100,  100,  100,  100,
      101,  102,  102,  103,  104,  105,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  609,  609,  609,  609,  609,  610,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      608,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  610,  610,  610,  610,  610,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  609,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,

      842,  842,  842,  842,  842,  842,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  636,  635,
     1040, 1040, 1040, 1040,  635,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850, 1040, 1040,  208, 1040,
      637, 1040,  208,  208, 1040,  208,  635,  208, 1040,  208,
      208,  635, 1040,  208, 1040,  635,  208,  950,  950,  950,
      950,  950, 1040,  635, 1040, 1040,  635,  208,  635, 1040,
     1040,  208,  208, 1040,  208, 1040,  208,  638,  208,  208,
     1040, 1040,  208, 1040, 1040,  208, 1040,  639, 1040,  640,

      640,  640,  640,  640,  640,  641,  642,  642,  642,  642,
      643,  644,  644,  645,  646,  647,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,

      856,  856,  856,  856,  363,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  998,
      998,  998,  998,  998, 1040, 1040,  129,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674, 1040, 1040,  130, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040,  131, 1040,  132,  132,  132,  132,  132,

      132,  133,  134,  134,  134,  134,  135,  136,  136,  137,
      138,  139,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  667,
      667,  667,  667,  667,  668,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  666,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  668,  668,
      668,  668,  668,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  667,  868,  868,

      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  873,

      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  172,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  785,  785,  785,  785,  785,
      785,  785,  785, 1040,  785,  785,  785,  785,  173,  785,

      785,  785, 1040, 1040, 1040, 1040, 1040, 1040,  174, 1040,
      175,  175,  175,  175,  175,  175,  176,  177,  177,  177,
      177,  178,  179,  179,  180,  181,  182,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  700,  700,  700,  700,  700,  701,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  699,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      701,  701,  701,  701,  701,  700,  700,  700,  700,  700,

      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  700,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  208,  208, 1040, 1040,  208,
      208, 1040,  208,  208,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882, 1040, 1040,  208,  208,  208, 1040,  208,  208,  208,

      208,  208,  208,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      884, 1040,  208,  883, 1040, 1040,  208, 1040,  208,  208,
      208, 1040,  208, 1040,  208,  208,  208,  208, 1040,  885,
      208,  208, 1040,  208, 1040,  208,  886, 1040,  208,  884,
     1040,  208,  883, 1040, 1040,  208,  887,  208,  208,  208,
     1040,  208, 1040,  208,  208,  208,  208, 1040,  885,  208,
      208, 1040,  208, 1040,  208,  886, 1040,  208, 1040, 1040,
      208, 1040, 1040, 1040,  208,  887,  208,  208, 1040, 1040,
      208,  888,  208,  208, 1040, 1040,  208,  889,  208,  208,

     1040,  892,  208,  890,  208,  208,  208,  891,  208, 1040,
      208,  208, 1040,  208, 1040,  208, 1040, 1040, 1040,  208,
      888,  208,  208, 1040, 1040,  208,  889,  208,  208, 1040,
      892,  208,  890,  208,  208,  208,  891,  208, 1040,  208,
      208,  208,  208,  208,  893,  208,  894,  208,  208, 1040,
      208,  208,  208,  208, 1040,  208,  208,  208,  208,  208,
      208,  208,  208,  895,  896,  208,  208, 1040,  208,  208,
      208, 1040,  208,  893,  208,  894,  208,  208, 1040,  208,
      208,  208,  208, 1040,  208,  208,  208,  208,  208,  208,
      208,  208,  896,  896,  208,  208,  897,  208,  208,  899,

      208,  208,  208,  208,  898,  208,  208,  208,  208,  208,
     1040,  208,  208, 1040,  208,  900,  208, 1040, 1040,  208,
      208, 1040, 1040, 1040,  208,  897, 1040,  208,  899,  208,
      208,  208,  208,  898,  208,  208,  208,  208,  208, 1040,
      208,  208, 1040,  208,  900,  208, 1040,  208,  208,  208,
      902,  208,  901,  208,  208,  208,  208, 1040, 1040,  208,
      903,  208,  208, 1040, 1040,  208,  208, 1040,  208,  905,
      208,  904, 1040,  208, 1040, 1040,  208, 1040,  208,  902,
      208,  901,  208,  208,  208,  208, 1040, 1040,  208,  903,
      208,  208, 1040, 1040,  208,  208,  907,  208,  905,  208,

      904,  208,  208, 1040, 1040,  906,  208,  208,  208, 1040,
      208,  208,  208,  208,  208,  908,  208, 1040, 1040,  208,
     1040, 1040,  208,  909,  208,  907,  208, 1040,  208,  208,
      208,  208, 1040, 1040,  906,  208, 1040,  208, 1040,  208,
     1040,  208,  208,  208,  908,  208,  910,  208,  208, 1040,
      208,  208,  909,  208,  911,  208,  912,  208,  208,  208,
      208,  208, 1040,  208,  914,  208,  208,  208,  208, 1040,
      913,  208,  208, 1040,  208,  910,  208,  208, 1040,  208,
     1040,  208,  208,  911,  208,  912,  208,  915,  208,  208,
      208, 1040,  208,  914,  208,  208,  208,  208, 1040,  913,

      208, 1040, 1040,  208, 1040, 1040,  208, 1040, 1040,  917,
      208,  208, 1040,  208, 1040,  208,  915,  916,  208,  208,
      208, 1040, 1040,  208,  208,  918,  208,  208,  919, 1040,
      208, 1040,  208, 1040,  208,  208,  208,  208,  917, 1040,
      208,  920, 1040,  208, 1040, 1040,  916, 1040,  208,  208,
     1040, 1040,  208,  208,  918,  208,  208,  919, 1040,  208,
     1040,  208, 1040,  208,  208,  208,  208,  921,  922,  208,
      920,  208,  208,  208,  208,  923, 1040,  208,  208,  208,
      208, 1040,  208,  208,  208,  208,  208, 1040,  208, 1040,
     1040,  208, 1040, 1040, 1040, 1040,  921,  922, 1040,  953,

      208, 1040,  208,  208,  923, 1040,  208,  208,  208,  208,
     1040,  208,  208,  208,  208,  208, 1040,  208, 1040, 1040,
      208,  924,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,
      926,  926,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  927,
      927,  927,  927,  927,  927,  927,  925,  925,  925,  925,

      925,  925,  925,  925,  925,  925,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  929,  929,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  928,  928,  928,  925,  925,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  931,  931,  931,  785,
      931,  932,  932,  932,  932,  932,  932,  932,  932,  932,

      932,  932,  932,  932,  932,  932,  932,  932,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  935,  936,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  938,  938,  938,
      938,  937,  939,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  808,  808,  808,
      808,  808,  809,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  809,  809,  809,  809,
      809,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  947,  947,

      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  808,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  208,  208, 1040,
     1040,  208,  208, 1040,  208,  208,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832, 1040, 1040, 1040,  208,  208, 1040, 1040,
      208,  208, 1040,  208,  208,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,

      959,  959,  959,  959,  959,  959,  959,  959,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  962,  962,  962,  962,  962,  962,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  208,  967,  208, 1040,  208,  208,  208,  208,
      208,  208,  208,  969,  208, 1040,  208,  968,  208,  208,
      208,  208,  208, 1040,  208, 1040,  208,  208, 1040,  208,
     1040,  208,  967,  208, 1040,  208,  208,  208,  208,  208,
      208,  208,  969,  208, 1040,  208,  968,  208,  208,  208,
      208,  208, 1040,  208, 1040,  208,  208,  208,  208,  971,
     1040,  208,  973, 1040,  208,  972,  208,  970,  208,  208,
      208, 1040,  208, 1040,  208,  208,  208,  208,  208,  974,
      208, 1040,  208,  208, 1040,  208,  208, 1040,  971, 1040,

      208,  973, 1040,  208,  972,  208,  970,  208,  208,  208,
     1040,  208, 1040,  208,  208,  208,  208,  208,  974,  208,
     1040,  208,  208,  208,  208,  208,  976,  208, 1040,  208,
      208, 1040,  208,  208, 1040, 1040, 1040,  208,  975,  208,
      208,  978, 1040,  208,  977,  208,  208, 1040,  208, 1040,
     1040, 1040,  208,  208,  208,  976,  208,  208,  208,  208,
      208,  208,  208, 1040, 1040, 1040,  208,  979,  208,  208,
      978, 1040,  208,  977,  208,  208,  208,  208,  980, 1040,
      208,  208,  208,  208, 1040,  208,  208, 1040,  208,  208,
      208,  208, 1040, 1040,  208,  208,  979,  208,  208,  208,

     1040, 1040,  981,  208,  208,  208,  208,  980,  208,  208,
      208,  208,  208, 1040,  208, 1040, 1040,  208,  208,  208,
      208, 1040,  208,  208,  208,  208,  208,  208,  208, 1040,
     1040,  981,  208,  208,  208,  208, 1040,  208,  208,  982,
      208,  208,  983, 1040, 1040, 1040,  208,  208,  208,  208,
     1040,  208,  208,  208,  208,  208,  985,  208, 1040, 1040,
      208, 1040,  984,  208, 1040,  208, 1040,  208,  982,  208,
      208,  983,  208, 1040, 1040,  208,  208,  208,  208, 1040,
      208,  208,  208,  208,  208,  985,  208, 1040,  986,  208,
     1040,  984, 1040, 1040,  208,  987, 1040, 1040,  208,  208,

     1040,  208, 1040,  208,  208,  208,  208,  988,  208,  208,
     1040,  208,  208, 1040,  208, 1040,  208,  986,  208,  989,
      208,  208,  208,  208,  987, 1040,  208,  991,  208,  208,
     1040, 1040,  208,  208,  208,  208,  988,  208,  992, 1040,
      208,  208,  990,  208, 1040,  208, 1040,  208,  989,  208,
      208,  208,  208,  208, 1040,  208,  991,  208,  208, 1040,
      208,  208,  208,  208,  993,  208,  208,  992,  208,  208,
      208,  990,  208,  208, 1040, 1040,  208,  208, 1040,  208,
      208, 1040,  208, 1040, 1040, 1040,  208, 1040, 1040,  208,
      208,  208, 1040,  993,  208,  208, 1040,  208,  208, 1040,

     1040,  208,  208, 1040, 1040,  208,  208, 1040,  208,  208,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  925,  925,  925,  925,  925,  926,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      924,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  926,  926,  926,  926,  926,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  995,  995,  995,  995,  995,

      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  925,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  996,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999,  999,  999, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  635,

      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
     1002, 1040,  208, 1040, 1040, 1040,  208,  208, 1003,  208,
     1040,  208,  208,  208,  208, 1004,  208,  208,  208,  208,
      208, 1040,  208, 1040, 1040,  208, 1040, 1040, 1040, 1002,
     1040,  208, 1040, 1040, 1040,  208,  208, 1003,  208, 1040,
      208,  208,  208,  208, 1004,  208,  208,  208,  208,  208,

     1005,  208, 1006,  208,  208, 1040, 1040,  208, 1040, 1040,
      208, 1040,  208,  208,  208, 1007,  208,  208,  208,  208,
      208,  208, 1040, 1040, 1040, 1040,  208, 1040, 1040, 1005,
      208, 1006,  208,  208, 1040, 1040,  208, 1040, 1040,  208,
     1040,  208,  208,  208, 1040,  208,  208,  208,  208,  208,
      208, 1008, 1040,  208,  208,  208, 1040,  208,  208,  208,
      208,  208,  208,  208,  208, 1040, 1009,  208,  208, 1010,
      208,  208,  208, 1040,  208, 1040, 1011, 1040,  208,  208,
     1008,  208,  208,  208,  208, 1040,  208,  208,  208,  208,
      208,  208,  208,  208, 1040, 1009,  208,  208, 1010,  208,

      208,  208, 1012,  208, 1013, 1011, 1040,  208,  208, 1040,
      208, 1040, 1040,  208,  208,  208, 1014,  208,  208,  208,
      208,  208,  208,  208, 1040,  208, 1015,  208, 1040,  208,
      208, 1012,  208, 1013,  208,  208, 1040, 1040,  208,  208,
     1040,  208,  208,  208,  208, 1014, 1040,  208,  208, 1040,
      208,  208,  208, 1016,  208, 1015,  208, 1040,  208,  208,
     1040,  208,  208,  208,  208, 1040,  208,  208,  208,  208,
      208,  208,  208,  208, 1040, 1040,  208,  208, 1040,  208,
      208,  208, 1016, 1040, 1017,  208, 1040, 1040,  208, 1040,
     1040,  208, 1040, 1040, 1040,  208, 1040, 1040,  208, 1040,

     1040,  208,  208, 1040, 1040,  208,  208, 1040,  208,  208,
      208, 1040, 1040, 1017,  208, 1040, 1040,  208, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018,  208, 1020, 1021, 1040, 1019, 1040,  208,  208,
     1022, 1040,  208,  208,  208,  208, 1040,  208,  208,  208,
      208,  208, 1040,  208, 1040, 1040,  208, 1040, 1040, 1040,
     1040,  208, 1020, 1021, 1040, 1019, 1040,  208,  208, 1022,
     1040,  208,  208,  208,  208, 1040,  208,  208,  208,  208,

      208, 1040,  208,  208, 1025,  208, 1040,  208, 1023, 1040,
      208,  208, 1024, 1040, 1040,  208, 1026,  208,  208,  208,
     1040,  208, 1040,  208,  208, 1040,  208,  208, 1040, 1040,
     1040,  208,  208, 1025,  208, 1040,  208, 1023, 1040,  208,
      208, 1040, 1040, 1040,  208, 1026,  208,  208,  208, 1040,
      208, 1040,  208,  208, 1040,  208,  208, 1040, 1040, 1027,
      208,  208,  208,  208, 1040,  208,  208,  208,  208,  208,
     1040,  208, 1028,  208,  208,  208, 1029,  208, 1040,  208,
      208, 1040,  208, 1040, 1040,  208, 1040, 1040, 1027,  208,
      208,  208,  208, 1040,  208,  208,  208,  208,  208, 1040,

      208, 1028,  208,  208,  208, 1029,  208, 1040,  208,  208,
     1040,  208,  208, 1040,  208, 1040,  208, 1040,  208,  208,
      208,  208,  208, 1040,  208, 1030,  208,  208,  208,  208,
      208, 1040,  208, 1040,  208,  208, 1031,  208, 1040, 1040,
      208,  208, 1040,  208, 1040,  208, 1040, 1040,  208,  208,
     1040,  208, 1040,  208, 1030,  208,  208,  208,  208,  208,
     1040,  208, 1040,  208,  208,  208,  208, 1040, 1032,  208,
      208,  208,  208, 1033,  208,  208, 1040,  208,  208,  208,
      208, 1034, 1040,  208,  208,  208,  208,  208, 1040,  208,
     1040,  208,  208, 1040, 1040,  208, 1040, 1032,  208,  208,

      208, 1040, 1033,  208,  208, 1040,  208,  208,  208,  208,
     1034, 1035,  208,  208,  208,  208,  208, 1040,  208, 1040,
      208,  208,  208, 1040,  208, 1036,  208,  208,  208,  208,
     1037, 1040,  208,  208,  208,  208, 1040,  208,  208, 1040,
      208,  208,  208,  208, 1040, 1040, 1038,  208, 1040,  208,
      208,  208, 1040, 1040, 1036,  208, 1040,  208,  208, 1040,
     1040,  208,  208,  208,  208, 1040,  208,  208, 1040,  208,
      208,  208,  208, 1040, 1040, 1038,  208,  208,  208,  208,
     1040,  208, 1039,  208,  208,  208, 1040,  208, 1040,  208,
      208, 1040,  208, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040,  208, 1040, 1040, 1040,
      208, 1040,  208,  208,  208, 1040,  208, 1040,  208,  208,
     1040,  208,   82, 1040,   82,   82,   82,   95, 1040,   95,
       95,   95,  127, 1040,  127,  127,  127,  170,  170,  170,
      587,  587,  587,  587,  587,  635,  635,  635,  635,  635,
      726,  726,   82, 1040,   82,   82,   82,   95, 1040,   95,
       95,   95,  127, 1040,  127,  127,  127,  170,  170,  170,
        3, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040
    } ;

static yyconst flex_int16_t yy_chk[12091] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
     1045,  865,    5,    9,   14,   14,   14,   14,   17,   19,
       17,   19,   22,   34,   22,   31,   14,   34,   38,  864,
       34,   79,   38,   31,   79,   38,   22,  146,   31,   31,
      863,   32,   31,   32,   32,   31,   32,   32,   31,  146,
       32,   39,   34,  862,   31,   39,   34,   38,   39,   34,
        9,   38,   31,  861,   38,   22,  860,   31,   31,  859,
       32,   31,   32,   32,   31,   32,   32,   31,  146,   32,
       39,   68,   68,   68,   39,   68,  858,   39,   70,   70,

       70,   70,   70,   70,   70,  850,  147,    9,   36,   47,
      848,   36,   36,   47,  832,   36,   47,    9,  147,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   36,   47,  830,
       36,   36,   47,  793,   36,   47,   10,  147,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   11,   76,   76,   76,  123,
      123,  123,  726,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   49,   49,   49,

       49,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  167,  167,  167,  665,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  664,  374,   11,   11,
       49,   11,   11,   11,   11,   11,   11,   11,   11,  374,
       11,   11,   11,   13,   33,  149,   35,  149,   33,   37,
      149,   35,   33,  375,   35,   35,  663,   33,   35,   41,
       33,   33,   37,   41,   33,  375,   37,   41,  374,   37,
      662,  661,   41,   33,  660,   35,   41,   33,   37,   41,

       35,   33,  656,   35,   35,   13,   33,   35,   41,   33,
       33,   37,   41,   33,  375,   37,   41,  655,   37,  636,
      588,   41,  115,  115,  115,   41,  115,  447,   41,   66,
       66,   66,   66,   66,   66,   66,   66,  430,   66,   66,
       66,   66,   13,   66,   66,   66,   94,   94,   94,   94,
       94,   94,   13,  395,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   23,   88,   88,   88,   88,   88,   88,   88,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,  201,  201,  201,  384,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  231,  231,  231,  383,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  366,  330,   23,   23,  313,   23,   23,   23,
       23,   23,   23,   23,   23,   40,   23,   23,   23,   25,
       25,   42,  304,   40,  140,  140,  140,  140,   40,   40,
      219,  143,   40,  143,   42,   40,  140,  377,   42,   44,
       42,   42,   44,   44,   40,  143,   44,   56,  204,  377,

       42,   56,   40,  144,   56,  142,  128,   40,   40,   83,
      376,   40,  376,   42,   40,  376,   58,   42,   44,   42,
       42,   44,   44,   52,  143,   44,   56,   51,  377,   56,
       56,   27,   20,   56,   12,   25,   99,   99,   99,   99,
       99,   99,   99,    8,    7,   25,    3,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,  105,  105,  105,  105,  105,
      105,    0,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  274,  274,  274,  274,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  341,  341,  341,    0,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,    0,    0,   28,   28,  274,
       28,   28,   28,   28,   28,   28,   28,   28,    0,   28,
       28,   28,   30,   30,    0,   30,   30,  139,  139,  139,
      139,  139,  139,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  407,  407,  407,

        0,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  458,  458,  458,    0,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,    0,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   43,
       30,   30,   30,   45,  145,    0,  145,   43,    0,   43,
       43,   43,   45,    0,   43,    0,   45,    0,  145,   45,
      117,  117,  117,  117,  117,  117,  117,    0,   43,  159,
      159,  159,   45,  159,    0,    0,   43,    0,   43,   43,

       43,   45,   46,   43,   54,   45,   46,  145,   45,   54,
       46,    0,   54,   54,  378,   46,   54,   48,   48,   46,
       46,   46,   46,   48,    0,   54,  378,   48,    0,    0,
       48,   46,  379,   54,  379,   46,    0,  379,   54,   46,
        0,   54,   54,    0,   46,   54,   48,   48,   46,   46,
       46,   46,   48,    0,   55,  378,   48,   55,   55,   48,
        0,   55,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,    0,
      193,  193,  193,   55,  193,    0,   55,   55,    0,    0,
       55,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   82,   84,  575,  575,  575,
        0,   84,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,  133,  133,  133,  133,  133,  133,  133,
        0,    0,   82,   84,  148,  380,  148,  380,   84,  381,
      380,    0,   84,  298,  298,  298,  298,  298,  148,    0,
       84,  381,    0,   84,    0,   84,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,  805,  805,  805,   82,

      161,  161,  161,  161,  161,  161,  161,  148,    0,   82,
      381,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   93,   95,  176,  176,  176,
      176,  176,  176,  176,    0,    0,   95,    0,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  106,  182,  182,  182,  182,  182,
      182,    0,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,    0,    0,    0,    0,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,    0,    0,    0,    0,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,    0,  106,  106,  106,    0,
      106,  106,  106,  106,  106,  106,  106,  106,    0,  106,
      106,  106,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  109,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  113,  113,  113,  113,  113,  113,
      113,  113,    0,  113,  113,  113,  113,    0,  113,  113,
      113,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      116,  116,  116,  116,  116,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      127,  129,    0,    0,    0,    0,  129,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,    0,    0,
        0,    0,  127,  360,  360,  360,  360,  360,  129,  382,
      652,  382,  652,  129,  382,  652,    0,  129,  195,  195,
      195,  195,  195,  195,  195,  129,    0,    0,  129,    0,
      129,  157,  157,  157,  157,  157,  157,  157,  157,  127,
      157,  157,  157,  157,    0,  157,  157,  157,    0,  127,

        0,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  150,  150,    0,  150,
      225,  225,  225,  225,  225,  225,  225,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,    0,    0,    0,    0,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
        0,    0,    0,    0,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
        0,  150,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  150,  150,    0,  150,  150,  150,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  156,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  170,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  426,  426,  426,
      426,  426,    0,  170,  335,  335,  335,  335,  335,  335,
      335,    0,    0,  170,    0,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  184,  401,  401,  401,  401,  401,  401,
      401,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,    0,    0,    0,    0,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,    0,    0,    0,    0,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,    0,  184,  184,  184,    0,  184,
      184,  184,  184,  184,  184,  184,  184,    0,  184,  184,

      184,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  190,  191,  191,  191,  191,  191,  191,  191,
      191,    0,  191,  191,  191,  191,    0,  191,  191,  191,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  205,
      206,  208,  211,  205,  210,  208,  205,  209,  208,  211,
        0,  209,  210,  211,  209,  210,  211,  209,    0,  210,
      206,  654,  210,  654,  206,    0,  654,  206,  205,    0,
      208,  211,  205,  210,  208,  205,  209,  208,  211,    0,

      209,  210,  211,  209,  210,  211,  209,    0,  210,  206,
      657,  210,  657,  206,    0,  657,  206,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  220,  220,  220,  220,
      220,  220,  220,  220,    0,  220,  220,  220,  220,    0,
      220,  220,  220,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  234,  235,    0,    0,
      234,  235,  236,  234,  235,    0,  236,  237,  236,  236,
        0,  237,    0,    0,  237,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  234,  235,    0,    0,  234,
      235,  236,  234,  235,  653,  236,  237,  236,  236,  238,
      237,    0,    0,  237,    0,  658,  653,  239,  238,  240,
        0,  239,  238,  239,  239,  238,  241,  658,  240,    0,
      241,  241,  240,  241,  242,  240,  242,  243,  238,    0,

      242,  243,    0,  242,  243,  653,  239,  238,  240,    0,
      239,  238,  239,  239,  238,  241,  658,  240,    0,  241,
      241,  240,  241,  242,  240,  242,  243,  244,  244,  242,
      243,  244,  242,  243,  244,  245,    0,  246,    0,  246,
      247,  247,    0,  246,  247,  245,  246,  247,  659,  245,
      659,    0,  245,  659,  250,    0,  244,  244,  250,    0,
      244,  250,    0,  244,  245,    0,  246,    0,  246,  247,
      247,  248,  246,  247,  245,  246,  247,    0,  245,  249,
        0,  245,  253,  250,  248,  248,  253,  250,  248,  253,
      250,  248,  249,  249,    0,    0,  249,  251,    0,  249,

      248,  251,  251,    0,  251,  567,  567,  567,  249,  567,
        0,  253,    0,  248,  248,  253,    0,  248,  253,    0,
      248,  249,  249,    0,    0,  249,  251,  252,  249,    0,
      251,  251,    0,  251,  252,    0,    0,  252,    0,  252,
      255,    0,    0,  252,    0,  252,  252,  254,  254,    0,
        0,    0,  254,  255,    0,  254,  252,  255,  256,    0,
      255,    0,  256,  252,    0,  256,  252,  256,  252,  255,
        0,    0,  252,    0,  252,  252,  254,  254,    0,    0,
        0,  254,  255,    0,  254,    0,  255,  256,    0,  255,
        0,  256,  257,  257,  256,  258,  256,  257,    0,  258,

      257,    0,  258,  259,  259,    0,    0,  260,  259,  260,
        0,  259,    0,  260,    0,  261,  260,    0,    0,    0,
        0,  257,  257,  261,  258,    0,  257,  261,  258,  257,
      261,  258,  259,  259,    0,    0,  260,  259,  260,    0,
      259,  263,  260,  262,  261,  260,    0,  262,  262,    0,
      262,  263,  261,  264,    0,  263,  261,    0,  263,  261,
        0,  265,  264,    0,  265,    0,  264,    0,    0,  264,
      263,  265,  262,  265,    0,  265,  262,  262,  265,  262,
      263,    0,  264,  267,  263,  267,    0,  263,  267,  267,
      265,  264,  267,  265,    0,  264,    0,    0,  264,    0,

      265,    0,  265,    0,  265,  266,  266,  265,    0,    0,
      266,  269,  267,  266,  267,    0,    0,  267,  267,    0,
      268,  267,  268,    0,  269,    0,  268,  269,  269,  268,
        0,  269,    0,    0,  266,  266,  270,  270,    0,  266,
      269,  270,  266,    0,  270,    0,    0,    0,    0,  268,
        0,  268,    0,  269,    0,  268,  269,  269,  268,    0,
      269,    0,  271,  272,    0,  270,  270,  271,  271,    0,
      270,  271,  272,  270,  271,    0,  272,  273,    0,  272,
        0,  273,  273,  279,  273,    0,    0,  279,    0,    0,
      279,  271,  272,    0,    0,    0,  271,  271,    0,    0,

      271,  272,    0,  271,    0,  272,  273,    0,  272,    0,
      273,  273,  279,  273,  277,    0,  279,    0,  279,  279,
        0,    0,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,    0,    0,    0,    0,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,    0,    0,    0,    0,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,    0,    0,  277,  277,    0,

      277,  277,  277,  277,  277,  277,  277,  277,  278,  277,
      277,  277,  278,  281,  282,  278,    0,  281,  282,  283,
      281,  282,    0,  283,  284,  285,  283,    0,  284,  285,
        0,  284,  285,    0,    0,  278,    0,  278,    0,    0,
        0,  278,  281,  282,  278,    0,  281,  282,  283,  281,
      282,    0,  283,  284,  285,  283,    0,  284,  285,  286,
      284,  285,    0,  286,  287,    0,  286,    0,  287,    0,
        0,  287,    0,    0,    0,  331,  331,  331,  331,  331,
      331,  331,  331,    0,  331,  331,  331,  331,  286,  331,
      331,  331,  286,  287,    0,  286,    0,  287,    0,    0,

      287,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,

      293,  293,  293,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  302,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
        0,    0,  302,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,    0,    0,  302,
      452,  452,  452,  452,  452,  452,  452,    0,    0,  302,

        0,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  319,  319,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,    0,  333,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  351,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  357,  357,  357,  357,

      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  364,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  477,  477,  477,  477,
      477,    0,    0,  364,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,    0,    0,
      364,  504,  504,  504,  504,  504,    0,    0,    0,    0,
      364,    0,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  396,  396,  396,  396,
      396,  396,  396,  396,    0,  396,  396,  396,  396,    0,
      396,  396,  396,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  404,  404,  404,  404,  404,

      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,

      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  448,  448,  448,  448,  448,
      448,  448,  448,    0,  448,  448,  448,  448,    0,  448,
      448,  448,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,    0,  450,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  453,  453,  453,  453,  453,  453,  453,

      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,

      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  481,  482,  483,    0,  481,  482,  483,  481,
      482,  483,  484,  485,  486,    0,  484,  485,  486,  484,
      485,  486,  487,  488,    0,    0,  487,  488,    0,  487,
      488,  481,  482,  483,    0,  481,  482,  483,  481,  482,
      483,  484,  485,  486,    0,  484,  485,  486,  484,  485,
      486,  487,  488,  489,    0,  487,  488,  489,  487,  488,
      489,  490,  491,  492,    0,  490,  491,  492,  490,  491,
      492,  493,    0,    0,    0,  493,    0,    0,  493,    0,
        0,    0,  489,    0,    0,    0,  489,    0,    0,  489,
      490,  491,  492,    0,  490,  491,  492,  490,  491,  492,

      493,    0,    0,    0,  493,    0,    0,  493,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  499,  499,  499,  499,  499,  499,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  507,  508,    0,  509,  510,    0,    0,  509,
        0,  507,  509,  508,    0,  507,    0,  508,  507,  510,
      508,  511,    0,  510,    0,  511,  510,    0,  511,  512,
        0,  507,  508,  512,  509,  510,  512,    0,  509,    0,
      507,  509,  508,  513,  507,    0,  508,  507,  510,  508,
      511,  514,  510,    0,  511,  510,  513,  511,  512,    0,
      513,  515,  512,  513,  514,  512,    0,    0,  514,    0,
      515,  514,  513,  516,  515,    0,    0,  515,    0,    0,
      514,    0,    0,    0,  516,  513,    0,    0,  516,  513,

      515,  516,  513,  514,  518,    0,  518,  514,  518,  515,
      514,  518,  516,  515,  517,    0,  515,    0,  517,  517,
        0,  517,  519,  516,    0,    0,  519,  516,    0,  519,
      516,    0,    0,  518,  520,  518,    0,  518,  520,  520,
      518,  520,    0,  517,  521,  521,    0,  517,  517,  521,
      517,  519,  521,    0,    0,  519,    0,  522,  519,  522,
        0,  522,    0,  520,  522,  523,    0,  520,  520,  523,
      520,  523,  523,  521,  521,    0,  524,    0,  521,    0,
      524,  521,  524,  524,    0,    0,  522,  525,  522,    0,
      522,    0,  525,  522,  523,    0,  525,  526,  523,  525,

      523,  523,    0,    0,    0,  524,  526,    0,    0,  524,
      526,  524,  524,  526,    0,  529,  525,    0,  529,  529,
        0,  525,  529,  527,  527,  525,  526,  527,  525,  530,
      527,  528,    0,  528,  530,  526,    0,  528,  530,  526,
      528,  530,  526,  532,  529,    0,    0,  529,  529,    0,
      532,  529,  527,  527,  532,    0,  527,  532,  530,  527,
      528,  531,  528,  530,  531,  531,  528,  530,  531,  528,
      530,    0,  532,  533,  534,    0,    0,    0,  533,  532,
        0,    0,  533,  532,  534,  533,  532,    0,  534,  536,
      531,  534,  535,  531,  531,    0,  535,  531,    0,  535,

        0,  536,  533,  534,    0,  536,    0,  533,  536,    0,
      538,  533,    0,  534,  533,    0,    0,  534,  536,  538,
      534,  535,    0,  538,    0,  535,  538,    0,  535,  537,
      536,    0,    0,  537,  536,  537,  537,  536,  539,  538,
      539,    0,  540,    0,  539,  541,  540,  539,  538,  540,
      541,  543,  538,    0,  541,  538,    0,  541,  537,  543,
        0,    0,  537,  543,  537,  537,  543,  539,  542,  539,
        0,  540,    0,  539,  541,  540,  539,  542,  540,  541,
      543,  542,    0,  541,  542,    0,  541,  544,  543,  545,
        0,  544,  543,  544,  544,  543,    0,  542,  545,    0,

        0,    0,  545,    0,  549,  545,  542,    0,  549,    0,
      542,  549,    0,  542,    0,  546,  544,  546,  545,  547,
      544,  546,  544,  544,  546,    0,    0,  545,  547,  548,
      547,  545,  547,  549,  545,  547,    0,  549,  548,    0,
      549,    0,  548,    0,  546,  548,  546,  550,  547,    0,
      546,    0,    0,  546,    0,    0,  550,  547,  548,  547,
      550,  547,  551,  550,  547,  551,  551,  548,  552,  551,
        0,  548,  552,  553,  548,  552,  550,  553,    0,    0,
      553,    0,    0,  554,  554,  550,    0,  554,    0,  550,
      554,  551,  550,    0,  551,  551,  555,  552,  551,  555,

      555,  552,  553,  555,  552,    0,  553,  556,    0,  553,
      556,  556,  554,  554,  556,    0,  554,  557,    0,  554,
        0,    0,    0,  557,    0,  555,    0,  557,  555,  555,
      557,    0,  555,    0,    0,    0,  556,    0,    0,  556,
      556,    0,    0,  556,    0,    0,  557,  625,  625,  625,
      625,  625,  557,    0,    0,    0,  557,    0,    0,  557,
      558,  558,    0,  558,  569,  569,  569,  569,  569,  569,
      569,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,    0,    0,    0,    0,  558,

      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,    0,    0,    0,    0,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,    0,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,    0,  558,  558,
      558,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  561,  561,  561,  561,  561,

      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  565,  565,  565,  565,  565,  565,  565,
      565,    0,  565,  565,  565,  565,    0,  565,  565,  565,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  576,  576,  576,  576,  576,  576,  576,  576,

      576,  576,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  578,
      579,  580,    0,  578,  579,  580,  578,  579,  580,  581,
      582,  583,    0,  581,  582,  583,  581,  582,  583,  584,
      579,    0,    0,  584,    0,    0,  584,    0,  578,  579,
      580,    0,  578,  579,  580,  578,  579,  580,  581,  582,
      583,    0,  581,  582,  583,  581,  582,  583,  584,  589,
        0,    0,  584,    0,  589,  584,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  586,  586,  586,  586,  586,  586,  586,

      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      587,  685,  685,  685,  685,  685,  589,    0,    0,    0,
        0,  589,    0,    0,    0,  589,  593,  593,  593,  593,
      593,  593,  593,  589,    0,    0,  589,    0,  589,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,    0,    0,  587,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
        0,    0,    0,    0,  587,  599,  599,  599,  599,  599,

      599,    0,    0,    0,  587,    0,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  600,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  641,
      641,  641,  641,  641,  641,  641,  716,  716,  716,  716,
      716,  600,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,    0,    0,  600,  647,
      647,  647,  647,  647,  647,    0,    0,    0,  600,    0,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,

      600,  600,  600,  600,  600,  600,  600,  604,  799,  799,
      799,  799,  799,  799,  799,    0,    0,  604,    0,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  616,  616,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,

      622,  622,  622,  622,  622,  622,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  634,  634,  634,  634,  634,  634,  634,  634,  634,

      634,  634,  634,  634,  634,  634,  634,  634,  635,  637,
        0,    0,    0,    0,  637,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,    0,    0,  727,    0,
      635,    0,  727,  728,    0,  727,  637,  728,    0,  729,
      728,  637,    0,  729,    0,  637,  729,  824,  824,  824,
      824,  824,    0,  637,    0,    0,  637,  727,  637,    0,
        0,  727,  728,    0,  727,    0,  728,  635,  729,  728,
        0,    0,  729,    0,    0,  729,    0,  635,    0,  635,

      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646,  648,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  943,
      943,  943,  943,  943,    0,    0,  648,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,    0,    0,  648,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  648,    0,  648,  648,  648,  648,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  695,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  794,  794,  794,  794,  794,
      794,  794,  794,    0,  794,  794,  794,  794,  695,  794,

      794,  794,    0,    0,    0,    0,    0,    0,  695,    0,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  710,  710,  710,  710,  710,

      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  730,  731,    0,    0,  730,
      731,    0,  730,  731,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,    0,    0,  734,  730,  731,    0,  734,  730,  731,

      734,  730,  731,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      736,    0,  734,  735,    0,    0,  734,    0,  735,  734,
      736,    0,  735,    0,  736,  735,  737,  736,    0,  737,
      737,  738,    0,  737,    0,  738,  738,    0,  738,  736,
        0,  739,  735,    0,    0,  739,  739,  735,  739,  736,
        0,  735,    0,  736,  735,  737,  736,    0,  737,  737,
      738,    0,  737,    0,  738,  738,    0,  738,    0,    0,
      739,    0,    0,    0,  739,  739,  740,  739,    0,    0,
      740,  740,  741,  740,    0,    0,  741,  741,  742,  741,

        0,  744,  742,  742,  743,  742,  744,  743,  743,    0,
      744,  743,    0,  744,    0,  740,    0,    0,    0,  740,
      740,  741,  740,    0,    0,  741,  741,  742,  741,    0,
      744,  742,  742,  743,  742,  744,  743,  743,    0,  744,
      743,  745,  744,  746,  747,  745,  749,  746,  745,    0,
      746,  748,  749,  747,    0,  748,  749,  747,  748,  749,
      747,  750,  751,  750,  751,  750,  751,    0,  750,  751,
      745,    0,  746,  747,  745,  749,  746,  745,    0,  746,
      748,  749,  747,    0,  748,  749,  747,  748,  749,  747,
      750,  751,  750,  751,  750,  751,  752,  750,  751,  755,

      752,  753,  754,  752,  753,  753,  754,  761,  753,  754,
        0,  761,  755,    0,  761,  756,  755,    0,    0,  755,
      756,    0,    0,    0,  756,  752,    0,  756,  755,  752,
      753,  754,  752,  753,  753,  754,  761,  753,  754,    0,
      761,  755,    0,  761,  756,  755,    0,  757,  755,  756,
      758,  757,  757,  756,  757,  758,  756,    0,    0,  758,
      759,  759,  758,    0,    0,  759,  760,    0,  759,  762,
      760,  760,    0,  760,    0,    0,  757,    0,  762,  758,
      757,  757,  762,  757,  758,  762,    0,    0,  758,  759,
      759,  758,    0,    0,  759,  760,  764,  759,  762,  760,

      760,  763,  760,    0,    0,  763,  764,  762,  763,    0,
      764,  762,  765,  764,  762,  766,  765,    0,    0,  765,
        0,    0,  767,  767,  766,  764,  767,    0,  766,  767,
      763,  766,    0,    0,  763,  764,    0,  763,    0,  764,
        0,  765,  764,  768,  766,  765,  768,  768,  765,    0,
      768,  767,  767,  766,  769,  767,  770,  766,  767,  769,
      766,  771,    0,  769,  772,  771,  769,  770,  771,    0,
      771,  770,  768,    0,  770,  768,  768,  772,    0,  768,
        0,  772,  773,  769,  772,  770,  773,  773,  769,  773,
      771,    0,  769,  772,  771,  769,  770,  771,    0,  771,

      770,    0,    0,  770,    0,    0,  772,    0,    0,  775,
      772,  773,    0,  772,    0,  773,  773,  774,  773,  774,
      775,    0,    0,  774,  775,  776,  774,  775,  777,    0,
      776,    0,  777,    0,  776,  777,  778,  776,  775,    0,
      778,  778,    0,  778,    0,    0,  774,    0,  774,  775,
        0,    0,  774,  775,  776,  774,  775,  777,    0,  776,
        0,  777,    0,  776,  777,  778,  776,  779,  780,  778,
      778,  779,  778,  782,  779,  781,    0,  782,  780,  827,
      782,    0,  780,  827,  781,  780,  827,    0,  781,    0,
        0,  781,    0,    0,    0,    0,  779,  780,    0,  827,

      779,    0,  782,  779,  781,    0,  782,  780,  827,  782,
        0,  780,  827,  781,  780,  827,    0,  781,    0,    0,
      781,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  798,  798,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,

      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  828,  829,    0,
        0,  828,  829,    0,  828,  829,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,    0,    0,    0,  828,  829,    0,    0,
      828,  829,    0,  828,  829,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,

      835,  835,  835,  835,  835,  835,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  846,  846,  846,  846,  846,  846,  846,  846,  846,

      846,  846,  846,  846,  846,  846,  846,  846,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  855,  855,  855,  855,  855,  855,  855,

      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  880,  880,  880,  880,  880,

      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  882,  883,  884,    0,  882,  883,  884,  882,
      883,  884,  885,  888,  886,    0,  885,  886,  886,  885,
      887,  886,  888,    0,  887,    0,  888,  887,    0,  888,
        0,  882,  883,  884,    0,  882,  883,  884,  882,  883,
      884,  885,  888,  886,    0,  885,  886,  886,  885,  887,
      886,  888,    0,  887,    0,  888,  887,  889,  888,  890,
        0,  889,  892,    0,  889,  891,  892,  889,  890,  892,
      891,    0,  890,    0,  891,  890,  893,  891,  894,  893,
      893,    0,  894,  893,    0,  894,  889,    0,  890,    0,

      889,  892,    0,  889,  891,  892,  889,  890,  892,  891,
        0,  890,    0,  891,  890,  893,  891,  894,  893,  893,
        0,  894,  893,  895,  894,  896,  897,  895,    0,  896,
      895,    0,  896,  897,    0,    0,    0,  897,  895,  898,
      897,  899,    0,  898,  898,  899,  898,    0,  899,    0,
        0,    0,  895,  900,  896,  897,  895,  900,  896,  895,
      900,  896,  897,    0,    0,    0,  897,  901,  898,  897,
      899,    0,  898,  898,  899,  898,  901,  899,  903,    0,
      901,  902,  900,  901,    0,  902,  900,    0,  902,  900,
      904,  903,    0,    0,  904,  903,  901,  904,  903,  905,

        0,    0,  905,  905,  906,  901,  905,  903,  906,  901,
      902,  906,  901,    0,  902,    0,    0,  902,  907,  904,
      903,    0,  907,  904,  903,  907,  904,  903,  905,    0,
        0,  905,  905,  906,  908,  905,    0,  906,  908,  908,
      906,  908,  909,    0,    0,    0,  909,  907,  910,  909,
        0,  907,  910,  911,  907,  910,  912,  911,    0,    0,
      911,    0,  911,  908,    0,  912,    0,  908,  908,  912,
      908,  909,  912,    0,    0,  909,  913,  910,  909,    0,
      913,  910,  911,  913,  910,  912,  911,    0,  914,  911,
        0,  911,    0,    0,  912,  915,    0,    0,  912,  914,

        0,  912,    0,  914,  915,  913,  914,  916,  915,  913,
        0,  915,  913,    0,  917,    0,  916,  914,  917,  917,
      916,  917,  919,  916,  915,    0,  919,  919,  914,  919,
        0,    0,  914,  915,  920,  914,  916,  915,  920,    0,
      915,  920,  918,  917,    0,  916,    0,  917,  917,  916,
      917,  919,  916,  918,    0,  919,  919,  918,  919,    0,
      918,  921,  923,  920,  922,  921,  923,  920,  921,  923,
      920,  918,  953,  922,    0,    0,  953,  922,    0,  953,
      922,    0,  918,    0,    0,    0,  918,    0,    0,  918,
      921,  923,    0,  922,  921,  923,    0,  921,  923,    0,

        0,  953,  922,    0,    0,  953,  922,    0,  953,  922,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  938,  938,  938,  938,  938,

      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  962,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      967,    0,  968,    0,    0,    0,  968,  967,  968,  968,
        0,  967,  969,  970,  967,  970,  969,  970,  971,  969,
      970,    0,  971,    0,    0,  971,    0,    0,    0,  967,
        0,  968,    0,    0,    0,  968,  967,  968,  968,    0,
      967,  969,  970,  967,  970,  969,  970,  971,  969,  970,

      972,  971,  973,  974,  971,    0,    0,  974,    0,    0,
      974,    0,  972,  973,  976,  975,  972,  973,  976,  972,
      973,  976,    0,    0,    0,    0,  975,    0,    0,  972,
      975,  973,  974,  975,    0,    0,  974,    0,    0,  974,
        0,  972,  973,  976,    0,  972,  973,  976,  972,  973,
      976,  978,    0,  977,  978,  975,    0,  977,  978,  975,
      977,  978,  975,  979,  980,    0,  979,  979,  980,  980,
      979,  980,  981,    0,  982,    0,  981,    0,  982,  981,
      978,  982,  977,  978,  984,    0,  977,  978,  984,  977,
      978,  984,  979,  980,    0,  979,  979,  980,  980,  979,

      980,  981,  983,  982,  985,  981,    0,  982,  981,    0,
      982,    0,    0,  984,  985,  983,  986,  984,  985,  983,
      984,  985,  983,  987,    0,  986,  987,  987,    0,  986,
      987,  983,  986,  985,  988,  989,    0,    0,  988,  989,
        0,  988,  989,  985,  983,  986,    0,  985,  983,    0,
      985,  983,  987,  990,  986,  987,  987,    0,  986,  987,
        0,  986,  990,  988,  989,    0,  990,  988,  989,  990,
      988,  989,  991,  992,    0,    0,  991,  992,    0,  991,
      992,  993,  990,    0,  993,  993,    0,    0,  993,    0,
        0,  990,    0,    0,    0,  990,    0,    0,  990,    0,

        0,  991,  992,    0,    0,  991,  992,    0,  991,  992,
      993,    0,    0,  993,  993,    0,    0,  993,  999,  999,
      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,  999,  999,  999,  999, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1002, 1003, 1004,    0, 1002,    0, 1008, 1002,
     1005,    0, 1008, 1004, 1003, 1008,    0, 1004, 1003, 1005,
     1004, 1003,    0, 1005,    0,    0, 1005,    0,    0,    0,
        0, 1002, 1003, 1004,    0, 1002,    0, 1008, 1002, 1005,
        0, 1008, 1004, 1003, 1008,    0, 1004, 1003, 1005, 1004,

     1003,    0, 1005, 1006, 1009, 1005,    0, 1006, 1006,    0,
     1006, 1007, 1007,    0,    0, 1007, 1010, 1009, 1007, 1011,
        0, 1009,    0, 1011, 1009,    0, 1011, 1010,    0,    0,
        0, 1010, 1006, 1009, 1010,    0, 1006, 1006,    0, 1006,
     1007,    0,    0,    0, 1007, 1010, 1009, 1007, 1011,    0,
     1009,    0, 1011, 1009,    0, 1011, 1010,    0,    0, 1012,
     1010, 1012, 1013, 1010,    0, 1012, 1013, 1014, 1012, 1013,
        0, 1014, 1015, 1015, 1014, 1016, 1017, 1015,    0, 1016,
     1015,    0, 1016,    0,    0, 1017,    0,    0, 1012, 1017,
     1012, 1013, 1017,    0, 1012, 1013, 1014, 1012, 1013,    0,

     1014, 1015, 1015, 1014, 1016, 1017, 1015,    0, 1016, 1015,
        0, 1016, 1019,    0, 1017,    0, 1019,    0, 1017, 1019,
     1020, 1017, 1021,    0, 1020, 1020, 1021, 1020, 1022, 1021,
     1023,    0, 1022,    0, 1023, 1022, 1024, 1023,    0,    0,
     1024, 1019,    0, 1024,    0, 1019,    0,    0, 1019, 1020,
        0, 1021,    0, 1020, 1020, 1021, 1020, 1022, 1021, 1023,
        0, 1022,    0, 1023, 1022, 1024, 1023,    0, 1025, 1024,
     1025, 1027, 1024, 1026, 1025, 1027,    0, 1025, 1027, 1026,
     1028, 1029,    0, 1026, 1028, 1030, 1026, 1028,    0, 1030,
        0, 1029, 1030,    0,    0, 1029,    0, 1025, 1029, 1025,

     1027,    0, 1026, 1025, 1027,    0, 1025, 1027, 1026, 1028,
     1029, 1031, 1026, 1028, 1030, 1026, 1028,    0, 1030,    0,
     1029, 1030, 1031,    0, 1029, 1033, 1031, 1029, 1032, 1031,
     1035,    0, 1032, 1034, 1033, 1032,    0, 1034, 1033,    0,
     1034, 1033, 1036, 1035,    0,    0, 1036, 1035,    0, 1036,
     1035, 1031,    0,    0, 1033, 1031,    0, 1032, 1031,    0,
        0, 1032, 1034, 1033, 1032,    0, 1034, 1033,    0, 1034,
     1033, 1036, 1035,    0,    0, 1036, 1035, 1037, 1036, 1035,
        0, 1037, 1037, 1038, 1037, 1039,    0, 1038,    0, 1039,
     1038,    0, 1039,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1037,    0,    0,    0,
     1037,    0, 1038, 1037, 1039,    0, 1038,    0, 1039, 1038,
        0, 1039, 1041,    0, 1041, 1041, 1041, 1042,    0, 1042,
     1042, 1042, 1043,    0, 1043, 1043, 1043, 1044, 1044, 1044,
     1046, 1046, 1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047,
     1048, 1048, 1049,    0, 1049, 1049, 1049, 1050,    0, 1050,
     1050, 1050, 1051,    0, 1051, 1051, 1051, 1052, 1052, 1052,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,

     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040
    } ;

static yyconst flex_int16_t yy_rule_linenum[113] =
    {   0,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
      246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
      256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
      286,  287,  288,  289,  290,  291,  292,  293,  294,  295,

      296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
      306,  309
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/** \file SPARQLfedScanner.ll Define the Flex lexical scanner */
#line 5 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 60 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 3569 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 195 "lib/SPARQLfedScanner.lpp"

#line 3733 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1041 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1040 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 113 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 113 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 114 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 196 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 197 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 198 "lib/SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 199 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 200 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 201 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 202 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 203 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 204 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 205 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 206 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 207 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 208 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 209 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 210 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 211 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 212 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 213 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 214 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 215 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 216 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 217 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 218 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 219 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 220 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 221 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 222 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 223 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 224 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 225 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 226 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 227 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 228 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 229 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 230 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 231 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 232 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 233 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 234 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 235 "lib/SPARQLfedScanner.lpp"
{return token::IT_NULL;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 236 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 237 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 238 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 239 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 240 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 241 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 242 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 243 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 244 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 245 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 246 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 247 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 248 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 249 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 250 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 251 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 252 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 253 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 254 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 255 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 256 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 257 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 258 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 259 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 260 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{yylval->p_POS = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{yylval->p_POS = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 308 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4420 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1041 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1041 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1040);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 315 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


