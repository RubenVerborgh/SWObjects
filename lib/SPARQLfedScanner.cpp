#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1401] =
    {   0,
        0,    0,  182,  180,    2,    1,    1,   69,  180,    2,
      180,  180,  180,    9,   10,   20,   68,   11,   86,    4,
       65,  158,  152,   36,   80,    3,   81,   67,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,   70,   71,   66,  180,   64,  180,  180,    7,    5,
        8,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,    2,    1,   79,    0,  168,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   78,    0,  167,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  171,  176,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  161,   60,    0,  164,
       12,  159,    0,  158,    0,    0,  153,  153,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   82,  151,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  157,    0,    0,  152,    0,    0,    0,    0,
        0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,   84,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       44,  117,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  172,  148,    0,    0,    0,   77,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      168,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      156,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  167,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  173,  162,    0,    0,  165,
        0,    0,    0,  159,    0,    0,  160,    0,    0,  153,
        0,  153,  153,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,  155,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       96,   43,   53,   75,   31,   24,  145,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  144,

      121,    0,  143,    0,    0,    0,   85,  118,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   87,    0,  142,
        0,    0,    0,    0,    0,   93,    0,    0,    0,    0,
        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  156,  156,  156,  156,  156,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  176,  176,  176,  176,  176,    0,    0,    0,    0,
      162,    0,    0,  163,    0,  165,    0,    0,  166,    0,
      160,    0,  160,    0,  153,  153,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  153,  153,  153,
      153,  153,  153,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  155,  155,  155,  155,  155,    0,    0,    0,  157,
        0,    0,    0,    0,    0,    0,    0,    0,   14,   58,
        0,    0,   97,    0,    0,    0,    0,    0,   46,    0,
        0,    0,    0,    0,   32,    0,   41,    0,   74,    0,
        0,    0,   25,    0,    0,    0,    0,    0,   39,    0,
        0,    0,    0,    0,   88,    0,    0,   37,    0,    0,

        0,   45,    0,    0,    0,    0,    0,    0,   95,    0,
        0,    0,    0,   57,    0,    0,    0,    0,    0,    0,
      122,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      119,    0,    0,   47,  110,  154,    0,  154,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      156,  156,  156,  156,  156,  156,  156,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  176,  176,  176,  176,  176,  176,    0,    0,    0,
        0,  163,    0,  163,    0,  166,    0,  166,  153,  153,
      153,  153,  153,    0,    0,    0,  155,  155,  155,  155,
      155,  155,  155,    0,    0,    0,   94,   91,   40,    0,
        0,    0,    0,  140,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,   52,   27,    0,  113,    0,    0,
      131,    0,    0,  132,    0,  103,   33,    0,   61,    0,
      111,   26,    0,    0,   30,    0,   54,    0,  136,    0,

       99,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  129,    0,    0,    0,    0,    0,
        0,    0,  102,   59,   62,    0,   50,    0,   22,  154,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  154,  154,  154,  154,  154,  154,    0,    0,    0,
      150,    0,    0,  170,    0,    0,    0,    0,    0,    0,
      169,    0,    0,    0,    0,    0,    0,    0,  100,    0,
        0,   42,    0,    0,   48,    0,    0,    0,  139,   63,
        0,   29,   49,    0,    0,    0,    0,    0,    0,   34,

        0,   15,    0,    0,    0,  146,    0,   16,    0,    0,
      123,  124,  125,   38,   73,    0,    0,    0,    0,  101,
        0,    0,  137,    0,    0,   35,  154,  154,  154,  154,
      154,    0,    0,    0,    0,  174,    0,    0,  175,    0,
        0,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,  133,    0,    0,    0,   72,
      114,    0,   18,  138,    0,  115,    0,   56,    0,    0,
      107,  128,    0,  120,    0,    0,    0,    0,  126,    0,
      105,   90,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   23,   17,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   55,  130,    0,  109,    0,    0,
      116,    0,    0,    0,   21,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  134,  135,    0,  147,  108,
      106,   76,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  178,    0,    0,    0,    0,    0,  177,    0,   89,
      179,  178,    0,    0,  141,  177,  179,    0,  104,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,   99,   99,  100,  101,  101,  101,  101,  101,  102,
      103,  101,  104,  105,  106,  107,  106,  108,  106,  106,
      109,  110,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  113,  113,  113,  115,  115,  115,  115,  116,
      115,  115,  117,  118,  118,  118,  118,  118,  118,  119,
      120,  121,  121,  122,  123,  124,  124,  124,  124,  124,

      124,  124,  124,  125,  126,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  128,  129,  130,  131,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  133,  134,  135,  136,
      137,  137,  138,  139,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121
    } ;

static yyconst flex_int32_t yy_meta[140] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    4,
        3,    3,    3,    3,    3,    3,    3,    5,    6,    3,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    3,
        1,    3,    3,    3,    3,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        3,   10,    3,    1,   11,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        1,    1,    1,    3,    3,   12,   13,   12,   12,   12,

       12,   12,   12,   14,   12,   12,   12,   12,   15,   12,
       12,   12,   12,   12,   12,   12,   15,   12,   16,   17,
       18,   19,   20,   20,   21,   20,   20,   20,   20,   20,
       20,   20,   20,   22,   20,   20,   20,   20,   22
    } ;

static yyconst flex_int16_t yy_base[1765] =
    {   0,
        0,    0, 2229,12737,  138,12737, 2164, 2134,  134,   38,
       55, 2040,  168,  142,12737,   71,  192,12737,  210,  127,
    12737,  289,  350,12737,  457,12737, 1981,  151,    0,  579,
      344,  455,  284,  349,  456,  285,  682,  470,  643,  692,
      729,  740,  764,  779,  800,  824,  855,  881,  903,  927,
      941,  222,12737, 1870, 1893,    0,  942,  985,12737, 1817,
    12737,    0,  130,  133,  135,  226,    0,  980, 1812,    0,
      342,  341,  996,    0, 1021,  240,12737,12737, 1129, 1899,
     1130,    0,  350,    0, 1047,    0, 1054,    0,  466, 1095,
        0,    0,    0,  934,    0, 1079,    0, 1130,    0, 1173,

     1256,    0,  137,  439,  209, 1173,    0, 1299, 1809,    0,
     1198, 1197, 1213,    0, 1238,12737, 1358, 1872, 1359,    0,
     1242,    0, 1348,    0, 1355,    0, 1402,  668,12737, 1486,
        0,  210,  456,  213, 1403,    0, 1529, 1787,    0, 1428,
     1427, 1443,    0, 1468,  141, 1563, 1631,12737, 1571, 1641,
    12737, 1651, 1662, 1691, 1712, 1726, 1788, 1917, 1769,    0,
      239,  494,  240, 1580,    0, 1960, 1785,    0, 1722, 1487,
     1759,    0, 1790, 2048, 2155,12737,    0,    0,    0, 1723,
        0, 1851,    0, 1858,    0, 1755,12737, 2274,    0,  273,
      569,  275, 1868,    0, 2317, 1784,    0, 1893, 1892, 1910,

        0, 1986, 1844, 2420, 2541, 2670, 1832,  280,  356,  339,
      442,  709,  455, 1764, 1742,    0,  297,  300,  768,  407,
     1989,    0, 2713, 1712,    0, 2014, 1918, 2021,    0, 2093,
      465,  463,  646,  443, 1776,  358,  651, 2179,  704,  665,
      871,  708,  706,  755,  738,  650,  771,  778,  860,  741,
      728, 1773,  809,  894, 2188,  464,  803,  825,  891,  767,
      379,  917,  862,  947,  927,  930,  801,  918,  991,  998,
      949, 2180,  981, 2185, 2189,  977, 1678, 1691, 2274,  986,
     1762, 1729, 1693, 2275, 1697, 1716, 2182, 1695, 2181, 1853,
     2184, 1370,12737,12737, 2027,  292,  613,12737, 1727,    0,

        0,  119, 1087,    0, 2230,    0,  735,    0, 1729, 1627,
        0,    0,    0,    0, 2260,    0,  121,    0,    0,    0,
    12737, 2827,    0,    0,    0,    0,    0,    0,    0, 1589,
        0, 1619,    0,    0,    0,    0,    0,    0,    0, 2946,
     3064, 1584, 1553,    0,  583, 1078,  622, 2269,    0, 3107,
     1565,    0, 2354, 2029, 2361,    0, 2386,    0,    0,  249,
     1813,    0, 2405,    0,    0, 2190, 1555,    0,    0,    0,
        0, 2475,    0,  315,    0,    0,    0,12737, 2518,    0,
        0,    0,    0,    0,    0,    0, 1500, 3207, 3325, 1515,
     1325,    0,  636, 1307,  748, 2406,    0, 3368, 1344,    0,

     2500, 2418, 2507,    0, 2604,    0,    0,  443, 2250,    0,
     2485,    0,    0, 2275, 1294,    0,    0,    0,    0, 2623,
        0,  521,    0,    0,    0, 1363, 2725, 2734, 2754, 2820,
     2828, 2848, 2878, 2857, 2891, 2607, 2660, 2954, 2978, 3479,
     3608,    0,    0, 3087, 1120, 1096,    0,  805,  835, 2395,
      922, 2671,    0, 3651,  977,    0, 2832, 2913, 2945,    0,
     3027,    0,    0,    0,  575, 2805,    0, 2938,    0,    0,
     2868,  974,    0,    0,    0,    0, 3047,    0,  682,    0,
        0,    0,    0,  995,    0,    0,    0,    0,    0,    0,
        0, 3751, 3869,  948,  882,    0,  952, 1319,  954, 2996,

        0, 3912,  894,    0, 3140, 3040, 3147,    0, 3172,    0,
        0,  814, 2892,    0, 3072,    0,    0, 3172,  866,    0,
        0,    0,    0, 3197,    0,  921,    0,    0,    0,    0,
     4015, 4136,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  954, 3190,    0, 3222,    0,    0, 3239,  817,    0,
        0,    0,    0, 3264,    0, 1019,    0,    0,    0,  283,
      470,  574, 1695, 1699, 1734, 2165, 2185, 2157, 2195, 2276,
     2277,    0, 2279, 2276, 2279, 2264, 2269, 2271, 2270, 2271,
     2605, 2610, 2685, 2683, 2681, 2693, 2783, 2797, 2807,    0,
     2811, 2809, 2818, 2808, 3250, 3269, 3316, 3326, 3332,    0,

        0, 3335, 3318, 3320, 3335, 3336,    0,    0, 3324, 3334,
     3345, 3345, 3338, 3349, 3334, 3350, 3344, 3344, 3350, 3358,
     3345, 3356, 3361, 3354, 1341, 3371, 3360, 3473, 3360,    0,
     3374, 3376, 3451, 3442, 3441,    0, 3445, 3456, 3444, 3462,
     3472, 3464, 4257,    0, 1091, 1588, 1259, 3318,    0, 4300,
      785,    0, 3463, 3417, 3472,    0, 3542,  792,  783,    0,
        0,    0,    0,  718,  659,    0,    0,    0,    0,    0,
        0,    0, 4414,  768, 4547, 3612,    0, 3545,    0, 3610,
        0, 3675,    0, 3700, 3798,    0,    0,    0,    0,    0,
     3702,    0,    0,    0,    0,    0, 3493, 3569,    0, 3711,

        0,    0, 3582,  667,    0,    0,    0,    0, 3842,    0,
     1021,    0,    0,    0, 4666, 4784,    0,    0,    0,    0,
        0,    0,    0, 3845, 3941, 4038,    0, 3749,    0, 3985,
        0, 4061,    0, 3802, 4087,    0,    0,    0,    0,    0,
        0,    0, 3570, 3607,    0, 3812,    0,    0, 3701,  647,
        0,    0,    0,    0, 4086,    0, 1091,    0,    0,    0,
     4902, 5020,    0,    0,    0,    0,    0,    0,    0, 3828,
     4216, 4030, 4102, 4170, 4271, 4279, 4299, 4224, 4307, 4315,
     4334, 4342, 4350, 4411, 5149, 5278,    0,    0,    0, 3573,
     3832,    0, 4357,    0,    0, 3870,  644,    0,    0,    0,

        0, 4368,    0, 1309,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5384,    0,    0,    0,
        0,    0, 3575, 4016,    0, 4393,    0,    0, 4112,  603,
        0,    0,    0,    0, 4402,    0, 1312,    0,    0,    0,
     5503, 5621,    0,    0,    0,    0,    0,    0,    0,  670,
     5742, 5863,    0,    0,    0,    0,    0,    0,    0,    0,
     3477, 3479,    0, 3467, 3487, 3557, 3544, 3806,    0, 3910,
     4234, 4260, 4261, 4389, 4392, 4401,    0, 4486,    0, 4472,
     4487, 4476,    0, 4487, 4480, 4483, 4480, 4482,    0, 4499,
     4522, 4513, 4520, 4525, 4522, 4531, 4518,    0, 4533, 4521,

     4533,    0, 4538, 4538, 4530, 4529, 4538, 4529,    0, 4546,
     4527, 4550, 4548,    0, 4534, 4542, 4541, 4553, 4540, 4549,
        0,  655,  646,  577, 4545, 4541, 4585, 4587, 4574, 4580,
     4594, 4577, 4577, 4579, 4575, 4596, 4596, 4589, 4656, 4654,
        0, 4657, 4658,    0,    0, 5984, 6105,    0,  482,  458,
        0, 1260, 2052, 4193, 2880, 4395,    0, 6148,  464,    0,
     4543, 4586, 4602,    0, 4633,    0,    0, 1374, 4633,    0,
     4658,    0,    0, 4649,  462,    0,    0,    0,    0, 4717,
        0, 1359,    0,    0,    0, 6251, 6372, 6415,  443,  508,
     6529,    0,    0,    0,    0,    0,    0,    0,  355, 4716,

     6648, 6766,    0,    0,    0,    0,    0,    0,    0,    0,
      424,    0,    0,    0,    0,    0,    0,    0,  295, 4760,
     6884, 7002,    0,    0,    0,    0,    0,    0,    0,    0,
     4758, 4802, 4835, 4843, 4851, 4910, 4918, 4926, 7131, 7260,
        0,    0,    0,    0,    0,    0, 7378, 7496,    0,    0,
        0,    0,    0,    0,    0,    0, 7617, 7738,    0, 4717,
     4901, 4904, 4913,    0, 4918, 4900, 4913, 4921, 4918, 4914,
     4924, 4912, 4914,    0,    0,  339, 4925,    0, 4914, 4921,
        0, 4931, 4932,    0, 4937,    0,    0, 4922,    0, 4935,
        0,    0, 4922, 4928,    0, 4920,    0, 4939,    0, 4942,

        0, 4941, 4942, 4944, 4930, 4983, 4982,  343,  322,  253,
     4967, 4969, 4969, 4986,    0, 4997, 5005, 5006, 5020, 5014,
     5007, 5010,    0,    0,    0, 5021,    0, 5009,    0, 7859,
     7980,    0,    0, 3756, 4785,    0, 4971,    0,    0, 4961,
      159,    0,    0,    0,    0, 5003,    0, 1649,    0,    0,
        0, 8101,    0,    0,    0,    0,    0,    0,    0,    0,
     8222, 2781, 4005,12737, 8354,    0,    0,    0,    0,    0,
    12737, 5070,    0,    0,    0,    0,    0, 8476, 5025, 5056,
     5059, 5027, 5045, 5077, 5177, 5072, 5060, 5095, 5096, 5097,
     5098, 5116, 5215, 5145, 5172, 5174, 5176, 5184, 5255, 5148,

     5189, 5190, 5193, 5195, 5257, 5191, 5260, 5196, 5273, 5198,
     5201, 5251, 5252, 5253, 5254, 5274, 5279, 5277, 5293, 5256,
     5280, 5295, 5278, 5288, 5298, 5311,    0,    0,    0,    0,
        0,    0,    0,    0, 5313, 5314, 5315, 5316, 5317, 5320,
     8608, 5410, 5351, 5330, 5359, 5355, 5331, 5550, 5329, 5356,
     5512, 5403, 5513, 5582, 5546, 5352, 5437, 5523, 5380, 5401,
     5402, 5524, 5409, 5526, 5527, 5530, 5538, 5531, 5648, 5649,
     5534, 5535, 5651, 5536, 5584, 5620, 8652,  115, 5540, 5653,
     5541, 5544, 5547, 5580, 8771,    0,    0,    0, 5366,    0,
     5676,    0, 5683,    0, 5393, 5624, 5625, 5656, 5659, 5629,

     8909,    0,    0,    0, 5692,    0, 5717,    0, 5735,    0,
     5733, 5664, 5658, 5660, 5661, 5666, 5845, 5671, 5672, 5855,
     5687, 5856, 3084, 5276, 5838, 5842, 5858, 9047, 9185, 5863,
     5857,    0,  149,    0,    0,    0,    0,    0,    0,    0,
     5863, 5864, 5849, 9323, 9461, 5868,    0,  142,    0,    0,
        0,    0,    0,    0,    0, 5867, 5869, 5871, 5872, 5874,
     5876, 5878, 5883, 5884, 5881, 5866, 9599, 9737, 5879,    0,
        0,    0, 5898, 5979, 5884, 5889,    0,    0,    0,    0,
     5966,12737, 5913, 5980, 5978, 5983, 5985,12737, 5918, 5929,
    12737, 5982, 5984, 5988, 5987,    0, 5987, 5991, 5990,12737,

     9876, 9898, 9914, 9934, 9950, 9967, 9985,10001,  180,10010,
    10016,10022,10028,10034,10051,10062,10068,10074,10080,10097,
    10108,10113,10117,10123,10129,10135,10146,10155,10161,10167,
    10173,10179,10196,10207,10213,10219,10225,10236,10245,10251,
    10257,10263,10269,10283,10293,10299,10305,10311,10317,10332,
    10343,10348,10352,10358,10364,10370,10381,10390,10396,10402,
    10408,10414,  741,10427,10445,10454,10460,10466,10472,10478,
    10484,10495,10504,10510,10516,10522,10528,10534,10540,10546,
    10552,10558,10575,10586,10592,10598,10604,10610,10616,10622,
    10628,10634,10640,10646,10652,10663,10672,10678,10684,10690,

    10696,10702,10708,10714,10720,10726,10732,10738,10744,10750,
    10756,10762,10779,10790,10796,10802,10808,10814,10820,10831,
    10840,10846,10852,10858,10864,10870,10876,10882,10888,10894,
    10900,10906,10912,10918,10924,10930,10944,10954,10960,10966,
    10972,10978,10984,10990,10996,11002,11008,11014,11020,11026,
    11032,11038,11044,11050,11056,11062,11068,11074,11080,11091,
    11100,11106,11112,11118,11124,11130,11136,11142,11148,11154,
    11160,11166,11172,11178,11184,11190,  413,11203,11213,11219,
    11225,11231,11237,11243,11249,11255,11261,11267,11280,11290,
    11296,11302,11308,11314,11320,11337,11348,11354,11360,11366,

    11383,11394,11400,11417,11428,11434,11440,11446,11452,11458,
    11464,11470,11476,11482,11488,11494,11505,11514,11531,11542,
    11548,11554,11560,11577,11588,11594,11600,11606,11612,11618,
    11624,11630,11636,11642,11648,11654,11665,11674,11688,11698,
    11704,11710,11716,11722,11728,11734,11740,11746,11752,11758,
    11773,11784,11790,11796,11802,11808,11814,11820,11826,11832,
    11838,11844,11850,11861,11870, 2331,11883,11893,11906,11916,
    11922,11928,11934,11940,11946,11952,11958,11964,11970,11976,
    11982,11988,11994,12000,12006,12019,12040,12051,12057,12063,
    12069,12075,12081,12098,12114,12123,12140,12140,12146,12152,

    12158,12164,12170,12187,12203,12212,12226,12236,12247,12256,
    12269,12286,12296,12302,12308,12314,12320,12326,12332,12338,
    12344,12350,12356,12369,12379,12396,12407,12413,12430,12441,
    12447,12453,12470,12492,12503,12508,12512,12518,12524,12530,
    12536,12541,12545,12551,12557,12563,12569,12586,12597,12603,
    12609,12615,12621,12627,12644,12655,12661,12667,12673,12679,
    12685,12702,12713,12719
    } ;

static yyconst flex_int16_t yy_def[1765] =
    {   0,
     1400,    1, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1402,
     1403, 1400, 1404, 1400, 1400, 1405, 1400, 1400, 1400, 1400,
     1400, 1400, 1406, 1400, 1407, 1400, 1400, 1408, 1409, 1400,
       30,   31,   32,   32,   32,   32,   32,   32,   32,   31,
       31,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32, 1400, 1400, 1400, 1400,   30,   32,   32, 1400, 1400,
     1400, 1410, 1410, 1400, 1410, 1400, 1411, 1400, 1412, 1413,
     1400, 1400, 1400, 1414, 1400, 1400, 1400, 1400, 1415, 1400,
     1400, 1416, 1400, 1417, 1400, 1418, 1400, 1419, 1400, 1420,
     1421, 1422, 1423, 1400, 1424, 1400, 1425, 1400, 1426, 1400,

     1427, 1428, 1428, 1400, 1428, 1400, 1429, 1400, 1430, 1431,
     1400, 1400, 1400, 1432, 1400, 1400, 1433, 1400, 1400, 1434,
     1400, 1435, 1400, 1436, 1400, 1437, 1400, 1400, 1400, 1438,
     1439, 1439, 1400, 1439, 1400, 1440, 1400, 1441, 1442, 1400,
     1400, 1400, 1443, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1444, 1444, 1400, 1445,
     1445, 1400, 1445, 1400, 1446, 1400, 1447, 1448, 1400, 1400,
     1400, 1449, 1400, 1450, 1450, 1400, 1451, 1452, 1453, 1400,
     1454, 1400, 1455, 1400, 1456, 1400, 1400, 1457, 1458, 1458,
     1400, 1458, 1400, 1459, 1400, 1460, 1461, 1400, 1400, 1400,

     1462, 1400, 1463, 1464, 1464, 1465,  205,  205,  205,  205,
      205,  205,  205, 1400, 1400, 1466, 1466, 1466, 1467, 1466,
     1400, 1468, 1400, 1469, 1470, 1400, 1400, 1400, 1471, 1400,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205, 1400, 1400, 1400, 1472,  205,  205, 1400,  205, 1473,

     1474, 1473, 1473, 1475, 1473, 1473, 1473, 1476, 1476, 1477,
     1477, 1474, 1473, 1478, 1400, 1479, 1479, 1480, 1481, 1482,
     1400, 1483, 1484, 1485, 1484, 1484, 1486, 1487, 1488, 1489,
     1490, 1400, 1491, 1492, 1491, 1491, 1493, 1494, 1495, 1496,
     1496, 1400, 1400, 1497, 1497, 1498, 1497, 1400, 1499, 1400,
     1500, 1501, 1400, 1400, 1400, 1502, 1400, 1503, 1504, 1503,
     1503, 1505, 1503, 1503, 1506, 1506, 1507, 1507, 1504, 1503,
     1508, 1400, 1509, 1509, 1510, 1511, 1512, 1400, 1513, 1514,
     1515, 1514, 1514, 1516, 1517, 1518, 1519, 1520, 1520, 1400,
     1400, 1521, 1521, 1522, 1521, 1400, 1523, 1400, 1524, 1525,

     1400, 1400, 1400, 1526, 1400, 1527, 1528, 1527, 1527, 1529,
     1527, 1527, 1530, 1530, 1531, 1531, 1528, 1527, 1532, 1400,
     1533, 1533, 1534, 1535, 1536, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1537,
     1537,  441,  441, 1400, 1400, 1400, 1538, 1538, 1538, 1539,
     1538, 1400, 1540, 1400, 1541, 1542, 1400, 1400, 1400, 1543,
     1400,  441, 1544, 1545, 1544, 1544, 1546, 1544, 1544, 1547,
     1547, 1548, 1548, 1545, 1544, 1549, 1400, 1550, 1550, 1551,
     1552, 1553, 1554, 1400, 1555, 1556, 1555, 1555, 1557, 1558,
     1559, 1560, 1560, 1400, 1400, 1561, 1561, 1562, 1561, 1400,

     1563, 1400, 1564, 1565, 1400, 1400, 1400, 1566, 1400, 1567,
     1568, 1567, 1567, 1569, 1567, 1567, 1570, 1570, 1571, 1571,
     1568, 1567, 1572, 1400, 1573, 1573, 1574, 1575, 1576, 1577,
     1578, 1578,  532,  532,  532,  532,  532,  532,  532, 1579,
     1580, 1579, 1579, 1581, 1579, 1579, 1582, 1582, 1583, 1583,
     1580, 1579, 1584, 1400, 1585, 1585, 1586, 1587, 1588,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532, 1589, 1590, 1590, 1400, 1590, 1400, 1591, 1400,
     1592, 1593, 1400, 1400, 1400, 1594, 1400,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532, 1595,
     1595, 1595, 1596, 1400, 1596, 1400, 1597, 1400, 1598, 1400,
     1599, 1400, 1600, 1400, 1601, 1602, 1602, 1603, 1603, 1603,
     1604, 1605, 1605, 1606, 1607, 1608, 1607, 1607, 1609, 1607,

     1607, 1610, 1610, 1611, 1611, 1608, 1607, 1612, 1400, 1613,
     1613, 1614, 1615, 1616, 1617, 1617,  716,  716,  716,  716,
     1618, 1618, 1618, 1619, 1619, 1400, 1620, 1400, 1621, 1400,
     1622, 1400, 1623, 1400, 1624, 1625, 1625, 1626, 1626, 1626,
     1627, 1628, 1627, 1627, 1629, 1627, 1627, 1630, 1630, 1631,
     1631, 1628, 1627, 1632, 1400, 1633, 1633, 1634, 1635, 1636,
     1637, 1637,  762,  762,  762,  762, 1638, 1638, 1638, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1639, 1639,  786, 1640, 1641, 1640,
     1640, 1642, 1640, 1640, 1643, 1643, 1644, 1644, 1641, 1640,

     1645, 1400, 1646, 1646, 1647, 1648, 1649,  786,  786,  786,
      786,  786,  786, 1650, 1650, 1650, 1651, 1652, 1652, 1653,
     1654, 1655, 1654, 1654, 1656, 1654, 1654, 1657, 1657, 1658,
     1658, 1655, 1654, 1659, 1400, 1660, 1660, 1661, 1662, 1663,
     1664, 1664,  842,  842,  842,  842, 1665, 1665, 1665, 1666,
     1667, 1667,  852,  852,  852, 1668, 1668, 1668,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,

      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852, 1669, 1669,  947, 1400, 1400,
     1670, 1670, 1670, 1671, 1670, 1400, 1672, 1400, 1673, 1674,
     1400, 1400, 1400, 1675, 1400, 1676, 1677, 1676, 1676, 1678,
     1676, 1676, 1679, 1679, 1680, 1680, 1677, 1676, 1681, 1400,
     1682, 1682, 1683, 1684, 1685, 1686, 1686, 1400,  988, 1400,
     1687, 1688, 1689, 1688, 1688, 1690, 1691, 1692, 1693, 1694,

     1695, 1695, 1002, 1002, 1002, 1002, 1002, 1696, 1696, 1696,
     1697, 1698, 1699, 1698, 1698, 1700, 1701, 1702, 1703, 1704,
     1705, 1705, 1022, 1022, 1022, 1022, 1022, 1706, 1706, 1706,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1707, 1707,
     1040, 1040, 1040, 1708, 1708, 1708, 1709, 1709, 1048, 1048,
     1048, 1048, 1048, 1710, 1710, 1710, 1711, 1711, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1712,
     1712, 1713, 1714, 1713, 1713, 1715, 1713, 1713, 1716, 1716,
     1717, 1717, 1714, 1713, 1718, 1400, 1719, 1719, 1720, 1721,
     1722, 1712, 1152, 1152, 1152, 1152, 1152, 1723, 1723, 1723,
     1724, 1725, 1725, 1400, 1726, 1727, 1727, 1728, 1728, 1728,
     1400, 1729, 1730, 1730, 1731, 1731, 1731, 1724, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1152, 1152, 1152, 1152,
     1152, 1732, 1732, 1732, 1178, 1178, 1178, 1178, 1178, 1178,
     1726, 1729, 1178, 1178, 1178, 1178, 1178, 1400, 1733, 1178,
     1178, 1178, 1178, 1400, 1734, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1400, 1277, 1178, 1178,
     1178, 1178, 1400, 1400, 1733, 1735, 1736, 1737, 1400, 1738,
     1400, 1739, 1400, 1740, 1400, 1178, 1178, 1178, 1178, 1400,

     1734, 1741, 1742, 1743, 1400, 1744, 1400, 1745, 1400, 1746,
     1400, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1747, 1747, 1178, 1400, 1400, 1748, 1748, 1329,
     1329, 1749, 1400, 1750, 1751, 1750, 1750, 1752, 1753, 1754,
     1178, 1178, 1400, 1755, 1755, 1345, 1756, 1400, 1757, 1758,
     1757, 1757, 1759, 1760, 1761, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1400, 1400, 1762, 1762, 1368, 1763,
     1763, 1764, 1178, 1178, 1400, 1345, 1345, 1757, 1757, 1756,
     1178, 1400, 1400, 1368, 1368, 1178, 1178, 1400, 1345, 1178,
     1400, 1368, 1368, 1178, 1178, 1345, 1368, 1178, 1178,    0,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400
    } ;

static yyconst flex_int16_t yy_nxt[12877] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   39,   51,   39,
       52,    4,   53,   54,   55,   56,   31,   32,   33,   34,
       57,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   58,   48,   49,   50,   39,   51,   39,
       59,   60,   61,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   62,   63,    4,   64,   65,   66,   67,   68,
       69,   70,   71,    4,   72,   73,   74,   75,    4,   76,
       80,   91,   76,  128,  128,  128,  128,  152,  152,  152,
      152,  152,  152,  152,  152,  129,  426,   92,  145,   93,
       93,   93,   93,   93,   93,   94,   95,   95,   95,   95,
       96,   97,   97,   98,   99,   99,  100,  102,  103,  118,
      104,  105,  106,  107,  108,  109,  110,  111,  203,  112,
      113,  114,  115,  131,  132,   81,  133,  134,  135,  136,

      137,  138,  139,  140, 1301,  141,  142,  143,  144,  145,
      146, 1285,  147,  147,  147,  147,  147,  147,  147,  147,
      660,  660, 1324,  292,  292,  292,  292,  148,  149,  119,
      150,  150,  150,  150,  150,  150,  150,  150,  299, 1400,
     1400,   76,  151,  299,   76,  101,  299,  299,  299,  299,
      299,  299,  299,  101,  948,   82,   82,   82,   82,   82,
       82,   83,   84,   84,   84,   84,   85,   86,   86,   87,
       88,   88,   89,  189,  190, 1213,  191,  192,  193,  194,
      195,  196,  197,  198,  293,  199,  200,  201,  202,  120,
      120,  120,  120,  120,  120,  121,  122,  122,  122,  122,

      123,  124,  124,  125,  126,  126,  127,  153,  206,  154,
      154,  154,  154,  154,  154,  154,  154,  101,  130,  240,
      206,  130,  859,  241,  207,  101,  130,  242,  155,  130,
      207,  207,  531,  207,  207,  243,  249,  300,  300,  300,
      300,  300,  300,  300,  300,  300, 1212,  158,  158,  240,
      715,  715,  859,  241,  207,  158,  158,  242,  155,  156,
      207,  207,  531,  207,  207,  243,  249,  206,  658, 1211,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  231,
      207,  188,  207,  188,  206,  533,  206,  232,  207,  188,
      207,  188,  233,  234,  532,  207,  207,  244,  207,  207,

      207,  564,  235, 1191,  601,  207,  245,  206,  207,  231,
      207,  159,  207,  207, 1177,  533,  207,  232,  207,  850,
      207,  850,  233,  234,  532,  207,  207,  244,  207,  207,
      207,  564,  235, 1400, 1400, 1171,  245,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  314,  314,  314,  314,  315,  316,  316,
      317,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      206,  206,  160,  161, 1170,  162,  163,  164,  165,  166,
      167,  168,  169,  206,  170,  171,  172,  173,  175,  176,
      207,  206,  206,  206,  236,  207,  537,  563,  207,  246,

      534,  237,  247,  207,  238,  207,  239,  248,  860,  207,
      252,  561,  596,  207, 1164,  207,  207,  560,  253,  207,
      207,  254,  255,  207,  236,  207,  537,  563,  207,  246,
      534,  237,  247,  207,  238,  207,  239,  248,  860,  207,
      252,  561,  596,  207,  761,  761,  207,  560,  253,  207,
     1163,  254,  255,  101,  101,  101,  101,  643,  101, 1141,
      177,  329,  329,  329,  329,  329,  329,  329,  329,  330,
      130,  130,  130,  130,  946,  130,  178,  946,  179,  179,
      179,  179,  179,  179,  180,  181,  181,  181,  181,  182,
      183,  183,  184,  185,  185,  186,  204,  205, 1110,  204,

      204,  204,  204,  204,  204,  204,  204,  206,  158,  158,
      158,  158,  861,  158,  207,  208,  207,  209,  207,  207,
      207,  207,  207,  207,  207,  210,  207,  211,  207,  207,
      207,  212,  207,  207,  213,  207,  207,  207,  207, 1400,
     1400,  206,  861,  207,  207,  208,  207,  209,  207,  207,
      207,  207,  207,  207,  207,  210,  207,  211,  207,  207,
      207,  212,  207,  207,  213,  207,  207,  207,  207,  128,
      128,  128,  128, 1109,  206,  214,  808,  808,  206,  206,
     1108,  129,  207,  188,  188,  188,  188,  530,  188,  207,
      565,  341,  207,  206,  207,  562,  581,  659,  493,  341,

      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  207,  227,  228,  229,  230,  250,  571,  207,
      565,  207,  207,  572,  207,  562,  581,  256,  207,  257,
      341,  251,  206,  207,  206,  258,  206,  206,  341,  443,
      207,  259,  389,  570,  389,  203,  535,  250,  571,  203,
      207,  207,  389,  572,  536,  577,  206,  256,  207,  257,
      576,  251,  341,  207,  260,  258,  206,  261,  262,  206,
      207,  259,  263,  570,  990,  265,  535,  207,  264,  207,
      207,  580,  587,  206,  536,  577,  207,  207,  989,  266,
      576,  207,  578,  579,  260,  206,  586,  261,  262,  206,

     1400, 1400,  263,  207,  267,  265,  206,  207,  264,  207,
      207,  580,  587,  207,  268,  269,  207,  207,  207,  266,
      582,  207,  578,  579,  600,  207,  586,  583,  207,  206,
      270,  206,  663,  207,  267,  271,  664,  206,  597,  272,
      207,  609,  665,  207,  268,  269,  207,  988,  207,  273,
      582,  207,  987,  206,  600,  207,  389,  583,  207,  274,
      270,  588,  589,  275,  389,  271,  276,  277,  597,  272,
      207,  609,  598,  207,  986,  207,  207,  278,  279,  273,
      975,  207,  539,  539,  539,  539,  207,  539,  206,  274,
      206,  588,  589,  275,  207,  584,  276,  277,  280,  206,

      207,  207,  598,  207,  281,  207,  207,  278,  279,  585,
      603,  573,  207,  443,  282,  841,  841,  574,  283,  206,
      207,  443,  206,  575,  207,  584,  599,  207,  280,  284,
      207,  207,  285,  286,  281,  287,  207,  590,  288,  585,
      603,  573,  207,  443,  282,  206,  206,  574,  283,  207,
      207,  443,  207,  575,  207,  206,  599,  207,  206,  284,
      207,  188,  285,  286,  602,  287,  207,  590,  288,  289,
      290,  610,  207,  207,  606,  206,  207,  206,  207,  207,
      291,  207,  207,  607,  207,  246,  608,  207,  247,  830,
      207,  207,  207,  248,  602,  604,  207,  614,  492,  289,

      290,  610,  605,  207,  606,  206,  207,  296,  207,  206,
      291,  207,  625,  607,  206,  246,  608,  207,  247,  206,
      207,  207,  207,  248,  207,  604,  206,  614,  280,  611,
      443,  207,  605,  631,  281,  618,  207,  612,  443, 1400,
     1400,  613,  625,  492,  282,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  207,  539,  539,  174,  280,  611,
      493,  207,  493,  631,  281,  618,  297,  612,  493,  158,
      493,  613,  797,  538,  282,  302,  303,  304,  304,  305,
      306,  306,  306,  306,  306,  306,  306,  307,  306,  306,
      306,  306,  306,  306,  308,  308,  308,  308,  308,  309,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  321,   79, 1400, 1400, 1400,
     1400,   79,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
       81,   79,  341,  341,  341,  341,   79,  341,   91,  643,

       79,  661,  661,  661,  661,  661,  661,  643,   79, 1400,
     1400,   79,  440,   79,   92,  440,   93,   93,   93,   93,
       93,   93,   94,   95,   95,   95,   95,   96,   97,   97,
       98,   99,   99,  100,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
       82,   82,   82,   82,   82,   82,   83,   84,   84,   84,
       84,   85,   86,   86,   87,   88,   88,   89,  339,  339,
      339,  339,  339,  339,  339,  339,  340,  340,  340,  340,
      340,  340,  340,  340,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  372,  373,  373,  374,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  342,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  921,  922,  923,  117,  924,  643,  948,  378,
      117,  292,  292,  292,  292,  643,  948,  343,  344,  345,
      145,  346,  347,  348,  349,  350,  351,  352,  353,  130,
      354,  355,  356,  357,  360,  361,  362,  362,  363,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  365,  365,  365,  365,  365,  366,  119,
      117,  389,  389,  389,  389,  117,  389, 1400, 1400,  117,
     1400, 1400,  293,  493,  493,  493,  493,  117,  493,  750,
      117,  388,  117,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384, 1152, 1152, 1400, 1400,  120,
      120,  120,  120,  120,  120,  121,  122,  122,  122,  122,
      123,  124,  124,  125,  126,  126,  127,  386,  386,  386,

      386,  386,  386,  386,  386,  387,  388,  388,  388,  388,
      388,  388,  388,  388,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  419,
      419,  419,  419,  420,  421,  421,  422,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  390,  427,  427,  427,  427,  427,  427,  427,
      427,  430,  430,  430,  430,  430,  430,  430,  430,  476,

      476,  476,  476,  477,  478,  478,  479,  391,  392,  393,
      388,  394,  395,  396,  397,  398,  399,  400,  401,  740,
      402,  403,  404,  405,  408,  409,  410,  410,  411,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  413,  413,  413,  413,  413,  414,  428,
      101,  147,  147,  147,  147,  147,  147,  147,  147,  431,
      704,  150,  150,  150,  150,  150,  150,  150,  150,  340,
      429,  152,  152,  152,  152,  152,  152,  152,  152,  340,
      432,   90,  434,  434,  434,  434,  434,  434,  434,  434,
      433,  463,  463,  463,  463,  463,  463,  463,  463,  463,

      429,  435,  643,  643,  643,  643,  206,  643,  690,  153,
      432,  154,  154,  154,  154,  154,  154,  154,  154,  206,
      433,  206,  299,  206,  626,  206,  627,  436,  632,  436,
      155,  435,  437,  437,  437,  437,  437,  437,  437,  437,
      636,  639,  628,  862,  206,  863,  438,  438,  438,  438,
      438,  438,  438,  438,  626,  206,  627,  206,  632,  637,
      155,  438,  438,  438,  438,  438,  438, 1400, 1400,  864,
      636,  639,  628,  862,  462,  863,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  637,
      206,  438,  438,  438,  438,  438,  438,  439,  462,  864,

      462,  206,  462,  462,  206,  440,  441,  549,  440,  440,
      440,  440,  440,  440,  440,  440,  442,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  462,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  299,  299,  299,  299,  299,  299,  444,
      491,  491,  491,  491,  491,  491,  491,  491,  204,  204,
      206,  530,  462,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  519,
      472,  206,  415,  379,  445,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  367,  322,  641,  310,  298,  446,
      447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
      457,  295,  458,  459,  460,  461,  439,  716,  716,  716,
      716,  716,  716,  294,  440,  441,  641,  440,  440,  440,
      440,  440,  440,  440,  440,  442,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  444,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,

      522,  522,  522,  522,  523,  523,  523,  523,  524,  525,
      525,  526,  187,  445,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      553,  553,  553,  553,  554,  555,  555,  556,  446,  447,
      448,  449,  450,  451,  452,  453,  454,  455,  456,  457,
      116,  458,  459,  460,  461,  465,  466,  467,  467,  468,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  470,  470,  470,  470,  471,
      176,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      540,  540,  540,  540,  540,  540,  540,  540,  540,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  708,  708,  708,  708,  709,  710,  710,  711,  644,
      645,  177,  646,  647,  648,  649,  650,  651,  652,  653,
      948,  654,  655,  656,  657,   78,   77,  178,  948,  179,
      179,  179,  179,  179,  179,  180,  181,  181,  181,  181,
      182,  183,  183,  184,  185,  185,  186,  176,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,

      559,  559,  559,  559,  559,  559,  559,  206,  206,  206,
      206,  865,  206,  206,  566,  869,  206,  206,  615,  642,
      640,  616,  866,  619,  591,  638,  621,  567, 1400,  568,
      617,  592,  620,  569,  593,  622,  594,  867,  868,  623,
      624,  865,  595,  870,  566,  869, 1400, 1400,  615,  642,
      640,  616,  866,  619,  591,  638,  621,  567,  177,  568,
      617,  592,  620,  569,  593,  622,  594,  867,  868,  623,
      624, 1400,  595,  870,  178, 1400,  179,  179,  179,  179,
      179,  179,  180,  181,  181,  181,  181,  182,  183,  183,
      184,  185,  185,  186,  492,  492,  492,  492,  492,  492,

      492,  492,  206,  206,  101,  101,  101,  101,  101,  101,
      629,  871,  872,  633,  873,  874,  875,  876,  634,  877,
      878,  630,  879,  880,  635,  661,  661,  661,  661,  661,
      661,  661,  661,  661, 1400,  850,  662,  850, 1400,  850,
      629,  871,  872,  633,  873,  874,  875,  876,  634,  877,
      878,  630,  879,  880,  635,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  762,  762,  762,  762,  762,  762,
      494, 1400, 1400, 1400,  669,  669,  669,  669,  669,  669,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  130,
      130,  130,  130,  130,  130,  495,  496,  497, 1400,  498,

      499,  500,  501,  502,  503,  504,  505, 1400,  506,  507,
      508,  509,  512,  513,  514,  514,  515,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  517,  517,  517,  517,  517,  518,  204,  205, 1400,
      204,  204,  204,  204,  204,  204,  204,  204,  206,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      716,  716,  716,  716,  716,  716,  716,  716,  716,  787,
      787,  787,  787,  443,  787, 1400,  214,  741,  741,  741,
      741,  741,  741,  741,  741,  741, 1400, 1400, 1400,  725,
      754,  754,  754,  754,  755,  756,  756,  757, 1400, 1400,
     1400,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226, 1400,  227,  228,  229,  230,  204,  205,
     1400,  204,  204,  204,  204,  204,  204,  204,  204, 1400,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  726,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  720,
      720,  720,  720,  720,  720,  753,  753,  753,  753,  753,

      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  437,  437,  437,
      437,  437,  437,  437,  437, 1400, 1400,  214, 1400,  727,
      727,  727,  727,  727,  727,  728,  729,  729,  729,  729,
      730,  731,  731,  732,  733,  733,  734, 1400,  881,  882,
     1400, 1400,  215,  216,  217,  218,  219,  220,  221,  222,
      223,  224,  225,  226, 1400,  227,  228,  229,  230,  156,
      437,  437,  437,  437,  437,  437,  437,  437,  881,  882,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  765,  765,
      765,  765,  765,  765,  765,  765,  765, 1400, 1400, 1400,
     1400,  159,  883,  884, 1400,  885,  886,  766,  766,  766,
      766,  766,  766, 1400, 1400,  427,  427,  427,  427,  427,
      427,  427,  427, 1400,  771,  771,  771,  771,  771,  771,
      771,  771,  883,  884,  770,  885,  886, 1400, 1400,  773,
     1400,  773, 1400,  772,  774,  774,  774,  774,  774,  774,
      774,  774,  788,  788,  788,  788,  788,  788,  788,  788,
      788, 1400,  160,  161,  770,  162,  163,  164,  165,  166,

      167,  168,  169,  772,  170,  171,  172,  173,  542,  543,
      544,  544,  545,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  547,  547,  547,
      547,  547,  548,  674,  887, 1400,  888, 1400,  675, 1400,
      430,  430,  430,  430,  430,  430,  430,  430,  776,  776,
      776,  776,  776,  776,  776,  776,  889,  890, 1400,  775,
      891,  892,  893,  778,  887,  778,  888,  777,  779,  779,
      779,  779,  779,  779,  779,  779, 1235,  434,  434,  434,
      434,  434,  434,  434,  434, 1236,  889,  890,  676,  775,
      891,  892,  893,  780, 1237,  780,  435,  777,  781,  781,

      781,  781,  781,  781,  781,  781,  782, 1400,  782, 1400,
     1400,  783,  783,  783,  783,  783,  783,  783,  783,  809,
      809,  809,  809,  809,  809, 1400,  435,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800, 1400, 1400, 1400, 1400, 1400,  677,  677,
      677,  677,  677,  677,  678,  679,  679,  679,  679,  680,
      681,  681,  682,  683,  683,  684,  340,  340,  340,  340,
      340,  340,  340,  340,  157,  157,  157,  157,  157,  157,
      157,  157,  158,  158,  158,  158,  158,  158,  948,  157,
      157,  157,  157,  157,  157, 1400,  948, 1400,  784,  784,

      784,  784,  784,  784,  784,  784,  842,  842,  842,  842,
      842,  842, 1400,  784,  784,  784,  784,  784,  784,  157,
      157,  157,  157,  157,  157,  801,  801,  801,  801,  802,
      803,  803,  804,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  342,  784,  784,  784,  784,  784,  784,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805, 1400, 1400,  343,  344,  345,
     1400,  346,  347,  348,  349,  350,  351,  352,  353, 1400,
      354,  355,  356,  357,  340,  340,  340,  340,  340,  340,
      340,  340,  785, 1400,  785,  785,  785,  785,  785,  785,

      785,  785,  785,  785,  785,  785,  785,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  785, 1400,  785, 1400,
      785,  785,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807, 1400,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  785,  834,  834,  834,  834,  835,  836,  836,  837,
      342,  813,  813,  813,  813,  813,  813,  842,  842,  842,
      842,  842,  842,  842,  842,  842, 1400, 1400, 1400, 1363,
      785, 1400, 1400, 1400, 1400,  343,  344,  345, 1236,  346,
      347,  348,  349,  350,  351,  352,  353, 1237,  354,  355,

      356,  357,  697,  698,  699,  699,  700,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  702,  702,  702,  702,  702,  703,  388,  388,  388,
      388,  388,  388,  388,  388,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  188,  188,  188,  188,
      188,  188,  845,  845,  845,  845,  845,  845,  845,  845,

      845,  894, 1400,  390,  851,  851,  851,  851,  851,  851,
      895,  846,  846,  846,  846,  846,  846,  851,  851,  851,
      851,  851,  851,  851,  851,  851, 1400, 1400,  391,  392,
      393,  894,  394,  395,  396,  397,  398,  399,  400,  401,
      895,  402,  403,  404,  405,  388,  388,  388,  388,  388,
      388,  388,  388,  207,  207,  207,  207,  207,  207,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  896,  897,
      898,  899,  900,  901,  902,  903,  904,  905,  855,  855,
      855,  855,  855,  855,  906,  907,  908,  909,  910,  911,
      912, 1400,  913,  914,  917,  918,  919,  915,  896,  897,

      898,  899,  900,  901,  902,  903,  904,  905,  916,  920,
      925,  926,  934,  935,  906,  907,  908,  909,  910,  911,
      912,  390,  913,  914,  917,  918,  919,  915,  936,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  916,  920,
      925,  926,  934,  935, 1400, 1400,  391,  392,  393, 1400,
      394,  395,  396,  397,  398,  399,  400,  401,  936,  402,
      403,  404,  405,  743,  744,  745,  745,  746,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  748,  748,  748,  748,  748,  749,  439, 1400,
      937,  938,  939,  940,  941, 1400,  440,  441,  942,  440,

      440,  440,  440,  440,  440,  440,  440,  442,  927,  928,
     1400,  929,  930,  943,  944,  945, 1057, 1058, 1059,  931,
      937,  938,  939,  940,  941,  932, 1060,  933,  942,  979,
      979,  979,  979,  980,  981,  981,  982, 1400,  927,  928,
      444,  929,  930,  943,  944,  945, 1057, 1058, 1059,  931,
     1400, 1400, 1400, 1400, 1400,  932, 1060,  933,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  978, 1400,  445,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983, 1061, 1400, 1001, 1001, 1400, 1062, 1400, 1400,

      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457, 1002,  458,  459,  460,  461,  439,  673, 1400,
     1400, 1400, 1061,  673, 1400,  440,  441, 1062,  440,  440,
      440,  440,  440,  440,  440,  440,  442,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  992,  992,  992,  992,
      992,  992,  992,  992,  992, 1400, 1400, 1400, 1400,  444,
     1400, 1021, 1021,  673,  787,  787, 1047, 1047,  673, 1400,
     1400, 1400,  673, 1003, 1003, 1003, 1003, 1003, 1003, 1022,
      673, 1400,  786,  673, 1048,  673,  341,  341,  341,  341,

      341,  341, 1400, 1400,  445,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994, 1023, 1023, 1023, 1023, 1023, 1023, 1400, 1400,  446,
      447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
      457, 1400,  458,  459,  460,  461,  790,  791,  792,  792,
      793,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  795,  795,  795,  795,  795,
      796,  492,  492,  492,  492,  492,  492,  492,  492,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996,  996,  998,  998,  998,  998,  998,

      998,  998,  998,  999,  321,   91, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003,  389,  389,  389,  389,  389,
      389,   92, 1400,   93,   93,   93,   93,   93,   93,   94,
       95,   95,   95,   95,   96,   97,   97,   98,   99,   99,
      100, 1063, 1400, 1031, 1400, 1031, 1400,  494, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032,  725, 1131, 1131,   81,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1400,
     1400, 1063,  495,  496,  497, 1130,  498,  499,  500,  501,
      502,  503,  504,  505, 1400,  506,  507,  508,  509,  492,
      492,  492,  492,  492,  492,  492,  492, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1019,  726, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1400, 1400, 1400,   82,
       82,   82,   82,   82,   82,   83,   84,   84,   84,   84,
       85,   86,   86,   87,   88,   88,   89, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1039, 1039, 1039, 1039,
     1039, 1039, 1011, 1400, 1400, 1400, 1007, 1007, 1007, 1007,
     1007, 1007, 1400, 1064, 1400,  494,  727,  727,  727,  727,
      727,  727,  728,  729,  729,  729,  729,  730,  731,  731,
      732,  733,  733,  734,  443,  443,  443,  443,  443,  443,
      495,  496,  497, 1064,  498,  499,  500,  501,  502,  503,

      504,  505, 1400,  506,  507,  508,  509,  823,  824,  825,
      825,  826,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  828,  828,  828,  828,
      828,  829,  204,  205, 1400,  204,  204,  204,  204,  204,
      204,  204,  204,  206,  724, 1033, 1400, 1033, 1400,  724,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1400, 1400,  378,  724,

     1238, 1400, 1400, 1400,  724, 1400, 1400, 1400,  724, 1400,
     1400,  214, 1400, 1400, 1239, 1400,  724, 1400, 1400,  724,
     1240,  724,  774,  774,  774,  774,  774,  774,  774,  774,
     1049, 1049, 1049, 1049, 1049, 1049,  215,  216,  217,  218,
      219,  220,  221,  222,  223,  224,  225,  226,  119,  227,
      228,  229,  230,  204,  205, 1400,  204,  204,  204,  204,
      204,  204,  204,  204,  206, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
      774,  774,  774,  774,  774,  774,  774,  774, 1400, 1400,

     1027, 1027, 1027, 1027, 1027, 1027, 1400, 1400,  120,  120,
      120,  120,  120,  120,  121,  122,  122,  122,  122,  123,
      124,  124,  125,  126,  126,  127,  493,  493,  493,  493,
      493,  493,  214, 1400, 1400, 1400,  771,  771,  771,  771,
      771,  771,  771,  771,  779,  779,  779,  779,  779,  779,
      779,  779, 1400, 1400, 1400,  772, 1400,  215,  216,  217,
      218,  219,  220,  221,  222,  223,  224,  225,  226, 1400,
      227,  228,  229,  230,  946,  947, 1400,  946,  946,  946,
      946,  946,  946,  946,  946,  772, 1035, 1065, 1035, 1400,
     1400, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,  776,

      776,  776,  776,  776,  776,  776,  776, 1131, 1131, 1131,
     1131,  948, 1131, 1066, 1037, 1067, 1037, 1065,  777, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038,  779,  779,  779,
      779,  779,  779,  779,  779,  781,  781,  781,  781,  781,
      781,  781,  781, 1066, 1400, 1067, 1400, 1400,  777, 1400,
     1400, 1400, 1400,  949,  781,  781,  781,  781,  781,  781,
      781,  781,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  950,  951,
      952,  953,  954,  955,  956,  957,  958,  959,  960,  961,
     1400,  962,  963,  964,  965,  968,  969,  970,  970,  971,

      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  973,  973,  973,  973,  973,  974,
      674, 1400, 1400, 1400, 1400,  675, 1400, 1400, 1400, 1400,
     1400,  442,  442,  442,  442,  442,  442,  442,  442, 1400,
     1400, 1400, 1068, 1069, 1070, 1400,  442,  442,  442,  442,
      442,  442, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1400, 1400, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1068, 1069, 1070,  676,  442,  442,  442,  442,
      442,  442, 1043, 1043, 1043, 1043, 1043, 1043, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1400, 1053, 1053, 1053, 1053,
     1053, 1053, 1400, 1400, 1071, 1072, 1073, 1074, 1400, 1075,
     1076, 1077, 1078, 1079, 1080,  677,  677,  677,  677,  677,
      677,  678,  679,  679,  679,  679,  680,  681,  681,  682,
      683,  683,  684,  674, 1071, 1072, 1073, 1074,  991, 1075,
     1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1400, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1105, 1106, 1107, 1111, 1112, 1081, 1082, 1083, 1084, 1085,

     1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,  676, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1105, 1106, 1107, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
     1119, 1120, 1121, 1118, 1122, 1123, 1124, 1125, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1400, 1113, 1114, 1115, 1116, 1117,
     1119, 1120, 1121, 1118, 1122, 1123, 1124, 1125,  677,  677,
      677,  677,  677,  677,  678,  679,  679,  679,  679,  680,
      681,  681,  682,  683,  683,  684,  340,  340,  340,  340,
      340,  340,  340,  340, 1126, 1127, 1128, 1129, 1145, 1145,

     1145, 1145, 1146, 1147, 1147, 1148, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149,  321, 1400, 1126, 1127, 1128, 1129, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153,  342,  643,  643,  643,  643,  643,  643, 1178,
     1400,  378, 1400, 1400, 1400, 1400, 1400,   81, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1400,  343,  344,  345,
     1400,  346,  347,  348,  349,  350,  351,  352,  353, 1178,

      354,  355,  356,  357,  340,  340,  340,  340,  340,  340,
      340,  340, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156,  119, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1400, 1157, 1157, 1157, 1157, 1157, 1157,   82,   82,   82,
       82,   82,   82,   83,   84,   84,   84,   84,   85,   86,
       86,   87,   88,   88,   89, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1400,
      342,  120,  120,  120,  120,  120,  120,  121,  122,  122,
      122,  122,  123,  124,  124,  125,  126,  126,  127, 1227,

     1227, 1227, 1227, 1227, 1227,  343,  344,  345, 1400,  346,
      347,  348,  349,  350,  351,  352,  353, 1400,  354,  355,
      356,  357,  388,  388,  388,  388,  388,  388,  388,  388,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1179, 1180, 1181, 1182, 1183, 1184,
     1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1400, 1194,
     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1206, 1207, 1208, 1179, 1180, 1181, 1182, 1183, 1184,
     1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193,  390, 1194,

     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1206, 1207, 1208, 1400, 1400, 1400, 1400, 1209, 1210,
     1214, 1215, 1216,  391,  392,  393, 1217,  394,  395,  396,
      397,  398,  399,  400,  401, 1218,  402,  403,  404,  405,
      388,  388,  388,  388,  388,  388,  388,  388, 1209, 1210,
     1214, 1215, 1216, 1219, 1220, 1221, 1217, 1222, 1223, 1224,
     1225, 1226,  207, 1400,  207, 1218, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227,  948,  948,  948,  948,  948,
      948,  725,  207, 1219, 1220, 1221, 1400, 1222, 1223, 1224,
     1225, 1226,  207,  207,  207, 1246,  207, 1251, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1245, 1250,  207,
     1244, 1400,  207, 1400,  207, 1400,  390, 1231, 1231, 1231,
     1231, 1231, 1231,  207, 1400, 1246,  207, 1251, 1400, 1400,
     1247,  726,  207,  207,  207, 1253, 1400, 1245, 1250,  207,
     1244,  391,  392,  393,  207,  394,  395,  396,  397,  398,
      399,  400,  401,  207,  402,  403,  404,  405,  439, 1252,
     1247, 1400,  207,  207,  207, 1253,  440,  441, 1400,  440,
      440,  440,  440,  440,  440,  440,  440,  442, 1248, 1248,
     1248, 1248,  207,  207, 1249,  207, 1400, 1400, 1400, 1400,
     1256,  727,  727,  727,  727,  727,  727,  728,  729,  729,

      729,  729,  730,  731,  731,  732,  733,  733,  734,  207,
      444,  207,  207,  207,  207,  207, 1254, 1254, 1254, 1254,
     1256,  207, 1255, 1257, 1262, 1258,  207,  207,  207, 1259,
      207, 1263,  207,  207, 1264,  207, 1260, 1268,  207,  207,
     1400,  207, 1400,  207,  207,  445, 1400, 1400, 1400, 1400,
     1400,  207,  207, 1257, 1262, 1258,  207,  207,  207, 1259,
      207, 1263,  207,  207, 1264,  207, 1260, 1268,  207, 1400,
      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457,  207,  458,  459,  460,  461,  439,  207,  207,
      207,  207,  207,  207,  207,  440,  441,  207,  440,  440,

      440,  440,  440,  440,  440,  440,  442, 1261, 1265, 1400,
      207,  207, 1266, 1269,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207, 1267,  207, 1270, 1271,
      207, 1273,  207, 1274, 1272,  207, 1275, 1261, 1265,  444,
      207,  207, 1266, 1269,  207,  207,  207,  207,  207, 1276,
      207,  207,  207,  207,  207,  207, 1267,  207, 1270, 1271,
      207, 1273,  207, 1274, 1272,  207, 1275, 1280,  207, 1400,
     1400, 1364, 1400, 1400,  445, 1400, 1400, 1400,  207, 1276,
      207,  207,  207,  207,  207, 1239, 1400,  207,  207,  207,
     1279, 1240,  207,  207, 1282, 1296,  207, 1280,  207,  446,

      447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
      457, 1281,  458,  459,  460,  461,  176, 1314,  207,  207,
     1279,  725,  207,  207, 1282, 1296,  207, 1400, 1400, 1400,
     1400, 1400, 1286, 1400, 1400, 1400, 1400, 1400,  207,  207,
      207, 1281,  988, 1298, 1277,  989,  207, 1314, 1287, 1278,
     1288, 1288, 1288, 1288, 1288, 1288, 1289, 1290, 1290, 1290,
     1290, 1291, 1292, 1292, 1293, 1294, 1294, 1295,  207,  207,
      207,  726, 1312, 1298,  207, 1400,  207, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1400,  177, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1400, 1400, 1400, 1400,

     1400, 1400, 1312,  178,  207,  179,  179,  179,  179,  179,
      179,  180,  181,  181,  181,  181,  182,  183,  183,  184,
      185,  185,  186,  492,  492,  492,  492,  492,  492,  492,
      492,  727,  727,  727,  727,  727,  727,  728,  729,  729,
      729,  729,  730,  731,  731,  732,  733,  733,  734,  207,
      207, 1248, 1248, 1248, 1248, 1400, 1400, 1249, 1400, 1400,
      207,  207, 1299,  207,  207, 1297, 1313,  207,  207, 1400,
     1315,  207,  207,  207, 1316,  207, 1400,  207,  207,  207,
      207,  207, 1326, 1254, 1254, 1254, 1254, 1317, 1283, 1255,
      207,  207, 1299,  207,  207, 1297, 1313,  207,  207,  494,

     1315,  207,  207,  207, 1316,  207, 1284,  207,  207, 1400,
     1400,  207, 1326, 1400, 1400, 1400, 1400, 1317, 1283, 1400,
     1300,  207, 1327, 1321,  495,  496,  497, 1400,  498,  499,
      500,  501,  502,  503,  504,  505, 1284,  506,  507,  508,
      509,  492,  492,  492,  492,  492,  492,  492,  492, 1302,
     1300,  207, 1327, 1321, 1400, 1400, 1400,  207, 1400, 1322,
     1400,  207,  207, 1400, 1343, 1303, 1400, 1304, 1304, 1304,
     1304, 1304, 1304, 1305, 1306, 1306, 1306, 1306, 1307, 1308,
     1308, 1309, 1310, 1310, 1311,  207,  207,  207,  207, 1322,
      207,  207,  207,  207, 1343, 1357,  207,  207,  207, 1318,

     1319,  207, 1358,  207, 1320, 1341, 1325, 1342,  207,  207,
     1356, 1360, 1400, 1400, 1400,  207,  207,  494,  207, 1400,
      207, 1400, 1400,  207,  207, 1357,  207,  207,  207, 1318,
     1319,  207, 1358,  207, 1320, 1341, 1325, 1342,  207,  207,
     1356, 1360,  495,  496,  497, 1400,  498,  499,  500,  501,
      502,  503,  504,  505,  207,  506,  507,  508,  509,  204,
      205, 1400,  204,  204,  204,  204,  204,  204,  204,  204,
      206, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,

     1338, 1338, 1338, 1349, 1349, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1400, 1400,  214, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  224,  225,  226,  207,  227,  228,  229,  230,
      204,  205,  207,  204,  204,  204,  204,  204,  204,  204,
      204,  206,  207,  207, 1362, 1365, 1359, 1366, 1367, 1368,

      207, 1374, 1375, 1376,  207,  207,  207, 1361,  207,  207,
     1381,  207,  207,  207, 1373,  207, 1382, 1383, 1285, 1388,
      207,  207,  207,  207, 1362, 1365, 1359, 1366, 1367, 1368,
      207, 1374, 1375, 1376,  207,  207,  207, 1361,  207,  207,
     1381,  207, 1389,  207, 1373,  207, 1382, 1383, 1285, 1388,
      207,  207, 1391, 1396, 1400, 1400, 1400, 1400, 1400,  214,
     1400, 1400, 1386, 1400, 1400,  207,  207, 1400, 1400, 1400,
     1400, 1400, 1389, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1391, 1396,  215,  216,  217,  218,  219,  220,
      221,  222,  223,  224,  225,  226,  207,  227,  228,  229,

      230,  946,  947,  207,  946,  946,  946,  946,  946,  946,
      946,  946, 1277, 1278, 1387, 1392,  207, 1285, 1390, 1285,
      207, 1285,  207, 1397,  207,  207, 1285,  207,  207, 1393,
     1400, 1400, 1400,  207, 1399, 1400, 1400, 1394, 1395, 1398,
     1400, 1400, 1400, 1400, 1387, 1392,  207, 1285, 1390, 1285,
      207, 1285,  207, 1397,  207,  207, 1285,  207,  207, 1393,
     1400, 1400, 1400, 1400, 1399, 1400, 1400, 1394, 1395, 1398,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
      949, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  959,  960,  961, 1400,  962,  963,
      964,  965,  946,  947, 1400,  946,  946,  946,  946,  946,
      946,  946,  946, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400,  949, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400,  950,  951,  952,  953,
      954,  955,  956,  957,  958,  959,  960,  961, 1400,  962,
      963,  964,  965, 1134, 1135, 1136, 1136, 1137, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1139, 1139, 1139, 1139, 1139, 1140,  204,  205,
     1400,  204,  204,  204,  204,  204,  204,  204,  204,  206,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1161, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  214, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  215,  216,  217,  218,  219,  220,  221,  222,
      223,  224,  225,  226, 1400,  227,  228,  229,  230,  204,
      205, 1400,  204,  204,  204,  204,  204,  204,  204,  204,

      206, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  214, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400,  215,  216,  217,  218,  219,  220,  221,

      222,  223,  224,  225,  226, 1400,  227,  228,  229,  230,
      542,  543,  544,  544,  545,  546,  546,  546,  546,  546,
      546,  546, 1162,  546,  546,  546,  546,  546,  546,  547,
      547,  547,  547,  547,  548,  674, 1400, 1400, 1400, 1400,
      991, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
      676, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
      677,  677,  677,  677,  677,  677,  678,  679,  679,  679,
      679,  680,  681,  681,  682,  683,  683,  684,  340,  340,
      340,  340,  340,  340,  340,  340, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,  342, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  343,
      344,  345, 1400,  346,  347,  348,  349,  350,  351,  352,
      353, 1400,  354,  355,  356,  357,  340,  340,  340,  340,
      340,  340,  340,  340, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  342, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  343,  344,  345,
     1400,  346,  347,  348,  349,  350,  351,  352,  353, 1400,

      354,  355,  356,  357,  388,  388,  388,  388,  388,  388,
      388,  388, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
      390, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400,  391,  392,  393, 1400,  394,
      395,  396,  397,  398,  399,  400,  401, 1400,  402,  403,
      404,  405,  388,  388,  388,  388,  388,  388,  388,  388,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  390, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400,  391,  392,  393, 1400,  394,  395,  396,
      397,  398,  399,  400,  401, 1400,  402,  403,  404,  405,
      439, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  440,  441,
     1400,  440,  440,  440,  440,  440,  440,  440,  440,  442,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  444, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  445, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  446,  447,  448,  449,  450,  451,  452,  453,
      454,  455,  456,  457, 1400,  458,  459,  460,  461,  439,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  440,  441, 1400,
      440,  440,  440,  440,  440,  440,  440,  440,  442, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400,  444, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400,  445, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400,  446,  447,  448,  449,  450,  451,  452,  453,  454,
      455,  456,  457, 1400,  458,  459,  460,  461,  492,  492,

      492,  492,  492,  492,  492,  492, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,  494, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  495,

      496,  497, 1400,  498,  499,  500,  501,  502,  503,  504,
      505, 1400,  506,  507,  508,  509,  492,  492,  492,  492,
      492,  492,  492,  492, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  494, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  495,  496,  497,
     1400,  498,  499,  500,  501,  502,  503,  504,  505, 1400,
      506,  507,  508,  509,  204,  205, 1400,  204,  204,  204,
      204,  204,  204,  204,  204,  206, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400,  214, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
     1400,  227,  228,  229,  230,  204,  205, 1400,  204,  204,
      204,  204,  204,  204,  204,  204,  206, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,  214, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  215,
      216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
      226, 1400,  227,  228,  229,  230,  946,  947, 1400,  946,
      946,  946,  946,  946,  946,  946,  946, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400,  949, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961, 1400,  962,  963,  964,  965,  946,  947, 1400,

      946,  946,  946,  946,  946,  946,  946,  946, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400,  949, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400,  950,  951,  952,  953,  954,  955,  956,  957,  958,
      959,  960,  961, 1400,  962,  963,  964,  965,  946,  947,
     1400,  946,  946,  946,  946,  946,  946,  946,  946, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  949, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  960,  961, 1400,  962,  963,  964,  965,  204,
      205, 1400,  204,  204,  204,  204,  204,  204,  204,  204,
      206, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  214, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  224,  225,  226, 1400,  227,  228,  229,  230,
      674, 1400, 1400, 1400, 1400,  675, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400,  676, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400,  677,  677,  677,  677,  677,
      677,  678,  679,  679,  679,  679,  680,  681,  681,  682,
      683,  683,  684,  204,  205, 1400,  204,  204,  204,  204,

      204,  204,  204,  204,  206, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1243, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1243, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  214, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  215,  216,  217,

      218,  219,  220,  221,  222,  223,  224,  225,  226, 1400,
      227,  228,  229,  230,  674, 1400, 1400, 1400, 1400,  675,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  676,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  677,
      677,  677,  677,  677,  677,  678,  679,  679,  679,  679,
      680,  681,  681,  682,  683,  683,  684,  542,  543,  544,
      544,  545,  546,  546,  546,  546,  546,  546,  546, 1323,
      546,  546,  546,  546,  546,  546,  547,  547,  547,  547,
      547,  548, 1328, 1248, 1248, 1328, 1400, 1400, 1329, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1330,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1331, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1330,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1331, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1286, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1287, 1400, 1288, 1288, 1288, 1288, 1288, 1288, 1289, 1290,

     1290, 1290, 1290, 1291, 1292, 1292, 1293, 1294, 1294, 1295,
     1344, 1254, 1254, 1344, 1400, 1400, 1345, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1346, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1346, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1302, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1303, 1400,
     1304, 1304, 1304, 1304, 1304, 1304, 1305, 1306, 1306, 1306,
     1306, 1307, 1308, 1308, 1309, 1310, 1310, 1311, 1328, 1248,
     1248, 1328, 1400, 1400, 1329, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1330, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1331, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1330, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1331, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1286, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1287, 1400, 1288, 1288,
     1288, 1288, 1288, 1288, 1289, 1290, 1290, 1290, 1290, 1291,
     1292, 1292, 1293, 1294, 1294, 1295, 1328, 1248, 1248, 1328,
     1400, 1400, 1329, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1330, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1331, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1330, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1331, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1286, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1287, 1400, 1288, 1288, 1288, 1288,
     1288, 1288, 1289, 1290, 1290, 1290, 1290, 1291, 1292, 1292,
     1293, 1294, 1294, 1295, 1344, 1254, 1254, 1344, 1400, 1400,
     1345, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1346, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1346, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1302, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1303, 1400, 1304, 1304, 1304, 1304, 1304, 1304,
     1305, 1306, 1306, 1306, 1306, 1307, 1308, 1308, 1309, 1310,
     1310, 1311, 1344, 1254, 1254, 1344, 1400, 1400, 1345, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1346,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1346,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1302, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1303, 1400, 1304, 1304, 1304, 1304, 1304, 1304, 1305, 1306,
     1306, 1306, 1306, 1307, 1308, 1308, 1309, 1310, 1310, 1311,

     1328, 1248, 1248, 1328, 1400, 1400, 1329, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1330, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1384, 1400, 1400, 1331, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1330, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1384, 1400, 1400, 1331, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1286, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1287, 1400,
     1288, 1288, 1288, 1288, 1288, 1288, 1289, 1290, 1290, 1290,
     1290, 1291, 1292, 1292, 1293, 1294, 1294, 1295, 1328, 1248,
     1248, 1328, 1400, 1400, 1329, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1330, 1385, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1331, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1330, 1385, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1331, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1286, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1287, 1400, 1288, 1288,
     1288, 1288, 1288, 1288, 1289, 1290, 1290, 1290, 1290, 1291,
     1292, 1292, 1293, 1294, 1294, 1295,   79, 1400,   79,   79,
       79,   79,   79,   79,   79,   79,   79, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,   79,   79,   79,   79,   90, 1400,

       90,   90,   90,   90,   90,   90,   90,   90,   90, 1400,
     1400,   90, 1400, 1400,   90, 1400,   90,   90,   90,   90,
      101, 1400,  101, 1400,  101, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400,  101,  117, 1400,  117,  117,  117,  117,
      117,  117,  117,  117,  117, 1400, 1400, 1400, 1400, 1400,
     1400, 1400,  117,  117,  117,  117,  130, 1400,  130, 1400,
      130, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  130,
      158, 1400, 1400,  158,  158,  158,  158,  158, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400,  158,  174,  174,  174,
      174,  174,  174,  174, 1400,  174, 1400, 1400,  174, 1400,

     1400,  174, 1400,  174,  174,  174,  174,  188, 1400,  188,
     1400,  188, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
      188,  299,  299,  299, 1400,  299,  299,  301,  301,  301,
      301,  301,  301,  311,  311,  311,  311,  311,  311,  312,
      312,  312,  312,  312,  312,  319,  319,  319,  319,  319,
      319,   79, 1400,   79,   79,   79,   79,   79,   79,   79,
       79,   79, 1400, 1400, 1400, 1400, 1400, 1400, 1400,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  324,
      324,  324,  324,  324,  324,  326,  326,  326,  326,  326,
      326,  328,  328,  328,  328,  328,  328,   90, 1400,   90,

       90,   90,   90,   90,   90,   90,   90,   90, 1400, 1400,
       90, 1400, 1400,   90, 1400,   90,   90,   90,   90,  331,
      331,  331,  331,  331,  332,  332,  332,  332,   90,   90,
       90,   90,   90,   90,  334,  334,  334,  334,  334,  334,
      336,  336,  336,  336,  336,  336,  338,  338,  338,  338,
      338,  338,  341, 1400,  341, 1400,  341, 1400,  341, 1400,
     1400, 1400, 1400, 1400,  341,  341,  101,  101,  101, 1400,
      101,  101,  359,  359,  359,  359,  359,  359,  368,  368,
      368,  368,  368,  368,  369,  369,  369,  369,  369,  369,
      376,  376,  376,  376,  376,  376,  117, 1400,  117,  117,

      117,  117,  117,  117,  117,  117,  117, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  381,  381,  381,  381,  381,  381,
      383,  383,  383,  383,  383,  383,  385,  385,  385,  385,
      385,  385,  389, 1400,  389, 1400,  389, 1400,  389, 1400,
     1400, 1400, 1400, 1400,  389,  389,  130,  130,  130, 1400,
      130,  130,  407,  407,  407,  407,  407,  407,  416,  416,
      416,  416,  416,  416,  417,  417,  417,  417,  417,  417,
      424,  424,  424,  424,  424,  424,  443,  443,  443,  443,
      443,  443,  443,  443, 1400,  443, 1400, 1400, 1400, 1400,

     1400,  443,  443,  443,  158,  158,  158, 1400,  158,  158,
      464,  464,  464,  464,  464,  464,  473,  473,  473,  473,
      473,  473,  474,  474,  474,  474,  474,  474,  481,  481,
      481,  481,  481,  481,  174,  174,  174,  174,  174,  174,
      174, 1400,  174, 1400, 1400,  174, 1400, 1400,  174, 1400,
      174,  174,  174,  174,  483,  483,  483,  483,  483,  484,
      484,  484,  484,  174,  174,  174,  174,  174,  174,  486,
      486,  486,  486,  486,  486,  488,  488,  488,  488,  488,
      488,  490,  490,  490,  490,  490,  490,  493, 1400,  493,
     1400,  493, 1400,  493, 1400, 1400, 1400, 1400, 1400,  493,

      493,  188,  188,  188, 1400,  188,  188,  511,  511,  511,
      511,  511,  511,  520,  520,  520,  520,  520,  520,  521,
      521,  521,  521,  521,  521,  528,  528,  528,  528,  528,
      528,  207,  207,  207,  207,  207, 1400,  207, 1400,  207,
     1400, 1400, 1400, 1400, 1400,  207,  207,  207,  158, 1400,
     1400,  158,  158,  158,  158,  158, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,  158,  207,  207,  207, 1400,  207,
      207,  538,  538,  538,  538,  538,  538,  541,  541,  541,
      541,  541,  541,  550,  550,  550,  550,  550,  550,  551,
      551,  551,  551,  551,  551,  558,  558,  558,  558,  558,

      558,  643, 1400,  643, 1400,  643, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,  643,  299,  299,  299,  299,  299,
      299,  660,  660,  660,  660,  660,  660,  661,  661,  661,
      661,  661,  661,  666,  666,  666,  666,  666,  666,  667,
      667,  667,  667,  667,  667,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  670,  670,  670,
      670,  670,  670,  671,  671,  671,  671,  671,  671,  672,
      672,  672,  672,  672,  672,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673, 1400, 1400, 1400, 1400,
     1400, 1400, 1400,  673,  673,  673,  673,   79,   79,   79,

       79,   79,   79,  685,  685,  685,  685,  685,  685,  686,
      686,  686,  686,  686,  686,  687,  687,  687,  687,  687,
      687,  688,  688,  688,  688,  688,  688,  689,  689,  689,
      689,  689,  689,  332,  332,  332,  332,  332,  332,   90,
       90,   90,   90,   90,   90,  691,  691,  691,  691,  691,
      691,  692,  692,  692,  692,  692,  692,  693,  693,  693,
      693,  693,  693,  694,  694,  694,  694,  694,  694,  341,
     1400,  341, 1400,  341, 1400,  341, 1400, 1400, 1400, 1400,
     1400,  341,  341,  341,  341,  341, 1400,  341,  341,  340,
      340,  340,  340, 1400,  340,  696,  696,  696,  696,  696,

      696,  705,  705,  705,  705,  705,  705,  706,  706,  706,
      706,  706,  706,  713,  713,  713,  713,  713,  713,  101,
      101,  101,  101,  101,  101,  715,  715,  715,  715,  715,
      715,  716,  716,  716,  716,  716,  716,  717,  717,  717,
      717,  717,  717,  718,  718,  718,  718,  718,  718,  719,
      719,  719,  719,  719,  719,  720,  720,  720,  720,  720,
      720,  721,  721,  721,  721,  721,  721,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
     1400, 1400, 1400, 1400, 1400, 1400, 1400,  724,  724,  724,

      724,  117,  117,  117,  117,  117,  117,  735,  735,  735,
      735,  735,  735,  736,  736,  736,  736,  736,  736,  737,
      737,  737,  737,  737,  737,  738,  738,  738,  738,  738,
      738,  739,  739,  739,  739,  739,  739,  389, 1400,  389,
     1400,  389, 1400,  389, 1400, 1400, 1400, 1400, 1400,  389,
      389,  389,  389,  389, 1400,  389,  389,  388,  388,  388,
      388, 1400,  388,  742,  742,  742,  742,  742,  742,  751,
      751,  751,  751,  751,  751,  752,  752,  752,  752,  752,
      752,  759,  759,  759,  759,  759,  759,  130,  130,  130,
      130,  130,  130,  761,  761,  761,  761,  761,  761,  762,

      762,  762,  762,  762,  762,  763,  763,  763,  763,  763,
      763,  764,  764,  764,  764,  764,  764,  765,  765,  765,
      765,  765,  765,  766,  766,  766,  766,  766,  766,  767,
      767,  767,  767,  767,  767,  768,  768,  768,  768,  768,
      768,  769,  769,  769,  769,  769,  769,  443,  443,  443,
      443,  443,  443,  443,  443, 1400,  443, 1400, 1400, 1400,
     1400, 1400,  443,  443,  443,  443,  443,  443, 1400,  443,
      443,  786,  786,  786,  786,  786,  786,  789,  789,  789,
      789,  789,  789,  798,  798,  798,  798,  798,  798,  799,
      799,  799,  799,  799,  799,  806,  806,  806,  806,  806,

      806,  158,  158,  158,  158,  158,  158,  808,  808,  808,
      808,  808,  808,  809,  809,  809,  809,  809,  809,  810,
      810,  810,  810,  810,  810,  811,  811,  811,  811,  811,
      811,  812,  812,  812,  812,  812,  812,  813,  813,  813,
      813,  813,  813,  814,  814,  814,  814,  814,  814,  815,
      815,  815,  815,  815,  815,  816,  816,  816,  816,  816,
      816,  484,  484,  484,  484,  484,  484,  174,  174,  174,
      174,  174,  174,  817,  817,  817,  817,  817,  817,  818,
      818,  818,  818,  818,  818,  819,  819,  819,  819,  819,
      819,  820,  820,  820,  820,  820,  820,  493, 1400,  493,

     1400,  493, 1400,  493, 1400, 1400, 1400, 1400, 1400,  493,
      493,  493,  493,  493, 1400,  493,  493,  492,  492,  492,
      492, 1400,  492,  822,  822,  822,  822,  822,  822,  831,
      831,  831,  831,  831,  831,  832,  832,  832,  832,  832,
      832,  839,  839,  839,  839,  839,  839,  188,  188,  188,
      188,  188,  188,  841,  841,  841,  841,  841,  841,  842,
      842,  842,  842,  842,  842,  843,  843,  843,  843,  843,
      843,  844,  844,  844,  844,  844,  844,  845,  845,  845,
      845,  845,  845,  846,  846,  846,  846,  846,  846,  847,
      847,  847,  847,  847,  847,  848,  848,  848,  848,  848,

      848,  849,  849,  849,  849,  849,  849,  207,  207,  207,
      207,  207, 1400,  207, 1400,  207, 1400, 1400, 1400, 1400,
     1400,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      539,  539,  539,  539,  539,  539,  851,  851,  851,  851,
      851,  851,  852,  852,  852,  852,  852,  852,  853,  853,
      853,  853,  853,  853,  854,  854,  854,  854,  854,  854,
      855,  855,  855,  855,  855,  855,  856,  856,  856,  856,
      856,  856,  857,  857,  857,  857,  857,  857,  858,  858,
      858,  858,  858,  858,  948,  948,  948, 1400,  948, 1400,
      948, 1400,  948, 1400, 1400, 1400, 1400, 1400,  948,  948,

      948,  643,  643,  643, 1400,  643,  643,  967,  967,  967,
      967,  967,  967,  976,  976,  976,  976,  976,  976,  977,
      977,  977,  977,  977,  977,  984,  984,  984,  984,  984,
      984,  299,  299,  299,  299,  299,  299,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673, 1400, 1400,
     1400, 1400, 1400, 1400, 1400,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  993,  993,  993,  993,  993,
      993,  995,  995,  995,  995,  995,  995,  997,  997,  997,
      997,  997,  997,   79, 1400,   79,   79,   79,   79,   79,
       79,   79,   79,   79, 1400, 1400, 1400, 1400, 1400, 1400,

     1400,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79, 1000, 1000, 1000, 1000, 1000, 1000,   90, 1400,   90,
       90,   90,   90,   90,   90,   90,   90,   90, 1400, 1400,
       90, 1400, 1400,   90, 1400,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  332,  332,  332,  332,  332,
      332,  341,  341,  341,  341,  341,  341, 1001, 1001, 1001,
     1001, 1001, 1001, 1003, 1003, 1003, 1003, 1003, 1003, 1004,
     1004, 1004, 1004, 1004, 1004, 1005, 1005, 1005, 1005, 1005,
     1005, 1006, 1006, 1006, 1006, 1006, 1006, 1007, 1007, 1007,
     1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1009,

     1009, 1009, 1009, 1009, 1009, 1010, 1010, 1010, 1010, 1010,
     1010,  341, 1400,  341, 1400,  341, 1400,  341, 1400, 1400,
     1400, 1400, 1400,  341,  341,  101,  101,  101,  101,  101,
      101,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724, 1013,
     1013, 1013, 1013, 1013, 1013, 1015, 1015, 1015, 1015, 1015,
     1015, 1017, 1017, 1017, 1017, 1017, 1017,  117, 1400,  117,
      117,  117,  117,  117,  117,  117,  117,  117, 1400, 1400,
     1400, 1400, 1400, 1400, 1400,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117, 1020, 1020, 1020, 1020, 1020,
     1020,  389,  389,  389,  389,  389,  389, 1021, 1021, 1021,
     1021, 1021, 1021, 1023, 1023, 1023, 1023, 1023, 1023, 1024,
     1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025,
     1025, 1026, 1026, 1026, 1026, 1026, 1026, 1027, 1027, 1027,
     1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028, 1028, 1029,
     1029, 1029, 1029, 1029, 1029, 1030, 1030, 1030, 1030, 1030,
     1030,  389, 1400,  389, 1400,  389, 1400,  389, 1400, 1400,
     1400, 1400, 1400,  389,  389,  130,  130,  130,  130,  130,
      130,  443,  443,  443,  443,  443,  443,  443,  443, 1400,

      443, 1400, 1400, 1400, 1400, 1400,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  787,  787,  787,  787,  787,
      787, 1039, 1039, 1039, 1039, 1039, 1039, 1040, 1040, 1040,
     1040, 1040, 1040, 1041, 1041, 1041, 1041, 1041, 1041, 1042,
     1042, 1042, 1042, 1042, 1042, 1043, 1043, 1043, 1043, 1043,
     1043, 1044, 1044, 1044, 1044, 1044, 1044, 1045, 1045, 1045,
     1045, 1045, 1045, 1046, 1046, 1046, 1046, 1046, 1046,  158,
      158,  158,  158,  158,  158,  174,  174,  174,  174,  174,
      174,  174, 1400,  174, 1400, 1400,  174, 1400, 1400,  174,
     1400,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  484,  484,  484,  484,  484,  484,  493,  493,  493,
      493,  493,  493, 1047, 1047, 1047, 1047, 1047, 1047, 1049,
     1049, 1049, 1049, 1049, 1049, 1050, 1050, 1050, 1050, 1050,
     1050, 1051, 1051, 1051, 1051, 1051, 1051, 1052, 1052, 1052,
     1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 1053, 1054,
     1054, 1054, 1054, 1054, 1054, 1055, 1055, 1055, 1055, 1055,
     1055, 1056, 1056, 1056, 1056, 1056, 1056,  493, 1400,  493,
     1400,  493, 1400,  493, 1400, 1400, 1400, 1400, 1400,  493,
      493,  188,  188,  188,  188,  188,  188,  207,  207,  207,
      207,  207, 1400,  207, 1400,  207, 1400, 1400, 1400, 1400,

     1400,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      948,  948,  948, 1400,  948, 1400,  948, 1400,  948, 1400,
     1400, 1400, 1400, 1400,  948,  948,  948,  948,  948,  948,
     1400,  948,  948, 1130, 1130, 1130, 1130, 1130, 1130, 1133,
     1133, 1133, 1133, 1133, 1133, 1142, 1142, 1142, 1142, 1142,
     1142, 1143, 1143, 1143, 1143, 1143, 1143, 1150, 1150, 1150,
     1150, 1150, 1150,  643,  643,  643,  643,  643,  643, 1152,
     1152, 1152, 1152, 1152, 1152, 1153, 1153, 1153, 1153, 1153,
     1153, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
     1155, 1155, 1155, 1156, 1156, 1156, 1156, 1156, 1156, 1157,

     1157, 1157, 1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158,
     1158, 1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,
     1160, 1160, 1160,  207,  207,  207,  207,  207, 1400,  207,
     1400,  207, 1400, 1400, 1400, 1400, 1400,  207,  207,  207,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673, 1165, 1165,
     1165, 1165, 1165, 1165, 1166, 1166, 1166, 1166, 1166, 1166,
     1167, 1167, 1167, 1167, 1167, 1167, 1168, 1168, 1168, 1168,
     1168, 1168, 1169, 1169, 1169, 1169, 1169, 1169,   79, 1400,

       79,   79,   79,   79,   79,   79,   79,   79,   79, 1400,
     1400, 1400, 1400, 1400, 1400, 1400,   79,   79,   79,   79,
      341, 1400,  341, 1400,  341, 1400,  341, 1400, 1400, 1400,
     1400, 1400,  341,  341,  341,  341,  341,  341,  341,  341,
      724,  724,  724,  724,  724,  724,  724,  724,  724, 1400,
      724,  724,  724,  724,  724,  724,  724, 1172, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
     1174, 1174, 1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175,
     1175, 1176, 1176, 1176, 1176, 1176, 1176,  117, 1400,  117,
      117,  117,  117,  117,  117,  117,  117,  117, 1400, 1400,

     1400, 1400, 1400, 1400, 1400,  117,  117,  117,  117,  389,
     1400,  389, 1400,  389, 1400,  389, 1400, 1400, 1400, 1400,
     1400,  389,  389,  389,  389,  389,  389,  389,  389,  443,
      443,  443,  443,  443,  443,  443,  443, 1400,  443, 1400,
     1400, 1400, 1400, 1400,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  493, 1400,  493, 1400,  493, 1400,  493,
     1400, 1400, 1400, 1400, 1400,  493,  493,  493,  493,  493,
      493,  493,  493,  207,  207,  207,  207,  207, 1400,  207,
     1400,  207, 1400, 1400, 1400, 1400, 1400,  207,  207,  207,
      948,  948,  948, 1400,  948, 1400,  948, 1400,  948, 1400,

     1400, 1400, 1400, 1400,  948,  948,  948,  948,  948,  948,
      948,  948,  948, 1131, 1131, 1131, 1131, 1131, 1131, 1227,
     1227, 1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228,
     1228, 1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230, 1230,
     1230, 1230, 1230, 1231, 1231, 1231, 1231, 1231, 1231, 1232,
     1232, 1232, 1232, 1232, 1232, 1233, 1233, 1233, 1233, 1233,
     1233, 1234, 1234, 1234, 1234, 1234, 1234,  643,  643,  643,
      643,  643,  643,  207,  207,  207,  207,  207, 1400,  207,
     1400,  207, 1400, 1400, 1400, 1400, 1400,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673, 1400, 1400, 1400,
     1400, 1400, 1400, 1400,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673, 1241, 1241, 1241, 1241, 1241, 1241,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724, 1400, 1400, 1400, 1400, 1400, 1400, 1400,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724, 1242, 1242,
     1242, 1242, 1242, 1242,  948,  948,  948,  948,  948,  948,
     1285, 1400, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1400, 1400, 1285, 1400, 1400, 1285, 1400, 1285, 1285,
     1285, 1285, 1301, 1400, 1301, 1301, 1301, 1301, 1301, 1301,

     1301, 1301, 1301, 1400, 1400, 1301, 1400, 1400, 1301, 1400,
     1301, 1301, 1301, 1301, 1332, 1332, 1332, 1332, 1332, 1333,
     1333, 1333, 1333, 1285, 1285, 1285, 1285, 1285, 1285, 1335,
     1335, 1335, 1335, 1335, 1335, 1337, 1337, 1337, 1337, 1337,
     1337, 1339, 1339, 1339, 1339, 1339, 1339, 1347, 1347, 1347,
     1347, 1347, 1348, 1348, 1348, 1348, 1301, 1301, 1301, 1301,
     1301, 1301, 1350, 1350, 1350, 1350, 1350, 1350, 1352, 1352,
     1352, 1352, 1352, 1352, 1354, 1354, 1354, 1354, 1354, 1354,
      207,  207,  207,  207,  207,  207, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1400, 1400, 1285,

     1400, 1400, 1285, 1400, 1285, 1285, 1285, 1285, 1333, 1333,
     1333, 1333, 1333, 1333, 1285, 1285, 1285, 1285, 1285, 1285,
     1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370,
     1370, 1370, 1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372,
     1372, 1372, 1372, 1372, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1400, 1400, 1301, 1400, 1400,
     1301, 1400, 1301, 1301, 1301, 1301, 1348, 1348, 1348, 1348,
     1348, 1348, 1301, 1301, 1301, 1301, 1301, 1301, 1377, 1377,
     1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378, 1378, 1378,
     1379, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380,

     1380, 1380, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1400, 1400, 1285, 1400, 1400, 1285, 1400,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1333, 1333, 1333, 1333, 1333, 1333,    3, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400
    } ;

static yyconst flex_int16_t yy_chk[12877] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        9,   10,    5,   14,   14,   14,   14,   20,   20,   20,
       20,   20,   20,   20,   20,   14,  145,   10,  145,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   11,   11,   13,
       11,   11,   11,   11,   11,   11,   11,   11, 1409,   11,
       11,   11,   11,   16,   16,    9,   16,   16,   16,   16,

       16,   16,   16,   16, 1348,   16,   16,   16,   16,   17,
       17, 1333,   17,   17,   17,   17,   17,   17,   17,   17,
      302,  302, 1278,   52,   52,   52,   52,   19,   19,   13,
       19,   19,   19,   19,   19,   19,   19,   19,   63,  317,
      317,   76,   19,   65,   76,  103,   63,   64,   64,   64,
       64,   65,   64,  103, 1141,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   28,   28, 1110,   28,   28,   28,   28,
       28,   28,   28,   28,   52,   28,   28,   28,   28,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   22,  208,   22,
       22,   22,   22,   22,   22,   22,   22,  105,  132,   33,
      296,  134,  560,   33,   36,  105,  132,   33,   22,  134,
       33,   36,  208,   33,   36,   33,   36,   66,   66,   66,
       66,   66,   66,   66,   66,   66, 1109,  161,  163,   33,
      360,  360,  560,   33,   36,  161,  163,   33,   22,   23,
       33,   36,  208,   33,   36,   33,   36,  210,  296, 1108,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   31,
       31,  190,   31,  192,  209,  210,  236,   31,   34,  190,
       31,  192,   31,   31,  209,   34,   31,   34,   34,   31,

       34,  236,   31, 1076,  261,  217,   34,  261,  218,   31,
       31,   23,   31,  217, 1019,  210,  218,   31,   34, 1577,
       31, 1577,   31,   31,  209,   34,   31,   34,   34,   31,
       34,  236,   31,  374,  374, 1011,   34,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   72,   72,   72,   72,   72,   72,   72,
       72,   83,   83,   83,   83,   83,   83,   83,   83,   83,
      211,  234,   23,   23,  999,   23,   23,   23,   23,   23,
       23,   23,   23,  213,   23,   23,   23,   23,   25,   25,
       32,  232,  256,  231,   32,   35,  213,  234,   32,   35,

      211,   32,   35,   32,   32,   35,   32,   35,  561,   38,
       38,  232,  256,   32,  990,  220,   38,  231,   38,   38,
       32,   38,   38,  220,   32,   35,  213,  234,   32,   35,
      211,   32,   35,   32,   32,   35,   32,   35,  561,   38,
       38,  232,  256,   32,  408,  408,   38,  231,   38,   38,
      989,   38,   38,  104,  104,  104,  104,  975,  104,  959,
       25,   89,   89,   89,   89,   89,   89,   89,   89,   89,
      133,  133,  133,  133,  950,  133,   25,  949,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   30,   30,  924,   30,

       30,   30,   30,   30,   30,   30,   30,   30,  162,  162,
      162,  162,  562,  162,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  422,
      422,  297,  562,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  128,
      128,  128,  128,  923,  233,   30,  465,  465,  246,  237,
      922,  128,   39,  191,  191,  191,  191,  850,  191,   39,
      237,  345,   39,  240,   39,  233,  246,  297,  830,  345,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   39,   30,   30,   30,   30,   37,  240,   39,
      237,   37,   39,  240,   39,  233,  246,   40,   37,   40,
      347,   37,  239,   37,  243,   40,  242,  212,  347,  797,
       40,   40,  750,  239,  393, 1463,  212,   37,  240, 1463,
       40,   37,  393,  240,  212,  243,  251,   40,   37,   40,
      242,   37,  704,   37,   41,   40,  245,   41,   41,  250,
       40,   40,   41,  239,  674,   42,  212,   41,   41,   42,
       40,  245,  251,  244,  212,  243,   42,   41,  665,   42,
      242,   42,  244,  244,   41,  260,  250,   41,   41,  247,

      479,  479,   41,   43,   43,   42,  248,   41,   41,   42,
       43,  245,  251,   43,   43,   43,   42,   41,   44,   42,
      247,   42,  244,  244,  260,   44,  250,  248,   44,  267,
       44,  257,  307,   43,   43,   45,  307,  253,  257,   45,
       43,  267,  307,   43,   43,   43,   45,  664,   44,   45,
      247,   45,  659,  258,  260,   44,  395,  248,   44,   46,
       44,  253,  253,   46,  395,   45,   46,   46,  257,   45,
       46,  267,  258,   46,  658,   46,   45,   46,   46,   45,
      651,   45,  219,  219,  219,  219,  219,  219,  249,   46,
      263,  253,  253,   46,   47,  249,   46,   46,   47,  241,

       46,   47,  258,   46,   47,   46,   47,   46,   46,  249,
      263,  241,  549,  448,   47,  512,  512,  241,   48,  259,
       48,  448,  254,  241,   47,  249,  259,   48,   47,   48,
       48,   47,   48,   48,   47,   48,   47,  254,   49,  249,
      263,  241,   49,  449,   47,  262,  268,  241,   48,   49,
       48,  449,   49,  241,   49,  265,  259,   48,  266,   48,
       48,  519,   48,   48,  262,   48,   50,  254,   49,   50,
       50,  268,   49,   50,  265,  264,   50,  271,   50,   49,
       51,   57,   49,  266,   49,   57,  266,   51,   57,  503,
       51,   57,   51,   57,  262,  264,   50,  271,  495,   50,

       50,  268,  264,   50,  265,  276,   50,   57,   50,  273,
       51,   57,  276,  266,  280,   57,  266,   51,   57,  269,
       51,   57,   51,   57,   58,  264,  270,  271,   58,  269,
      451,   58,  264,  280,   58,  273,   58,  270,  451,  526,
      526,  270,  276,  494,   58,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   58,  542,  542,  484,   58,  269,
      497,   58,  499,  280,   58,  273,   58,  270,  497,  472,
      499,  270,  455,  542,   58,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   79,   81,  556,  556,  711,
      711,   81,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       79,   81,  346,  346,  346,  346,   81,  346,   90,  645,

       81,  303,  303,  303,  303,  303,  303,  645,   81,  757,
      757,   81,  446,   81,   90,  445,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  100,  100,
      100,  100,  100,  100,  100,  100,  101,  101,  101,  101,
      101,  101,  101,  101,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  112,  112,  112,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  101,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  625,  625,  625,  119,  625,  647,  952,  117,
      119,  292,  292,  292,  292,  647,  952,  101,  101,  101,
      426,  101,  101,  101,  101,  101,  101,  101,  101,  415,
      101,  101,  101,  101,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  117,
      119,  394,  394,  394,  394,  119,  394,  804,  804,  119,
      837,  837,  292,  498,  498,  498,  498,  119,  498,  399,
      119,  391,  119,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  968,  968,  982,  982,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  130,  130,  130,  130,
      130,  130,  130,  130,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  141,
      141,  141,  141,  141,  141,  141,  141,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  130,  146,  146,  146,  146,  146,  146,  146,
      146,  149,  149,  149,  149,  149,  149,  149,  149,  170,

      170,  170,  170,  170,  170,  170,  170,  130,  130,  130,
      390,  130,  130,  130,  130,  130,  130,  130,  130,  387,
      130,  130,  130,  130,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  147,
      367,  147,  147,  147,  147,  147,  147,  147,  147,  150,
      351,  150,  150,  150,  150,  150,  150,  150,  150,  343,
      147,  152,  152,  152,  152,  152,  152,  152,  152,  342,
      150,  332,  153,  153,  153,  153,  153,  153,  153,  153,
      152,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      147,  153,  646,  646,  646,  646,  277,  646,  330,  154,
      150,  154,  154,  154,  154,  154,  154,  154,  154,  278,
      152,  283,  310,  288,  277,  285,  278,  155,  283,  155,
      154,  153,  155,  155,  155,  155,  155,  155,  155,  155,
      285,  288,  278,  563,  286,  564,  156,  156,  156,  156,
      156,  156,  156,  156,  277,  299,  278,  282,  283,  286,
      154,  156,  156,  156,  156,  156,  156, 1148, 1148,  565,
      285,  288,  278,  563,  159,  564,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  286,
      281,  156,  156,  156,  156,  156,  156,  157,  159,  565,

      159,  252,  159,  159,  235,  157,  157,  224,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  159,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  309,  309,  309,  309,  309,  309,  157,
      186,  186,  186,  186,  186,  186,  186,  186,  215,  214,
      207,  203,  159,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  196,
      167,  290,  138,  118,  157,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  109,   80,  290,   69,   60,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,   55,  157,  157,  157,  157,  158,  361,  361,  361,
      361,  361,  361,   54,  158,  158,  290,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  158,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  199,  199,  199,  199,  199,  199,
      199,  199,   27,  158,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      227,  227,  227,  227,  227,  227,  227,  227,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
       12,  158,  158,  158,  158,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      174,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  354,  354,  354,  354,  354,  354,  354,  354,  295,
      295,  174,  295,  295,  295,  295,  295,  295,  295,  295,
      953,  295,  295,  295,  295,    8,    7,  174,  953,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  175,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  238,  272,  289,
      287,  566,  291,  274,  238,  568,  255,  275,  272,  291,
      289,  272,  567,  274,  255,  287,  275,  238,    3,  238,
      272,  255,  274,  238,  255,  275,  255,  567,  567,  275,
      275,  566,  255,  569,  238,  568,    0,    0,  272,  291,
      289,  272,  567,  274,  255,  287,  275,  238,  175,  238,
      272,  255,  274,  238,  255,  275,  255,  567,  567,  275,
      275,    0,  255,  569,  175,    0,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  188,  188,  188,  188,  188,  188,

      188,  188,  279,  284,  366,  366,  366,  366,  366,  366,
      279,  570,  571,  284,  573,  574,  575,  576,  284,  577,
      578,  279,  579,  580,  284,  305,  305,  305,  305,  305,
      305,  305,  305,  305,    0, 1666,  305, 1666,    0, 1666,
      279,  570,  571,  284,  573,  574,  575,  576,  284,  577,
      578,  279,  579,  580,  284,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  409,  409,  409,  409,  409,  409,
      188,    0,    0,    0,  315,  315,  315,  315,  315,  315,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  414,
      414,  414,  414,  414,  414,  188,  188,  188,    0,  188,

      188,  188,  188,  188,  188,  188,  188,    0,  188,  188,
      188,  188,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  204,  204,    0,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  450,
      450,  450,  450,  450,  450,    0,  204,  396,  396,  396,
      396,  396,  396,  396,  396,  396,    0,    0,    0,  379,
      402,  402,  402,  402,  402,  402,  402,  402,    0,    0,
        0,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,    0,  204,  204,  204,  204,  205,  205,
        0,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  379,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  372,
      372,  372,  372,  372,  372,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  436,  436,  436,
      436,  436,  436,  436,  436,    0,    0,  205,    0,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,    0,  581,  582,
        0,    0,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,    0,  205,  205,  205,  205,  206,
      437,  437,  437,  437,  437,  437,  437,  437,  581,  582,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  420,  420,
      420,  420,  420,  420,  420,  420,  420,    0,    0,    0,
        0,  206,  583,  584,    0,  585,  586,  420,  420,  420,
      420,  420,  420,    0,    0,  427,  427,  427,  427,  427,
      427,  427,  427,    0,  428,  428,  428,  428,  428,  428,
      428,  428,  583,  584,  427,  585,  586,    0,    0,  429,
        0,  429,    0,  428,  429,  429,  429,  429,  429,  429,
      429,  429,  452,  452,  452,  452,  452,  452,  452,  452,
      452,    0,  206,  206,  427,  206,  206,  206,  206,  206,

      206,  206,  206,  428,  206,  206,  206,  206,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  322,  587,    0,  588,    0,  322,    0,
      430,  430,  430,  430,  430,  430,  430,  430,  431,  431,
      431,  431,  431,  431,  431,  431,  589,  591,    0,  430,
      592,  593,  594,  432,  587,  432,  588,  431,  432,  432,
      432,  432,  432,  432,  432,  432, 1162,  434,  434,  434,
      434,  434,  434,  434,  434, 1162,  589,  591,  322,  430,
      592,  593,  594,  433, 1162,  433,  434,  431,  433,  433,

      433,  433,  433,  433,  433,  433,  435,    0,  435,    0,
        0,  435,  435,  435,  435,  435,  435,  435,  435,  466,
      466,  466,  466,  466,  466,    0,  434,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,    0,    0,    0,    0,    0,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  340,  340,  340,  340,
      340,  340,  340,  340,  438,  438,  438,  438,  438,  438,
      438,  438,  471,  471,  471,  471,  471,  471,  955,  438,
      438,  438,  438,  438,  438,    0,  955,    0,  439,  439,

      439,  439,  439,  439,  439,  439,  513,  513,  513,  513,
      513,  513,    0,  439,  439,  439,  439,  439,  439,  438,
      438,  438,  438,  438,  438,  458,  458,  458,  458,  458,
      458,  458,  458,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  340,  439,  439,  439,  439,  439,  439,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,    0,    0,  340,  340,  340,
        0,  340,  340,  340,  340,  340,  340,  340,  340,    0,
      340,  340,  340,  340,  341,  341,  341,  341,  341,  341,
      341,  341,  444,    0,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  444,    0,  444,    0,
      444,  444,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,    0,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  444,  506,  506,  506,  506,  506,  506,  506,  506,
      341,  477,  477,  477,  477,  477,  477,  515,  515,  515,
      515,  515,  515,  515,  515,  515,    0,    0,    0, 1323,
      444,    0,    0,    0,    0,  341,  341,  341, 1323,  341,
      341,  341,  341,  341,  341,  341,  341, 1323,  341,  341,

      341,  341,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  388,  388,  388,
      388,  388,  388,  388,  388,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  518,  518,  518,  518,
      518,  518,  524,  524,  524,  524,  524,  524,  524,  524,

      524,  595,    0,  388,  543,  543,  543,  543,  543,  543,
      596,  524,  524,  524,  524,  524,  524,  545,  545,  545,
      545,  545,  545,  545,  545,  545,    0,    0,  388,  388,
      388,  595,  388,  388,  388,  388,  388,  388,  388,  388,
      596,  388,  388,  388,  388,  389,  389,  389,  389,  389,
      389,  389,  389,  548,  548,  548,  548,  548,  548,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  597,  598,
      599,  602,  603,  604,  605,  606,  609,  610,  554,  554,
      554,  554,  554,  554,  611,  612,  613,  614,  615,  616,
      617,    0,  618,  619,  621,  622,  623,  620,  597,  598,

      599,  602,  603,  604,  605,  606,  609,  610,  620,  624,
      626,  627,  629,  631,  611,  612,  613,  614,  615,  616,
      617,  389,  618,  619,  621,  622,  623,  620,  632,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  620,  624,
      626,  627,  629,  631,    0,    0,  389,  389,  389,    0,
      389,  389,  389,  389,  389,  389,  389,  389,  632,  389,
      389,  389,  389,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  440,    0,
      633,  634,  635,  637,  638,    0,  440,  440,  639,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  628,  628,
        0,  628,  628,  640,  641,  642,  861,  862,  864,  628,
      633,  634,  635,  637,  638,  628,  865,  628,  639,  654,
      654,  654,  654,  654,  654,  654,  654,    0,  628,  628,
      440,  628,  628,  640,  641,  642,  861,  862,  864,  628,
        0,    0,    0,    0,    0,  628,  865,  628,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,    0,  440,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  866,    0,  697,  697,    0,  867,    0,    0,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  697,  440,  440,  440,  440,  441,  676,    0,
        0,    0,  866,  676,    0,  441,  441,  867,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  678,  678,  678,  678,
      678,  678,  678,  678,  678,    0,    0,    0,    0,  441,
        0,  743,  743,  676,  790,  790,  823,  823,  676,    0,
        0,    0,  676,  698,  698,  698,  698,  698,  698,  743,
      676,    0,  790,  676,  823,  676,  703,  703,  703,  703,

      703,  703,    0,    0,  441,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  744,  744,  744,  744,  744,  744,    0,    0,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,    0,  441,  441,  441,  441,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  492,  492,  492,  492,  492,  492,  492,  492,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  685,  691,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  749,  749,  749,  749,  749,
      749,  691,    0,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  868,    0,  770,    0,  770,    0,  492,  770,  770,
      770,  770,  770,  770,  770,  770,  724, 1134, 1134,  685,
      728,  728,  728,  728,  728,  728,  728,  728,  728,    0,
        0,  868,  492,  492,  492, 1134,  492,  492,  492,  492,
      492,  492,  492,  492,    0,  492,  492,  492,  492,  493,
      493,  493,  493,  493,  493,  493,  493,  734,  734,  734,

      734,  734,  734,  734,  734,  734,  724,  746,  746,  746,
      746,  746,  746,  746,  746,  746,    0,    0,    0,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  791,  791,  791,  791,
      791,  791,  725,    0,    0,    0,  709,  709,  709,  709,
      709,  709,    0,  870,    0,  493,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  796,  796,  796,  796,  796,  796,
      493,  493,  493,  870,  493,  493,  493,  493,  493,  493,

      493,  493,  725,  493,  493,  493,  493,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  531,  531,    0,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  726,  772,    0,  772,    0,  726,
      772,  772,  772,  772,  772,  772,  772,  772,    0,    0,
        0,    0,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,    0,    0,  735,  726,

     1163,    0,    0,    0,  726,    0,    0,    0,  726,    0,
        0,  531,    0,    0, 1163,    0,  726,    0,    0,  726,
     1163,  726,  773,  773,  773,  773,  773,  773,  773,  773,
      824,  824,  824,  824,  824,  824,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  735,  531,
      531,  531,  531,  532,  532,    0,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      774,  774,  774,  774,  774,  774,  774,  774,    0,    0,

      755,  755,  755,  755,  755,  755,    0,    0,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  829,  829,  829,  829,
      829,  829,  532,    0,    0,    0,  771,  771,  771,  771,
      771,  771,  771,  771,  778,  778,  778,  778,  778,  778,
      778,  778,    0,    0,    0,  771,    0,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,    0,
      532,  532,  532,  532,  643,  643,    0,  643,  643,  643,
      643,  643,  643,  643,  643,  771,  775,  871,  775,    0,
        0,  775,  775,  775,  775,  775,  775,  775,  775,  776,

      776,  776,  776,  776,  776,  776,  776,  954,  954,  954,
      954,  954,  954,  872,  777,  873,  777,  871,  776,  777,
      777,  777,  777,  777,  777,  777,  777,  779,  779,  779,
      779,  779,  779,  779,  779,  780,  780,  780,  780,  780,
      780,  780,  780,  872,    0,  873,    0,    0,  776,    0,
        0,    0,    0,  643,  781,  781,  781,  781,  781,  781,
      781,  781,  782,  782,  782,  782,  782,  782,  782,  782,
      783,  783,  783,  783,  783,  783,  783,  783,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
        0,  643,  643,  643,  643,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      673,    0,    0,    0,    0,  673,    0,    0,    0,    0,
        0,  784,  784,  784,  784,  784,  784,  784,  784,    0,
        0,    0,  874,  875,  876,    0,  784,  784,  784,  784,
      784,  784,  793,  793,  793,  793,  793,  793,  793,  793,
      793,    0,    0,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  874,  875,  876,  673,  784,  784,  784,  784,
      784,  784,  802,  802,  802,  802,  802,  802,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  835,  835,  835,

      835,  835,  835,  835,  835,  835,  956,  956,  956,  956,
      956,  956,  956,  956,  956,    0,  835,  835,  835,  835,
      835,  835,    0,    0,  878,  880,  881,  882,    0,  884,
      885,  886,  887,  888,  890,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  675,  878,  880,  881,  882,  675,  884,
      885,  886,  887,  888,  890,  891,  892,  893,  894,  895,
      896,  897,  899,  900,  900,  901,  903,  904,    0,  905,
      906,  907,  908,  910,  911,  912,  913,  915,  916,  917,
      918,  919,  920,  925,  926,  891,  892,  893,  894,  895,

      896,  897,  899,  900,  900,  901,  903,  904,  675,  905,
      906,  907,  908,  910,  911,  912,  913,  915,  916,  917,
      918,  919,  920,  925,  926,  927,  928,  929,  930,  931,
      932,  933,  934,  931,  935,  936,  937,  938,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,    0,  927,  928,  929,  930,  931,
      932,  933,  934,  931,  935,  936,  937,  938,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  715,  715,  715,  715,
      715,  715,  715,  715,  939,  940,  942,  943,  962,  962,

      962,  962,  962,  962,  962,  962,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963, 1000,    0,  939,  940,  942,  943,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  969,  969,  969,
      969,  969,  969,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  715,  974,  974,  974,  974,  974,  974, 1060,
        0, 1020,    0,    0,    0,    0,    0, 1000, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031,    0,  715,  715,  715,
        0,  715,  715,  715,  715,  715,  715,  715,  715, 1060,

      715,  715,  715,  715,  716,  716,  716,  716,  716,  716,
      716,  716,  980,  980,  980,  980,  980,  980,  980,  980,
      980, 1020, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
        0,  980,  980,  980,  980,  980,  980, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,    0,
      716, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1135,

     1135, 1135, 1135, 1135, 1135,  716,  716,  716,    0,  716,
      716,  716,  716,  716,  716,  716,  716,    0,  716,  716,
      716,  716,  761,  761,  761,  761,  761,  761,  761,  761,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1061, 1062, 1063, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1077, 1079,    0, 1080,
     1082, 1083, 1085, 1088, 1090, 1093, 1094, 1096, 1098, 1100,
     1102, 1103, 1104, 1105, 1061, 1062, 1063, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1077, 1079,  761, 1080,

     1082, 1083, 1085, 1088, 1090, 1093, 1094, 1096, 1098, 1100,
     1102, 1103, 1104, 1105,    0,    0,    0,    0, 1106, 1107,
     1111, 1112, 1113,  761,  761,  761, 1114,  761,  761,  761,
      761,  761,  761,  761,  761, 1116,  761,  761,  761,  761,
      762,  762,  762,  762,  762,  762,  762,  762, 1106, 1107,
     1111, 1112, 1113, 1117, 1118, 1119, 1114, 1120, 1121, 1122,
     1126, 1128, 1179,    0, 1182, 1116, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1140, 1140, 1140, 1140, 1140,
     1140, 1172, 1183, 1117, 1118, 1119,    0, 1120, 1121, 1122,
     1126, 1128, 1179, 1180, 1182, 1183, 1181, 1187, 1146, 1146,

     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1181, 1186, 1186,
     1180,    0, 1183,    0, 1184,    0,  762, 1146, 1146, 1146,
     1146, 1146, 1146, 1180,    0, 1183, 1181, 1187,    0,    0,
     1184, 1172, 1188, 1189, 1190, 1191,    0, 1181, 1186, 1186,
     1180,  762,  762,  762, 1184,  762,  762,  762,  762,  762,
      762,  762,  762, 1192,  762,  762,  762,  762,  785, 1188,
     1184,    0, 1188, 1189, 1190, 1191,  785,  785,    0,  785,
      785,  785,  785,  785,  785,  785,  785,  785, 1185, 1185,
     1185, 1185, 1194, 1192, 1185, 1200,    0,    0,    0,    0,
     1194, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1195,
      785, 1196, 1194, 1197, 1185, 1200, 1193, 1193, 1193, 1193,
     1194, 1198, 1193, 1195, 1201, 1196, 1201, 1202, 1206, 1197,
     1203, 1203, 1204, 1208, 1204, 1210, 1198, 1210, 1211, 1195,
        0, 1196,    0, 1197, 1185,  785,    0,    0,    0,    0,
        0, 1198, 1193, 1195, 1201, 1196, 1201, 1202, 1206, 1197,
     1203, 1203, 1204, 1208, 1204, 1210, 1198, 1210, 1211,    0,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785, 1193,  785,  785,  785,  785,  786, 1212, 1213,
     1214, 1215, 1199, 1220, 1205,  786,  786, 1207,  786,  786,

      786,  786,  786,  786,  786,  786,  786, 1199, 1205,    0,
     1209, 1216, 1207, 1216, 1218, 1223, 1217, 1221, 1212, 1213,
     1214, 1215, 1199, 1220, 1205, 1224, 1209, 1207, 1217, 1218,
     1219, 1221, 1222, 1222, 1219, 1225, 1224, 1199, 1205,  786,
     1209, 1216, 1207, 1216, 1218, 1223, 1217, 1221, 1226, 1225,
     1235, 1236, 1237, 1238, 1239, 1224, 1209, 1240, 1217, 1218,
     1219, 1221, 1222, 1222, 1219, 1225, 1224, 1244, 1247,    0,
        0, 1324,    0,    0,  786,    0,    0,    0, 1226, 1225,
     1235, 1236, 1237, 1238, 1239, 1324,    0, 1240, 1243, 1256,
     1243, 1324, 1246, 1250, 1246, 1250, 1245, 1244, 1247,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786, 1245,  786,  786,  786,  786,  817, 1259, 1243, 1256,
     1243, 1242, 1246, 1250, 1246, 1250, 1245,    0,    0,    0,
        0,    0, 1249,    0,    0,    0,    0,    0, 1260, 1261,
     1252, 1245, 1235, 1252, 1237, 1238, 1263, 1259, 1249, 1240,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1260, 1261,
     1252, 1242, 1257, 1252, 1257,    0, 1263, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289,    0,  817, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295,    0,    0,    0,    0,

        0,    0, 1257,  817, 1257,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  841,  841,  841,  841,  841,  841,  841,
      841, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1251,
     1253, 1248, 1248, 1248, 1248,    0,    0, 1248,    0,    0,
     1258, 1262, 1253, 1264, 1265, 1251, 1258, 1266, 1268,    0,
     1262, 1271, 1272, 1274, 1265, 1267,    0, 1279, 1281, 1251,
     1253, 1282, 1283, 1254, 1254, 1254, 1254, 1267, 1248, 1254,
     1258, 1262, 1253, 1264, 1265, 1251, 1258, 1266, 1268,  841,

     1262, 1271, 1272, 1274, 1265, 1267, 1248, 1279, 1281,    0,
        0, 1282, 1283,    0,    0,    0,    0, 1267, 1248,    0,
     1254, 1275, 1284, 1275,  841,  841,  841,    0,  841,  841,
      841,  841,  841,  841,  841,  841, 1248,  841,  841,  841,
      841,  842,  842,  842,  842,  842,  842,  842,  842, 1255,
     1254, 1275, 1284, 1275,    0,    0,    0, 1276,    0, 1276,
        0, 1296, 1297,    0, 1300, 1255,    0, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1269, 1270, 1276, 1273, 1276,
     1280, 1296, 1297, 1298, 1300, 1313, 1299, 1314, 1315, 1269,

     1270, 1312, 1314, 1316, 1273, 1298, 1280, 1299, 1318, 1319,
     1312, 1319,    0,    0,    0, 1269, 1270,  842, 1273,    0,
     1280,    0,    0, 1298, 1321, 1313, 1299, 1314, 1315, 1269,
     1270, 1312, 1314, 1316, 1273, 1298, 1280, 1299, 1318, 1319,
     1312, 1319,  842,  842,  842,    0,  842,  842,  842,  842,
      842,  842,  842,  842, 1321,  842,  842,  842,  842,  851,
      851,    0,  851,  851,  851,  851,  851,  851,  851,  851,
      851, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1291, 1291, 1291, 1291, 1291, 1291, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,

     1293, 1293, 1293, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1311, 1311,
     1311, 1311, 1311, 1311, 1311, 1311,    0,    0,  851, 1309,
     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309,
     1309, 1309, 1309, 1309, 1309,    0,    0,    0,    0,    0,
        0,    0,    0,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851, 1325,  851,  851,  851,  851,
      852,  852, 1317,  852,  852,  852,  852,  852,  852,  852,
      852,  852, 1320, 1322, 1322, 1326, 1317, 1327, 1330, 1331,

     1341, 1342, 1343, 1346, 1356, 1325, 1357, 1320, 1358, 1359,
     1358, 1360, 1317, 1361, 1341, 1362, 1365, 1366, 1369, 1375,
     1363, 1364, 1320, 1322, 1322, 1326, 1317, 1327, 1330, 1331,
     1341, 1342, 1343, 1346, 1356, 1373, 1357, 1320, 1358, 1359,
     1358, 1360, 1376, 1361, 1341, 1362, 1365, 1366, 1369, 1375,
     1363, 1364, 1383, 1389,    0,    0,    0,    0,    0,  852,
        0,    0, 1373,    0,    0, 1373, 1390,    0,    0,    0,
        0,    0, 1376,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1383, 1389,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852, 1390,  852,  852,  852,

      852,  946,  946, 1381,  946,  946,  946,  946,  946,  946,
      946,  946, 1363, 1364, 1374, 1384, 1374, 1385, 1381, 1384,
     1386, 1392, 1387, 1393, 1395, 1394, 1397, 1399, 1398, 1385,
        0,    0,    0, 1381, 1398,    0,    0, 1386, 1387, 1394,
        0,    0,    0,    0, 1374, 1384, 1374, 1385, 1381, 1384,
     1386, 1392, 1387, 1393, 1395, 1394, 1397, 1399, 1398, 1385,
        0,    0,    0,    0, 1398,    0,    0, 1386, 1387, 1394,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      946,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,    0,  946,  946,
      946,  946,  947,  947,    0,  947,  947,  947,  947,  947,
      947,  947,  947,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  947,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,    0,  947,
      947,  947,  947,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  986,  986,
        0,  986,  986,  986,  986,  986,  986,  986,  986,  986,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      986,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  986,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,    0,  986,  986,  986,  986,  987,
      987,    0,  987,  987,  987,  987,  987,  987,  987,  987,

      987,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  987,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  987,  987,  987,  987,  987,  987,  987,

      987,  987,  987,  987,  987,    0,  987,  987,  987,  987,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  991,    0,    0,    0,    0,
      991,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      991,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1001,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1001,
     1001, 1001,    0, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001,    0, 1001, 1001, 1001, 1001, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1002,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1002, 1002, 1002,
        0, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,    0,

     1002, 1002, 1002, 1002, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1021,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1021, 1021, 1021,    0, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021,    0, 1021, 1021,
     1021, 1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1022,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1022, 1022, 1022,    0, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022,    0, 1022, 1022, 1022, 1022,
     1039,    0,    0,    0,    0,    0,    0,    0, 1039, 1039,
        0, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1039,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1039,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039,    0, 1039, 1039, 1039, 1039, 1040,
        0,    0,    0,    0,    0,    0,    0, 1040, 1040,    0,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1040,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1040,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040,    0, 1040, 1040, 1040, 1040, 1047, 1047,

     1047, 1047, 1047, 1047, 1047, 1047,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1047,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1047,

     1047, 1047,    0, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047,    0, 1047, 1047, 1047, 1047, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1048,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1048, 1048, 1048,
        0, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,    0,
     1048, 1048, 1048, 1048, 1057, 1057,    0, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1057,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
        0, 1057, 1057, 1057, 1057, 1058, 1058,    0, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1058,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058,    0, 1058, 1058, 1058, 1058, 1130, 1130,    0, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1130,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130,    0, 1130, 1130, 1130, 1130, 1131, 1131,    0,

     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1131,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131,    0, 1131, 1131, 1131, 1131, 1152, 1152,
        0, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1152,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152,    0, 1152, 1152, 1152, 1152, 1161,
     1161,    0, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1161,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161,    0, 1161, 1161, 1161, 1161,
     1165,    0,    0,    0,    0, 1165,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1165,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1178, 1178,    0, 1178, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178,    0,    0,    0,    0,    0,
        0,    0,    0, 1178,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1178,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1178,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1178, 1178, 1178,

     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,    0,
     1178, 1178, 1178, 1178, 1241,    0,    0,    0,    0, 1241,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1241,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1285, 1285, 1285, 1285,    0,    0, 1285,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1285,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1285,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1285,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1285,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1285,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1285,    0, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,

     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1301, 1301, 1301, 1301,    0,    0, 1301,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1301,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1301,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1301,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1301,    0,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1328, 1328,
     1328, 1328,    0,    0, 1328,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1328,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 1328,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1328,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1328,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1328,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1328,    0, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1329, 1329, 1329, 1329,
        0,    0, 1329,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1329,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1329,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1329,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1329,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1329,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1329,    0, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1344, 1344, 1344, 1344,    0,    0,
     1344,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1344,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1344,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1344,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1344,    0, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1345, 1345, 1345, 1345,    0,    0, 1345,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1345,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1345,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1345,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1345,    0, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,

     1367, 1367, 1367, 1367,    0,    0, 1367,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1367,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1367,    0,    0, 1367,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1367,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1367,    0,    0, 1367,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1367,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1367,    0,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368, 1368,
     1368, 1368,    0,    0, 1368,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1368, 1368,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1368,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1368, 1368,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1368,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1368,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1368,    0, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1401,    0, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1401,    0,    0,    0,
        0,    0,    0,    0, 1401, 1401, 1401, 1401, 1402,    0,

     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,    0,
        0, 1402,    0,    0, 1402,    0, 1402, 1402, 1402, 1402,
     1403,    0, 1403,    0, 1403,    0,    0,    0,    0,    0,
        0,    0,    0, 1403, 1404,    0, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404,    0,    0,    0,    0,    0,
        0,    0, 1404, 1404, 1404, 1404, 1405,    0, 1405,    0,
     1405,    0,    0,    0,    0,    0,    0,    0,    0, 1405,
     1406,    0,    0, 1406, 1406, 1406, 1406, 1406,    0,    0,
        0,    0,    0,    0,    0,    0, 1406, 1407, 1407, 1407,
     1407, 1407, 1407, 1407,    0, 1407,    0,    0, 1407,    0,

        0, 1407,    0, 1407, 1407, 1407, 1407, 1408,    0, 1408,
        0, 1408,    0,    0,    0,    0,    0,    0,    0,    0,
     1408, 1410, 1410, 1410,    0, 1410, 1410, 1411, 1411, 1411,
     1411, 1411, 1411, 1412, 1412, 1412, 1412, 1412, 1412, 1413,
     1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414,
     1414, 1415,    0, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415,    0,    0,    0,    0,    0,    0,    0, 1415,
     1415, 1415, 1415, 1416, 1416, 1416, 1416, 1416, 1416, 1417,
     1417, 1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418,
     1418, 1419, 1419, 1419, 1419, 1419, 1419, 1420,    0, 1420,

     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,    0,    0,
     1420,    0,    0, 1420,    0, 1420, 1420, 1420, 1420, 1421,
     1421, 1421, 1421, 1421, 1422, 1422, 1422, 1422, 1423, 1423,
     1423, 1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424,
     1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426, 1426,
     1426, 1426, 1427,    0, 1427,    0, 1427,    0, 1427,    0,
        0,    0,    0,    0, 1427, 1427, 1428, 1428, 1428,    0,
     1428, 1428, 1429, 1429, 1429, 1429, 1429, 1429, 1430, 1430,
     1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431, 1431,
     1432, 1432, 1432, 1432, 1432, 1432, 1433,    0, 1433, 1433,

     1433, 1433, 1433, 1433, 1433, 1433, 1433,    0,    0,    0,
        0,    0,    0,    0, 1433, 1433, 1433, 1433, 1434, 1434,
     1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435, 1435,
     1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437, 1437,
     1437, 1437, 1438,    0, 1438,    0, 1438,    0, 1438,    0,
        0,    0,    0,    0, 1438, 1438, 1439, 1439, 1439,    0,
     1439, 1439, 1440, 1440, 1440, 1440, 1440, 1440, 1441, 1441,
     1441, 1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1442,
     1443, 1443, 1443, 1443, 1443, 1443, 1444, 1444, 1444, 1444,
     1444, 1444, 1444, 1444,    0, 1444,    0,    0,    0,    0,

        0, 1444, 1444, 1444, 1445, 1445, 1445,    0, 1445, 1445,
     1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447, 1447,
     1447, 1447, 1448, 1448, 1448, 1448, 1448, 1448, 1449, 1449,
     1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450,
     1450,    0, 1450,    0,    0, 1450,    0,    0, 1450,    0,
     1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1452,
     1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453, 1453, 1454,
     1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455,
     1455, 1456, 1456, 1456, 1456, 1456, 1456, 1457,    0, 1457,
        0, 1457,    0, 1457,    0,    0,    0,    0,    0, 1457,

     1457, 1458, 1458, 1458,    0, 1458, 1458, 1459, 1459, 1459,
     1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1460, 1461,
     1461, 1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462,
     1462, 1464, 1464, 1464, 1464, 1464,    0, 1464,    0, 1464,
        0,    0,    0,    0,    0, 1464, 1464, 1464, 1465,    0,
        0, 1465, 1465, 1465, 1465, 1465,    0,    0,    0,    0,
        0,    0,    0,    0, 1465, 1466, 1466, 1466,    0, 1466,
     1466, 1467, 1467, 1467, 1467, 1467, 1467, 1468, 1468, 1468,
     1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469, 1470,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,

     1471, 1472,    0, 1472,    0, 1472,    0,    0,    0,    0,
        0,    0,    0,    0, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475,
     1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1476, 1477,
     1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478,
     1478, 1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480,
     1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481, 1482,
     1482, 1482, 1482, 1482, 1482, 1483, 1483, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483,    0,    0,    0,    0,
        0,    0,    0, 1483, 1483, 1483, 1483, 1484, 1484, 1484,

     1484, 1484, 1484, 1485, 1485, 1485, 1485, 1485, 1485, 1486,
     1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487, 1487, 1487,
     1487, 1488, 1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489,
     1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490, 1490, 1491,
     1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492, 1492, 1492,
     1492, 1493, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494,
     1494, 1494, 1494, 1495, 1495, 1495, 1495, 1495, 1495, 1496,
        0, 1496,    0, 1496,    0, 1496,    0,    0,    0,    0,
        0, 1496, 1496, 1497, 1497, 1497,    0, 1497, 1497, 1498,
     1498, 1498, 1498,    0, 1498, 1499, 1499, 1499, 1499, 1499,

     1499, 1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501,
     1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1503,
     1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504,
     1504, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,
     1506, 1506, 1506, 1507, 1507, 1507, 1507, 1507, 1507, 1508,
     1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509, 1509, 1509,
     1509, 1510, 1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511,
     1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512, 1513,
     1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
        0,    0,    0,    0,    0,    0,    0, 1513, 1513, 1513,

     1513, 1514, 1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515,
     1515, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1517,
     1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518,
     1518, 1519, 1519, 1519, 1519, 1519, 1519, 1520,    0, 1520,
        0, 1520,    0, 1520,    0,    0,    0,    0,    0, 1520,
     1520, 1521, 1521, 1521,    0, 1521, 1521, 1522, 1522, 1522,
     1522,    0, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1524,
     1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525,
     1525, 1526, 1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527,
     1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528, 1528, 1529,

     1529, 1529, 1529, 1529, 1529, 1530, 1530, 1530, 1530, 1530,
     1530, 1531, 1531, 1531, 1531, 1531, 1531, 1532, 1532, 1532,
     1532, 1532, 1532, 1533, 1533, 1533, 1533, 1533, 1533, 1534,
     1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535,
     1535, 1536, 1536, 1536, 1536, 1536, 1536, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537,    0, 1537,    0,    0,    0,
        0,    0, 1537, 1537, 1537, 1538, 1538, 1538,    0, 1538,
     1538, 1539, 1539, 1539, 1539, 1539, 1539, 1540, 1540, 1540,
     1540, 1540, 1540, 1541, 1541, 1541, 1541, 1541, 1541, 1542,
     1542, 1542, 1542, 1542, 1542, 1543, 1543, 1543, 1543, 1543,

     1543, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545,
     1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546, 1546, 1547,
     1547, 1547, 1547, 1547, 1547, 1548, 1548, 1548, 1548, 1548,
     1548, 1549, 1549, 1549, 1549, 1549, 1549, 1550, 1550, 1550,
     1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551, 1551, 1552,
     1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553, 1553, 1553,
     1553, 1554, 1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555,
     1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556, 1556, 1557,
     1557, 1557, 1557, 1557, 1557, 1558, 1558, 1558, 1558, 1558,
     1558, 1559, 1559, 1559, 1559, 1559, 1559, 1560,    0, 1560,

        0, 1560,    0, 1560,    0,    0,    0,    0,    0, 1560,
     1560, 1561, 1561, 1561,    0, 1561, 1561, 1562, 1562, 1562,
     1562,    0, 1562, 1563, 1563, 1563, 1563, 1563, 1563, 1564,
     1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565, 1565, 1565,
     1565, 1566, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567,
     1567, 1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1569,
     1569, 1569, 1569, 1569, 1569, 1570, 1570, 1570, 1570, 1570,
     1570, 1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572,
     1572, 1572, 1572, 1573, 1573, 1573, 1573, 1573, 1573, 1574,
     1574, 1574, 1574, 1574, 1574, 1575, 1575, 1575, 1575, 1575,

     1575, 1576, 1576, 1576, 1576, 1576, 1576, 1578, 1578, 1578,
     1578, 1578,    0, 1578,    0, 1578,    0,    0,    0,    0,
        0, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1579,
     1580, 1580, 1580, 1580, 1580, 1580, 1581, 1581, 1581, 1581,
     1581, 1581, 1582, 1582, 1582, 1582, 1582, 1582, 1583, 1583,
     1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584,
     1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586, 1586, 1586,
     1586, 1586, 1587, 1587, 1587, 1587, 1587, 1587, 1588, 1588,
     1588, 1588, 1588, 1588, 1589, 1589, 1589,    0, 1589,    0,
     1589,    0, 1589,    0,    0,    0,    0,    0, 1589, 1589,

     1589, 1590, 1590, 1590,    0, 1590, 1590, 1591, 1591, 1591,
     1591, 1591, 1591, 1592, 1592, 1592, 1592, 1592, 1592, 1593,
     1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594, 1594, 1594,
     1594, 1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596,
     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596,    0,    0,
        0,    0,    0,    0,    0, 1596, 1596, 1596, 1596, 1597,
     1597, 1597, 1597, 1597, 1597, 1598, 1598, 1598, 1598, 1598,
     1598, 1599, 1599, 1599, 1599, 1599, 1599, 1600, 1600, 1600,
     1600, 1600, 1600, 1601,    0, 1601, 1601, 1601, 1601, 1601,
     1601, 1601, 1601, 1601,    0,    0,    0,    0,    0,    0,

        0, 1601, 1601, 1601, 1601, 1602, 1602, 1602, 1602, 1602,
     1602, 1603, 1603, 1603, 1603, 1603, 1603, 1604,    0, 1604,
     1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,    0,    0,
     1604,    0,    0, 1604,    0, 1604, 1604, 1604, 1604, 1605,
     1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606, 1606, 1606,
     1606, 1607, 1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608,
     1608, 1608, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1610,
     1610, 1610, 1610, 1610, 1610, 1611, 1611, 1611, 1611, 1611,
     1611, 1612, 1612, 1612, 1612, 1612, 1612, 1613, 1613, 1613,
     1613, 1613, 1613, 1614, 1614, 1614, 1614, 1614, 1614, 1615,

     1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616, 1616, 1616,
     1616, 1617,    0, 1617,    0, 1617,    0, 1617,    0,    0,
        0,    0,    0, 1617, 1617, 1618, 1618, 1618, 1618, 1618,
     1618, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
     1619, 1619,    0,    0,    0,    0,    0,    0,    0, 1619,
     1619, 1619, 1619, 1620, 1620, 1620, 1620, 1620, 1620, 1621,
     1621, 1621, 1621, 1621, 1621, 1622, 1622, 1622, 1622, 1622,
     1622, 1623, 1623, 1623, 1623, 1623, 1623, 1624,    0, 1624,
     1624, 1624, 1624, 1624, 1624, 1624, 1624, 1624,    0,    0,
        0,    0,    0,    0,    0, 1624, 1624, 1624, 1624, 1625,

     1625, 1625, 1625, 1625, 1625, 1626, 1626, 1626, 1626, 1626,
     1626, 1627, 1627, 1627, 1627, 1627, 1627, 1628, 1628, 1628,
     1628, 1628, 1628, 1629, 1629, 1629, 1629, 1629, 1629, 1630,
     1630, 1630, 1630, 1630, 1630, 1631, 1631, 1631, 1631, 1631,
     1631, 1632, 1632, 1632, 1632, 1632, 1632, 1633, 1633, 1633,
     1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1634, 1635,
     1635, 1635, 1635, 1635, 1635, 1636, 1636, 1636, 1636, 1636,
     1636, 1637,    0, 1637,    0, 1637,    0, 1637,    0,    0,
        0,    0,    0, 1637, 1637, 1638, 1638, 1638, 1638, 1638,
     1638, 1639, 1639, 1639, 1639, 1639, 1639, 1639, 1639,    0,

     1639,    0,    0,    0,    0,    0, 1639, 1639, 1639, 1640,
     1640, 1640, 1640, 1640, 1640, 1641, 1641, 1641, 1641, 1641,
     1641, 1642, 1642, 1642, 1642, 1642, 1642, 1643, 1643, 1643,
     1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644, 1645,
     1645, 1645, 1645, 1645, 1645, 1646, 1646, 1646, 1646, 1646,
     1646, 1647, 1647, 1647, 1647, 1647, 1647, 1648, 1648, 1648,
     1648, 1648, 1648, 1649, 1649, 1649, 1649, 1649, 1649, 1650,
     1650, 1650, 1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651,
     1651, 1651,    0, 1651,    0,    0, 1651,    0,    0, 1651,
        0, 1651, 1651, 1651, 1651, 1652, 1652, 1652, 1652, 1652,

     1652, 1653, 1653, 1653, 1653, 1653, 1653, 1654, 1654, 1654,
     1654, 1654, 1654, 1655, 1655, 1655, 1655, 1655, 1655, 1656,
     1656, 1656, 1656, 1656, 1656, 1657, 1657, 1657, 1657, 1657,
     1657, 1658, 1658, 1658, 1658, 1658, 1658, 1659, 1659, 1659,
     1659, 1659, 1659, 1660, 1660, 1660, 1660, 1660, 1660, 1661,
     1661, 1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662,
     1662, 1663, 1663, 1663, 1663, 1663, 1663, 1664,    0, 1664,
        0, 1664,    0, 1664,    0,    0,    0,    0,    0, 1664,
     1664, 1665, 1665, 1665, 1665, 1665, 1665, 1667, 1667, 1667,
     1667, 1667,    0, 1667,    0, 1667,    0,    0,    0,    0,

        0, 1667, 1667, 1667, 1668, 1668, 1668, 1668, 1668, 1668,
     1669, 1669, 1669,    0, 1669,    0, 1669,    0, 1669,    0,
        0,    0,    0,    0, 1669, 1669, 1669, 1670, 1670, 1670,
        0, 1670, 1670, 1671, 1671, 1671, 1671, 1671, 1671, 1672,
     1672, 1672, 1672, 1672, 1672, 1673, 1673, 1673, 1673, 1673,
     1673, 1674, 1674, 1674, 1674, 1674, 1674, 1675, 1675, 1675,
     1675, 1675, 1675, 1676, 1676, 1676, 1676, 1676, 1676, 1677,
     1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678,
     1678, 1679, 1679, 1679, 1679, 1679, 1679, 1680, 1680, 1680,
     1680, 1680, 1680, 1681, 1681, 1681, 1681, 1681, 1681, 1682,

     1682, 1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1683,
     1683, 1684, 1684, 1684, 1684, 1684, 1684, 1685, 1685, 1685,
     1685, 1685, 1685, 1686, 1686, 1686, 1686, 1686,    0, 1686,
        0, 1686,    0,    0,    0,    0,    0, 1686, 1686, 1686,
     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
     1687,    0,    0,    0,    0,    0,    0,    0, 1687, 1687,
     1687, 1687, 1688, 1688, 1688, 1688, 1688, 1688, 1689, 1689,
     1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690, 1690,
     1691, 1691, 1691, 1691, 1691, 1691, 1692, 1692, 1692, 1692,
     1692, 1692, 1693, 1693, 1693, 1693, 1693, 1693, 1694,    0,

     1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694, 1694,    0,
        0,    0,    0,    0,    0,    0, 1694, 1694, 1694, 1694,
     1695,    0, 1695,    0, 1695,    0, 1695,    0,    0,    0,
        0,    0, 1695, 1695, 1696, 1696, 1696, 1696, 1696, 1696,
     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,    0,
     1697, 1698, 1698, 1698, 1698, 1698, 1698, 1699, 1699, 1699,
     1699, 1699, 1699, 1700, 1700, 1700, 1700, 1700, 1700, 1701,
     1701, 1701, 1701, 1701, 1701, 1702, 1702, 1702, 1702, 1702,
     1702, 1703, 1703, 1703, 1703, 1703, 1703, 1704,    0, 1704,
     1704, 1704, 1704, 1704, 1704, 1704, 1704, 1704,    0,    0,

        0,    0,    0,    0,    0, 1704, 1704, 1704, 1704, 1705,
        0, 1705,    0, 1705,    0, 1705,    0,    0,    0,    0,
        0, 1705, 1705, 1706, 1706, 1706, 1706, 1706, 1706, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707,    0, 1707,    0,
        0,    0,    0,    0, 1707, 1707, 1707, 1708, 1708, 1708,
     1708, 1708, 1708, 1709,    0, 1709,    0, 1709,    0, 1709,
        0,    0,    0,    0,    0, 1709, 1709, 1710, 1710, 1710,
     1710, 1710, 1710, 1711, 1711, 1711, 1711, 1711,    0, 1711,
        0, 1711,    0,    0,    0,    0,    0, 1711, 1711, 1711,
     1712, 1712, 1712,    0, 1712,    0, 1712,    0, 1712,    0,

        0,    0,    0,    0, 1712, 1712, 1712, 1713, 1713, 1713,
     1713, 1713, 1713, 1714, 1714, 1714, 1714, 1714, 1714, 1715,
     1715, 1715, 1715, 1715, 1715, 1716, 1716, 1716, 1716, 1716,
     1716, 1717, 1717, 1717, 1717, 1717, 1717, 1718, 1718, 1718,
     1718, 1718, 1718, 1719, 1719, 1719, 1719, 1719, 1719, 1720,
     1720, 1720, 1720, 1720, 1720, 1721, 1721, 1721, 1721, 1721,
     1721, 1722, 1722, 1722, 1722, 1722, 1722, 1723, 1723, 1723,
     1723, 1723, 1723, 1724, 1724, 1724, 1724, 1724,    0, 1724,
        0, 1724,    0,    0,    0,    0,    0, 1724, 1724, 1724,
     1725, 1725, 1725, 1725, 1725, 1725, 1726, 1726, 1726, 1726,

     1726, 1726, 1726, 1726, 1726, 1726, 1726,    0,    0,    0,
        0,    0,    0,    0, 1726, 1726, 1726, 1726, 1727, 1727,
     1727, 1727, 1727, 1727, 1728, 1728, 1728, 1728, 1728, 1728,
     1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
     1729,    0,    0,    0,    0,    0,    0,    0, 1729, 1729,
     1729, 1729, 1730, 1730, 1730, 1730, 1730, 1730, 1731, 1731,
     1731, 1731, 1731, 1731, 1732, 1732, 1732, 1732, 1732, 1732,
     1733,    0, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733,    0,    0, 1733,    0,    0, 1733,    0, 1733, 1733,
     1733, 1733, 1734,    0, 1734, 1734, 1734, 1734, 1734, 1734,

     1734, 1734, 1734,    0,    0, 1734,    0,    0, 1734,    0,
     1734, 1734, 1734, 1734, 1735, 1735, 1735, 1735, 1735, 1736,
     1736, 1736, 1736, 1737, 1737, 1737, 1737, 1737, 1737, 1738,
     1738, 1738, 1738, 1738, 1738, 1739, 1739, 1739, 1739, 1739,
     1739, 1740, 1740, 1740, 1740, 1740, 1740, 1741, 1741, 1741,
     1741, 1741, 1742, 1742, 1742, 1742, 1743, 1743, 1743, 1743,
     1743, 1743, 1744, 1744, 1744, 1744, 1744, 1744, 1745, 1745,
     1745, 1745, 1745, 1745, 1746, 1746, 1746, 1746, 1746, 1746,
     1747, 1747, 1747, 1747, 1747, 1747, 1748, 1748, 1748, 1748,
     1748, 1748, 1748, 1748, 1748, 1748, 1748,    0,    0, 1748,

        0,    0, 1748,    0, 1748, 1748, 1748, 1748, 1749, 1749,
     1749, 1749, 1749, 1749, 1750, 1750, 1750, 1750, 1750, 1750,
     1751, 1751, 1751, 1751, 1751, 1751, 1752, 1752, 1752, 1752,
     1752, 1752, 1753, 1753, 1753, 1753, 1753, 1753, 1754, 1754,
     1754, 1754, 1754, 1754, 1755, 1755, 1755, 1755, 1755, 1755,
     1755, 1755, 1755, 1755, 1755,    0,    0, 1755,    0,    0,
     1755,    0, 1755, 1755, 1755, 1755, 1756, 1756, 1756, 1756,
     1756, 1756, 1757, 1757, 1757, 1757, 1757, 1757, 1758, 1758,
     1758, 1758, 1758, 1758, 1759, 1759, 1759, 1759, 1759, 1759,
     1760, 1760, 1760, 1760, 1760, 1760, 1761, 1761, 1761, 1761,

     1761, 1761, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
     1762, 1762, 1762,    0,    0, 1762,    0,    0, 1762,    0,
     1762, 1762, 1762, 1762, 1763, 1763, 1763, 1763, 1763, 1763,
     1764, 1764, 1764, 1764, 1764, 1764, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1400, 1400, 1400
    } ;

static yyconst flex_int16_t yy_rule_linenum[181] =
    {   0,
      268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
      278,  279,  280,  281,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
      308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  323,  324,  325,  326,  327,
      328,  329,  330,  331,  332,  333,  334,  335,  336,  337,
      338,  339,  340,  341,  342,  343,  344,  345,  346,  347,
      348,  349,  350,  351,  352,  353,  354,  355,  356,  357,
      358,  359,  360,  361,  362,  363,  364,  365,  366,  367,

      368,  369,  370,  371,  372,  373,  374,  375,  376,  377,
      378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
      388,  389,  390,  391,  392,  393,  394,  395,  396,  397,
      398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
      408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
      418,  419,  420,  421,  422,  423,  424,  425,  426,  427,
      428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  444,  445,  446,  449
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3947 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 267 "lib/SPARQLfedScanner.lpp"

#line 4111 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1401 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1400 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 181 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 181 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 182 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_VALUES;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::IT_SADI;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRBEFORE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRAFTER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_TZ;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_UUID;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRUUID;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRIREF;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext, yylloc); return token::PNAME_NS;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext, yylloc); return token::PNAME_LN;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 430 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 431 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 433 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 434 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 435 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 436 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 437 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 438 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 439 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 440 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 441 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 442 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 443 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 444 "lib/SPARQLfedScanner.lpp"
{return token::INSERTDATA;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 445 "lib/SPARQLfedScanner.lpp"
{return token::DELETEDATA;}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 446 "lib/SPARQLfedScanner.lpp"
{return token::DELETEWHERE;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 448 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 449 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 455 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 5141 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1401 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1401 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1400);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 455 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::runtime_error("program flow exception -- imroper call to SPARQLfedScanner::typedLiteral"));
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::location_type*& yylloc, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    YaccDriver::unescapeString(yytext+skip, yyleng-skip-skip, space, yylloc);
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext, SPARQLfedParser::location_type*& yylloc){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	driver->error(*yylloc, std::string() + "Inexplicable lack of ':' in prefix: \"" + yytext + "\"");
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL)
	driver->error(*yylloc, std::string() + "Unknown prefix: \"" + ret.substr(0, index) + "\"");

    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


