#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 175
#define YY_END_OF_BUFFER 176
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1351] =
    {   0,
        0,    0,  176,  174,    2,    1,    1,   71,  174,    2,
      174,  174,  174,    9,   10,   20,   70,   11,   88,    4,
       67,  155,  149,   38,   82,    3,   83,   69,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
       72,   73,   68,  174,   66,  174,  174,    7,    5,    8,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,    2,
        1,   81,    0,  165,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   80,    0,  164,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  168,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  158,   37,    0,  161,   12,  156,
      156,  155,    0,  150,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   84,  148,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   85,  152,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  154,    0,    0,
      149,    0,    0,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  125,   86,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       46,    0,    0,    0,    0,    0,    0,    0,    0,  169,
      145,    0,    0,    0,   79,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  165,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  153,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      153,  153,  153,  153,  153,  153,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  164,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      173,  173,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,  173,  173,  173,  173,  173,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  170,  159,  159,    0,  162,  162,    0,    0,
      156,    0,    0,  157,  150,    0,  150,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,

      150,  150,  150,  150,  150,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  152,  152,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      152,  152,  152,  152,  152,  152,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       98,   45,   58,   77,   31,   23,  142,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  112,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  141,
        0,    0,  140,    0,    0,    0,   87,  117,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   89,    0,  139,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,  151,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   13,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
        0,    0,  153,  153,  153,  153,  153,  153,  153,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,  153,  153,  153,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  173,  173,  173,  173,
      173,  173,  173,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  173,  173,  173,  173,

      173,    0,    0,    0,  159,    0,    0,  160,    0,  162,
        0,    0,  163,    0,  157,    0,  157,  150,  150,  150,
      150,  150,  150,  150,  150,  150,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
      150,  150,  150,  150,    0,    0,    0,    0,    0,    0,
      152,  152,  152,  152,  152,  152,  152,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      152,  152,  152,  152,  152,    0,    0,  154,    0,    0,
        0,    0,    0,    0,    0,   14,   62,    0,    0,   99,
        0,    0,    0,    0,    0,   48,    0,    0,    0,    0,

        0,   32,    0,   43,    0,   76,    0,    0,    0,   24,
        0,    0,    0,    0,    0,   40,    0,    0,    0,    0,
        0,   90,    0,    0,   39,    0,    0,    0,    0,   47,
        0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   52,  110,  151,    0,  151,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  151,  151,
      151,  151,  151,  151,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  146,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,  153,  153,  153,  153,    0,    0,  153,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      173,  173,  173,  173,  173,    0,    0,  173,    0,  160,
        0,  160,    0,  163,    0,  163,  150,  150,  150,  150,
      150,    0,    0,  150,  152,  152,  152,  152,  152,    0,
        0,  152,    0,    0,   96,   93,   41,    0,    0,    0,
        0,  137,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  100,   57,   27,    0,  113,    0,    0,  129,    0,

        0,  130,    0,  105,   33,  118,    0,   63,    0,  111,
       25,    0,    0,   30,    0,   59,    0,  134,  101,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  127,    0,    0,    0,    0,    0,    0,  104,   36,
       64,    0,   55,   26,  151,  151,  151,  151,  151,  151,
      151,  151,  151,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,  151,  151,  151,
      151,    0,    0,  147,    0,    0,  167,    0,    0,    0,
        0,  153,  166,    0,    0,    0,    0,  173,  150,  152,
        0,    0,  102,    0,    0,   44,    0,    0,   53,    0,

        0,    0,  136,   65,    0,   29,   54,    0,    0,    0,
        0,    0,    0,   34,    0,   15,    0,    0,  143,    0,
       16,    0,    0,  119,    0,    0,    0,    0,   42,   75,
        0,    0,  103,    0,  135,    0,    0,  151,  151,  151,
      151,  151,    0,    0,  151,    0,  171,    0,    0,  172,
        0,    0,    0,    0,    0,    0,   56,    0,    0,    0,
        0,    0,    0,  131,    0,    0,    0,   74,  114,    0,
       18,    0,  115,    0,   61,    0,    0,    0,    0,  109,
      126,    0,    0,    0,  151,    0,    0,   35,  124,    0,
      107,   92,    0,    0,   22,   17,    0,    0,    0,    0,

        0,    0,   60,  128,    0,  120,  121,  122,  123,    0,
      116,    0,    0,    0,   21,    0,    0,    0,    0,    0,
      132,  133,    0,  144,  108,   78,    0,    0,    0,    0,
        0,    0,    0,    0,   50,    0,    0,    0,   49,   91,
       51,    0,  138,    0,    0,    0,    0,    0,  106,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   10,   10,   94,   95,   96,
       97,   97,   97,   98,   99,   99,   99,   99,   99,  100,
      101,   99,  102,  103,  104,  105,  104,  106,  104,  104,
      107,  108,  109,  109,  109,  109,  109,  109,  109,  110,
      110,  110,  110,  111,  111,  111,  111,  111,  111,  111,
      111,  112,  111,  111,  111,  113,  113,  113,  113,  114,
      113,  113,  115,  116,  116,  116,  116,  116,  116,  117,
      118,  119,  119,  120,  121,  122,  122,  122,  122,  122,

      122,  122,  122,  123,  124,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  126,  127,  128,  129,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  132,  133,  134,
      135,  135,  135,  136,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119
    } ;

static yyconst flex_int32_t yy_meta[137] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    3,    3,
        1,    3,    3,    3,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        3,    1,    3,    1,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    7,    7,    7,    7,    7,    7,    7,

        7,    8,    7,    7,    7,    7,    9,    7,    7,    7,
        7,    7,    7,    7,    9,    7,   10,   11,   12,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1697] =
    {   0,
        0,    0, 2053, 9643,  135, 9643, 2048, 1934,  134,   36,
      250, 1946,  374,  141, 9643,  490,  155, 9643,  166,  179,
     9643,  368,  605, 9643,  709, 9643, 1921,  825,    0,  943,
      363,  706, 1043, 1084, 1113, 1154,  378, 1202,  731, 1253,
     1298, 1313, 1361, 1402, 1427, 1478, 1172, 1521, 1361, 1539,
      145, 9643, 1864, 1866,    0, 1574, 1591, 9643, 1777, 9643,
        0,    0,  115,  124,    0,  114,    0,  126,  124,    0,
      133,    0,  356, 1769,    0, 1583,  168, 1590,    0,  137,
     9643, 9643, 1702, 1814,  742,    0,    0,    0,  367,    0,
     1616,    0, 1623,    0, 1006, 1645,    0,    0,    0, 1149,

        0, 1688,    0, 1736,    0, 1216, 1834,    0,    0, 1324,
     1441,    0,  373,    0,  290,  406,    0, 1638,    0, 1060,
     1580,    0, 1876,  523, 1883,    0, 9643, 1990, 1642, 1996,
        0,    0,    0, 1695,    0, 1915,    0, 1922,    0, 1947,
      791, 9643, 2106,    0,    0, 1987, 1999,    0,  741,    0,
      291,  651,    0, 2132,    0, 1955, 1559,    0, 2157,  862,
     2164,    0,  135, 2262, 2272, 9643, 2280, 2292, 9643, 2300,
     2323, 2333, 2353, 2386,    0,    0, 2288, 2300,    0, 1030,
        0,  294, 1070,    0, 2412,    0, 2437, 1558,    0, 2439,
     1163, 2452,    0, 2472, 2516, 9643,    0,    0,    0, 2465,

        0, 2559,    0, 2566,    0, 2515, 9643, 2664,    0,    0,
     2525, 2706,    0, 1385,    0,  296, 1180,    0, 2699,    0,
     2724, 1549,    0, 2726, 1244, 2739,    0, 1621, 2840, 1609,
     2955,    0,  231,  272,  265,  254,  380,  381, 1543,    0,
     2997,    0, 3006,    0, 1644, 1476,    0,  326,  352, 1685,
        0, 2999,    0, 3024, 1493,    0, 3026, 1274, 3039,    0,
      382,  414,  473,  496,    0,  508,  514, 3122,  543,  693,
     1525,  556,  560,  628,  624,  622,  694,  701, 1048,  704,
      706,    0,  718,  842, 3123,  838,  852,  841,  912,  946,
     1572,  957,  957, 1032,  959, 1032, 1044, 1040, 1058, 1094,

     1092, 1163, 1094, 1111, 1410, 1145, 1147, 1162, 1438, 1152,
        0, 1168, 1542, 1173, 1174, 1180, 1199, 1263, 1862, 9643,
     9643, 3188, 1503, 1464, 9643,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   97, 1701,    0, 1425,  716,    0,
     1434,    0,    0,    0, 1989,    0,    0, 9643, 3317,    0,
     1446,    0,    0,    0,    0,    0,    0,    0,    0, 1445,
        0,    0,    0,    0,    0,    0,    0, 3433,    0, 1379,
        0, 3085,    0, 3231,    0, 2022, 1357,    0,  353, 1210,
        0, 3224,    0, 3104, 1376,    0, 3249, 1555, 3256,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  134, 2220,

        0,    0, 1374,    0,    0,    0, 2302,    0,    0, 9643,
     3557,    0, 1393,    0,    0,    0,    0,    0,    0,    0,
     3673,    0, 1359,    0, 3286,    0, 3295,    0, 2471, 1335,
        0,  359, 1941,    0, 3288,    0, 3313, 1317,    0, 3476,
     1631, 3483,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  269, 2515,    0,    0, 1315,    0,    0,    0, 2580,
        0,    0, 1377, 3581, 3590, 3610, 3788, 3796, 3640, 3816,
     3824, 3847, 3388, 3618, 3877,    0,    0, 1300,    0, 3782,
        0, 3791,    0, 2757, 1203,    0,  692,  708, 2871,    0,
     3903,    0, 3928, 1214,    0, 3930, 2253, 3943,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  320, 3048,    0,
        0, 1213,    0,    0,    0, 3078,    0,    0,    0, 1242,
        0,    0,    0,    0,    0,    0,    0, 4041,    0, 1188,
        0, 4083,    0, 4092,    0, 3307, 1155,    0,  713, 3318,
        0, 4085,    0, 4110, 1174,    0, 4112, 3351, 4125,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  624, 3556,
        0,    0, 1135,    0,    0,    0, 3589,    0,    0,    0,
     4226,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1186, 3793,
        0,    0, 1131,    0,    0,    0, 3957,    0,    0, 1261,

     1301, 1302, 1294, 1297, 1310, 1306, 3121, 1302, 1354, 1370,
     1371,    0, 1393, 1412, 1422, 1411, 1438, 1470, 1470, 1471,
     1472, 1496, 1517, 1516, 1514, 1527, 1533, 1566, 1569,    0,
     1573, 1573, 1586, 1577, 1581, 1600, 1815, 1852, 1858,    0,
     1193, 2023, 2006, 2025, 2127, 2128,    0,    0, 2116, 2126,
     2269, 2350, 2398, 2409, 2394, 2410, 2676, 4318, 2676, 2687,
     2692, 2845, 1201, 2862, 2851, 4323, 2851,    0, 2976, 2964,
     2978, 2969, 3124,    0, 3173, 3197, 3207, 3199, 4389,    0,
        0, 4283, 4431,    0, 4143,    0, 1165, 3509,    0, 4424,
        0, 4307, 1115,    0, 4449, 3742, 4456,    0, 1114, 1108,

        0,    0,    0, 1030, 1028,    0,    0,    0,    0,    0,
        0, 4568, 4698, 4569,    0,    0,    0, 4472,    0, 4497,
        0, 4504,    0, 4560, 4828,    0,    0,    0, 4604,    0,
        0,    0, 4944,    0,    0,    0,    0,    0,    0,    0,
        0, 1411, 4510,    0,    0, 1045,    0,    0,    0, 4528,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 5068,
     5193, 4700,    0,    0,    0, 4561,    0, 4647,    0, 4733,
        0, 4568, 5318,    0,    0,    0, 5434,    0,    0,    0,
        0,    0,    0,    0,    0, 4271, 4567,    0,    0, 1042,
        0,    0,    0, 4600,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 4765, 4831, 4780, 4839, 4851, 4870, 5061,
     4884, 4892, 4900, 4910, 5069, 5081, 5089, 5552,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4273, 4659,
        0,    0, 1041,    0,    0,    0, 4696,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5030,    0,    0,    0,
     5667,    0,    0,    0,    0,    0,    0,    0,    0, 4286,
     4767,    0,    0, 1038,    0,    0,    0, 4826,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1112, 5785,    0,
        0,    0,    0,    0,    0,    0, 3423, 3454, 3456,    0,
     3444, 3580, 3698, 3681, 3700,    0, 3683, 3742, 3751, 3774,

     3776, 3779, 3823,    0, 3899,    0, 3885, 3900, 3889,    0,
     4059, 4052, 4055, 4052, 4235,    0, 4252, 4245, 4236, 4297,
     4320, 4317, 4326, 4313,    0, 1096, 4328, 4397, 4409,    0,
     4414, 4724, 4715, 4717, 4741, 4815,    0, 4907, 4889, 4937,
     4924, 4958, 4958, 5060, 5047, 5075, 3631, 5088, 5084, 5085,
     5092, 5106, 5089, 5090, 5085, 5107, 5137, 5130, 5141, 5139,
     5142,    0,    0, 5903,    0,    0,  999,    0, 5119,    0,
     5128,    0, 5007,  976,    0, 1958, 1959, 5118,    0, 5127,
        0, 5152,  981,    0, 5176, 5137, 5228,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  718, 5143,    0,    0,

      968,    0,    0,    0, 5173,    0,    0, 6021,  893, 5253,
     5258,  887, 6150,    0,  882,    0,    0,    0,    0,    0,
        0,    0, 6266,    0,    0,    0,    0,    0,    0,    0,
     6390,    0,  881,    0,    0,    0,    0,    0,    0,    0,
     6506,    0,    0,    0,    0,    0,    0,    0, 5275, 5360,
     5368, 5376, 5384, 5400, 6137, 6145, 6624,    0,    0,    0,
        0,    0,    0,    0, 6739,    0,    0,    0,    0,    0,
        0,    0, 6857, 5213,    0,    0,    0, 5210, 5210, 5297,
     5389,    0, 5394, 5376, 5390, 5426, 5424, 5446, 5457, 5500,
     5505,    0,    0,  795, 5542,    0, 5531, 5537,    0, 5573,

     5631,    0, 5662,    0,    0, 9643, 5647,    0, 5660,    0,
        0, 5677, 5711,    0, 5728,    0, 5777,    0,    0, 5778,
     5779, 5807, 5850, 5899, 5898,  813,  780,  769,  757, 5883,
     5911,    0, 5983, 6004, 6005, 6019, 6030, 6103,    0,    0,
        0, 6134,    0,    0, 6975,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4532, 5191,    0,    0,  669,
        0,    0,    0, 5300,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4535, 6081, 9643, 7104,    0,    0,
        0, 7220, 9643, 7344,    0,    0,    0, 7460, 7578, 7693,
     6134, 6139,    0, 6123, 6130,    0, 6129, 6127, 2002, 6147,

     6147,  745,    0,    0, 6148,    0, 3373, 6141, 6136, 6138,
     6137, 6139, 6140,    0, 6158,    0, 6157, 6145,    0, 6145,
        0, 6145, 6160, 9643,  725,  721,  712,  705,    0,    0,
     6148, 6160,    0, 6151,    0, 6156, 6161,    0,    0,    0,
        0,    0,    0,    0,    0,  494,    0,  397,  347,    0,
      311, 6166, 6185, 6196, 6183, 6197,    0, 6401, 6199, 6211,
      359, 6247, 6405,    0, 6262, 6255, 6262,    0,    0, 6312,
        0, 6337,    0, 6348,    0,  392,  376,  370,  361,    0,
        0, 6357, 6372, 6373,    0, 6332, 6362,    0,    0, 6366,
        0,    0, 6385, 6380,    0,    0,  332, 6375, 6389, 6382,

     6392, 6388,    0,    0, 6380, 9643, 9643, 9643, 9643, 6380,
        0, 6395, 5024, 6146,    0, 6381, 6396, 6396, 6401, 6417,
        0,    0, 6432,    0,    0,    0,  157,  125, 6437, 6453,
     6456, 6471, 6473, 6485, 9643, 6500, 6515, 6515, 9643,    0,
     9643,  183,    0,  121,  163, 6570, 6577, 6612, 9643, 9643,
     7828, 7839, 7850, 7859,  146, 7864, 7869, 7874, 7879, 7884,
     7889, 7894, 7899, 7904, 7909, 7920, 7925, 7929, 7932, 7937,
     7942, 7947, 7958, 7963, 7967, 7970, 7975, 7980, 7985, 7990,
     7995, 8000, 8005, 8010, 8015, 8020, 8025, 8030, 8035, 8046,
     8051, 8055, 8058, 8063, 8068, 8073, 8078, 8083, 8088, 8093,

     8098, 8103, 8108, 8113, 8118, 8123, 8128, 8133, 8138, 8143,
     8148, 8153, 8158, 8163, 8168, 8173, 8182, 8187, 8191, 8194,
     8199, 8204, 8209, 8214, 8219, 8224, 8229, 8234, 8239, 8244,
     8249, 8254, 8259, 8267, 8267, 8272, 8277, 8282, 8287, 8292,
     8297, 8302, 8307, 8312, 8317, 8322, 8327, 8332, 8337, 8342,
     8347, 8352, 8357, 8368, 8373, 8378, 8383, 8388, 8393, 8398,
     8403, 8408, 8413, 8418, 8423, 8428, 8433, 8438, 8443, 8448,
     8453, 8458, 8463, 8468, 8473, 8478, 8483, 8488, 8493, 8498,
     8503, 8508, 8513, 8518, 8523, 8534, 8539, 8544, 8549, 8554,
     8559, 8564, 8569, 8574, 8579, 8584, 8589, 8594, 8599, 8604,

     8609, 8614, 8619, 8624, 8629, 8634, 8639, 8644, 8649, 8654,
     8659, 8664, 8669, 8674, 8679, 8684, 8689, 8694, 8699, 8704,
     8709, 8714, 8719, 8724, 8729, 8734, 8739, 8744, 8749, 8754,
     8759, 8764, 8769, 8774, 8779, 8784, 8789, 8794, 8799, 8804,
     8809, 8814, 8819, 8824, 8829, 8834, 8839, 8844, 8849, 8854,
     8859, 8864, 8869, 8874, 8879, 8886, 8886, 8891, 8896, 8901,
     8906, 8911, 8916, 8921, 8926, 8931, 8936, 8941, 8946, 8951,
     8956, 8961, 8966, 8971, 8976, 8987, 8992, 8996, 8999, 9004,
     9009, 9014, 9025, 9030, 9035, 9046, 9051, 9056, 9061, 9066,
     9071, 9076, 9081, 9086, 9091, 9096, 9101, 9112, 9117, 9121,

     9124, 9129, 9134, 9139, 9150, 9155, 9160, 9165, 9170, 9175,
     9180, 9185, 9190, 9195, 9200, 9205, 9210, 9215, 9220, 9225,
     9230, 9235, 9240, 9245, 9250, 9259, 9264, 9269, 9274, 9279,
     9284, 9289, 9294, 9299, 9304, 9309, 9314, 9322, 9322, 9327,
     9332, 9337, 9342, 9347, 9352, 9357, 9362, 9367, 9372, 9377,
     9382, 9387, 9392, 9397, 9402, 9407, 9412, 9417, 9422, 9433,
     9438, 9443, 9448, 9453, 9458, 9463, 9468, 9479, 9484, 9489,
     9494, 9499, 9504, 9509, 9514, 9519, 9524, 9529, 9534, 9539,
     9544, 9549, 9554, 9559, 9564, 9569, 9574, 9585, 9590, 9595,
     9606, 9611, 9616, 9621, 9626, 9631

    } ;

static yyconst flex_int16_t yy_def[1697] =
    {   0,
     1350,    1, 1350, 1350, 1350, 1350, 1350, 1350, 1351, 1352,
     1350, 1350, 1353, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1354, 1350, 1350, 1350, 1355, 1350,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   46,   30,   46,   46,
     1350, 1350, 1350, 1350,   30,   46,   46, 1350, 1350, 1350,
     1356, 1357, 1356, 1356, 1358, 1359, 1360, 1360, 1350, 1361,
     1350, 1362, 1363, 1363, 1364, 1350, 1350, 1350, 1365, 1350,
     1350, 1350, 1366, 1350, 1350, 1367, 1368, 1369, 1350, 1370,
     1350, 1371, 1350, 1372, 1350, 1373, 1374, 1375, 1376, 1350,

     1377, 1350, 1378, 1350, 1379, 1350, 1350, 1380, 1381, 1380,
     1380, 1382, 1383, 1384, 1384, 1350, 1385, 1350, 1386, 1387,
     1387, 1388, 1350, 1350, 1350, 1389, 1350, 1390, 1350, 1350,
     1391, 1392, 1393, 1350, 1394, 1350, 1395, 1350, 1396, 1350,
     1350, 1350, 1350, 1397, 1398, 1397, 1397, 1399, 1400, 1401,
     1401, 1350, 1402, 1350, 1403, 1404, 1404, 1405, 1350, 1350,
     1350, 1406, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1407, 1408, 1407, 1407, 1409, 1410,
     1411, 1411, 1350, 1412, 1350, 1413, 1414, 1414, 1415, 1350,
     1350, 1350, 1416, 1417, 1417, 1350, 1418, 1419, 1420, 1350,

     1421, 1350, 1422, 1350, 1423, 1350, 1350, 1350, 1424, 1425,
     1424, 1424, 1426, 1427, 1428, 1428, 1350, 1429, 1350, 1430,
     1431, 1431, 1432, 1350, 1350, 1350, 1433, 1434, 1350,  229,
     1350,  229,  229,  229,  229,  229,  229,  229, 1435, 1436,
     1435, 1435, 1435, 1437, 1438, 1350, 1439, 1439, 1439, 1440,
     1441, 1350, 1442, 1443, 1443, 1444, 1350, 1350, 1350, 1445,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229, 1350, 1350,
     1350, 1350,  229,  229, 1350,  229,  229,  229,  229,  229,
      229,  229, 1446, 1447, 1448, 1448, 1448, 1448, 1448, 1449,
     1450, 1450, 1448, 1451, 1350, 1452, 1453, 1350, 1454, 1455,
     1350, 1456, 1457, 1456, 1456, 1458, 1459, 1460, 1461, 1350,
     1462, 1463, 1462, 1462, 1464, 1465, 1466, 1350,  368, 1467,
     1468, 1467, 1467, 1467, 1469, 1470, 1350, 1471, 1471, 1472,
     1473, 1350, 1474, 1475, 1475, 1476, 1350, 1350, 1350, 1477,
      368,  368,  368,  368,  368,  368, 1478, 1479, 1480, 1480,

     1480, 1481, 1482, 1482, 1480, 1483, 1350, 1484, 1485, 1350,
     1486, 1487, 1350, 1488, 1489, 1488, 1488, 1490, 1491, 1492,
     1350,  421, 1493, 1494, 1493, 1493, 1493, 1495, 1496, 1350,
     1497, 1497, 1498, 1499, 1350, 1500, 1501, 1501, 1502, 1350,
     1350, 1350, 1503,  421,  421,  421,  421,  421,  421, 1504,
     1505, 1506, 1506, 1506, 1507, 1508, 1508, 1506, 1509, 1350,
     1510, 1511, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350,  475,  475, 1512, 1513, 1512,
     1512, 1512, 1514, 1515, 1350, 1516, 1516, 1516, 1517, 1518,
     1350, 1519, 1520, 1520, 1521, 1350, 1350, 1350, 1522,  475,

      475,  475,  475,  475,  475, 1523, 1524, 1525, 1525, 1525,
     1526, 1527, 1527, 1525, 1528, 1350, 1529, 1530, 1531, 1350,
     1532, 1533, 1532, 1532, 1534, 1535, 1536, 1350,  528, 1537,
     1538, 1537, 1537, 1537, 1539, 1540, 1350, 1541, 1541, 1542,
     1543, 1350, 1544, 1545, 1545, 1546, 1350, 1350, 1350, 1547,
      528,  528,  528,  528,  528,  528, 1548, 1549, 1550, 1550,
     1550, 1551, 1552, 1552, 1550, 1553, 1350, 1554, 1555, 1556,
     1350,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571, 1557, 1558, 1559, 1559,
     1559, 1560, 1561, 1561, 1559, 1562, 1350, 1563, 1564,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
     1350,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571, 1350, 1565,
     1566, 1565, 1565, 1567, 1568, 1569, 1569, 1350, 1570, 1350,
     1571, 1572, 1572, 1573, 1350, 1350, 1350, 1574,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571, 1575,
     1575, 1576, 1576, 1350, 1577, 1578, 1579, 1350, 1580, 1350,
     1581, 1350, 1582, 1350, 1583, 1584, 1584, 1585, 1586, 1587,
     1587, 1588, 1350,  733,  733,  733,  733,  733,  733, 1589,
     1590, 1591, 1591, 1591, 1592, 1593, 1593, 1591, 1594, 1350,
     1595, 1596,  733,  733,  733,  733,  733, 1597, 1597, 1598,
     1598, 1350, 1599, 1600, 1601, 1350, 1602, 1350, 1603, 1350,
     1604, 1350, 1605, 1606, 1606, 1607, 1350,  777,  777,  777,
      777,  777,  777, 1608, 1609, 1610, 1610, 1610, 1611, 1612,
     1612, 1610, 1613, 1350, 1614, 1615,  777,  777,  777,  777,

      777, 1616, 1616, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  818,  818,
      818,  818,  818,  818,  818,  818, 1617, 1618, 1619, 1619,
     1619, 1620, 1621, 1621, 1619, 1622, 1350, 1623, 1624,  818,
      818,  818,  818,  818, 1625, 1625, 1626, 1627, 1627, 1628,
     1350,  851,  851,  851,  851,  851,  851, 1629, 1630, 1631,
     1631, 1631, 1632, 1633, 1633, 1631, 1634, 1350, 1635, 1636,
      851,  851,  851,  851,  851, 1637, 1637, 1638, 1350,  879,
      879,  879,  879, 1639, 1639,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879, 1350,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879, 1350,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879, 1350,  964,  964, 1640, 1641, 1640, 1640,
     1640, 1642, 1643, 1350, 1644, 1644, 1644, 1645, 1646, 1350,
     1647, 1648, 1648, 1649, 1350, 1350, 1350, 1650,  964,  964,
      964,  964,  964,  964, 1651, 1652, 1653, 1653, 1653, 1654,

     1655, 1655, 1653, 1656, 1350, 1657, 1658, 1350, 1008, 1659,
     1659, 1008, 1660, 1661, 1350, 1662, 1663, 1662, 1662, 1664,
     1665, 1666, 1350, 1023, 1023, 1023, 1023, 1667, 1667, 1023,
     1668, 1669, 1350, 1670, 1671, 1670, 1670, 1672, 1673, 1674,
     1350, 1041, 1041, 1041, 1041, 1675, 1675, 1041, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1057, 1057, 1057,
     1057, 1676, 1676, 1057, 1350, 1065, 1065, 1065, 1065, 1677,
     1677, 1065, 1350, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,

     1073, 1073, 1073, 1073, 1073, 1350, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1350, 1350, 1350, 1350, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1350, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1678, 1679, 1680, 1680, 1680, 1681, 1682,
     1682, 1680, 1683, 1350, 1684, 1685, 1145, 1145, 1145, 1145,
     1145, 1686, 1686, 1073, 1687, 1687, 1350, 1688, 1689, 1689,
     1690, 1350, 1350, 1691, 1692, 1692, 1693, 1350, 1350, 1350,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,

     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1350, 1350, 1350, 1350, 1350, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1145, 1145, 1145,
     1145, 1145, 1694, 1694, 1145, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1350, 1073, 1073,
     1350, 1073, 1350, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1350, 1350, 1350, 1350, 1073,
     1073, 1073, 1073, 1073, 1145, 1695, 1695, 1073, 1073, 1073,
     1073, 1073, 1350, 1350, 1073, 1073, 1350, 1073, 1350, 1073,

     1073, 1073, 1073, 1073, 1073, 1350, 1350, 1350, 1350, 1073,
     1073, 1073, 1696, 1696, 1073, 1350, 1350, 1350, 1073, 1350,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1350, 1350,
     1350, 1073, 1350, 1073, 1350, 1350, 1350, 1073, 1350, 1073,
     1350, 1350, 1073, 1350, 1350, 1350, 1350, 1350, 1350,    0,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350

    } ;

static yyconst flex_int16_t yy_nxt[9780] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   39,   49,   39,   50,   39,
       51,    4,   52,   53,   54,   55,   31,   32,   33,   34,
       56,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   57,   48,   39,   49,   39,   50,   39,
       58,   59,   60,    4,   61,   62,   62,   63,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   64,   65,   65,   66,    4,    4,
       67,   68,    4,   69,   70,   71,   72,   73,   74,   75,
       76,    4,   77,   78,   79,    4,   80,   97,   80,   80,
       84,   80,  141,  141,  141,  141,  319,  319,  319,  319,
      463,  228,  163,   98,  142,   99,   99,   99,   99,   99,
       99,  100,  101,  101,  101,  101,  102,  103,  103,  104,
      105,  106,  163,  164, 1346,  165,  165,  165,  165,  165,
      165,  165,  165,  166,  167, 1345,  168,  168,  168,  168,
      168,  168,  168,  168, 1344,   85,  327,  327,  169,  170,

      170,  170,  170,  170,  170,  170,  170,  320,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  329,  329,  329,  329,
      326,  326,  331,  392,  392,   86,  332,  332,  332,  332,
      331,  332,  333,  333,  333,  333,  333,  333,  333,  333,
      333,   87, 1287,   88,   88,   88,   88,   88,   88,   89,
       90,   90,   90,   90,   91,   92,   92,   93,   94,   95,
      107,  107,  107,  107,  107,  107,  107,  107,  344,  344,
      344,  344,  345,  571, 1286,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      572,  573,  574,  571,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      572,  573,  574, 1318,  108,  109,  109,  110,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  111,  112,  112,  113,  445,  445,
      114,  115, 1309,  116,  117,  118,  119,  120,  121,  122,
      123, 1308,  124,  125,  126,  129,  171, 1307,  172,  172,
      172,  172,  172,  172,  172,  172,  107,  143,  261,  232,

      174,  232,  208, 1306,  107,  143,  262,  173,  174,  232,
      208,  263,  264,  280,  232,  232,  232,  575,  232,  501,
      501,  265,  577, 1297,  232,  576,  232,  281,  261,  232,
      232,  232,  232,  232,  600,  130,  262,  173, 1287,  232,
      232,  263,  264,  280,  232,  232,  232,  575,  232,  335,
      336,  265,  577,  338,  232,  576,  232,  281,  232,  369,
      232,  339,  601,  232,  600,  422,  232,  369,  340,  340,
      340,  340,  340,  422, 1011,  131,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  394,  394,  394,  394,  391,
      391,  132,  601,  133,  133,  133,  133,  133,  133,  134,

      135,  135,  135,  135,  136,  137,  137,  138,  139,  140,
      143,  143,  143,  143,  143,  143,  143,  143,  396,  396,
      396,  396,  602,  396, 1286,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      603,  604,  602,  605,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      603,  604,  610,  605,  144,  145,  145,  146,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  147,  148,  148,  149,  616,  617,
      150,  151,  610,  152,  153,  154,  155,  156,  157,  158,
      159, 1010,  160,  161,  162,  174,  174,  174,  174,  174,
      174,  174,  174,  406,  406,  406,  406,  407,  616,  617,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  618,  619,  620,  621,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  618,  619,  620,  621,  175,

      176,  176,  177,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  178,
      179,  179,  180,  552,  552,  181,  182, 1279,  183,  184,
      185,  186,  187,  188,  189,  190, 1278,  191,  192,  193,
      195,  196,  232,  622,  232,  266,  611, 1277,   83, 1276,
      623,  612,  267,   83,  232,  268, 1261,  269,  232,  626,
      627,  232, 1146,  449,  449,  449,  449,  232,  449,  232,
      628,  629,  232,  622,  232,  266,  611,  232, 1228,  232,
      623,  612,  267,  232,  232,  268,  232,  269,  232,  626,
      627,  232,  141,  141,  141,  141, 1227,  232,  477,  232,

      628,  629, 1225,   83,  142, 1226,  477,  232,   83,  232,
      197,  703,   83,  232,  477,  704,  232,  990,  990,  529,
       83,  705,  477,   83, 1224,   83,  198,  529,  199,  199,
      199,  199,  199,  199,  200,  201,  201,  201,  201,  202,
      203,  203,  204,  205,  206,  208,  208,  208,  208,  208,
      208,  208,  208,  447,  447,  447,  447,  444,  444, 1205,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  630,  636,  637,  638,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  630,  636,  637,  638,  209,
      210,  210,  211,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  212,
      213,  213,  214,  760,  712,  215,  216,  639,  217,  218,
      219,  220,  221,  222,  223,  224,  232,  225,  226,  227,
      229,  230,  232,  229,  229,  229,  229,  229,  229,  229,
      229,  231,  459,  459,  459,  459,  460,  639,  232,  233,
      232,  234,  232,  232,  232,  232,  232,  232,  232,  235,
      232,  236,  232,  232,  232,  237,  232,  232,  238,  232,

      232,  232,  232,  640,  642,  643,  646,  232,  232,  233,
      232,  234,  232,  232,  232,  232,  232,  232,  232,  235,
      232,  236,  232,  232,  232,  237,  232,  232,  238,  232,
      232,  232,  232,  640,  642,  643,  646,  239,  240,  240,
      241,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  243,  244,  244,
      245,  989,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  256,  257, 1160,  258,  259,  260,  270,  232,
      644,  232,  271,  624,  649,  647,  272,  645,  648,  232,
      964,  232, 1145,  650,  273,  232,  651,  625,  232,  358,

      358,  358,  358,  358,  358,  358,  358, 1106,  270,  232,
      644,  232,  271,  624,  649,  647,  272,  645,  648,  232,
      232,  232,  232,  650,  273,  232,  651,  625,  232,  570,
      232,  852,  274,  652,  819,  778,  232,  653,  734,  232,
      654,  275,  503,  503,  503,  503,  500,  500,  657,  232,
      232,  232,  232,  399,  400, 1011,  276, 1010,  658,  277,
      232,  232,  274,  652,  278,  232,  232,  653,  232,  232,
      654,  275,  402,  402,  402,  402,  402, 1009,  657,  232,
      663,  232,  505,  505,  505,  505,  276,  505,  658,  277,
      232,  232,  232,  664,  278,  232, 1008,  665,  232,  669,

      232,  655,  232,  670,  656,  279,  232,  232, 1001,  232,
      663,  232,  947,  666,  232,  310,  674,  675,  926,  676,
      232,  311,  232,  664,  579,  232,  232,  665,  551,  669,
      232,  655,  232,  670,  656,  279,  232,  232,  232,  232,
      232,  232,  282,  666,  232,  310,  674,  675,  232,  676,
      283,  311,  677,  284,  285,  232,  232,  232,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  864,  232,  528,
      232,  679,  282,  515,  515,  515,  515,  516,  232,  679,
      283,  851,  677,  284,  285,  580,  580,  232,  286,  232,
      287,  232,  556,  556,  556,  556,  288,  556,  678,  232,

      886,  232,  289,  578,  194,  232,  500,  833,  232,  367,
      367,  367,  367,  367,  367,  367,  367,  475,  286,  232,
      287,  232,  739,  739,  739,  739,  288,  739,  678,  232,
      886,  232,  289,  290,  232,  232,  291,  292,  232,  887,
      888,  293,  889,  890,  232,  891,  232,  294,  295,  232,
      232,  232,  892,  232,  566,  566,  566,  566,  567,  232,
      896,  232,  296,  290,  232,  232,  291,  292,  232,  887,
      888,  293,  889,  890,  232,  891,  232,  294,  295,  232,
      232,  232,  892,  232,  596,  596,  596,  596,  597,  232,
      896,  232,  296,  818,  163,  232,  232,  232,  232,  232,

      232,  297,  897,  316,  317,  898,  899,  232,  444,  232,
      790,  298,  299,  232,  232,  232,  232,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  232,  232,  900,  232,
      232,  297,  897,  316,  317,  898,  899,  232,  232,  232,
      232,  298,  299,  232,  232,  232,  232,  659,  232,  421,
      232,  901,  777,  300,  232,  128,  660,  232,  900,  902,
      661,  662,  301,  232,  903,  232,  302,  391,  232,  746,
      232,  368,  733,  232,  667,  232,  303,  659,  232,  232,
      232,  901,  232,  300,  232,  668,  660,  232,  904,  902,
      661,  662,  301,  232,  903,  232,  302,  554,  554,  554,

      554,  551,  551,  232,  667,  232,  303,   96,   83,  232,
      735,  735,  232,  304,  232,  668,  232,  305,  904,  905,
      306,  307,  906,  907,  232,  908,  232,  326,  733,  702,
      232,  308,  309,  232,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  304,  232,  909,  232,  305,  700,  905,
      306,  307,  906,  907,  232,  908,  232,  232,  312,  232,
      232,  308,  309,  232,  910,  613,  911,  232,  912,  313,
      913,  614,  314,  315,  232,  909,  232,  615,  318,  699,
      671,  232,  232,  641,  914,  672,  593,  232,  312,  232,
      229,  673,  232,  232,  910,  613,  911,  232,  912,  313,

      913,  614,  314,  315,  232,  915,  232,  615,  318,  232,
      671,  232,  232,  232,  914,  672,  232,  276,  916,  917,
      277,  673,  232,  232,  918,  278,  232,  232,  232,  919,
      232,  920,  921,  232,  310,  915,  578, 1350,  570,  323,
      311,  922,  563,  232,  232,  232,  232,  276,  916,  917,
      277,  512,  456,  411,  918,  278,  232,  232,  232,  919,
      232,  920,  921,  232,  310,  749,  749,  749,  749,  750,
      311,  922,  324,  403,  232,  232,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  346,  346,  346,  346,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  346,  346,  346,  348,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  793,  793,  793,  793,  794,   97,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  582,  582,  582,  582,
      579,  579,   98,   85,   99,   99,   99,   99,   99,   99,
      100,  101,  101,  101,  101,  102,  103,  103,  104,  105,
      106,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  585,  585,  585,

      585,  232,  585,   86,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  327,  327,  327,  327,  327,  327,   87,
      349,   88,   88,   88,   88,   88,   88,   89,   90,   90,
       90,   90,   91,   92,   92,   93,   94,   95,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  368,  368,  368,  368,  368,  368,
      368,  368,  341,  319,  319,  319,  319,  923,  325,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  322,  924,  925,  923,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  320,  924,  925,  321,  370,  371,
      371,  372,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  374,  375,
      375,  376,  207,  377,  378,  379,  127,  380,  381,  382,
      383,  384,  385,  386,  387,   82,  388,  389,  390,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  410,  128, 1258, 1258, 1258, 1258,  128,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      420,  420,  420,  420,  420,  420,  420,  420,  452,  453,
       81,  130, 1350,  783,  783,  783,  783,  128,  783,  927,
      928, 1350,  128, 1350,  966,  966,  128,  455,  455,  455,
      455,  455,  966,  966,  128, 1350, 1350,  128,  929,  128,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  927,
      928,  131,  446,  446,  446,  446,  446,  446,  446,  446,

      446,  709,  709,  709,  709,  709,  709,  132,  929,  133,
      133,  133,  133,  133,  133,  134,  135,  135,  135,  135,
      136,  137,  137,  138,  139,  140,  421,  421,  421,  421,
      421,  421,  421,  421,  737,  737,  737,  737,  734,  734,
     1350,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  930,  931,  932,  933,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  930,  931,  932,  933,

      423,  424,  424,  425,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      427,  428,  428,  429, 1350,  430,  431,  432, 1350,  433,
      434,  435,  436,  437,  438,  439,  440, 1350,  441,  442,
      443,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  464,  464,  464,  464,  464,  464,  464,  464,
      465, 1350,  165,  165,  165,  165,  165,  165,  165,  165,

      467,  467,  467,  467,  467,  467,  467,  467,  934, 1350,
      468,  466,  168,  168,  168,  168,  168,  168,  168,  168,
      170,  170,  170,  170,  170,  170,  170,  170, 1350, 1350,
     1350,  469,  392,  392,  392,  392,  392,  392,  934,  470,
     1350,  466, 1350,  471,  471,  471,  471,  471,  471,  471,
      471,  171, 1350,  172,  172,  172,  172,  172,  172,  172,
      172,  469,  472,  836,  836,  836,  836,  837,  473,  470,
      473, 1350,  173,  474,  474,  474,  474,  474,  474,  474,
      474,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      935, 1350,  472,  502,  502,  502,  502,  502,  502,  502,

      502,  502,  173,  475,  476, 1350,  475,  475,  475,  475,
      475,  475,  475,  475,  757,  757,  757,  757,  757,  757,
      935,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  936,  937,  938,  939,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  936,  937,  938,  939,
      478,  479,  479,  480,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      482,  483,  483,  484,  196,  485,  486,  487,  488,  489,
      490,  491,  492,  493,  494,  495,  496, 1350,  497,  498,
      499,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      508,  509,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  196,  511,
      511,  511,  511,  511,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
     1350, 1350, 1350,  197,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  781,  781,  781,  781,  778,  778,  198,
     1350,  199,  199,  199,  199,  199,  199,  200,  201,  201,

      201,  201,  202,  203,  203,  204,  205,  206,  527,  527,
      527,  527,  527,  527,  527,  527, 1350,  197,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  445,  445,  445,
      445,  445,  445,  198, 1350,  199,  199,  199,  199,  199,
      199,  200,  201,  201,  201,  201,  202,  203,  203,  204,
      205,  206,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  528,  528,  528,  528,  528,  528,
      528,  528,  801,  801,  801,  801,  801,  801, 1350,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  940,  943,  944,  945,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  940,  943,  944,  945,  530,  531,
      531,  532,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  534,  535,
      535,  536, 1350,  537,  538,  539, 1350,  540,  541,  542,
      543,  544,  545,  546,  547, 1350,  548,  549,  550,  553,

      553,  553,  553,  553,  553,  553,  553,  553,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  559,  560,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565, 1350,  562,  562,  562,  562,
      562,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  229,  230, 1350,
      229,  229,  229,  229,  229,  229,  229,  229,  231,  822,
      822,  822,  822,  819,  819,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      946,  948,  949,  954,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      946,  948,  949,  954,  239,  240,  240,  241,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  243,  244,  244,  245, 1350,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257, 1350,  258,  259,  260,  174,  174,  174,  174,  174,
      174,  174,  174,  825,  825,  825,  825,  477,  825, 1350,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  955,  956,  957,  958,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  955,  956,  957,  958,  175,
      176,  176,  177,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  178,
      179,  179,  180, 1350, 1350,  181,  182, 1350,  183,  184,
      185,  186,  187,  188,  189,  190, 1350,  191,  192,  193,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  581,

      581,  581,  581,  581,  581,  581,  581,  581,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  589,  590,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595, 1350,  592,  592,  592,  592,
      592,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  606,  893,  631,
      501,  501,  501,  501,  501,  501,  632, 1350, 1350,  633,
      607,  634,  608,  894,  895,  959,  609,  635,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  606,  893,  631,
      844,  844,  844,  844,  844,  844,  632,  742,  743,  633,

      607,  634,  608,  894,  895,  959,  609,  635,  679,  679,
      679,  679,  679,  679,  679,  679,  745,  745,  745,  745,
      745,  960, 1350,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  961,  962,
      963,  960,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  961,  962,
      963, 1350,  680,  681,  681,  682,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  683,  684,  684,  685, 1350, 1350,  686,  687,
     1350,  688,  689,  690,  691,  692,  693,  694,  695, 1350,
      696,  697,  698,  713,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751, 1263, 1263, 1263, 1263,  714,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  786,  787,  474,  474,
      474,  474,  474,  474,  474,  474, 1350, 1350,  715,  855,
      855,  855,  855,  852,  852,  789,  789,  789,  789,  789,
      857,  857,  857,  857,  716,  857,  717,  717,  717,  717,
      717,  717,  718,  719,  719,  719,  719,  720,  721,  721,
      722,  723,  724,  368,  368,  368,  368,  368,  368,  368,
      368,  867,  867,  867,  867,  868, 1074, 1350,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369, 1075, 1076, 1077, 1074,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369, 1075, 1076, 1077, 1350,  370,  371,  371,
      372,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  374,  375,  375,
      376, 1350,  377,  378,  379, 1350,  380,  381,  382,  383,
      384,  385,  386,  387, 1350,  388,  389,  390,  761,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,

      795,  464,  464,  464,  464,  464,  464,  464,  464, 1350,
      805,  805,  805,  805,  805,  805,  805,  805,  762, 1078,
      804,  994,  994,  994,  994,  807,  994,  807, 1350,  806,
      808,  808,  808,  808,  808,  808,  808,  808,  474,  474,
      474,  474,  474,  474,  474,  474, 1350, 1350, 1350, 1078,
      804, 1350, 1126, 1127, 1128,  812, 1129,  812,  763,  806,
      813,  813,  813,  813,  813,  813,  813,  813,  552,  552,
      552,  552,  552,  552,  764, 1350,  765,  765,  765,  765,
      765,  765,  766,  767,  767,  767,  767,  768,  769,  769,
      770,  771,  772,  421,  421,  421,  421,  421,  421,  421,

      421,  875,  875,  875,  875,  875,  875, 1350,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422, 1079, 1080, 1081, 1082,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422, 1079, 1080, 1081, 1082,  423,  424,  424,
      425,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  427,  428,  428,
      429, 1350,  430,  431,  432, 1083,  433,  434,  435,  436,

      437,  438,  439,  440, 1084,  441,  442,  443,  467,  467,
      467,  467,  467,  467,  467,  467,  810,  810,  810,  810,
      810,  810,  810,  810, 1350, 1083, 1350,  809, 1085, 1086,
     1087,  814, 1350,  814, 1084,  811,  815,  815,  815,  815,
      815,  815,  815,  815,  471,  471,  471,  471,  471,  471,
      471,  471, 1004, 1004, 1004, 1004, 1005,  809, 1085, 1086,
     1087, 1350,  816,  472,  816,  811, 1088,  817,  817,  817,
      817,  817,  817,  817,  817,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  472,  475,  476, 1088,  475,  475,  475,

      475,  475,  475,  475,  475,  580,  580,  580,  580,  580,
      580, 1350,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477, 1089, 1090, 1091,
     1092,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477, 1089, 1090, 1091,
     1092,  478,  479,  479,  480,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  482,  483,  483,  484, 1350,  485,  486,  487,  488,

      489,  490,  491,  492,  493,  494,  495,  496, 1350,  497,
      498,  499,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  829,  830,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835, 1350,
      832,  832,  832,  832,  832,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  528,  528,  528,  528,  528,  528,  528,  528,  883,
      883,  883,  883,  883,  883, 1350,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,

      529, 1093, 1094, 1095, 1096,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529, 1093, 1094, 1095, 1096,  530,  531,  531,  532,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  534,  535,  535,  536, 1350,
      537,  538,  539, 1350,  540,  541,  542,  543,  544,  545,
      546,  547, 1350,  548,  549,  550,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  858,  858,  858,  858,  858,  858,

      858,  858,  858,  860,  861,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866, 1350,  863,  863,  863,  863,  863,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  229,  230, 1350,  229,  229,  229,  229,
      229,  229,  229,  229,  231,  992,  992,  992,  992,  989,
      989,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232, 1097, 1098, 1099, 1100,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232, 1097, 1098, 1099, 1100,
      239,  240,  240,  241,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      243,  244,  244,  245, 1101,  246,  247,  248,  249,  250,
      251,  252,  253,  254,  255,  256,  257,  941,  258,  259,
      260,  950,  951, 1102, 1103, 1104, 1105, 1107,  942,  952,
      779,  779,  820,  820, 1101,  953,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  853,  853,  941,  777, 1350,
      818,  950,  951, 1102, 1103, 1104, 1105, 1107,  942,  952,

      997,  998, 1350,  851, 1350,  953,  964,  965, 1350,  964,
      964,  964,  964,  964,  964,  964,  964, 1350, 1350, 1000,
     1000, 1000, 1000, 1000,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966, 1108,
     1109, 1110, 1111,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966, 1108,
     1109, 1110, 1111,  967,  968,  968,  969,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  970,  971,  972,  972,  973, 1350,  974,  975,
      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
     1350,  986,  987,  988,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  995,  995,  995,  995,  995,  995,  995,
      995,  995, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006,  713,  712, 1350, 1350, 1350, 1350,
      712, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,

     1018, 1018, 1018, 1018, 1018, 1018, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020,  735,  735,  735,  735,  735,  735, 1246,  714,
      712, 1147, 1147, 1350, 1350,  712, 1350, 1247, 1350,  712,
     1027, 1027, 1027, 1027, 1027, 1027, 1248,  712, 1350, 1145,
      712, 1350,  712, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,  715,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,  779,
      779,  779,  779,  779,  779,  716, 1350,  717,  717,  717,
      717,  717,  717,  718,  719,  719,  719,  719,  720,  721,

      721,  722,  723,  724, 1013,   97,  760, 1350, 1350, 1350,
     1350,  760, 1045, 1045, 1045, 1045, 1045, 1045, 1350, 1350,
     1350,   98, 1350,   99,   99,   99,   99,   99,   99,  100,
      101,  101,  101,  101,  102,  103,  103,  104,  105,  106,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1350, 1350, 1350,  714,
     1350,  760, 1350, 1112, 1113, 1350,  760, 1350, 1114, 1350,
      760,  820,  820,  820,  820,  820,  820, 1350,  760, 1350,
     1049,  760, 1049,  760, 1115, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1112, 1113, 1051, 1350, 1051, 1114,  715,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1061, 1061,
     1061, 1061, 1061, 1061, 1115,  716, 1350,  717,  717,  717,
      717,  717,  717,  718,  719,  719,  719,  719,  720,  721,
      721,  722,  723,  724,  348, 1038, 1038, 1038, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
     1038,  805,  805,  805,  805,  805,  805,  805,  805,  808,
      808,  808,  808,  808,  808,  808,  808, 1350, 1116, 1350,
      806,  808,  808,  808,  808,  808,  808,  808,  808,  853,
      853,  853,  853,  853,  853, 1053, 1350, 1053, 1350,   85,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1116, 1055,

      806, 1055, 1350, 1350, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813, 1350,   86,
      815,  815,  815,  815,  815,  815,  815,  815, 1069, 1069,
     1069, 1069, 1069, 1069, 1117,   87, 1118,   88,   88,   88,
       88,   88,   88,   89,   90,   90,   90,   90,   91,   92,
       92,   93,   94,   95,  368,  368,  368,  368,  368,  368,
      368,  368, 1350, 1350, 1117, 1119, 1118, 1120, 1350,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369, 1121, 1119, 1122, 1120,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369, 1121, 1350, 1122, 1350,  370,  371,
      371,  372,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  374,  375,
      375,  376,  196,  377,  378,  379, 1350,  380,  381,  382,
      383,  384,  385,  386,  387, 1350,  388,  389,  390,  761,
     1350,  810,  810,  810,  810,  810,  810,  810,  810,  815,
      815,  815,  815,  815,  815,  815,  815, 1123, 1124, 1350,

      811,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817, 1327, 1125, 1149,
     1149, 1149, 1149, 1146, 1146, 1350, 1247, 1123, 1124,  762,
      811,  197, 1350, 1350, 1350, 1248, 1130, 1131, 1132, 1350,
     1133, 1134, 1136, 1137, 1138, 1135, 1139,  198, 1125,  199,
      199,  199,  199,  199,  199,  200,  201,  201,  201,  201,
      202,  203,  203,  204,  205,  206, 1130, 1131, 1132,  763,
     1133, 1134, 1136, 1137, 1138, 1135, 1139, 1140, 1141, 1142,
     1143, 1144, 1350, 1350, 1350,  764, 1350,  765,  765,  765,
      765,  765,  765,  766,  767,  767,  767,  767,  768,  769,

      769,  770,  771,  772, 1031, 1350, 1350, 1140, 1141, 1142,
     1143, 1144, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1152, 1152, 1152, 1152,  966, 1152, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1156, 1157, 1163, 1163, 1163,
     1163, 1164, 1350, 1350,  762,  990,  990,  990,  990,  990,
      990, 1191, 1192, 1193, 1159, 1159, 1159, 1159, 1159, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1171, 1171, 1171, 1171, 1171,
     1171, 1191, 1192, 1193,  763, 1050, 1050, 1050, 1050, 1050,

     1050, 1050, 1050, 1147, 1147, 1147, 1147, 1147, 1147, 1350,
      764, 1350,  765,  765,  765,  765,  765,  765,  766,  767,
      767,  767,  767,  768,  769,  769,  770,  771,  772,  410,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165,  589,  590, 1194, 1350,
     1350,  589,  590, 1350, 1350, 1350, 1350, 1350, 1175, 1350,
     1350, 1350, 1350, 1176, 1350,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592, 1350, 1350, 1350, 1194,  130,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1242, 1242, 1242, 1242, 1242, 1242, 1350,  131,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1350, 1350,
     1350, 1350, 1195, 1196, 1197,  132, 1198,  133,  133,  133,
      133,  133,  133,  134,  135,  135,  135,  135,  136,  137,
      137,  138,  139,  140,  421,  421,  421,  421,  421,  421,
      421,  421, 1195, 1196, 1197, 1199, 1198, 1200, 1350,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422, 1201, 1199, 1202, 1200,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422, 1201, 1350, 1202, 1350,  423,  424,
      424,  425,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  427,  428,
      428,  429, 1203,  430,  431,  432, 1204,  433,  434,  435,
      436,  437,  438,  439,  440, 1350,  441,  442,  443,  475,
      476, 1350,  475,  475,  475,  475,  475,  475,  475,  475,
     1350, 1350, 1203, 1206, 1207, 1208, 1204,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477, 1209, 1206, 1207, 1208,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477, 1209, 1350, 1350, 1350,  478,  479,  479,  480,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  482,  483,  483,  484,
     1210,  485,  486,  487,  488,  489,  490,  491,  492,  493,
      494,  495,  496, 1350,  497,  498,  499,  528,  528,  528,
      528,  528,  528,  528,  528, 1350, 1350, 1211, 1212, 1213,

     1210, 1350,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529, 1211, 1212, 1213,
     1214,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529, 1350, 1350, 1215,
     1214,  530,  531,  531,  532,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  534,  535,  535,  536, 1216,  537,  538,  539, 1215,
      540,  541,  542,  543,  544,  545,  546,  547, 1350,  548,

      549,  550,  229,  230, 1350,  229,  229,  229,  229,  229,
      229,  229,  229,  231, 1350, 1216, 1217, 1218, 1219, 1350,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232, 1220, 1217, 1218, 1219,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232, 1220, 1350, 1350, 1350,  239,
      240,  240,  241,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  243,

      244,  244,  245, 1221,  246,  247,  248,  249,  250,  251,
      252,  253,  254,  255,  256,  257, 1350,  258,  259,  260,
      964,  965, 1350,  964,  964,  964,  964,  964,  964,  964,
      964, 1350, 1350, 1221, 1222, 1223, 1229, 1350,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966, 1230, 1222, 1223, 1229,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966, 1230, 1350, 1350, 1350,  967,  968,  968,

      969,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  971,  972,  972,
      973, 1231,  974,  975,  976,  977,  978,  979,  980,  981,
      982,  983,  984,  985, 1350,  986,  987,  988,  229,  230,
     1350,  229,  229,  229,  229,  229,  229,  229,  229,  231,
     1350, 1231, 1232, 1233, 1234, 1350,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232, 1235, 1232, 1233, 1234,  232,  232,  232,  232,  232,
     1174,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232, 1235, 1350, 1350, 1350,  239,  240,  240,  241,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  243,  244,  244,  245, 1350,
      246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
      256,  257, 1236,  258,  259,  260, 1177, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1237, 1249, 1252, 1253, 1254, 1255, 1256,
     1257, 1350, 1236, 1259, 1260, 1262, 1264, 1265, 1250, 1266,
     1267, 1268, 1269, 1270, 1251, 1271, 1272, 1273, 1274, 1275,

     1280, 1281, 1282, 1237, 1283, 1252, 1253, 1254, 1255, 1256,
     1257,  714, 1284, 1259, 1260, 1262, 1264, 1265, 1288, 1266,
     1267, 1268, 1269, 1270, 1289, 1271, 1272, 1273, 1274, 1275,
     1280, 1281, 1282, 1290, 1283, 1291, 1292, 1350, 1295, 1328,
     1350, 1350, 1284, 1350, 1350, 1350, 1350, 1350, 1288, 1350,
     1350,  715, 1350, 1250, 1289, 1350, 1350, 1350, 1350, 1251,
     1350, 1350, 1350, 1290, 1296, 1291, 1292,  716, 1295,  717,
      717,  717,  717,  717,  717,  718,  719,  719,  719,  719,
      720,  721,  721,  722,  723,  724,  368,  368,  368,  368,
      368,  368,  368,  368, 1296, 1350, 1298, 1300, 1301, 1302,

     1350,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369, 1298, 1300, 1301, 1302,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369, 1350, 1350, 1303, 1350,
      370,  371,  371,  372,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      374,  375,  375,  376, 1304,  377,  378,  379, 1303,  380,
      381,  382,  383,  384,  385,  386,  387, 1305,  388,  389,

      390, 1183, 1258, 1258, 1258, 1258, 1263, 1263, 1263, 1263,
     1310, 1311, 1312, 1350, 1304, 1350, 1350, 1350, 1350, 1315,
     1316, 1350, 1317, 1319, 1320,  589,  590, 1305, 1321, 1322,
     1323, 1324, 1325, 1326, 1329, 1330, 1331, 1313, 1332, 1293,
     1310, 1311, 1312, 1299,  592,  592,  592,  592,  592, 1315,
     1316,  762, 1317, 1319, 1320,  589,  590, 1294, 1321, 1322,
     1323, 1324, 1325, 1326, 1329, 1330, 1331, 1314, 1332, 1293,
     1333, 1334, 1335, 1299,  592,  592,  592,  592,  592, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1294, 1350, 1350,
     1350,  763, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1333, 1334, 1335, 1350, 1336, 1337, 1338,  764, 1339,  765,
      765,  765,  765,  765,  765,  766,  767,  767,  767,  767,
      768,  769,  769,  770,  771,  772,  421,  421,  421,  421,
      421,  421,  421,  421, 1336, 1337, 1338, 1340, 1339, 1341,
     1350,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422, 1342, 1340, 1343, 1341,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422, 1342, 1350, 1343, 1350,

      423,  424,  424,  425,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      427,  428,  428,  429, 1347,  430,  431,  432, 1348,  433,
      434,  435,  436,  437,  438,  439,  440, 1350,  441,  442,
      443,  475,  476, 1350,  475,  475,  475,  475,  475,  475,
      475,  475, 1350, 1350, 1347, 1349, 1350, 1350, 1348,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477, 1350, 1349, 1350, 1350,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477, 1350, 1350, 1350, 1350,  478,  479,
      479,  480,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  482,  483,
      483,  484, 1350,  485,  486,  487,  488,  489,  490,  491,
      492,  493,  494,  495,  496, 1350,  497,  498,  499,  528,
      528,  528,  528,  528,  528,  528,  528, 1350, 1350, 1350,
     1350, 1350, 1350, 1350,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529, 1350,

     1350, 1350, 1350,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529, 1350,
     1350, 1350, 1350,  530,  531,  531,  532,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  534,  535,  535,  536, 1350,  537,  538,
      539, 1350,  540,  541,  542,  543,  544,  545,  546,  547,
     1350,  548,  549,  550,  229,  230, 1350,  229,  229,  229,
      229,  229,  229,  229,  229,  231, 1350, 1350, 1350, 1350,
     1350, 1350,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232, 1350, 1350, 1350,
     1350,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232, 1350, 1350, 1350,
     1350,  239,  240,  240,  241,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  243,  244,  244,  245, 1350,  246,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257, 1350,  258,
      259,  260,  964,  965, 1350,  964,  964,  964,  964,  964,

      964,  964,  964, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966, 1350, 1350, 1350, 1350,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966, 1350, 1350, 1350, 1350,  967,
      968,  968,  969,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  971,
      972,  972,  973, 1350,  974,  975,  976,  977,  978,  979,

      980,  981,  982,  983,  984,  985, 1350,  986,  987,  988,
      713, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350,  714, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350,  715, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350,  716, 1350,  717,  717,  717,  717,  717,  717,  718,
      719,  719,  719,  719,  720,  721,  721,  722,  723,  724,
      368,  368,  368,  368,  368,  368,  368,  368, 1350, 1350,
     1350, 1350, 1350, 1350, 1350,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
     1350, 1350, 1350, 1350,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
     1350, 1350, 1350, 1350,  370,  371,  371,  372,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  374,  375,  375,  376, 1350,  377,
      378,  379, 1350,  380,  381,  382,  383,  384,  385,  386,
      387, 1350,  388,  389,  390,  761, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350,  762, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350,  763, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350,  764, 1350,  765,  765,  765,  765,  765,  765,  766,
      767,  767,  767,  767,  768,  769,  769,  770,  771,  772,
      421,  421,  421,  421,  421,  421,  421,  421, 1350, 1350,
     1350, 1350, 1350, 1350, 1350,  422,  422,  422,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
     1350, 1350, 1350, 1350,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
     1350, 1350, 1350, 1350,  423,  424,  424,  425,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  427,  428,  428,  429, 1350,  430,
      431,  432, 1350,  433,  434,  435,  436,  437,  438,  439,
      440, 1350,  441,  442,  443,  475,  476, 1350,  475,  475,

      475,  475,  475,  475,  475,  475, 1350, 1350, 1350, 1350,
     1350, 1350, 1350,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477, 1350, 1350,
     1350, 1350,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477, 1350, 1350,
     1350, 1350,  478,  479,  479,  480,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  482,  483,  483,  484, 1350,  485,  486,  487,

      488,  489,  490,  491,  492,  493,  494,  495,  496, 1350,
      497,  498,  499,  528,  528,  528,  528,  528,  528,  528,
      528, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529, 1350, 1350, 1350, 1350,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529, 1350, 1350, 1350, 1350,  530,  531,  531,
      532,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  534,  535,  535,
      536, 1350,  537,  538,  539, 1350,  540,  541,  542,  543,
      544,  545,  546,  547, 1350,  548,  549,  550,   83, 1350,
       83,   83,   83,   83, 1350,   83, 1350, 1350,   83,   96,
     1350,   96,   96,   96,   96, 1350,   96, 1350, 1350,   96,
      128, 1350,  128,  128,  128,  128, 1350,  128, 1350, 1350,
      128,  194,  194,  194,  194, 1350,  194, 1350, 1350,  194,
      326,  326,  326,  326,  326,  327,  327,  327,  327,  327,
      329,  329,  329,  329,  329,  330,  330,  330,  330,  330,
      331,  331, 1350,  331,  331,  332,  332,  332,  332,  332,

      334,  334,  334,  334,  334,  337,  337,  337,  337,  337,
      342,  342,  342,  342,  342,  347,  347,  347,  347,  347,
       83, 1350,   83,   83,   83,   83, 1350,   83, 1350, 1350,
       83,  350,  350,  350,  350,  351,  351,  351,   83,   83,
       83,   83,   83,  353,  353,  353,  353,  353,  355,  355,
      355,  355,  355,  357,  357,  357,  357,  357,   96, 1350,
       96,   96,   96,   96, 1350,   96, 1350, 1350,   96,  359,
      359,  359,  359,  360,  360,  360,   96,   96,   96,   96,
       96,  362,  362,  362,  362,  362,  364,  364,  364,  364,
      364,  366,  366,  366,  366,  366,  391,  391,  391,  391,

      391,  392,  392,  392,  392,  392,  394,  394,  394,  394,
      394,  395,  395,  395,  395,  395,  107,  107, 1350,  107,
      107,  396,  396,  396,  396,  396,  398,  398,  398,  398,
      398,  401,  401,  401,  401,  401,  404,  404,  404,  404,
      404,  409,  409,  409,  409,  409,  128, 1350,  128,  128,
      128,  128, 1350,  128, 1350, 1350,  128,  412,  412,  412,
      412,  413,  413,  413,  128,  128,  128,  128,  128,  415,
      415,  415,  415,  415,  417,  417,  417,  417,  417,  419,
      419,  419,  419,  419,  444,  444,  444,  444,  444,  445,
      445,  445,  445,  445,  447,  447,  447,  447,  447,  448,

      448,  448,  448,  448,  143,  143, 1350,  143,  143,  449,
      449,  449,  449,  449,  451,  451,  451,  451,  451,  454,
      454,  454,  454,  454,  457,  457,  457,  457,  457,  462,
      462,  462,  462,  462,  500,  500,  500,  500,  500,  501,
      501,  501,  501,  501,  503,  503,  503,  503,  503,  504,
      504,  504,  504,  504,  174,  174, 1350,  174,  174,  505,
      505,  505,  505,  505,  507,  507,  507,  507,  507,  510,
      510,  510,  510,  510,  513,  513,  513,  513,  513,  518,
      518,  518,  518,  518,  194,  194,  194,  194, 1350,  194,
     1350, 1350,  194,  519,  519,  519,  519,  520,  520,  520,

      194,  194,  194,  194,  194,  522,  522,  522,  522,  522,
      524,  524,  524,  524,  524,  526,  526,  526,  526,  526,
      551,  551,  551,  551,  551,  552,  552,  552,  552,  552,
      554,  554,  554,  554,  554,  555,  555,  555,  555,  555,
      208,  208, 1350,  208,  208,  556,  556,  556,  556,  556,
      558,  558,  558,  558,  558,  561,  561,  561,  561,  561,
      564,  564,  564,  564,  564,  569,  569,  569,  569,  569,
      228, 1350,  228,  579,  579,  579,  579,  579,  580,  580,
      580,  580,  580,  582,  582,  582,  582,  582,  583,  583,
      583,  583,  583,  232,  232, 1350,  232,  232,  584,  584,

      584,  584,  584,  586,  586,  586,  586,  586,  588,  588,
      588,  588,  588,  591,  591,  591,  591,  591,  594,  594,
      594,  594,  594,  599,  599,  599,  599,  599,  332,  332,
      332,  332,  332,  701,  701,  701,  701,  701,  326,  326,
      326,  326,  326,  706,  706,  706,  706,  706,  707,  707,
      707,  707,  707,  708,  708,  708,  708,  708,  710,  710,
      710,  710,  710,  711,  711,  711,  711,  711,  712,  712,
      712,  712,  712,  712, 1350,  712, 1350, 1350,  712,  351,
      351,  351,  351,  351,   83,   83,   83,   83,   83,  725,
      725,  725,  725,  725,  726,  726,  726,  726,  726,  727,

      727,  727,  727,  727,  728,  728,  728,  728,  728,  360,
      360,  360,  360,  360,   96,   96,   96,   96,   96,  729,
      729,  729,  729,  729,  730,  730,  730,  730,  730,  731,
      731,  731,  731,  731,  732,  732,  732,  732,  732,  734,
      734,  734,  734,  734,  735,  735,  735,  735,  735,  737,
      737,  737,  737,  737,  738,  738,  738,  738,  738,  369,
      369, 1350,  369,  369,  368,  368,  368, 1350,  368,  739,
      739,  739,  739,  739,  741,  741,  741,  741,  741,  744,
      744,  744,  744,  744,  747,  747,  747,  747,  747,  752,
      752,  752,  752,  752,  396,  396,  396,  396,  396,  753,

      753,  753,  753,  753,  391,  391,  391,  391,  391,  754,
      754,  754,  754,  754,  755,  755,  755,  755,  755,  756,
      756,  756,  756,  756,  758,  758,  758,  758,  758,  759,
      759,  759,  759,  759,  760,  760,  760,  760,  760,  760,
     1350,  760, 1350, 1350,  760,  413,  413,  413,  413,  413,
      128,  128,  128,  128,  128,  773,  773,  773,  773,  773,
      774,  774,  774,  774,  774,  775,  775,  775,  775,  775,
      776,  776,  776,  776,  776,  778,  778,  778,  778,  778,
      779,  779,  779,  779,  779,  781,  781,  781,  781,  781,
      782,  782,  782,  782,  782,  422,  422, 1350,  422,  422,

      421,  421,  421, 1350,  421,  783,  783,  783,  783,  783,
      785,  785,  785,  785,  785,  788,  788,  788,  788,  788,
      791,  791,  791,  791,  791,  796,  796,  796,  796,  796,
      449,  449,  449,  449,  449,  797,  797,  797,  797,  797,
      444,  444,  444,  444,  444,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  800,  800,  800,  800,  800,
      802,  802,  802,  802,  802,  803,  803,  803,  803,  803,
      819,  819,  819,  819,  819,  820,  820,  820,  820,  820,
      822,  822,  822,  822,  822,  823,  823,  823,  823,  823,
      477,  477, 1350,  477,  477,  824,  824,  824,  824,  824,

      826,  826,  826,  826,  826,  828,  828,  828,  828,  828,
      831,  831,  831,  831,  831,  834,  834,  834,  834,  834,
      839,  839,  839,  839,  839,  505,  505,  505,  505,  505,
      840,  840,  840,  840,  840,  500,  500,  500,  500,  500,
      841,  841,  841,  841,  841,  842,  842,  842,  842,  842,
      843,  843,  843,  843,  843,  845,  845,  845,  845,  845,
      846,  846,  846,  846,  846,  520,  520,  520,  520,  520,
      194,  194,  194,  194,  194,  847,  847,  847,  847,  847,
      848,  848,  848,  848,  848,  849,  849,  849,  849,  849,
      850,  850,  850,  850,  850,  852,  852,  852,  852,  852,

      853,  853,  853,  853,  853,  855,  855,  855,  855,  855,
      856,  856,  856,  856,  856,  529,  529, 1350,  529,  529,
      528,  528,  528, 1350,  528,  857,  857,  857,  857,  857,
      859,  859,  859,  859,  859,  862,  862,  862,  862,  862,
      865,  865,  865,  865,  865,  870,  870,  870,  870,  870,
      556,  556,  556,  556,  556,  871,  871,  871,  871,  871,
      551,  551,  551,  551,  551,  872,  872,  872,  872,  872,
      873,  873,  873,  873,  873,  874,  874,  874,  874,  874,
      876,  876,  876,  876,  876,  877,  877,  877,  877,  877,
      878,  878,  586,  586,  586,  586,  586,  879,  879,  879,

      879,  879,  579,  579,  579,  579,  579,  880,  880,  880,
      880,  880,  881,  881,  881,  881,  881,  882,  882,  882,
      882,  882,  884,  884,  884,  884,  884,  885,  885,  885,
      885,  885,  989,  989,  989,  989,  989,  990,  990,  990,
      990,  990,  992,  992,  992,  992,  992,  993,  993,  993,
      993,  993,  679,  679, 1350,  679,  679,  994,  994,  994,
      994,  994,  996,  996,  996,  996,  996,  999,  999,  999,
      999,  999, 1002, 1002, 1002, 1002, 1002, 1007, 1007, 1007,
     1007, 1007, 1012, 1012, 1012, 1012, 1012,  712,  712,  712,
      712,  712,  712, 1350,  712, 1350, 1350,  712, 1014, 1014,

     1014, 1014, 1015, 1015, 1015,  712,  712,  712,  712,  712,
     1017, 1017, 1017, 1017, 1017, 1019, 1019, 1019, 1019, 1019,
     1021, 1021, 1021, 1021, 1021,   83, 1350,   83,   83,   83,
       83, 1350,   83, 1350, 1350,   83,   83,   83,   83,   83,
       83,  351,  351,  351,  351,  351,   96, 1350,   96,   96,
       96,   96, 1350,   96, 1350, 1350,   96,   96,   96,   96,
       96,   96,  360,  360,  360,  360,  360,  739,  739,  739,
      739,  739, 1023, 1023, 1023, 1023, 1023,  734,  734,  734,
      734,  734, 1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025,
     1025, 1025, 1026, 1026, 1026, 1026, 1026, 1028, 1028, 1028,

     1028, 1028, 1029, 1029, 1029, 1029, 1029, 1030, 1030, 1030,
     1030, 1030,  760,  760,  760,  760,  760,  760, 1350,  760,
     1350, 1350,  760, 1032, 1032, 1032, 1032, 1033, 1033, 1033,
      760,  760,  760,  760,  760, 1035, 1035, 1035, 1035, 1035,
     1037, 1037, 1037, 1037, 1037, 1039, 1039, 1039, 1039, 1039,
      128, 1350,  128,  128,  128,  128, 1350,  128, 1350, 1350,
      128,  128,  128,  128,  128,  128,  413,  413,  413,  413,
      413,  783,  783,  783,  783,  783, 1041, 1041, 1041, 1041,
     1041,  778,  778,  778,  778,  778, 1042, 1042, 1042, 1042,
     1042, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044, 1044,

     1044, 1046, 1046, 1046, 1046, 1046, 1047, 1047, 1047, 1047,
     1047, 1048, 1048, 1048, 1048, 1048,  826,  826,  826,  826,
      826, 1057, 1057, 1057, 1057, 1057,  819,  819,  819,  819,
      819, 1058, 1058, 1058, 1058, 1058, 1059, 1059, 1059, 1059,
     1059, 1060, 1060, 1060, 1060, 1060, 1062, 1062, 1062, 1062,
     1062, 1063, 1063, 1063, 1063, 1063, 1064, 1064, 1064, 1064,
     1064,  194,  194,  194,  194, 1350,  194, 1350, 1350,  194,
      194,  194,  194,  194,  194,  520,  520,  520,  520,  520,
      857,  857,  857,  857,  857, 1065, 1065, 1065, 1065, 1065,
      852,  852,  852,  852,  852, 1066, 1066, 1066, 1066, 1066,

     1067, 1067, 1067, 1067, 1067, 1068, 1068, 1068, 1068, 1068,
     1070, 1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071,
     1072, 1072, 1072, 1072, 1072,  878,  878,  878, 1073, 1073,
     1073, 1073, 1073, 1146, 1146, 1146, 1146, 1146, 1147, 1147,
     1147, 1147, 1147, 1149, 1149, 1149, 1149, 1149, 1150, 1150,
     1150, 1150, 1150,  966,  966, 1350,  966,  966, 1151, 1151,
     1151, 1151, 1151, 1153, 1153, 1153, 1153, 1153, 1155, 1155,
     1155, 1155, 1155, 1158, 1158, 1158, 1158, 1158, 1161, 1161,
     1161, 1161, 1161, 1166, 1166, 1166, 1166, 1166,  994,  994,
      994,  994,  994, 1167, 1167, 1167, 1167, 1167,  989,  989,

      989,  989,  989, 1168, 1168, 1168, 1168, 1168, 1169, 1169,
     1169, 1169, 1169, 1170, 1170, 1170, 1170, 1170, 1172, 1172,
     1172, 1172, 1172, 1173, 1173, 1173, 1173, 1173,  591,  591,
      591,  591,  591,  712,  712,  712,  712,  712,  712, 1350,
      712, 1350, 1350,  712, 1015, 1015, 1015, 1015, 1015,  712,
      712,  712,  712,  712, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179, 1179, 1179, 1180, 1180, 1180, 1180, 1180, 1181,
     1181, 1181, 1181, 1181, 1182, 1182, 1182, 1182, 1182,  760,
      760,  760,  760,  760,  760, 1350,  760, 1350, 1350,  760,
     1033, 1033, 1033, 1033, 1033,  760,  760,  760,  760,  760,

     1184, 1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185,
     1186, 1186, 1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187,
     1188, 1188, 1188, 1188, 1188, 1189, 1189, 1189, 1189, 1189,
     1190, 1190, 1190, 1190, 1190, 1153, 1153, 1153, 1153, 1153,
     1238, 1238, 1238, 1238, 1238, 1146, 1146, 1146, 1146, 1146,
     1239, 1239, 1239, 1239, 1239, 1240, 1240, 1240, 1240, 1240,
     1241, 1241, 1241, 1241, 1241, 1243, 1243, 1243, 1243, 1243,
     1244, 1244, 1244, 1244, 1244, 1245, 1245, 1245, 1245, 1245,
      579,  579,  579,  579,  579,  712,  712,  712,  712,  712,
      712, 1350,  712, 1350, 1350,  712,  712,  712,  712,  712,

      712, 1015, 1015, 1015, 1015, 1015,  760,  760,  760,  760,
      760,  760, 1350,  760, 1350, 1350,  760,  760,  760,  760,
      760,  760, 1033, 1033, 1033, 1033, 1033, 1285, 1285, 1285,
     1285, 1285,  591,  591,  591,  591,  591,  579,  579,  579,
      579,  579,    3, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
    } ;

static yyconst flex_int16_t yy_chk[9780] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,   10,   80,    5,
        9,   80,   14,   14,   14,   14,   51,   51,   51,   51,
      163, 1355,  163,   10,   14,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   17,   17, 1345,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19, 1344,   19,   19,   19,   19,
       19,   19,   19,   19, 1342,    9,  335,  335,   19,   20,

       20,   20,   20,   20,   20,   20,   20,   51,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   66,   66,   66,   66,
       66,   66,   68,  399,  399,    9,   69,   69,   69,   69,
       68,   69,   71,   71,   71,   71,   71,   71,   71,   71,
       71,    9, 1328,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   77,   77,
       77,   77,   77,  233, 1327,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
      234,  235,  236,  233,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
      234,  235,  236, 1297,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,  452,  452,
       11,   11, 1279,   11,   11,   11,   11,   11,   11,   11,
       11, 1278,   11,   11,   11,   13,   22, 1277,   22,   22,
       22,   22,   22,   22,   22,   22,  115,  151,   31,   31,

      182,   31,  216, 1276,  115,  151,   31,   22,  182,   31,
      216,   31,   31,   37,   37,   31,   37,  237,   31,  508,
      508,   31,  238, 1261,   37,  237,   37,   37,   31,   31,
       37,   31,  248,   37,  261,   13,   31,   22, 1251,   31,
      248,   31,   31,   37,   37,   31,   37,  237,   31,   73,
       73,   31,  238,   73,   37,  237,   37,   37,  249,  379,
       37,   73,  262,   37,  261,  432,  249,  379,   73,   73,
       73,   73,   73,  432, 1249,   13,   89,   89,   89,   89,
       89,   89,   89,   89,   89,  113,  113,  113,  113,  113,
      113,   13,  262,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       16,   16,   16,   16,   16,   16,   16,   16,  116,  116,
      116,  116,  263,  116, 1248,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      264,  266,  263,  267,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      264,  266,  269,  267,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   16,  272,  273,
       16,   16,  269,   16,   16,   16,   16,   16,   16,   16,
       16, 1246,   16,   16,   16,   23,   23,   23,   23,   23,
       23,   23,   23,  124,  124,  124,  124,  124,  272,  273,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  274,  274,  275,  276,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  274,  274,  275,  276,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  559,  559,   23,   23, 1228,   23,   23,
       23,   23,   23,   23,   23,   23, 1227,   23,   23,   23,
       25,   25,   32,  277,   32,   32,  270, 1226,   85, 1225,
      278,  270,   32,   85,   32,   32, 1202,   32,   32,  280,
      281,   32, 1160,  152,  152,  152,  152,   39,  152,   39,
      283,  283,   32,  277,   32,   32,  270,   39, 1129,   39,
      278,  270,   32,   39,   32,   32,   39,   32,   32,  280,
      281,   32,  141,  141,  141,  141, 1128,   39,  487,   39,

      283,  283, 1127,   85,  141, 1127,  487,   39,   85,   39,
       25,  339,   85,   39,  488,  339,   39,  997,  997,  539,
       85,  339,  488,   85, 1126,   85,   25,  539,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   28,   28,   28,   28,   28,
       28,   28,   28,  149,  149,  149,  149,  149,  149, 1094,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  284,  286,  287,  288,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  284,  286,  287,  288,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28, 1033, 1015,   28,   28,  289,   28,   28,
       28,   28,   28,   28,   28,   28, 1012,   28,   28,   28,
       30,   30, 1009,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  160,  160,  160,  160,  160,  289,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,  290,  292,  293,  295,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  290,  292,  293,  295,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30, 1001,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  983,   30,   30,   30,   33,   33,
      294,   33,   33,  279,  297,  296,   33,  294,  296,   33,
      974,   33,  967,  298,   33,   33,  299,  279,   33,   95,

       95,   95,   95,   95,   95,   95,   95,  926,   33,   33,
      294,   33,   33,  279,  297,  296,   33,  294,  296,   33,
       34,   33,   34,  298,   33,   33,  299,  279,   33,  878,
       34,  864,   34,  300,  833,  790,   34,  300,  746,   34,
      301,   34,  180,  180,  180,  180,  180,  180,  303,   35,
       34,   35,   34,  120,  120,  705,   35,  704,  304,   35,
       34,   35,   34,  300,   35,   35,   34,  300,   35,   34,
      301,   34,  120,  120,  120,  120,  120,  700,  303,   35,
      306,   35,  183,  183,  183,  183,   35,  183,  304,   35,
       36,   35,   36,  307,   35,   35,  699,  308,   35,  310,

       36,  302,   36,  312,  302,   36,   36,   47,  693,   36,
      306,   47,  663,  308,   47,   47,  314,  315,  641,  316,
       36,   47,   36,  307,  593,   47,   47,  308,  563,  310,
       36,  302,   36,  312,  302,   36,   36,   47,   38,   36,
       38,   47,   38,  308,   47,   47,  314,  315,   38,  316,
       38,   47,  317,   38,   38,   47,   47,   38,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  545,   38,  537,
       38,  687,   38,  191,  191,  191,  191,  191,   38,  687,
       38,  530,  317,   38,   38,  589,  589,   38,   40,   40,
       40,   40,  217,  217,  217,  217,   40,  217,  318,   40,

      600,   40,   40,  589,  520,   40,  512,  494,   40,  106,
      106,  106,  106,  106,  106,  106,  106,  485,   40,   40,
       40,   40,  380,  380,  380,  380,   40,  380,  318,   40,
      600,   40,   40,   41,   41,   40,   41,   41,   40,  601,
      602,   41,  603,  604,   41,  605,   41,   41,   42,   42,
       41,   42,  606,   41,  225,  225,  225,  225,  225,   42,
      608,   42,   42,   41,   41,   42,   41,   41,   42,  601,
      602,   41,  603,  604,   41,  605,   41,   41,   42,   42,
       41,   42,  606,   41,  258,  258,  258,  258,  258,   42,
      608,   42,   42,  478,  463,   42,   49,   43,   42,   43,

       49,   43,  609,   49,   49,  610,  611,   43,  456,   43,
      438,   43,   43,   43,   49,   49,   43,  110,  110,  110,
      110,  110,  110,  110,  110,  110,   49,   43,  613,   43,
       49,   43,  609,   49,   49,  610,  611,   43,   44,   43,
       44,   43,   43,   43,   49,   49,   43,  305,   44,  430,
       44,  614,  423,   44,   44,  413,  305,   44,  613,  615,
      305,  305,   45,   45,  616,   45,   45,  403,   44,  385,
       44,  377,  370,   45,  309,   45,   45,  305,   44,   45,
       44,  614,   45,   44,   44,  309,  305,   44,  617,  615,
      305,  305,   45,   45,  616,   45,   45,  214,  214,  214,

      214,  214,  214,   45,  309,   45,   45,  360,  351,   45,
      742,  742,   45,   46,   46,  309,   46,   46,  617,  618,
       46,   46,  619,  620,   46,  621,   46,  341,  742,  338,
       46,   46,   46,   46,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   46,   46,  622,   46,   46,  324,  618,
       46,   46,  619,  620,   46,  621,   46,   48,   48,   48,
       46,   46,   46,   46,  623,  271,  624,   48,  625,   48,
      626,  271,   48,   48,   50,  622,   48,  271,   50,  323,
      313,   50,   50,  291,  627,  313,  255,   48,   48,   48,
      246,  313,   50,   50,  623,  271,  624,   48,  625,   48,

      626,  271,   48,   48,   50,  628,   48,  271,   50,   56,
      313,   50,   50,   56,  627,  313,   56,   56,  629,  631,
       56,  313,   50,   50,  632,   56,   57,   56,   56,  633,
       57,  634,  635,   57,   57,  628,  239,  230,  228,   56,
       57,  636,  222,   56,   57,   57,   56,   56,  629,  631,
       56,  188,  157,  129,  632,   56,   57,   56,   56,  633,
       57,  634,  635,   57,   57,  388,  388,  388,  388,  388,
       57,  636,   57,  121,   57,   57,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   83,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,  441,  441,  441,  441,  441,   96,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  245,  245,  245,  245,
      245,  245,   96,   83,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  250,  250,  250,

      250,  250,  250,   83,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  336,  336,  336,  336,  336,  336,   83,
       84,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  107,  107,  107,  107,  107,  107,
      107,  107,   74,  319,  319,  319,  319,  637,   59,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   54,  638,  639,  637,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  319,  638,  639,   53,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   27,  107,  107,  107,   12,  107,  107,  107,
      107,  107,  107,  107,  107,    8,  107,  107,  107,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  128,  130, 1199, 1199, 1199, 1199,  130,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      140,  140,  140,  140,  140,  140,  140,  140,  156,  156,
        7,  128,    3,  433,  433,  433,  433,  130,  433,  642,
      643,    0,  130,    0,  976,  977,  130,  156,  156,  156,
      156,  156,  976,  977,  130,    0,    0,  130,  644,  130,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  642,
      643,  128,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  345,  345,  345,  345,  345,  345,  128,  644,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  143,  143,  143,  143,
      143,  143,  143,  143,  376,  376,  376,  376,  376,  376,
        0,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  645,  646,  649,  650,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  645,  646,  649,  650,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,    0,  143,  143,  143,    0,  143,
      143,  143,  143,  143,  143,  143,  143,    0,  143,  143,
      143,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  164,  164,  164,  164,  164,  164,  164,  164,
      165,    0,  165,  165,  165,  165,  165,  165,  165,  165,

      167,  167,  167,  167,  167,  167,  167,  167,  651,    0,
      168,  165,  168,  168,  168,  168,  168,  168,  168,  168,
      170,  170,  170,  170,  170,  170,  170,  170,    0,    0,
        0,  168,  400,  400,  400,  400,  400,  400,  651,  170,
        0,  165,    0,  171,  171,  171,  171,  171,  171,  171,
      171,  172,    0,  172,  172,  172,  172,  172,  172,  172,
      172,  168,  171,  497,  497,  497,  497,  497,  173,  170,
      173,    0,  172,  173,  173,  173,  173,  173,  173,  173,
      173,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      652,    0,  171,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  172,  174,  174,    0,  174,  174,  174,  174,
      174,  174,  174,  174,  407,  407,  407,  407,  407,  407,
      652,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  653,  654,  655,  656,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  653,  654,  655,  656,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  174,  174,  194,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,    0,  174,  174,
      174,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      187,  187,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  195,  187,
      187,  187,  187,  187,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
        0,    0,    0,  194,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  429,  429,  429,  429,  429,  429,  194,
        0,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  194,  194,  206,  206,
      206,  206,  206,  206,  206,  206,    0,  195,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  453,  453,  453,
      453,  453,  453,  195,    0,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  208,  208,  208,  208,  208,  208,
      208,  208,  460,  460,  460,  460,  460,  460,    0,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  657,  659,  660,  661,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  657,  659,  660,  661,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,    0,  208,  208,  208,    0,  208,  208,  208,
      208,  208,  208,  208,  208,    0,  208,  208,  208,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  221,  221,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,    0,  221,  221,  221,  221,
      221,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  229,  229,    0,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  484,
      484,  484,  484,  484,  484,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      662,  664,  665,  667,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      662,  664,  665,  667,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,    0,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,    0,  229,  229,  229,  231,  231,  231,  231,  231,
      231,  231,  231,  489,  489,  489,  489,  489,  489,    0,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  669,  670,  671,  672,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  669,  670,  671,  672,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,    0,    0,  231,  231,    0,  231,  231,
      231,  231,  231,  231,  231,  231,    0,  231,  231,  231,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  254,  254,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,    0,  254,  254,  254,  254,
      254,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  268,  607,  285,
      509,  509,  509,  509,  509,  509,  285,    0,    0,  285,
      268,  285,  268,  607,  607,  673,  268,  285,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  268,  607,  285,
      516,  516,  516,  516,  516,  516,  285,  384,  384,  285,

      268,  285,  268,  607,  607,  673,  268,  285,  322,  322,
      322,  322,  322,  322,  322,  322,  384,  384,  384,  384,
      384,  675,    0,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  676,  677,
      678,  675,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  676,  677,
      678,    0,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,

      322,  322,  322,  322,  322,  322,    0,    0,  322,  322,
        0,  322,  322,  322,  322,  322,  322,  322,  322,    0,
      322,  322,  322,  349,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389, 1207, 1207, 1207, 1207,  349,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  437,  437,  473,  473,
      473,  473,  473,  473,  473,  473,    0,    0,  349,  536,
      536,  536,  536,  536,  536,  437,  437,  437,  437,  437,
      540,  540,  540,  540,  349,  540,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  368,  368,  368,  368,  368,  368,  368,
      368,  548,  548,  548,  548,  548,  887,    0,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  888,  889,  891,  887,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  888,  889,  891,    0,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,    0,  368,  368,  368,    0,  368,  368,  368,  368,
      368,  368,  368,  368,    0,  368,  368,  368,  411,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,

      442,  464,  464,  464,  464,  464,  464,  464,  464,    0,
      465,  465,  465,  465,  465,  465,  465,  465,  411,  892,
      464,  688,  688,  688,  688,  466,  688,  466,    0,  465,
      466,  466,  466,  466,  466,  466,  466,  466,  474,  474,
      474,  474,  474,  474,  474,  474,    0,    0,    0,  892,
      464,    0,  947,  947,  947,  469,  947,  469,  411,  465,
      469,  469,  469,  469,  469,  469,  469,  469,  560,  560,
      560,  560,  560,  560,  411,    0,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  421,  421,  421,  421,  421,  421,  421,

      421,  567,  567,  567,  567,  567,  567,    0,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  893,  894,  895,  897,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  893,  894,  895,  897,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,    0,  421,  421,  421,  898,  421,  421,  421,  421,

      421,  421,  421,  421,  899,  421,  421,  421,  467,  467,
      467,  467,  467,  467,  467,  467,  468,  468,  468,  468,
      468,  468,  468,  468,    0,  898,    0,  467,  900,  901,
      902,  470,    0,  470,  899,  468,  470,  470,  470,  470,
      470,  470,  470,  470,  471,  471,  471,  471,  471,  471,
      471,  471,  696,  696,  696,  696,  696,  467,  900,  901,
      902,    0,  472,  471,  472,  468,  903,  472,  472,  472,
      472,  472,  472,  472,  472,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  471,  475,  475,  903,  475,  475,  475,

      475,  475,  475,  475,  475,  590,  590,  590,  590,  590,
      590,    0,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  905,  907,  908,
      909,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  905,  907,  908,
      909,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,    0,  475,  475,  475,  475,

      475,  475,  475,  475,  475,  475,  475,  475,    0,  475,
      475,  475,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  493,  493,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,    0,
      493,  493,  493,  493,  493,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  528,  528,  528,  528,  528,  528,  528,  528,  597,
      597,  597,  597,  597,  597,    0,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,

      528,  911,  912,  913,  914,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  911,  912,  913,  914,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,    0,
      528,  528,  528,    0,  528,  528,  528,  528,  528,  528,
      528,  528,    0,  528,  528,  528,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  544,  544,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,    0,  544,  544,  544,  544,  544,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  571,  571,    0,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  685,  685,  685,  685,  685,
      685,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  915,  917,  918,  919,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  915,  917,  918,  919,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  920,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  658,  571,  571,
      571,  666,  666,  921,  922,  923,  924,  927,  658,  666,
      786,  786,  829,  829,  920,  666,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  860,  860,  658,  786,    0,
      829,  666,  666,  921,  922,  923,  924,  927,  658,  666,

      692,  692,    0,  860,    0,  666,  679,  679,    0,  679,
      679,  679,  679,  679,  679,  679,  679,    0,    0,  692,
      692,  692,  692,  692,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  928,
      928,  929,  931,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  928,
      928,  929,  931,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,    0,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
        0,  679,  679,  679,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  712,  714,    0,    0,    0,    0,
      714,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,

      720,  720,  720,  720,  720,  720,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  743,  743,  743,  743,  743,  743, 1175,  712,
      714, 1156, 1156,    0,    0,  714,    0, 1175,    0,  714,
      750,  750,  750,  750,  750,  750, 1175,  714,    0, 1156,
      714,    0,  714,  724,  724,  724,  724,  724,  724,  724,
      724,  772,  772,  772,  772,  772,  772,  772,  772,  712,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  787,
      787,  787,  787,  787,  787,  712,    0,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  713,  729,  762,    0,    0,    0,
        0,  762,  794,  794,  794,  794,  794,  794,    0,    0,
        0,  729,    0,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,    0,    0,    0,  713,
        0,  762,    0,  932,  933,    0,  762,    0,  934,    0,
      762,  830,  830,  830,  830,  830,  830,    0,  762,    0,
      804,  762,  804,  762,  935,  804,  804,  804,  804,  804,
      804,  804,  804,  932,  933,  806,    0,  806,  934,  713,

      806,  806,  806,  806,  806,  806,  806,  806,  837,  837,
      837,  837,  837,  837,  935,  713,    0,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  725,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  805,  805,  805,  805,  805,  805,  805,  805,  807,
      807,  807,  807,  807,  807,  807,  807,    0,  936,    0,
      805,  808,  808,  808,  808,  808,  808,  808,  808,  861,
      861,  861,  861,  861,  861,  809,    0,  809,    0,  725,
      809,  809,  809,  809,  809,  809,  809,  809,  936,  811,

      805,  811,    0,    0,  811,  811,  811,  811,  811,  811,
      811,  811,  812,  812,  812,  812,  812,  812,  812,  812,
      813,  813,  813,  813,  813,  813,  813,  813,    0,  725,
      814,  814,  814,  814,  814,  814,  814,  814,  868,  868,
      868,  868,  868,  868,  938,  725,  939,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  733,  733,  733,  733,  733,  733,
      733,  733,    0,    0,  938,  940,  939,  941,    0,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,

      733,  733,  733,  733,  942,  940,  943,  941,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  942,    0,  943,    0,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  847,  733,  733,  733,    0,  733,  733,  733,
      733,  733,  733,  733,  733,    0,  733,  733,  733,  760,
        0,  810,  810,  810,  810,  810,  810,  810,  810,  815,
      815,  815,  815,  815,  815,  815,  815,  944,  945,    0,

      810,  816,  816,  816,  816,  816,  816,  816,  816,  817,
      817,  817,  817,  817,  817,  817,  817, 1313,  946,  973,
      973,  973,  973,  973,  973,    0, 1313,  944,  945,  760,
      810,  847,    0,    0,    0, 1313,  948,  949,  950,    0,
      951,  952,  953,  954,  955,  952,  956,  847,  946,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  948,  949,  950,  760,
      951,  952,  953,  954,  955,  952,  956,  957,  958,  959,
      960,  961,    0,    0,    0,  760,    0,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,

      760,  760,  760,  760,  761,    0,    0,  957,  958,  959,
      960,  961,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      978,  978,  978,  978,  978,  978,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  982,  982,  986,  986,  986,
      986,  986,    0,    0,  761,  998,  998,  998,  998,  998,
      998, 1074, 1078, 1079,  982,  982,  982,  982,  982,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985, 1005, 1005, 1005, 1005, 1005,
     1005, 1074, 1078, 1079,  761, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049, 1157, 1157, 1157, 1157, 1157, 1157,    0,
      761,    0,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  773,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987, 1010, 1010, 1080,    0,
        0, 1011, 1011,    0,    0,    0,    0,    0, 1010,    0,
        0,    0,    0, 1011,    0, 1010, 1010, 1010, 1010, 1010,
     1011, 1011, 1011, 1011, 1011,    0,    0,    0, 1080,  773,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1164, 1164, 1164, 1164, 1164, 1164,    0,  773,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,    0,    0,
        0,    0, 1081, 1083, 1084,  773, 1085,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  777,  777,  777,  777,  777,  777,
      777,  777, 1081, 1083, 1084, 1086, 1085, 1087,    0,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777, 1088, 1086, 1089, 1087,  777,  777,

      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777, 1088,    0, 1089,    0,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777, 1090,  777,  777,  777, 1091,  777,  777,  777,
      777,  777,  777,  777,  777,    0,  777,  777,  777,  818,
      818,    0,  818,  818,  818,  818,  818,  818,  818,  818,
        0,    0, 1090, 1095, 1097, 1098, 1091,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818, 1100, 1095, 1097, 1098,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818, 1100,    0,    0,    0,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
     1101,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,    0,  818,  818,  818,  851,  851,  851,
      851,  851,  851,  851,  851,    0,    0, 1103, 1107, 1109,

     1101,    0,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851, 1103, 1107, 1109,
     1112,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,    0,    0, 1113,
     1112,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851, 1115,  851,  851,  851, 1113,
      851,  851,  851,  851,  851,  851,  851,  851,    0,  851,

      851,  851,  879,  879,    0,  879,  879,  879,  879,  879,
      879,  879,  879,  879,    0, 1115, 1117, 1120, 1121,    0,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879, 1122, 1117, 1120, 1121,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879, 1122,    0,    0,    0,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  879,  879, 1123,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,    0,  879,  879,  879,
      964,  964,    0,  964,  964,  964,  964,  964,  964,  964,
      964,    0,    0, 1123, 1124, 1125, 1130,    0,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964, 1131, 1124, 1125, 1130,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964, 1131,    0,    0,    0,  964,  964,  964,

      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964, 1133,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,    0,  964,  964,  964, 1008, 1008,
        0, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
        0, 1133, 1134, 1135, 1136,    0, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1137, 1134, 1135, 1136, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,

     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1137,    0,    0,    0, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,    0,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1138, 1008, 1008, 1008, 1013, 1055, 1055, 1055,
     1055, 1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1142, 1176, 1191, 1192, 1194, 1195, 1197,
     1198,    0, 1138, 1200, 1201, 1205, 1208, 1209, 1176, 1210,
     1211, 1212, 1213, 1215, 1176, 1217, 1218, 1220, 1222, 1223,

     1231, 1232, 1234, 1142, 1236, 1191, 1192, 1194, 1195, 1197,
     1198, 1013, 1237, 1200, 1201, 1205, 1208, 1209, 1252, 1210,
     1211, 1212, 1213, 1215, 1253, 1217, 1218, 1220, 1222, 1223,
     1231, 1232, 1234, 1254, 1236, 1255, 1256,    0, 1259, 1314,
        0,    0, 1237,    0,    0,    0,    0,    0, 1252,    0,
        0, 1013,    0, 1314, 1253,    0,    0,    0,    0, 1314,
        0,    0,    0, 1254, 1260, 1255, 1256, 1013, 1259, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1260,    0, 1262, 1265, 1266, 1267,

        0, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1262, 1265, 1266, 1267,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,    0,    0, 1270,    0,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1272, 1023, 1023, 1023, 1270, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1274, 1023, 1023,

     1023, 1031, 1258, 1258, 1258, 1258, 1263, 1263, 1263, 1263,
     1282, 1283, 1284,    0, 1272,    0,    0,    0,    0, 1290,
     1293,    0, 1294, 1298, 1299, 1286, 1286, 1274, 1300, 1301,
     1302, 1305, 1310, 1312, 1316, 1317, 1318, 1286, 1319, 1258,
     1282, 1283, 1284, 1263, 1286, 1286, 1286, 1286, 1286, 1290,
     1293, 1031, 1294, 1298, 1299, 1287, 1287, 1258, 1300, 1301,
     1302, 1305, 1310, 1312, 1316, 1317, 1318, 1287, 1319, 1258,
     1320, 1323, 1329, 1263, 1287, 1287, 1287, 1287, 1287,    0,
        0,    0,    0,    0,    0,    0,    0, 1258,    0,    0,
        0, 1031,    0,    0,    0,    0,    0,    0,    0,    0,

     1320, 1323, 1329,    0, 1330, 1331, 1332, 1031, 1333, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1330, 1331, 1332, 1334, 1333, 1336,
        0, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1337, 1334, 1338, 1336,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1337,    0, 1338,    0,

     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1346, 1041, 1041, 1041, 1347, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041,    0, 1041, 1041,
     1041, 1057, 1057,    0, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057,    0,    0, 1346, 1348,    0,    0, 1347, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057,    0, 1348,    0,    0, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057,    0,    0,    0,    0, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057,    0, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057,    0, 1057, 1057, 1057, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065,    0,    0,    0,
        0,    0,    0,    0, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,    0,

        0,    0,    0, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,    0,
        0,    0,    0, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065,    0, 1065, 1065,
     1065,    0, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
        0, 1065, 1065, 1065, 1073, 1073,    0, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073,    0,    0,    0,    0,
        0,    0, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,

     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073,    0,    0,    0,
        0, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073,    0,    0,    0,
        0, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073,    0, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,    0, 1073,
     1073, 1073, 1145, 1145,    0, 1145, 1145, 1145, 1145, 1145,

     1145, 1145, 1145,    0,    0,    0,    0,    0,    0,    0,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145,    0,    0,    0,    0, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145,    0,    0,    0,    0, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145,    0, 1145, 1145, 1145, 1145, 1145, 1145,

     1145, 1145, 1145, 1145, 1145, 1145,    0, 1145, 1145, 1145,
     1178,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1178,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1178,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1178,    0, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,    0,    0,
        0,    0,    0,    0,    0, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
        0,    0,    0,    0, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,

     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
        0,    0,    0,    0, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,    0, 1182,
     1182, 1182,    0, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182,    0, 1182, 1182, 1182, 1184,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1184,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1184,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1184,    0, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,    0,    0,
        0,    0,    0,    0,    0, 1188, 1188, 1188, 1188, 1188,

     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
        0,    0,    0,    0, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
        0,    0,    0,    0, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,    0, 1188,
     1188, 1188,    0, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188,    0, 1188, 1188, 1188, 1189, 1189,    0, 1189, 1189,

     1189, 1189, 1189, 1189, 1189, 1189,    0,    0,    0,    0,
        0,    0,    0, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,    0,    0,
        0,    0, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,    0,    0,
        0,    0, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189,    0, 1189, 1189, 1189,

     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,    0,
     1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190,    0,    0,    0,    0,    0,    0,    0, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190,    0,    0,    0,    0, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190,    0,    0,    0,    0, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190,    0, 1190, 1190, 1190,    0, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190,    0, 1190, 1190, 1190, 1351,    0,
     1351, 1351, 1351, 1351,    0, 1351,    0,    0, 1351, 1352,
        0, 1352, 1352, 1352, 1352,    0, 1352,    0,    0, 1352,
     1353,    0, 1353, 1353, 1353, 1353,    0, 1353,    0,    0,
     1353, 1354, 1354, 1354, 1354,    0, 1354,    0,    0, 1354,
     1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357,
     1358, 1358, 1358, 1358, 1358, 1359, 1359, 1359, 1359, 1359,
     1360, 1360,    0, 1360, 1360, 1361, 1361, 1361, 1361, 1361,

     1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363, 1363, 1363,
     1364, 1364, 1364, 1364, 1364, 1365, 1365, 1365, 1365, 1365,
     1366,    0, 1366, 1366, 1366, 1366,    0, 1366,    0,    0,
     1366, 1367, 1367, 1367, 1367, 1368, 1368, 1368, 1369, 1369,
     1369, 1369, 1369, 1370, 1370, 1370, 1370, 1370, 1371, 1371,
     1371, 1371, 1371, 1372, 1372, 1372, 1372, 1372, 1373,    0,
     1373, 1373, 1373, 1373,    0, 1373,    0,    0, 1373, 1374,
     1374, 1374, 1374, 1375, 1375, 1375, 1376, 1376, 1376, 1376,
     1376, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378, 1378,
     1378, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380,

     1380, 1381, 1381, 1381, 1381, 1381, 1382, 1382, 1382, 1382,
     1382, 1383, 1383, 1383, 1383, 1383, 1384, 1384,    0, 1384,
     1384, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386, 1386,
     1386, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388,
     1388, 1389, 1389, 1389, 1389, 1389, 1390,    0, 1390, 1390,
     1390, 1390,    0, 1390,    0,    0, 1390, 1391, 1391, 1391,
     1391, 1392, 1392, 1392, 1393, 1393, 1393, 1393, 1393, 1394,
     1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1398,
     1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1400,

     1400, 1400, 1400, 1400, 1401, 1401,    0, 1401, 1401, 1402,
     1402, 1402, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1404,
     1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405, 1406,
     1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1408,
     1408, 1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1410,
     1410, 1410, 1410, 1410, 1411, 1411,    0, 1411, 1411, 1412,
     1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413, 1413, 1414,
     1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415, 1416,
     1416, 1416, 1416, 1416, 1417, 1417, 1417, 1417,    0, 1417,
        0,    0, 1417, 1418, 1418, 1418, 1418, 1419, 1419, 1419,

     1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421,
     1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423,
     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
     1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427, 1427, 1427,
     1428, 1428,    0, 1428, 1428, 1429, 1429, 1429, 1429, 1429,
     1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431, 1431, 1431,
     1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433, 1433, 1433,
     1434,    0, 1434, 1435, 1435, 1435, 1435, 1435, 1436, 1436,
     1436, 1436, 1436, 1437, 1437, 1437, 1437, 1437, 1438, 1438,
     1438, 1438, 1438, 1439, 1439,    0, 1439, 1439, 1440, 1440,

     1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441, 1442, 1442,
     1442, 1442, 1442, 1443, 1443, 1443, 1443, 1443, 1444, 1444,
     1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445, 1446, 1446,
     1446, 1446, 1446, 1447, 1447, 1447, 1447, 1447, 1448, 1448,
     1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449, 1450, 1450,
     1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451, 1452, 1452,
     1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453, 1454, 1454,
     1454, 1454, 1454, 1454,    0, 1454,    0,    0, 1454, 1455,
     1455, 1455, 1455, 1455, 1456, 1456, 1456, 1456, 1456, 1457,
     1457, 1457, 1457, 1457, 1458, 1458, 1458, 1458, 1458, 1459,

     1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460, 1461,
     1461, 1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1463,
     1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1465,
     1465, 1465, 1465, 1465, 1466, 1466, 1466, 1466, 1466, 1467,
     1467, 1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468, 1469,
     1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470, 1471,
     1471,    0, 1471, 1471, 1472, 1472, 1472,    0, 1472, 1473,
     1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1475,
     1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1477,
     1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478, 1479,

     1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480, 1481,
     1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1483,
     1483, 1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1485,
     1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486, 1486,
        0, 1486,    0,    0, 1486, 1487, 1487, 1487, 1487, 1487,
     1488, 1488, 1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489,
     1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491, 1491, 1491,
     1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493,
     1494, 1494, 1494, 1494, 1494, 1495, 1495, 1495, 1495, 1495,
     1496, 1496, 1496, 1496, 1496, 1497, 1497,    0, 1497, 1497,

     1498, 1498, 1498,    0, 1498, 1499, 1499, 1499, 1499, 1499,
     1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501, 1501,
     1502, 1502, 1502, 1502, 1502, 1503, 1503, 1503, 1503, 1503,
     1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505,
     1506, 1506, 1506, 1506, 1506, 1507, 1507, 1507, 1507, 1507,
     1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509, 1509, 1509,
     1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511,
     1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513, 1513, 1513,
     1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515,
     1516, 1516,    0, 1516, 1516, 1517, 1517, 1517, 1517, 1517,

     1518, 1518, 1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519,
     1520, 1520, 1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521,
     1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523, 1523, 1523,
     1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525,
     1526, 1526, 1526, 1526, 1526, 1527, 1527, 1527, 1527, 1527,
     1528, 1528, 1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529,
     1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531, 1531,
     1532, 1532, 1532, 1532, 1532, 1533, 1533, 1533, 1533, 1533,
     1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535,
     1536, 1536, 1536, 1536, 1536, 1537, 1537, 1537, 1537, 1537,

     1538, 1538, 1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539,
     1540, 1540, 1540, 1540, 1540, 1541, 1541,    0, 1541, 1541,
     1542, 1542, 1542,    0, 1542, 1543, 1543, 1543, 1543, 1543,
     1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545, 1545, 1545,
     1546, 1546, 1546, 1546, 1546, 1547, 1547, 1547, 1547, 1547,
     1548, 1548, 1548, 1548, 1548, 1549, 1549, 1549, 1549, 1549,
     1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551,
     1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553, 1553, 1553,
     1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555, 1555, 1555,
     1556, 1556, 1557, 1557, 1557, 1557, 1557, 1558, 1558, 1558,

     1558, 1558, 1559, 1559, 1559, 1559, 1559, 1560, 1560, 1560,
     1560, 1560, 1561, 1561, 1561, 1561, 1561, 1562, 1562, 1562,
     1562, 1562, 1563, 1563, 1563, 1563, 1563, 1564, 1564, 1564,
     1564, 1564, 1565, 1565, 1565, 1565, 1565, 1566, 1566, 1566,
     1566, 1566, 1567, 1567, 1567, 1567, 1567, 1568, 1568, 1568,
     1568, 1568, 1569, 1569,    0, 1569, 1569, 1570, 1570, 1570,
     1570, 1570, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572,
     1572, 1572, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574,
     1574, 1574, 1575, 1575, 1575, 1575, 1575, 1576, 1576, 1576,
     1576, 1576, 1576,    0, 1576,    0,    0, 1576, 1577, 1577,

     1577, 1577, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579,
     1580, 1580, 1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581,
     1582, 1582, 1582, 1582, 1582, 1583,    0, 1583, 1583, 1583,
     1583,    0, 1583,    0,    0, 1583, 1584, 1584, 1584, 1584,
     1584, 1585, 1585, 1585, 1585, 1585, 1586,    0, 1586, 1586,
     1586, 1586,    0, 1586,    0,    0, 1586, 1587, 1587, 1587,
     1587, 1587, 1588, 1588, 1588, 1588, 1588, 1589, 1589, 1589,
     1589, 1589, 1590, 1590, 1590, 1590, 1590, 1591, 1591, 1591,
     1591, 1591, 1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593,
     1593, 1593, 1594, 1594, 1594, 1594, 1594, 1595, 1595, 1595,

     1595, 1595, 1596, 1596, 1596, 1596, 1596, 1597, 1597, 1597,
     1597, 1597, 1598, 1598, 1598, 1598, 1598, 1598,    0, 1598,
        0,    0, 1598, 1599, 1599, 1599, 1599, 1600, 1600, 1600,
     1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602, 1602, 1602,
     1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604,
     1605,    0, 1605, 1605, 1605, 1605,    0, 1605,    0,    0,
     1605, 1606, 1606, 1606, 1606, 1606, 1607, 1607, 1607, 1607,
     1607, 1608, 1608, 1608, 1608, 1608, 1609, 1609, 1609, 1609,
     1609, 1610, 1610, 1610, 1610, 1610, 1611, 1611, 1611, 1611,
     1611, 1612, 1612, 1612, 1612, 1612, 1613, 1613, 1613, 1613,

     1613, 1614, 1614, 1614, 1614, 1614, 1615, 1615, 1615, 1615,
     1615, 1616, 1616, 1616, 1616, 1616, 1617, 1617, 1617, 1617,
     1617, 1618, 1618, 1618, 1618, 1618, 1619, 1619, 1619, 1619,
     1619, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621, 1621,
     1621, 1622, 1622, 1622, 1622, 1622, 1623, 1623, 1623, 1623,
     1623, 1624, 1624, 1624, 1624, 1624, 1625, 1625, 1625, 1625,
     1625, 1626, 1626, 1626, 1626,    0, 1626,    0,    0, 1626,
     1627, 1627, 1627, 1627, 1627, 1628, 1628, 1628, 1628, 1628,
     1629, 1629, 1629, 1629, 1629, 1630, 1630, 1630, 1630, 1630,
     1631, 1631, 1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632,

     1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634,
     1635, 1635, 1635, 1635, 1635, 1636, 1636, 1636, 1636, 1636,
     1637, 1637, 1637, 1637, 1637, 1638, 1638, 1638, 1639, 1639,
     1639, 1639, 1639, 1640, 1640, 1640, 1640, 1640, 1641, 1641,
     1641, 1641, 1641, 1642, 1642, 1642, 1642, 1642, 1643, 1643,
     1643, 1643, 1643, 1644, 1644,    0, 1644, 1644, 1645, 1645,
     1645, 1645, 1645, 1646, 1646, 1646, 1646, 1646, 1647, 1647,
     1647, 1647, 1647, 1648, 1648, 1648, 1648, 1648, 1649, 1649,
     1649, 1649, 1649, 1650, 1650, 1650, 1650, 1650, 1651, 1651,
     1651, 1651, 1651, 1652, 1652, 1652, 1652, 1652, 1653, 1653,

     1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1655, 1655,
     1655, 1655, 1655, 1656, 1656, 1656, 1656, 1656, 1657, 1657,
     1657, 1657, 1657, 1658, 1658, 1658, 1658, 1658, 1659, 1659,
     1659, 1659, 1659, 1660, 1660, 1660, 1660, 1660, 1660,    0,
     1660,    0,    0, 1660, 1661, 1661, 1661, 1661, 1661, 1662,
     1662, 1662, 1662, 1662, 1663, 1663, 1663, 1663, 1663, 1664,
     1664, 1664, 1664, 1664, 1665, 1665, 1665, 1665, 1665, 1666,
     1666, 1666, 1666, 1666, 1667, 1667, 1667, 1667, 1667, 1668,
     1668, 1668, 1668, 1668, 1668,    0, 1668,    0,    0, 1668,
     1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1670, 1670,

     1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672, 1672,
     1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674,
     1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676, 1676, 1676,
     1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678,
     1679, 1679, 1679, 1679, 1679, 1680, 1680, 1680, 1680, 1680,
     1681, 1681, 1681, 1681, 1681, 1682, 1682, 1682, 1682, 1682,
     1683, 1683, 1683, 1683, 1683, 1684, 1684, 1684, 1684, 1684,
     1685, 1685, 1685, 1685, 1685, 1686, 1686, 1686, 1686, 1686,
     1687, 1687, 1687, 1687, 1687, 1688, 1688, 1688, 1688, 1688,
     1688,    0, 1688,    0,    0, 1688, 1689, 1689, 1689, 1689,

     1689, 1690, 1690, 1690, 1690, 1690, 1691, 1691, 1691, 1691,
     1691, 1691,    0, 1691,    0,    0, 1691, 1692, 1692, 1692,
     1692, 1692, 1693, 1693, 1693, 1693, 1693, 1694, 1694, 1694,
     1694, 1694, 1695, 1695, 1695, 1695, 1695, 1696, 1696, 1696,
     1696, 1696, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
    } ;

static yyconst flex_int16_t yy_rule_linenum[175] =
    {   0,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
      307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
      317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
      337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
      347,  348,  349,  350,  351,  352,  353,  354,  355,  356,

      357,  358,  359,  360,  361,  362,  363,  364,  365,  366,
      367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
      397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
      407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
      427,  428,  429,  432
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3245 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 256 "lib/SPARQLfedScanner.lpp"

#line 3409 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1351 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1350 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 175 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 175 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 176 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 257 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 258 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 259 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 260 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::GT_INSERT_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_WHERE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA224;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 431 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 438 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4409 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1351 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1351 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1350);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 438 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


