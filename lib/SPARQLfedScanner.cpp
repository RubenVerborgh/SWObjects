#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1393] =
    {   0,
        0,    0,  182,  180,    2,    1,    1,   69,  180,    2,
      180,  180,  180,    9,   10,   20,   68,   11,   86,    4,
       65,  158,  152,   36,   80,    3,   81,   67,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,   70,   71,   66,  180,   64,  180,  180,    7,    5,
        8,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,    2,    1,   79,    0,  168,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,    0,  156,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   78,    0,  167,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  171,  176,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  161,   60,    0,  164,   12,  159,
        0,  158,    0,    0,  153,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   82,  151,    0,    0,    0,    0,    0,    0,    0,
        0,   83,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  157,    0,    0,

      152,    0,    0,    0,    0,   19,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  127,   84,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   44,  117,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  172,  148,    0,    0,    0,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  168,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  167,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  176,
      176,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  173,  162,    0,
        0,  165,    0,    0,    0,  159,    0,    0,  160,    0,
        0,  153,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
      155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,   43,
       53,   75,   31,   24,  145,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  112,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  144,  121,    0,  143,    0,
        0,    0,   85,  118,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   87,    0,  142,    0,    0,    0,    0,
        0,   93,    0,    0,    0,    0,    0,    0,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  156,  156,  156,  156,  156,  156,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,  176,  176,
      176,  176,  176,    0,    0,    0,    0,  162,    0,    0,
      163,    0,  165,    0,    0,  166,    0,  160,    0,  160,
      153,    0,  153,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  153,  153,  153,  153,  153,  153,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  155,  155,
      155,  155,  155,  155,    0,    0,    0,  157,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   14,   58,
        0,    0,   97,    0,    0,    0,    0,    0,   46,    0,
        0,    0,    0,    0,   32,    0,   41,    0,   74,    0,
        0,    0,   25,    0,    0,    0,    0,    0,   39,    0,
        0,    0,    0,    0,   88,    0,    0,   37,    0,    0,
        0,   45,    0,    0,    0,    0,    0,    0,   95,    0,

        0,    0,    0,   57,    0,    0,    0,    0,    0,    0,
      122,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      119,    0,    0,   47,  110,  154,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    2,  156,  156,
      156,  156,  156,  156,  156,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  176,  176,
      176,  176,  176,  176,  176,    0,    0,    0,    0,  163,
        0,  163,    0,  166,    0,  166,  153,  153,  153,  153,
      153,  153,  153,  153,    0,    0,    0,    0,  155,  155,
      155,  155,  155,  155,  155,    0,    0,    0,   94,   91,
       40,    0,    0,    0,    0,  140,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   98,   52,   27,    0,  113,
        0,    0,  131,    0,    0,  132,    0,  103,   33,    0,
       61,    0,  111,   26,    0,    0,   30,    0,   54,    0,
      136,    0,   99,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  129,    0,    0,    0,
        0,    0,    0,    0,  102,   59,   62,    0,   50,    0,
       22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  154,  154,  154,  154,  154,  154,    0,    0,    0,
      150,    0,    0,  170,    0,    0,    0,    0,    0,    0,
      169,    0,    0,    0,    0,    0,    0,    0,  100,    0,
        0,   42,    0,    0,   48,    0,    0,    0,  139,   63,
        0,   29,   49,    0,    0,    0,    0,    0,    0,   34,
        0,   15,    0,    0,    0,  146,    0,   16,    0,    0,

      123,  124,  125,   38,   73,    0,    0,    0,    0,  101,
        0,    0,  137,    0,    0,   35,  154,  154,  154,  154,
      154,  154,  154,    0,    0,    0,    0,  174,    0,    0,
      175,    0,    0,    0,    0,    0,    0,    0,   51,    0,
        0,    0,    0,    0,    0,    0,    0,  133,    0,    0,
        0,   72,  114,    0,   18,  138,    0,  115,    0,   56,
        0,    0,  107,  128,    0,  120,    0,    0,    0,    0,
      126,    0,  105,   90,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   23,   17,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   55,  130,    0,  109,
        0,    0,  116,    0,    0,    0,   21,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  134,  135,    0,
      147,  108,  106,   76,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  178,    0,    0,    0,    0,    0,  177,
        0,   89,  179,  178,    0,    0,  141,  177,  179,    0,
      104,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,   99,   99,  100,  101,  101,  101,  101,  101,  102,
      103,  101,  104,  105,  106,  107,  106,  108,  106,  106,
      109,  110,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  113,  113,  113,  115,  115,  115,  115,  116,
      115,  115,  117,  118,  118,  118,  118,  118,  118,  119,
      120,  121,  121,  122,  123,  124,  124,  124,  124,  124,

      124,  124,  124,  125,  126,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  128,  129,  130,  131,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  133,  134,  135,  136,
      137,  137,  138,  139,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121
    } ;

static yyconst flex_int32_t yy_meta[140] =
    {   0,
        1,    1,    2,    2,    1,    3,    1,    3,    3,    4,
        3,    3,    3,    3,    3,    3,    3,    5,    6,    3,
        7,    7,    7,    7,    7,    7,    7,    7,    8,    3,
        1,    3,    3,    3,    3,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        3,   10,    3,    1,   11,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        1,    1,    1,    3,    3,   12,   13,   12,   12,   12,

       12,   12,   12,   14,   12,   12,   12,   12,   15,   12,
       12,   12,   12,   12,   12,   12,   15,   12,   16,   17,
       18,   19,   20,   20,   21,   20,   20,   20,   20,   20,
       20,   20,   20,   22,   20,   20,   20,   20,   22
    } ;

static yyconst flex_int16_t yy_base[1752] =
    {   0,
        0,    0, 2787,10152,  138,10152, 2778, 2723,  134,   22,
       39, 2660,  152,  176,10152,   71,  194,10152,  205,  161,
    10152,  273,  231,10152,  202,10152, 2601,  116,    0,  352,
      455,  503,  520,  549,  564,  416,  570,  608,  460,  615,
      627,  664,  670,  511,  679,  722,  723,  770,  792,  816,
      830,  302,10152, 2567, 2524,    0,  831,  874,10152, 2452,
    10152,    0,  193,  199,  194,  232,    0,  869, 2324,    0,
      894,  330,  901,    0,  926,  307,10152,10152, 1034, 2347,
     1035,    0,  823,    0,  952,    0,  959,    0,  984,  998,
        0, 1026,    0, 1078,    0, 1085,    0, 1051, 1185,    0,

      342,  267,  343, 1102,    0, 1228, 2249,    0, 1127, 1126,
     1142,    0, 1167,10152, 1287, 2326, 1288,    0, 1171,    0,
     1277,    0, 1284,    0, 1331,  513,10152, 1415,    0,  344,
      617,  345, 1332,    0, 1458, 2236,    0, 1357, 1356, 1372,
        0, 1397,  175, 1492, 1560,10152, 1500, 1570,10152, 1580,
     1591, 1620, 1641, 1655, 1613, 1697,    0,  348,  664,  355,
     1640,    0, 1696, 2179,    0, 1667, 1416, 1712,    0, 1737,
     1746, 1819,10152,    0, 1668,    0, 1790,    0, 1797,    0,
     1757,10152, 1938,    0,  386,  812,  392, 1806,    0, 1981,
     2161,    0, 1871, 1814, 1878,    0, 1903, 2237, 1999, 2017,

     2040,  289,  497,  499,  327,  519,  477, 2127,    0,  414,
      416,  496,  462, 1907,    0, 2083, 2078,    0, 2007, 1924,
     2099,    0, 2124,  589,  176,  574,  614, 2136,  279,  592,
     2210,  669,  757,  832,  674,  735, 2211,  601,  713,  785,
      804, 1620,  762,  627, 2133,  863,  783, 2219,  676,  758,
      816,  801,  862,  429,  847,  699, 2213,  875, 2216,  760,
      491, 1582, 2214,  870, 2243, 1570, 2212, 2276, 1668, 1607,
     2235, 2273, 1580, 2131, 2122, 2277, 2287, 1644, 1645, 2223,
     1624,  893,  555, 2282, 1041,10152,10152, 2242,  596,  384,
    10152, 2109,    0,    0,  108,  842,    0, 2285,    0,  525,

        0,  974, 2037,    0,    0,    0,    0, 2297,    0,  117,
        0,    0,    0,10152, 2300,    0,    0,    0,    0,    0,
        0,    0, 1952,    0,    0,    0,    0,    0,    0,    0,
     1943, 2419, 2537, 1953, 1928,    0,  575,  983,  637, 1939,
        0, 2580, 1665,    0, 2352, 2289, 2359,    0, 2384,    0,
        0,  218,  992,    0, 2403,    0,    0, 1186, 1651,    0,
        0,    0,    0, 2470,    0,  295,    0,    0,    0,10152,
     2513,    0,    0,    0,    0,    0,    0,    0, 1613, 2680,
     2798, 1634, 1603,    0,  712, 1236,  717, 2414,    0, 2841,
     1603,    0, 2495, 2395, 2502,    0, 2613,    0,    0,  368,

     1245,    0, 2480,    0,    0, 1747, 1591,    0,    0,    0,
        0, 2632,    0,  768,    0,    0,    0, 1667, 2716, 2744,
     2767, 2806, 2814, 2834, 2847, 2941, 2864, 2496, 2602, 2949,
     3000, 2972, 2989, 3122, 1521,    0,  734,  996, 1249, 1517,
     2784,    0, 3121, 1537,    0, 2976, 2644, 3053,    0, 3092,
        0,    0,    0, 1013, 1820,    0, 2809,    0,    0, 1914,
     1528,    0,    0,    0,    0, 3146,    0, 1173,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1470, 3246,
     3364, 1484, 1432,    0, 1518, 2041, 1520, 2930,    0, 3407,
     1444,    0, 3179, 2887, 3186,    0, 3211,    0,    0, 1194,

     2420,    0, 2956,    0,    0, 2538, 1275,    0,    0,    0,
        0, 3230,    0, 1286,    0,    0,    0,    0, 3322, 3342,
        0,    0,    0,    0,    0,    0,    0, 2227, 3059,    0,
     3047,    0,    0, 2681, 1273,    0,    0,    0,    0, 3297,
        0, 1288,    0,    0,    0,  427,  729, 1583, 1623, 1651,
     2211, 2206, 3490, 2219, 2260, 2283, 2284,    0, 2286, 2285,
     2295, 2280, 2295, 2310, 2338, 2579, 2691, 2696, 2799, 2797,
     2794, 2807, 2801, 2824, 2843,    0, 2932, 2928, 2939, 2929,
     2979, 2990, 2980, 2991, 3054,    0,    0, 3116, 3125, 3127,
     3142, 3144,    0,    0, 3132, 3291, 3296, 3296, 3331, 3363,

     3348, 3364, 3358, 3357, 3363, 3489, 3358, 3369, 3375, 3370,
     2756, 3490, 3479, 3498, 3479,    0, 3493, 3483, 3499, 3491,
     3490,    0, 3497, 3508, 3493, 3497, 3507, 3500, 3462,    0,
     2301, 2799, 2302, 3139,    0, 3505, 1261,    0, 3530, 3239,
     3537,    0, 3562, 1236, 1240,    0,    0,    0,    0, 1168,
     1164,    0,    0,    0,    0,    0,    0,    0, 3670, 3688,
     3672,    0, 3573,    0, 3600,    0, 3607,    0, 3661, 3721,
        0,    0,    0,    0, 1670, 3739,    0,    0,    0,    0,
     1928,    0,    0, 2239, 2877,    0, 3670,    0,    0, 3303,
     1022,    0,    0,    0,    0, 3783,    0, 2000,    0,    0,

        0, 3883, 4001,    0,    0,    0,    0,    0,    0,    0,
     3826, 3908, 3905,    0, 3716,    0, 3825,    0, 3943,    0,
     3793, 4052,    0,    0,    0,    0, 2216,    0,    0, 2986,
     3629,    0, 3841,    0,    0, 3660,  999,    0,    0,    0,
        0, 3969,    0, 2634,    0,    0,    0, 4171, 4289,    0,
        0,    0,    0,    0,    0,    0, 3970, 4078, 4128, 3763,
     4053, 4141, 4179, 4199, 4069, 4207, 4215, 4229, 4237, 4248,
     4267, 4297, 4320,    0,    0, 3322, 4230,    0, 4255,    0,
        0, 3884,  859,    0,    0,    0,    0, 4363,    0, 2654,
        0,    0,    0, 4366,    0,    0,    0,    0,    0,    0,

        0,    0, 4390,    0,    0,    0,    0, 2724,    0,    0,
     3633, 3992,    0, 4333,    0,    0, 4093,  856,    0,    0,
        0,    0, 4434,    0, 2747,    0,    0,    0, 4534, 4652,
        0,    0,    0,    0,    0,    0,    0,  927, 4455, 4481,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3712, 3877,    0, 3895, 3938, 4047, 4061, 4081,    0, 4086,
     4087, 4088, 4088, 4160, 4164, 4174,    0, 4227,    0, 4277,
     4292, 4288,    0, 4298, 4291, 4294, 4291, 4325,    0, 4342,
     4335, 4326, 4336, 4394, 4391, 4400, 4387,    0, 4435, 4423,
     4466,    0, 4472, 4500, 4492, 4491, 4500, 4491,    0, 4508,

     4506, 4529, 4527,    0, 4513, 4521, 4520, 4533, 4548, 4558,
        0,  905,  808,  787, 4566, 4566, 4580, 4582, 4569, 4575,
     4589, 4584, 4626, 4628, 4623, 4644, 4644, 4637, 4648, 4646,
        0, 4649, 4650,    0,    0, 4570, 4607,  654,    0, 3367,
     3620, 3621, 3624, 4638,    0, 4695,  640,    0, 4720, 4165,
     4727,    0, 4752,    0,    0, 2927, 4172,    0, 4663,    0,
        0, 4524,  628,    0,    0,    0,    0, 4771,    0, 2971,
        0,    0,    0, 4863, 4880, 4923,  610,  695,    0,    0,
        0,    0,    0,    0,    0,  560, 4922, 4788, 5041, 5159,
        0,    0,    0,    0,    0,    0,    0,    0,  623,    0,

        0,    0,    0,    0,    0,    0,  492, 4952, 5277, 5395,
        0,    0,    0,    0,    0,    0,    0,    0, 4700, 4879,
     4913, 4921, 4929, 4944, 4952, 5071, 5090, 5113,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 5068, 5513, 5631,
        0,    0,    0,    0,    0,    0,    0,    0, 5137, 5205,
        0, 4688, 4693, 4826, 4854,    0, 4890, 4872, 4885, 5032,
     5029, 5055, 5065, 5053, 5055,    0,    0,  513, 5068,    0,
     5057, 5063,    0, 5073, 5074,    0, 5079,    0,    0, 5064,
        0, 5077,    0,    0, 5064, 5070,    0, 5062,    0, 5081,
        0, 5086,    0, 5085, 5087, 5089, 5075, 5094, 5093,  532,

      488,  450, 5193, 5201, 5222, 5237,    0, 5240, 5231, 5244,
     5278, 5271, 5264, 5267,    0,    0,    0, 5278,    0, 5266,
        0,    0,    0, 4666, 5243,    0, 5268,    0,    0, 5235,
      226,    0,    0,    0,    0, 5328,    0, 3088,    0,    0,
        0, 5337, 5358,    0,    0,    0,    0,    0,    0,    0,
     5420, 4532,  458,10152, 5375,    0,    0,    0,    0, 3219,
    10152, 5467,    0,    0,    0,    0, 3243, 5540, 5319, 5636,
     5539, 5343, 5579, 5641, 5678, 5544, 5403, 5548, 5516, 5541,
     5547, 5593, 5697, 5646, 5651, 5655, 5652, 5658, 5659, 5647,
     5672, 5649, 5705, 5707, 5718, 5650, 5734, 5656, 5738, 5710,

     5711, 5713, 5714, 5733, 5745, 5750, 5746, 5751, 5753, 5747,
     5755, 5759, 5756, 5761, 5778, 5765,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 5767, 5770, 5771, 5773,
     5774, 5793, 5825, 5843, 5805, 5798, 5806, 5809, 5810, 5849,
     5879, 5824, 5818, 5827, 5831, 5982, 5930, 5812, 5846, 5847,
     5825, 5832, 5845, 5869, 5852, 5858, 6032, 5866, 6033, 5870,
     6034, 6035, 5871, 5872, 6036, 5951, 5954, 5955, 6025,  142,
     5958, 6108, 5959, 5960, 5964, 6002, 6191,    0,    0,    0,
     5276,    0, 6104,    0, 6126,    0, 5354, 6008, 6009, 6109,
     6040, 6013, 6329,    0,    0,    0, 5448,    0, 6165,    0,

     6174,    0, 5523, 6110, 6043, 6111, 6044, 6046, 6115, 6047,
     6112, 6297, 6050, 6117, 4780, 5518, 6113, 6104, 6120, 6467,
     6605, 6125, 6125,    0,  129,    0,    0,    0,    0,    0,
        0,    0, 6301, 6179, 6165, 6743, 6881, 6184,    0,  110,
        0,    0,    0,    0,    0,    0,    0, 6183, 6184, 6185,
     6186, 6188, 6189, 6190, 6270, 6272, 6193, 6225, 7019, 7157,
     6266,    0,    0,    0, 6305, 6306, 6305, 6291,    0,    0,
        0,    0, 6308,10152, 6307, 6312, 6311, 6311, 6347,10152,
     6318, 6318,10152, 6317, 6318, 6352, 6321,    0, 6322, 6361,
     6326,10152, 7296, 7318, 7334, 7354, 7370, 7387, 7405, 7421,

      133, 7430, 7436, 7442, 7448, 7454, 7471, 7482, 7488, 7494,
     7500, 7517, 7528, 7534, 7540, 7546, 7557, 7566, 7572, 7578,
     7584, 7590, 7607, 7618, 7624, 7630, 7636, 7647, 7656, 7662,
     7668, 7674, 7680, 7694, 7704, 7710, 7716, 7722, 7728, 7743,
     7754, 7760, 7766, 7772, 7783, 7792, 7798, 7804, 7810, 7816,
      897, 7829, 7847, 7856, 7862, 7868, 7874, 7880, 7891, 7900,
     7906, 7912, 7918, 7924, 7930, 7936, 7942, 7948, 7954, 7971,
     7982, 7988, 7994, 8000, 8006, 8012, 8018, 8024, 8030, 8036,
     8042, 8048, 8059, 8068, 8074, 8080, 8086, 8092, 8098, 8104,
     8110, 8116, 8122, 8128, 8134, 8140, 8146, 8152, 8158, 8175,

     8186, 8192, 8198, 8204, 8210, 8216, 8227, 8236, 8242, 8248,
     8254, 8260, 8266, 8272, 8278, 8284, 8290, 8296, 8302, 8308,
     8314, 8320, 8326, 8340, 8350, 8356, 8362, 8368, 8374, 8380,
     8386, 8392, 8398, 8404, 8410, 8416, 8422, 8428, 8434, 8440,
     8446, 8452, 8458, 8464, 8470, 8481, 8490, 8496, 8502, 8508,
     8514, 8520, 8526, 8532, 8538, 8544, 8550, 8556, 8562, 8568,
     8574, 8580,  661, 8593, 8603, 8609, 8615, 8621, 8627, 8633,
     8639, 8645, 8651, 8657, 8670, 8680, 8686, 8692, 8698, 8704,
     8710, 8727, 8738, 8744, 8750, 8756, 8773, 8784, 8790, 8807,
     8818, 8824, 8830, 8836, 8842, 8848, 8854, 8860, 8866, 8872,

     8878, 8884, 8895, 8904, 8921, 8932, 8938, 8944, 8950, 8967,
     8978, 8984, 8990, 8996, 9002, 9008, 9014, 9020, 9026, 9032,
     9038, 9044, 9055, 9064, 9078, 9088, 9094, 9100, 9106, 9112,
     9118, 9124, 9130, 9136, 9142, 9148, 9163, 9174, 9180, 9186,
     9192, 9198, 9204, 9210, 9216, 9222, 9228, 9234, 9240, 9251,
     9260, 3335, 9273, 9283, 9296, 9306, 9312, 9318, 9324, 9330,
     9336, 9342, 9348, 9354, 9360, 9366, 9372, 9378, 9384, 9390,
     9403, 9424, 9424, 9430, 9436, 9442, 9448, 9454, 9471, 9493,
     9509, 9518, 9535, 9535, 9541, 9547, 9553, 9559, 9565, 9582,
     9598, 9607, 9621, 9631, 9646, 9662, 9671, 9684, 9694, 9700,

     9706, 9712, 9718, 9724, 9730, 9736, 9742, 9748, 9761, 9771,
     9784, 9794, 9811, 9822, 9828, 9845, 9856, 9862, 9868, 9885,
     9907, 9918, 9923, 9927, 9933, 9939, 9945, 9951, 9956, 9960,
     9966, 9972, 9978, 9984,10001,10012,10018,10024,10030,10036,
    10042,10059,10070,10076,10082,10088,10094,10100,10117,10128,
    10134
    } ;

static yyconst flex_int16_t yy_def[1752] =
    {   0,
     1392,    1, 1392, 1392, 1392, 1392, 1392, 1392, 1393, 1394,
     1395, 1392, 1396, 1392, 1392, 1397, 1392, 1392, 1392, 1392,
     1392, 1392, 1398, 1392, 1399, 1392, 1392, 1400, 1401, 1392,
       30,   31,   32,   32,   32,   32,   32,   32,   32,   31,
       31,   31,   32,   32,   32,   32,   32,   32,   32,   32,
       32, 1392, 1392, 1392, 1392,   30,   32,   32, 1392, 1392,
     1392, 1402, 1402, 1392, 1402, 1392, 1403, 1392, 1404, 1405,
     1392, 1392, 1392, 1406, 1392, 1392, 1392, 1392, 1407, 1392,
     1392, 1408, 1392, 1409, 1392, 1410, 1392, 1411, 1392, 1412,
     1413, 1392, 1414, 1392, 1415, 1392, 1416, 1392, 1417, 1418,

     1418, 1392, 1418, 1392, 1419, 1392, 1420, 1421, 1392, 1392,
     1392, 1422, 1392, 1392, 1423, 1392, 1392, 1424, 1392, 1425,
     1392, 1426, 1392, 1427, 1392, 1392, 1392, 1428, 1429, 1429,
     1392, 1429, 1392, 1430, 1392, 1431, 1432, 1392, 1392, 1392,
     1433, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1434, 1392, 1435, 1435, 1392, 1435,
     1392, 1436, 1392, 1437, 1438, 1392, 1392, 1392, 1439, 1392,
     1440, 1440, 1392, 1441, 1392, 1442, 1392, 1443, 1392, 1444,
     1392, 1392, 1445, 1446, 1446, 1392, 1446, 1392, 1447, 1392,
     1448, 1449, 1392, 1392, 1392, 1450, 1392, 1451, 1452, 1452,

     1453,  200,  200,  200,  200,  200,  200, 1392, 1454, 1454,
     1454, 1454, 1454, 1392, 1455, 1392, 1456, 1457, 1392, 1392,
     1392, 1458, 1392,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200, 1392, 1392, 1392, 1459,  200,  200,
     1392,  200, 1460, 1461, 1460, 1460, 1462, 1460, 1460, 1460,

     1463, 1463, 1464, 1464, 1461, 1460, 1465, 1392, 1466, 1466,
     1467, 1468, 1469, 1392, 1470, 1471, 1472, 1471, 1471, 1473,
     1474, 1475, 1476, 1477, 1478, 1477, 1477, 1479, 1480, 1481,
     1482, 1483, 1483, 1392, 1392, 1484, 1484, 1485, 1484, 1392,
     1486, 1392, 1487, 1488, 1392, 1392, 1392, 1489, 1392, 1490,
     1491, 1490, 1490, 1492, 1490, 1490, 1493, 1493, 1494, 1494,
     1491, 1490, 1495, 1392, 1496, 1496, 1497, 1498, 1499, 1392,
     1500, 1501, 1502, 1501, 1501, 1503, 1504, 1505, 1506, 1507,
     1507, 1392, 1392, 1508, 1508, 1509, 1508, 1392, 1510, 1392,
     1511, 1512, 1392, 1392, 1392, 1513, 1392, 1514, 1515, 1514,

     1514, 1516, 1514, 1514, 1517, 1517, 1518, 1518, 1515, 1514,
     1519, 1392, 1520, 1520, 1521, 1522, 1523, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1524, 1524, 1392, 1392, 1525, 1525, 1525, 1525, 1525,
     1392, 1526, 1392, 1527, 1528, 1392, 1392, 1392, 1529, 1392,
      433, 1530, 1531, 1530, 1530, 1532, 1530, 1530, 1533, 1533,
     1534, 1534, 1531, 1530, 1535, 1392, 1536, 1536, 1537, 1538,
     1539, 1540, 1541, 1540, 1540, 1542, 1543, 1544, 1545, 1546,
     1546, 1392, 1392, 1547, 1547, 1548, 1547, 1392, 1549, 1392,
     1550, 1551, 1392, 1392, 1392, 1552, 1392, 1553, 1554, 1553,

     1553, 1555, 1553, 1553, 1556, 1556, 1557, 1557, 1554, 1553,
     1558, 1392, 1559, 1559, 1560, 1561, 1562, 1563, 1564, 1564,
      520,  520,  520,  520,  520, 1565, 1566, 1565, 1565, 1567,
     1565, 1565, 1568, 1568, 1569, 1569, 1566, 1565, 1570, 1392,
     1571, 1571, 1572, 1573, 1574,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520, 1575, 1576,
     1576, 1392, 1576, 1392, 1577, 1392, 1578, 1579, 1392, 1392,
     1392, 1580, 1392,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520, 1581, 1581, 1581, 1582, 1582,
     1392, 1583, 1392, 1584, 1392, 1585, 1392, 1586, 1392, 1587,
     1588, 1588, 1589, 1589, 1589, 1590, 1591, 1591, 1592, 1592,
     1592, 1593, 1594, 1593, 1593, 1595, 1593, 1593, 1596, 1596,
     1597, 1597, 1594, 1593, 1598, 1392, 1599, 1599, 1600, 1601,

     1602, 1603, 1603,  703,  703,  703,  703, 1604, 1604, 1604,
     1605, 1605, 1392, 1606, 1392, 1607, 1392, 1608, 1392, 1609,
     1392, 1610, 1611, 1611, 1612, 1612, 1612, 1613, 1614, 1613,
     1613, 1615, 1613, 1613, 1616, 1616, 1617, 1617, 1614, 1613,
     1618, 1392, 1619, 1619, 1620, 1621, 1622, 1623, 1623,  749,
      749,  749,  749, 1624, 1624, 1624, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1625, 1392, 1625, 1626, 1627, 1626, 1626, 1628, 1626, 1626,
     1629, 1629, 1630, 1630, 1627, 1626, 1631, 1392, 1632, 1632,
     1633, 1634, 1635, 1625,  794,  794,  794,  794,  794, 1636,

     1636, 1636, 1637, 1638, 1638, 1639, 1639, 1639, 1640, 1641,
     1640, 1640, 1642, 1640, 1640, 1643, 1643, 1644, 1644, 1641,
     1640, 1645, 1392, 1646, 1646, 1647, 1648, 1649, 1650, 1650,
      830,  830,  830,  830, 1651, 1651, 1651, 1652, 1653, 1653,
      840,  840,  840,  840,  840, 1654, 1654, 1654,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840, 1655, 1655, 1392, 1656, 1656,
     1656, 1656, 1656, 1392, 1657, 1392, 1658, 1659, 1392, 1392,
     1392, 1660, 1392, 1661, 1662, 1661, 1661, 1663, 1661, 1661,
     1664, 1664, 1665, 1665, 1662, 1661, 1666, 1392, 1667, 1667,
     1668, 1669, 1670, 1671, 1671, 1392,  976, 1672, 1673, 1674,
     1673, 1673, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1681,
      990,  990,  990,  990,  990, 1682, 1682, 1682, 1683, 1684,

     1685, 1684, 1684, 1686, 1687, 1688, 1689, 1690, 1691, 1691,
     1010, 1010, 1010, 1010, 1010, 1692, 1692, 1692, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1693, 1693, 1028, 1028,
     1028, 1028, 1028, 1028, 1694, 1694, 1694, 1695, 1696, 1696,
     1040, 1040, 1040, 1040, 1040, 1697, 1697, 1697, 1698, 1698,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1699, 1700, 1699, 1699, 1701, 1699, 1699, 1702, 1702,
     1703, 1703, 1700, 1699, 1704, 1392, 1705, 1705, 1706, 1707,
     1708, 1709, 1709, 1143, 1143, 1143, 1143, 1710, 1710, 1710,
     1711, 1712, 1712, 1392, 1713, 1714, 1714, 1715, 1715, 1715,
     1392, 1716, 1717, 1717, 1718, 1718, 1718, 1711, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,

     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1719, 1719, 1719, 1168, 1168, 1168, 1168,
     1168, 1168, 1713, 1716, 1168, 1168, 1168, 1168, 1168, 1392,
     1720, 1168, 1168, 1168, 1168, 1392, 1721, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1392, 1269,
     1168, 1168, 1168, 1168, 1392, 1392, 1720, 1722, 1723, 1724,
     1392, 1725, 1392, 1726, 1392, 1727, 1392, 1168, 1168, 1168,
     1168, 1392, 1721, 1728, 1729, 1730, 1392, 1731, 1392, 1732,

     1392, 1733, 1392, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1734, 1734, 1168, 1392, 1392, 1735,
     1735, 1321, 1321, 1736, 1392, 1737, 1738, 1737, 1737, 1739,
     1740, 1741, 1168, 1168, 1392, 1742, 1742, 1337, 1743, 1392,
     1744, 1745, 1744, 1744, 1746, 1747, 1748, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1392, 1392, 1749, 1749,
     1360, 1750, 1750, 1751, 1168, 1168, 1392, 1337, 1337, 1744,
     1744, 1743, 1168, 1392, 1392, 1360, 1360, 1168, 1168, 1392,
     1337, 1168, 1392, 1360, 1360, 1168, 1168, 1337, 1360, 1168,
     1168,    0, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392
    } ;

static yyconst flex_int16_t yy_nxt[10292] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   39,   51,   39,
       52,    4,   53,   54,   55,   56,   31,   32,   33,   34,
       57,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   58,   48,   49,   50,   39,   51,   39,
       59,   60,   61,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,   62,   63,    4,   64,   65,   66,   67,   68,
       69,   70,   71,    4,   72,   73,   74,   75,    4,   76,
       80,  198,   76,   91,   91,   91,   91,   91,   91,   92,
       93,   93,   93,   93,   94,   95,   95,   96,   97,   97,
       98,  100,  101,  116,  102,  103,  104,  105,  106,  107,
      108,  109, 1293,  110,  111,  112,  113,  126,  126,  126,
      126,  150,  150,  150,  150,  150,  150,  150,  150,  127,
      418, 1277,  143,  129,  130,   81,  131,  132,  133,  134,

      135,  136,  137,  138,  201,  139,  140,  141,  142,  646,
      646,  143,  144,  117,  145,  145,  145,  145,  145,  145,
      145,  145,  146,  147,  547,  148,  148,  148,  148,  148,
      148,  148,  148,  172,  173, 1392, 1392,  149,  184,  185,
      154,  186,  187,  188,  189,  190,  191,  192,  193, 1316,
      194,  195,  196,  197,  547,   82,   82,   82,   82,   82,
       82,   83,   84,   84,   84,   84,   85,   86,   86,   87,
       88,   88,   89,  118,  118,  118,  118,  118,  118,  119,
      120,  120,  120,  120,  121,  122,  122,  123,  124,  124,
      125,  151,  156,  152,  152,  152,  152,  152,  152,  152,

      152,  292,  292,  285,  285,  285,  285,  201,   76,  292,
      292,   76,  153,  292,  292,  292,  292,  201,  292,  702,
      702,  936,  550,  174,  174,  174,  174,  174,  174,  175,
      176,  176,  176,  176,  177,  178,  178,  179,  180,  180,
      181,  519,  153,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  550,  157,  158,  201,  159,  160,  161,  162,
      163,  164,  165,  166,  286,  167,  168,  169,  170,  199,
      200,  519,  199,  199,  199,  199,  199,  199,  199,  199,
      201,   99,   99,   99,   99,  522,   99,  199,  202,  199,
      203,  199,  199,  199,  199,  199,  199,  199,  204,  199,

      205,  199,  199,  199,  206,  199,  199,  207,  199,  199,
      199,  199,  201, 1392, 1392,  522,  199,  199,  202,  199,
      203,  199,  199,  199,  199,  199,  199,  199,  204,  199,
      205,  199,  199,  199,  206,  199,  199,  207,  199,  199,
      199,  199,  307,  307,  307,  307,  308,  309,  309,  310,
       99,   99,  128,  128,  587,  199,  155,  201,   99,   99,
      128,  128,  199,  155,  155,  199,  849,  242,  645,  748,
      748,  155, 1203,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  199,  220,  221,  222,  223,
      224,  199,  199,  199,  183,  199,  849,  242,  225,  199,

      183,  199,  183,  226,  227,  201,  199,  199,  183,  199,
      199,  199, 1202,  228,  126,  126,  126,  126,  525,  201,
      224,  199,  199,  199,  199,  201,  127,  201,  225,  199,
      199,  199,  199,  226,  227,  520,  199,  199,  199,  199,
      199,  199,  229,  228,  596,  521,  199,  201,  525,  230,
      199,  199,  231, 1230,  232,  233,  523,  199, 1201,  234,
      199,  199,  263,  235,  524,  520,  199, 1231,  199,  199,
      199,  236,  229, 1232,  596,  521,  199, 1181,  199,  230,
      199,  199,  231,  201,  232,  233,  523,  199,  199,  234,
      199,  199,  263,  235,  524,  199,  199,  237,  199,  199,

      199,  236,  201,  199,  199,  243,  238,  239,  627,  199,
      240, 1167,  199,  199, 1392,  241,  199,  201,  199,  244,
      201,  199,  649,  548,  201,  199,  650,  237,  199,  201,
      199,  551,  651,  199, 1161,  243,  238,  239,  627,  199,
      240,  546,  201,  199,  566,  241,  199,  199,  245,  244,
      249,  199,  250,  548,  199,  201,  246,  199,  251,  247,
      248,  551,  253,  199,  252,  254,  255,  838,  549,  838,
      256,  546,  644,  199,  566,  199,  257,  199,  245, 1160,
      249,  573,  250,  333,  199,  199,  246,  199,  251,  247,
      248,  333,  253,  199,  252,  254,  255,  201,  549,  258,

      256, 1154,  201,  199,  201,  199,  257,  199,  556,  199,
      260,  573,  199,  259,  264,  199,  199, 1153,  265,  199,
      261,  262,  199,  629,  582,  199,  562,  201,  266,  258,
      199,  128,  128,  128,  128, 1131,  128,  199,  556,  199,
      260,  201,  199,  259,  264,  333,  199,  589,  265,  199,
      261,  262,  199,  333,  582,  199,  562,  267,  266,  567,
      199,  268,  199,  201,  269,  270,  273,  850,  199,  199,
      936,  199,  274,  199,  199,  271,  272,  589,  155,  155,
      155,  155,  275,  155,  563,  201,  201,  267,  201,  567,
      201,  268,  199,  583,  269,  270,  273,  850,  199,  199,

      595,  199,  274,  199,  199,  271,  272,  276, 1102,  199,
      557,  201,  275,  201,  563,  558,  199,  572,  277,  199,
      381,  278,  279,  583,  280,  381,  576,  281,  381,  201,
      595,  199,  201,  381,  568, 1101,  585,  276,  199,  199,
      557,  199,  432,  199,  201,  558,  199,  572,  277,  199,
      432,  278,  279,  569,  280,  199,  576,  281,  282,  283,
      201,  199,  199,  584,  568,  199,  585,  199,  199,  284,
      199,  199,  559,  199,  239,  201,  199,  240,  560,  199,
      199,  199,  241,  569,  561,  199, 1392, 1392,  282,  283,
      201,  201,  199,  584,  588,  199,  289,  199,  201,  284,

      199,  198,  559,  201,  239,  198,  199,  240,  560,  199,
      199,  199,  241,  199,  561,  574,  575,  273,  600,  586,
      199,  201,  592,  274,  588,  199,  183,  183,  183,  183,
     1100,  183,  626,  275,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  199,  518,  574,  575,  273,  600,  586,
      199,  481,  592,  274,  432,  290,  647,  647,  647,  647,
      647,  647,  626,  275,  295,  296,  297,  297,  298,  299,
      299,  299,  299,  299,  299,  299,  300,  299,  299,  299,
      299,  299,  299,  301,  301,  301,  301,  301,  302,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      314,   79,  285,  285,  285,  285,   79,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  322,
      322,  322,  322,  322,  322,  322,  322,  323,  292,  292,
      292,  292,  292,  292,  381,   81,   79,  333,  333,  333,

      333,   79,  333,  286,  432,   79,  703,  703,  703,  703,
      703,  703,  432,   79,  794,  794,   79,  333,   79,   91,
       91,   91,   91,   91,   91,   92,   93,   93,   93,   93,
       94,   95,   95,   96,   97,   97,   98,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  330,  330,  330,  330,
      330,  330,  330,  330,  331,   82,   82,   82,   82,   82,
       82,   83,   84,   84,   84,   84,   85,   86,   86,   87,
       88,   88,   89,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  328,  328,  332,  332,  332,  332,  332,
      332,  332,  332,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  363,  363,
      363,  363,  364,  365,  365,  366,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  334,  372,  372,  372,  372,  372,  372,  372,  372,
      372, 1392, 1392,  977,  115,  829,  829,  976,  370,  115,

       99,   99,   99,   99,   99,   99,  335,  336,  337,  975,
      338,  339,  340,  341,  342,  343,  344,  345,  974,  346,
      347,  348,  349,  352,  353,  354,  354,  355,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  357,  357,  357,  357,  357,  358,  117,  115,
      381,  381,  381,  381,  115,  381,  963,  432,  115,  749,
      749,  749,  749,  749,  749,  432,  115, 1392,  199,  115,
      183,  115,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376, 1392, 1392, 1392, 1392,  118,  118,
      118,  118,  118,  118,  119,  120,  120,  120,  120,  121,
      122,  122,  123,  124,  124,  125,  378,  378,  378,  378,
      378,  378,  378,  378,  379,  380,  380,  380,  380,  380,
      380,  380,  380,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  411,  411,
      411,  411,  412,  413,  413,  414,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  417,  417,  417,  417,  417,  417,  417,  417,

      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  382,  419,  419,  419,  419,  419,  419,  419,  419,
      422,  422,  422,  422,  422,  422,  422,  422,  465,  465,
      465,  465,  466,  467,  467,  468,  383,  384,  385,  818,
      386,  387,  388,  389,  390,  391,  392,  393,  480,  394,
      395,  396,  397,  400,  401,  402,  402,  403,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  406,  420,  480,
      145,  145,  145,  145,  145,  145,  145,  145,  423,  808,
      148,  148,  148,  148,  148,  148,  148,  148,  201,  421,

      150,  150,  150,  150,  150,  150,  150,  150,  201,  424,
      201,  426,  426,  426,  426,  426,  426,  426,  426,  425,
      597,  851,  431,  155,  604,  432,  481,  617,  481,  421,
      427,  433,  783,  432,  481,  201,  481,  432,  151,  424,
      152,  152,  152,  152,  152,  152,  152,  152,  201,  425,
      597,  851,  201,  612,  604,  570,  428,  617,  428,  153,
      427,  429,  429,  429,  429,  429,  429,  429,  429,  571,
      625,  852,  201,  201,  434,  430,  430,  430,  430,  430,
      430,  430,  430,  612,  143,  570,  128,  622,  623,  153,
      430,  430,  430,  430,  430,  430,  201,  853,  737,  571,

      625,  852,  451,  611,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  622,  623,  380,
      430,  430,  430,  430,  430,  430,  451,  853,  451,  380,
      451,  451,  727,  611,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446,   99,  447,  448,  449,
      450,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      691,  451,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  173,  472,
      472,  472,  472,  472,  472,  472,  472,  472, 1392, 1392,
      451,  454,  455,  456,  456,  457,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      459,  459,  459,  459,  459,  460,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  173,  478,  478,  478,  478,  478,  478,  478,  478,
      479,  128,  128,  128,  128,  128,  128,  174,  174,  174,
      174,  174,  174,  175,  176,  176,  176,  176,  177,  178,
      178,  179,  180,  180,  181,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  511,  511,  511,  511,
      512,  513,  513,  514,  795,  795,  795,  795,  795,  795,
      174,  174,  174,  174,  174,  174,  175,  176,  176,  176,
      176,  177,  178,  178,  179,  180,  180,  181,  480,  480,
      480,  480,  480,  480,  480,  480,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  517,  517,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  200,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  201,  155,  155,
      155,  155,  155,  155,  482,  200,  539,  539,  539,  539,
      540,  541,  541,  542,  332, 1392, 1392, 1392,  332,  154,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  483,
      484,  485,  681,  486,  487,  488,  489,  490,  491,  492,
      493,  675,  494,  495,  496,  497,  500,  501,  502,  502,
      503,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  505,  505,  505,  505,  505,

      506,  156,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538, 1392, 1392,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  292,  220,  221,  222,  223,  201,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      201,  220,  221,  222,  223,  481,  481,  481,  481,  201,
      481,  201,  157,  158,  201,  159,  160,  161,  162,  163,
      164,  165,  166,  535,  167,  168,  169,  170,  528,  529,
      530,  530,  531,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  533,  533,  533,

      533,  533,  534,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  201,  201,
      201,  201,  201,  199,  201,  552,  854,  201,  564,  565,
      605,  201,  855,  598,  518,  577,  507,  599,  553,  606,
      554,  590,  578,  201,  555,  579,  624,  580,  591,  593,
      613,  201,  594,  581,  461,  552,  854,  859,  564,  565,
      605,  601,  855,  598,  602,  577,  614,  599,  553,  606,
      554,  590,  578,  603,  555,  579,  624,  580,  591,  593,

      613,  201,  594,  581,  201,  201,  660,  859,  860,  615,
      201,  601,  618,  607,  602,  201,  614,  628,  861,  862,
      616,  863,  608,  603,  864,  619,  609,  610,  839,  839,
      620,  407,  865,  866, 1392, 1392,  621,  371,  860,  615,
      989,  989,  618,  607,  359,  867,  840,  628,  861,  862,
      616,  863,  608,  315,  864,  619,  609,  610,  990,  868,
      620,  661,  865,  866,  630,  631,  621,  632,  633,  634,
      635,  636,  637,  638,  639,  867,  640,  641,  642,  643,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  868,
      869,  648,  654,  654,  654,  654,  654,  654,  654,  654,

      654,  695,  695,  695,  695,  696,  697,  697,  698,  629,
      629,  655,  655,  655,  655,  655,  655,  629,  629,  303,
      869,  662,  662,  662,  662,  662,  662,  663,  664,  664,
      664,  664,  665,  666,  666,  667,  668,  668,  669,  332,
      332,  332,  332,  332,  332,  332,  332,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  741,  741,  741,
      741,  742,  743,  743,  744,  334,  429,  429,  429,  429,
      429,  429,  429,  429,  712,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  830,  830,  830,  830,  830,  830,
      335,  336,  337,  291,  338,  339,  340,  341,  342,  343,
      344,  345,  288,  346,  347,  348,  349,  332,  332,  332,
      332,  332,  332,  332,  332,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  713,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  707,  707,  707,  707,  707,  707,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  429,  429,  429,  429,  429,  429,  429,  429,
      287,  870,  182,  334,  714,  714,  714,  714,  714,  714,
      715,  716,  716,  716,  716,  717,  718,  718,  719,  720,
      720,  721,  183,  183,  183,  183,  183,  183,  335,  336,
      337,  870,  338,  339,  340,  341,  342,  343,  344,  345,
      114,  346,  347,  348,  349,  684,  685,  686,  686,  687,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  689,  689,  689,  689,  689,  690,

      380,  380,  380,  380,  380,  380,  380,  380,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  419,  419,  419,  419,
      419,  419,  419,  419,  871,  872,  753,  753,  753,  753,
      753,  753, 1392, 1392,   78,  757,  787,  787,  787,  787,
      788,  789,  789,  790,  758,  758,  758,  758,  758,  758,
      758,  758, 1392, 1392,  871,  872,  382,  911,  912,  913,
       77,  914,  760,  759,  760,  757, 1392,  761,  761,  761,
      761,  761,  761,  761,  761,  199,  199,  199,  199,  199,

      199,  383,  384,  385, 1392,  386,  387,  388,  389,  390,
      391,  392,  393,  759,  394,  395,  396,  397,  380,  380,
      380,  380,  380,  380,  380,  380,  422,  422,  422,  422,
      422,  422,  422,  422,  763,  763,  763,  763,  763,  763,
      763,  763, 1392, 1392, 1392,  762,  873,  874,  875,  765,
      876,  765,  877,  764,  766,  766,  766,  766,  766,  766,
      766,  766,  767,  878,  767, 1392, 1392,  768,  768,  768,
      768,  768,  768,  768,  768,  762,  873,  874,  875,  769,
      876,  769,  877,  764,  770,  770,  770,  770,  770,  770,
      770,  770,  879,  878,  382,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  629,  629,  629,  629, 1392,  629,  383,
      384,  385,  879,  386,  387,  388,  389,  390,  391,  392,
      393, 1392,  394,  395,  396,  397,  730,  731,  732,  732,
      733,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  735,  735,  735,  735,  735,
      736,  426,  426,  426,  426,  426,  426,  426,  426,  771,
      771,  771,  771,  771,  771,  771,  771, 1392,  880,  881,
      427,  431,  882,  883,  771,  771,  771,  771,  771,  771,
      433,  991,  991,  991,  991,  991,  991, 1392,  431,  822,

      822,  822,  822,  823,  824,  824,  825,  433,  880,  881,
      427, 1392,  882,  883,  771,  771,  771,  771,  771,  771,
      772,  772,  772,  772,  772,  772,  772,  772, 1142, 1142,
      884,  885,  886,  434,  887,  772,  772,  772,  772,  772,
      772,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      434,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      884,  885,  886, 1392,  887,  772,  772,  772,  772,  772,
      772,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786, 1009, 1009, 1392,
     1392, 1392,  888,  435,  436,  437,  438,  439,  440,  441,

      442,  443,  444,  445,  446, 1010,  447,  448,  449,  450,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
      445,  446,  888,  447,  448,  449,  450,  773, 1392,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  773,  889,  773,  840,  773,  773,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  841,  841,  841,  841,  841,  841,  890,
      891,  892,  889,  893,  894, 1392,  773,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793, 1392, 1392, 1392,  890,
      891,  892, 1392,  893,  894,  773,  776,  777,  778,  778,
      779,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  781,  781,  781,  781,  781,
      782,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      954,  954,  954,  954,  954,  954,  954,  954,  954, 1392,
      799,  799,  799,  799,  799,  799,  480,  480,  480,  480,
      480,  480,  480,  480,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,

      826,  826,  826,  826,  826,  826,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  895,  896,  897, 1392, 1392,  838,
      200,  838,  482,  838,  834,  834,  834,  834,  834,  834,
      201,  967,  967,  967,  967,  968,  969,  969,  970, 1392,
      200, 1392, 1392, 1392,  895,  896,  897,  483,  484,  485,
      201,  486,  487,  488,  489,  490,  491,  492,  493,  898,
      494,  495,  496,  497,  480,  480,  480,  480,  480,  480,
      480,  480,  844,  844,  844,  844,  844,  844,  844,  844,

      844,  899,  900,  901,  902,  903,  904,  907,  908,  898,
      909,  845,  845,  845,  845,  845,  845,  333,  333,  333,
      333,  333,  333, 1028, 1028,  910, 1392, 1392, 1392, 1392,
     1392,  899,  900,  901,  902,  903,  904,  907,  908, 1392,
      909, 1029, 1392,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  910,  220,  221,  222,  223,
      482, 1392, 1392,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  936,  220,  221,  222,  223,
      937, 1392, 1392,  936, 1392,  483,  484,  485, 1392,  486,
      487,  488,  489,  490,  491,  492,  493, 1392,  494,  495,

      496,  497,  811,  812,  813,  813,  814,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  816,  816,  816,  816,  816,  817,  856,  905,  915,
      916,  924,  925,  917,  918,  926,  919,  920,  927,  906,
      928,  929,  857,  858,  921,  930,  931,  932,  933,  934,
      922,  935,  923, 1392, 1392, 1392, 1392,  856,  905,  915,
      916,  924,  925,  917,  918,  926,  919,  920,  927,  906,
      928,  929,  857,  858,  921,  930,  931,  932,  933,  934,
      922,  935,  923,  938,  939,  940,  941,  942,  943,  944,
      945,  946,  947,  948,  949, 1392,  950,  951,  952,  953,

      956,  957,  958,  958,  959,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  961,
      961,  961,  961,  961,  962,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  660, 1392,  659, 1392,
     1392, 1392, 1392,  659,  979,  979,  979,  979,  979,  979,
      979,  979,  979, 1392,  978,  981,  981,  981,  981,  981,

      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  983,  983,  983,  983,  983,  983,  983,  983,  983,
      983,  983,  983,  983,  983,  983,  983,  314,  936,  936,
     1392,  661,  936,  659, 1039, 1039,  936,  936,  659, 1392,
      936, 1392,  659, 1011, 1011, 1011, 1011, 1011, 1011, 1392,
      659, 1049, 1040,  659, 1392,  659,  985,  985,  985,  985,
      985,  985,  985,  985,  986,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  381,  381,  381,  381,  381,  381,
     1392, 1049,   81,  761,  761,  761,  761,  761,  761,  761,
      761,  662,  662,  662,  662,  662,  662,  663,  664,  664,

      664,  664,  665,  666,  666,  667,  668,  668,  669, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1392,  712, 1392, 1392,
     1392, 1392,   82,   82,   82,   82,   82,   82,   83,   84,
       84,   84,   84,   85,   86,   86,   87,   88,   88,   89,
       91,   91,   91,   91,   91,   91,   92,   93,   93,   93,
       93,   94,   95,   95,   96,   97,   97,   98,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  713, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1007,  995,  995,  995,

      995,  995,  995,  332,  332,  332,  332,  332,  332,  332,
      332,  711, 1392, 1392, 1392, 1050,  711, 1392, 1392,  999,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1050, 1051,  714,  714,  714,
      714,  714,  714,  715,  716,  716,  716,  716,  717,  718,
      718,  719,  720,  720,  721, 1392,  711, 1392, 1392, 1392,
     1392,  711, 1392, 1392, 1392,  711, 1051, 1052, 1392,  334,
     1392, 1392, 1392,  711, 1392, 1019,  711, 1019,  711, 1392,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,  432,  432,

      432,  432,  432,  432,  335,  336,  337, 1052,  338,  339,
      340,  341,  342,  343,  344,  345, 1392,  346,  347,  348,
      349,  332,  332,  332,  332,  332,  332,  332,  332, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004,  370, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014,  761,  761,  761,  761,  761,  761,  761,
      761, 1392, 1053, 1015, 1015, 1015, 1015, 1015, 1015,  766,
      766,  766,  766,  766,  766,  766,  766,  334,  758,  758,

      758,  758,  758,  758,  758,  758, 1041, 1041, 1041, 1041,
     1041, 1041, 1053,  117, 1054, 1392, 1055,  759, 1392, 1392,
     1392, 1392,  335,  336,  337, 1392,  338,  339,  340,  341,
      342,  343,  344,  345, 1392,  346,  347,  348,  349, 1056,
     1057, 1058, 1059, 1021, 1054, 1021, 1055,  759, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1023, 1392, 1023, 1392,
     1392, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1056,
     1057, 1058, 1059,  118,  118,  118,  118,  118,  118,  119,
      120,  120,  120,  120,  121,  122,  122,  123,  124,  124,
      125,  380,  380,  380,  380,  380,  380,  380,  380,  763,

      763,  763,  763,  763,  763,  763,  763,  481,  481,  481,
      481,  481,  481, 1060, 1025, 1061, 1025, 1062,  764, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026,  766,  766,  766,
      766,  766,  766,  766,  766,  768,  768,  768,  768,  768,
      768,  768,  768, 1060, 1392, 1061, 1392, 1062,  764,  768,
      768,  768,  768,  768,  768,  768,  768,  770,  770,  770,
      770,  770,  770,  770,  770, 1063, 1392,  382,  770,  770,
      770,  770,  770,  770,  770,  770,  431, 1135, 1135, 1135,
     1135, 1136, 1137, 1137, 1138,  433, 1143, 1143, 1143, 1143,
     1143, 1143,  383,  384,  385, 1063,  386,  387,  388,  389,

      390,  391,  392,  393, 1392,  394,  395,  396,  397,  380,
      380,  380,  380,  380,  380,  380,  380, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1029, 1392, 1392,  434,  431,
     1064, 1065, 1027, 1027, 1027, 1027, 1027, 1027,  433, 1066,
     1067, 1068, 1069, 1070, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1392,
     1064, 1065, 1027, 1027, 1027, 1027, 1027, 1027, 1392, 1066,
     1067, 1068, 1069, 1070, 1392,  431, 1071, 1072, 1073, 1074,
     1392,  434, 1392, 1075,  433,  382, 1392, 1392,  435,  436,
      437,  438,  439,  440,  441,  442,  443,  444,  445,  446,

     1392,  447,  448,  449,  450, 1392, 1071, 1072, 1073, 1074,
      383,  384,  385, 1075,  386,  387,  388,  389,  390,  391,
      392,  393,  173,  394,  395,  396,  397,  434, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1076, 1077, 1078,
     1079,  435,  436,  437,  438,  439,  440,  441,  442,  443,
      444,  445,  446, 1392,  447,  448,  449,  450, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1076, 1077, 1078,
     1079, 1392, 1392,  200, 1080, 1081, 1082, 1034, 1034, 1034,
     1034, 1034, 1034,  201, 1392, 1392, 1392,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  444,  445,  446,  200,

      447,  448,  449,  450, 1080, 1081, 1082, 1392, 1083,  201,
     1084,  174,  174,  174,  174,  174,  174,  175,  176,  176,
      176,  176,  177,  178,  178,  179,  180,  180,  181, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1083, 1085,
     1084, 1086, 1087, 1088, 1089, 1090, 1392, 1392, 1045, 1045,
     1045, 1045, 1045, 1045,  480,  480,  480,  480,  480,  480,
      480,  480, 1392, 1091, 1092, 1093, 1094, 1095, 1096, 1085,
     1097, 1086, 1087, 1088, 1089, 1090,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219,  937,  220,
      221,  222,  223, 1091, 1092, 1093, 1094, 1095, 1096, 1098,

     1097, 1099,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  219, 1103,  220,  221,  222,  223, 1104,
     1105, 1106, 1107, 1108, 1109,  937, 1392, 1227, 1110, 1098,
      482, 1099, 1392, 1392, 1392, 1392, 1228, 1111,  629,  629,
      629,  629,  629,  629, 1103, 1229, 1392, 1392, 1392, 1104,
     1105, 1106, 1107, 1108, 1109,  483,  484,  485, 1110,  486,
      487,  488,  489,  490,  491,  492,  493, 1111,  494,  495,
      496,  497,  480,  480,  480,  480,  480,  480,  480,  480,
     1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
     1392,  938,  939,  940,  941,  942,  943,  944,  945,  946,

      947,  948,  949, 1392,  950,  951,  952,  953, 1392, 1392,
     1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
     1168,  950,  951,  952,  953, 1392, 1169, 1392,  482, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1217, 1217, 1392,
     1168, 1392, 1392,  483,  484,  485, 1169,  486,  487,  488,
      489,  490,  491,  492,  493, 1218,  494,  495,  496,  497,
     1124, 1125, 1126, 1126, 1127, 1128, 1128, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1129,
     1129, 1129, 1129, 1129, 1130, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1355, 1392, 1170, 1392, 1392,
     1392,  200, 1392, 1392, 1228, 1147, 1147, 1147, 1147, 1147,
     1147,  201, 1392, 1229, 1392, 1392, 1392, 1171,  200, 1020,

     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1170,  201,   91,
       91,   91,   91,   91,   91,   92,   93,   93,   93,   93,
       94,   95,   95,   96,   97,   97,   98, 1171,  314, 1172,
     1173, 1174, 1151, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1392, 1392, 1172,
     1173, 1174, 1392,  370, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1392, 1392, 1392,   81,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  219, 1392,  220,  221,  222,

      223,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  117,  220,  221,  222,  223,  528,  529,
      530,  530,  531,  532,  532,  532,  532,  532,  532,  532,
     1152,  532,  532,  532,  532,  532,  532,  533,  533,  533,
      533,  533,  534,   82,   82,   82,   82,   82,   82,   83,
       84,   84,   84,   84,   85,   86,   86,   87,   88,   88,
       89,  332,  332,  332,  332,  332,  332,  332,  332, 1392,
     1392, 1175, 1176,  118,  118,  118,  118,  118,  118,  119,
      120,  120,  120,  120,  121,  122,  122,  123,  124,  124,
      125, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,  431,

      173, 1175, 1176, 1177, 1178, 1179, 1180, 1392,  433, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1392,  431, 1194, 1195, 1392, 1196, 1197, 1198, 1199,
     1200,  433, 1392, 1177, 1178, 1179, 1180,  334, 1392, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193,  434, 1392, 1194, 1195,  200, 1196, 1197, 1198, 1199,
     1200, 1392,  335,  336,  337,  201,  338,  339,  340,  341,
      342,  343,  344,  345,  434,  346,  347,  348,  349,  332,
      332,  332,  332,  332,  332,  332,  332, 1392, 1392,  174,
      174,  174,  174,  174,  174,  175,  176,  176,  176,  176,

      177,  178,  178,  179,  180,  180,  181, 1392, 1392, 1392,
     1392,  435,  436,  437,  438,  439,  440,  441,  442,  443,
      444,  445,  446,  200,  447,  448,  449,  450, 1392, 1392,
     1392, 1392, 1392,  201,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446, 1204,  447,  448,  449,
      450, 1392, 1392, 1205, 1392,  334, 1392, 1392,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
     1392,  220,  221,  222,  223, 1206, 1204, 1207, 1208, 1209,
      335,  336,  337, 1205,  338,  339,  340,  341,  342,  343,
      344,  345, 1210,  346,  347,  348,  349,  380,  380,  380,

      380,  380,  380,  380,  380, 1206, 1392, 1207, 1208, 1209,
     1392, 1392, 1392, 1211, 1212, 1213, 1214, 1215, 1216, 1392,
     1392, 1392, 1210, 1392, 1392, 1392,  208,  209,  210,  211,
      212,  213,  214,  215,  216,  217,  218,  219, 1218,  220,
      221,  222,  223, 1211, 1212, 1213, 1214, 1215, 1216,  936,
      936,  936,  936,  936,  936,  937,  199, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1392,  382, 1392, 1392,  937, 1392, 1392, 1392,
      199,  660, 1392, 1392, 1392, 1392,  199, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1392, 1392,  383,  384,

      385, 1392,  386,  387,  388,  389,  390,  391,  392,  393,
      199,  394,  395,  396,  397,  380,  380,  380,  380,  380,
      380,  380,  380, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1392, 1392, 1392, 1392,  661, 1392,  200, 1392,
     1243, 1392, 1223, 1223, 1223, 1223, 1223, 1223,  201, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1392,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
     1243,  950,  951,  952,  953, 1392, 1392, 1392,  712,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  947,  948,
      949,  382,  950,  951,  952,  953,  662,  662,  662,  662,

      662,  662,  663,  664,  664,  664,  664,  665,  666,  666,
      667,  668,  668,  669, 1392, 1392,  383,  384,  385, 1392,
      386,  387,  388,  389,  390,  391,  392,  393,  713,  394,
      395,  396,  397,  480,  480,  480,  480,  480,  480,  480,
      480,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  199,  220,  221,  222,  223,  200, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1341,  201, 1392,
     1392, 1392, 1392, 1392, 1392, 1392,  199, 1235,  199, 1392,
     1242,  199, 1392,  199, 1245,  199, 1392, 1237,  714,  714,
      714,  714,  714,  714,  715,  716,  716,  716,  716,  717,

      718,  718,  719,  720,  720,  721,  199, 1235,  199,  482,
     1242,  199, 1244, 1356, 1245,  199,  199, 1237, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1392, 1231, 1392, 1238,
      199, 1392, 1392, 1232,  483,  484,  485, 1392,  486,  487,
      488,  489,  490,  491,  492,  493,  199,  494,  495,  496,
      497,  480,  480,  480,  480,  480,  480,  480,  480, 1238,
      199,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  199,  220,  221,  222,  223,  199, 1240,
     1240, 1240, 1240,  199,  199, 1241,  199,  199,  199,  199,
     1236, 1248,  199,  199, 1239,  199,  199, 1392, 1246, 1246,

     1246, 1246, 1249,  199, 1247, 1251, 1250, 1254,  199,  199,
     1252, 1253, 1392,  199,  199,  199,  199,  199,  199,  199,
     1236, 1248,  199,  199, 1239,  199,  199,  482, 1392, 1392,
     1392, 1392, 1249, 1392,  199, 1251, 1250, 1254, 1392,  199,
     1252, 1253,  199, 1255,  199,  199, 1256,  199,  199, 1260,
      199,  199,  483,  484,  485,  199,  486,  487,  488,  489,
      490,  491,  492,  493,  199,  494,  495,  496,  497, 1257,
      199,  199,  199, 1255,  199,  199, 1256,  199,  199, 1260,
      199,  199,  199,  199,  199,  199, 1258,  199,  199, 1261,
      199, 1259,  199,  199, 1264, 1262,  199, 1266,  199, 1257,

      199,  199,  199, 1263,  199,  199, 1265,  199,  199, 1267,
      199,  199,  199,  199,  199,  199, 1258,  199,  199, 1261,
      199, 1259,  199,  199, 1264, 1262,  199, 1266,  199, 1268,
      199,  660,  199, 1263,  199, 1272, 1265,  199,  199, 1267,
      199,  199,  199,  199, 1271,  199,  199,  199, 1274,  199,
     1240, 1240, 1240, 1240,  712,  199, 1241, 1392, 1273, 1268,
      199,  199, 1306, 1288,  199, 1272, 1392, 1290,  199,  199,
     1392, 1289,  199,  199, 1271, 1392,  199,  199, 1274,  199,
     1291, 1304,  199,  199,  199,  199,  661, 1275, 1273,  199,
     1305,  199, 1306, 1288,  199,  199,  976, 1290,  199,  199,

     1269, 1289,  977,  199,  713, 1276,  199,  199,  199,  199,
     1291, 1304,  199,  199,  199, 1307, 1392, 1275, 1392,  199,
     1305, 1392, 1270, 1392, 1392,  199, 1392, 1392, 1392, 1392,
     1392, 1392, 1392,  199, 1392, 1276,  199,  199,  199,  199,
     1392, 1392, 1392, 1392, 1392, 1307,  662,  662,  662,  662,
      662,  662,  663,  664,  664,  664,  664,  665,  666,  666,
      667,  668,  668,  669,  714,  714,  714,  714,  714,  714,
      715,  716,  716,  716,  716,  717,  718,  718,  719,  720,
      720,  721, 1278, 1246, 1246, 1246, 1246, 1392,  199, 1247,
     1392,  199,  199, 1313, 1314,  199,  199,  199, 1279, 1318,

     1280, 1280, 1280, 1280, 1280, 1280, 1281, 1282, 1282, 1282,
     1282, 1283, 1284, 1284, 1285, 1286, 1286, 1287,  199, 1392,
     1292,  199,  199, 1313, 1314,  199,  199,  199, 1392, 1318,
     1392, 1392, 1392, 1294, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1319,  199,  199, 1392, 1335, 1295,
     1292, 1296, 1296, 1296, 1296, 1296, 1296, 1297, 1298, 1298,
     1298, 1298, 1299, 1300, 1300, 1301, 1302, 1302, 1303,  199,
      199,  199,  199,  199, 1319,  199,  199,  199, 1335, 1308,
     1349,  199, 1309,  199,  199, 1310, 1311,  199, 1334, 1312,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  199,

      199,  199,  199,  199, 1392, 1392, 1392,  199, 1392, 1308,
     1349,  199, 1309,  199,  199, 1310, 1311,  199, 1334, 1312,
      528,  529,  530,  530,  531,  532,  532,  532,  532,  532,
      532,  532, 1315,  532,  532,  532,  532,  532,  532,  533,
      533,  533,  533,  533,  534,  199,  199,  199,  199,  199,
      199, 1352,  199, 1350,  199, 1354, 1348, 1357, 1333, 1358,
     1359, 1317, 1392, 1392, 1392, 1392, 1351, 1360, 1392, 1392,
     1392, 1392, 1392, 1392, 1392,  199,  199,  199,  199,  199,
      199, 1352,  199, 1350,  199, 1354, 1348, 1357, 1333, 1358,
     1359, 1317, 1320, 1240, 1240, 1320, 1351, 1360, 1321, 1328,

     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1392, 1366, 1392, 1367, 1368,
      199,  199,  199,  199, 1373,  199,  199,  199, 1374, 1322,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1366, 1323, 1367, 1368,
      199,  199,  199,  199, 1373,  199,  199,  199, 1374, 1322,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1375, 1323, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1278, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1277, 1375,  199, 1392,  199,
     1279, 1392, 1280, 1280, 1280, 1280, 1280, 1280, 1281, 1282,
     1282, 1282, 1282, 1283, 1284, 1284, 1285, 1286, 1286, 1287,
     1336, 1246, 1246, 1336,  199, 1277, 1337,  199,  199,  199,
     1380, 1379,  199,  199, 1381,  199, 1383, 1384,  199, 1353,
     1277, 1277, 1365, 1388, 1392,  199, 1277, 1389,  199, 1392,
     1382, 1277, 1385,  199,  199, 1386, 1392, 1338,  199, 1378,
     1380, 1379,  199,  199, 1381,  199, 1383, 1384,  199, 1353,
     1277, 1277, 1365, 1388,  199,  199, 1277, 1389,  199,  199,
     1382, 1277, 1385,  199, 1392, 1386, 1392, 1338,  199, 1269,

     1387, 1270, 1392, 1390, 1391, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392,  199, 1392, 1392, 1392, 1392,  199,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  199, 1392,
     1387, 1392, 1294, 1390, 1391, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1295, 1392,
     1296, 1296, 1296, 1296, 1296, 1296, 1297, 1298, 1298, 1298,
     1298, 1299, 1300, 1300, 1301, 1302, 1302, 1303, 1320, 1240,
     1240, 1320, 1392, 1392, 1321, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1322, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1323, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1322, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1323, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1278, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1279, 1392, 1280, 1280,
     1280, 1280, 1280, 1280, 1281, 1282, 1282, 1282, 1282, 1283,

     1284, 1284, 1285, 1286, 1286, 1287, 1320, 1240, 1240, 1320,
     1392, 1392, 1321, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1322, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1323, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1322, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1323, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1278, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1279, 1392, 1280, 1280, 1280, 1280,
     1280, 1280, 1281, 1282, 1282, 1282, 1282, 1283, 1284, 1284,
     1285, 1286, 1286, 1287, 1336, 1246, 1246, 1336, 1392, 1392,
     1337, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1338, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1338, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1294, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1295, 1392, 1296, 1296, 1296, 1296, 1296, 1296,
     1297, 1298, 1298, 1298, 1298, 1299, 1300, 1300, 1301, 1302,
     1302, 1303, 1336, 1246, 1246, 1336, 1392, 1392, 1337, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1338,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1338,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1294, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1295, 1392, 1296, 1296, 1296, 1296, 1296, 1296, 1297, 1298,
     1298, 1298, 1298, 1299, 1300, 1300, 1301, 1302, 1302, 1303,
     1320, 1240, 1240, 1320, 1392, 1392, 1321, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1322, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1376, 1392, 1392, 1323, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1322, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1376, 1392, 1392, 1323, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1278, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1279, 1392,
     1280, 1280, 1280, 1280, 1280, 1280, 1281, 1282, 1282, 1282,
     1282, 1283, 1284, 1284, 1285, 1286, 1286, 1287, 1320, 1240,
     1240, 1320, 1392, 1392, 1321, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1322, 1377, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1323, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1322, 1377, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1323, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1278, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1279, 1392, 1280, 1280,
     1280, 1280, 1280, 1280, 1281, 1282, 1282, 1282, 1282, 1283,
     1284, 1284, 1285, 1286, 1286, 1287,   79, 1392,   79,   79,

       79,   79,   79,   79,   79,   79,   79, 1392, 1392, 1392,
     1392, 1392, 1392, 1392,   79,   79,   79,   79,   90, 1392,
       90,   90,   90,   90,   90,   90,   90,   90,   90, 1392,
     1392, 1392, 1392, 1392, 1392, 1392,   90,   90,   90,   90,
       99, 1392,   99, 1392,   99, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392,   99,  115, 1392,  115,  115,  115,  115,
      115,  115,  115,  115,  115, 1392, 1392, 1392, 1392, 1392,
     1392, 1392,  115,  115,  115,  115,  128, 1392,  128, 1392,
      128, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  128,
      155, 1392, 1392,  155,  155,  155,  155,  155, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392,  155,  171,  171,  171,
      171,  171,  171,  171, 1392,  171, 1392, 1392, 1392, 1392,
     1392, 1392, 1392,  171,  171,  171,  171,  183, 1392,  183,
     1392,  183, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
      183,  292,  292,  292, 1392,  292,  292,  294,  294,  294,
      294,  294,  294,  304,  304,  304,  304,  304,  304,  305,
      305,  305,  305,  305,  305,  312,  312,  312,  312,  312,
      312,   79, 1392,   79,   79,   79,   79,   79,   79,   79,
       79,   79, 1392, 1392, 1392, 1392, 1392, 1392, 1392,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,  317,

      317,  317,  317,  317,  317,  319,  319,  319,  319,  319,
      319,  321,  321,  321,  321,  321,  321,   90, 1392,   90,
       90,   90,   90,   90,   90,   90,   90,   90, 1392, 1392,
     1392, 1392, 1392, 1392, 1392,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  325,  325,  325,  325,  325,
      325,  327,  327,  327,  327,  327,  327,  329,  329,  329,
      329,  329,  329,  333, 1392,  333, 1392,  333, 1392,  333,
     1392, 1392, 1392, 1392, 1392,  333,  333,   99,   99,   99,
     1392,   99,   99,  351,  351,  351,  351,  351,  351,  360,
      360,  360,  360,  360,  360,  361,  361,  361,  361,  361,

      361,  368,  368,  368,  368,  368,  368,  115, 1392,  115,
      115,  115,  115,  115,  115,  115,  115,  115, 1392, 1392,
     1392, 1392, 1392, 1392, 1392,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  373,  373,  373,  373,  373,
      373,  375,  375,  375,  375,  375,  375,  377,  377,  377,
      377,  377,  377,  381, 1392,  381, 1392,  381, 1392,  381,
     1392, 1392, 1392, 1392, 1392,  381,  381,  128,  128,  128,
     1392,  128,  128,  399,  399,  399,  399,  399,  399,  408,
      408,  408,  408,  408,  408,  409,  409,  409,  409,  409,
      409,  416,  416,  416,  416,  416,  416,  432,  432,  432,

      432,  432,  432,  432,  432, 1392, 1392, 1392, 1392, 1392,
     1392, 1392,  432,  432,  432,  155,  155,  155, 1392,  155,
      155,  453,  453,  453,  453,  453,  453,  462,  462,  462,
      462,  462,  462,  463,  463,  463,  463,  463,  463,  470,
      470,  470,  470,  470,  470,  171,  171,  171,  171,  171,
      171,  171, 1392,  171, 1392, 1392, 1392, 1392, 1392, 1392,
     1392,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  473,  473,  473,  473,  473,  473,  475,  475,  475,
      475,  475,  475,  477,  477,  477,  477,  477,  477,  481,
     1392,  481, 1392,  481, 1392,  481, 1392, 1392, 1392, 1392,

     1392,  481,  481,  183,  183,  183, 1392,  183,  183,  499,
      499,  499,  499,  499,  499,  508,  508,  508,  508,  508,
      508,  509,  509,  509,  509,  509,  509,  516,  516,  516,
      516,  516,  516,  199,  199,  199,  199,  199, 1392,  199,
     1392, 1392, 1392, 1392, 1392, 1392, 1392,  199,  199,  199,
      155, 1392, 1392,  155,  155,  155,  155,  155, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392,  155,  199,  199,  199,
     1392,  199,  199,  527,  527,  527,  527,  527,  527,  536,
      536,  536,  536,  536,  536,  537,  537,  537,  537,  537,
      537,  544,  544,  544,  544,  544,  544,  629, 1392,  629,

     1392,  629, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
      629,  292,  292,  292,  292,  292,  292,  646,  646,  646,
      646,  646,  646,  647,  647,  647,  647,  647,  647,  652,
      652,  652,  652,  652,  652,  653,  653,  653,  653,  653,
      653,  654,  654,  654,  654,  654,  654,  655,  655,  655,
      655,  655,  655,  656,  656,  656,  656,  656,  656,  657,
      657,  657,  657,  657,  657,  658,  658,  658,  658,  658,
      658,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  659,
      659,  659,  659,   79,   79,   79,   79,   79,   79,  670,

      670,  670,  670,  670,  670,  671,  671,  671,  671,  671,
      671,  672,  672,  672,  672,  672,  672,  673,  673,  673,
      673,  673,  673,  674,  674,  674,  674,  674,  674,   90,
       90,   90,   90,   90,   90,  676,  676,  676,  676,  676,
      676,  677,  677,  677,  677,  677,  677,  678,  678,  678,
      678,  678,  678,  679,  679,  679,  679,  679,  679,  680,
      680,  680,  680,  680,  680,  333, 1392,  333, 1392,  333,
     1392,  333, 1392, 1392, 1392, 1392, 1392,  333,  333,  333,
      333,  333, 1392,  333,  333,  332,  332,  332,  332, 1392,
      332,  683,  683,  683,  683,  683,  683,  692,  692,  692,

      692,  692,  692,  693,  693,  693,  693,  693,  693,  700,
      700,  700,  700,  700,  700,   99,   99,   99,   99,   99,
       99,  702,  702,  702,  702,  702,  702,  703,  703,  703,
      703,  703,  703,  704,  704,  704,  704,  704,  704,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,
      706,  707,  707,  707,  707,  707,  707,  708,  708,  708,
      708,  708,  708,  709,  709,  709,  709,  709,  709,  710,
      710,  710,  710,  710,  710,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711, 1392, 1392, 1392, 1392,
     1392, 1392, 1392,  711,  711,  711,  711,  115,  115,  115,

      115,  115,  115,  722,  722,  722,  722,  722,  722,  723,
      723,  723,  723,  723,  723,  724,  724,  724,  724,  724,
      724,  725,  725,  725,  725,  725,  725,  726,  726,  726,
      726,  726,  726,  381, 1392,  381, 1392,  381, 1392,  381,
     1392, 1392, 1392, 1392, 1392,  381,  381,  381,  381,  381,
     1392,  381,  381,  380,  380,  380,  380, 1392,  380,  729,
      729,  729,  729,  729,  729,  738,  738,  738,  738,  738,
      738,  739,  739,  739,  739,  739,  739,  746,  746,  746,
      746,  746,  746,  128,  128,  128,  128,  128,  128,  748,
      748,  748,  748,  748,  748,  749,  749,  749,  749,  749,

      749,  750,  750,  750,  750,  750,  750,  751,  751,  751,
      751,  751,  751,  752,  752,  752,  752,  752,  752,  753,
      753,  753,  753,  753,  753,  754,  754,  754,  754,  754,
      754,  755,  755,  755,  755,  755,  755,  756,  756,  756,
      756,  756,  756,  432,  432,  432,  432,  432,  432,  432,
      432, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  432,  432,
      432,  432,  432,  432, 1392,  432,  432,  775,  775,  775,
      775,  775,  775,  784,  784,  784,  784,  784,  784,  785,
      785,  785,  785,  785,  785,  792,  792,  792,  792,  792,
      792,  155,  155,  155,  155,  155,  155,  794,  794,  794,

      794,  794,  794,  795,  795,  795,  795,  795,  795,  796,
      796,  796,  796,  796,  796,  797,  797,  797,  797,  797,
      797,  798,  798,  798,  798,  798,  798,  799,  799,  799,
      799,  799,  799,  800,  800,  800,  800,  800,  800,  801,
      801,  801,  801,  801,  801,  802,  802,  802,  802,  802,
      802,  171,  171,  171,  171,  171,  171,  803,  803,  803,
      803,  803,  803,  804,  804,  804,  804,  804,  804,  805,
      805,  805,  805,  805,  805,  806,  806,  806,  806,  806,
      806,  807,  807,  807,  807,  807,  807,  481, 1392,  481,
     1392,  481, 1392,  481, 1392, 1392, 1392, 1392, 1392,  481,

      481,  481,  481,  481, 1392,  481,  481,  480,  480,  480,
      480, 1392,  480,  810,  810,  810,  810,  810,  810,  819,
      819,  819,  819,  819,  819,  820,  820,  820,  820,  820,
      820,  827,  827,  827,  827,  827,  827,  183,  183,  183,
      183,  183,  183,  829,  829,  829,  829,  829,  829,  830,
      830,  830,  830,  830,  830,  831,  831,  831,  831,  831,
      831,  832,  832,  832,  832,  832,  832,  833,  833,  833,
      833,  833,  833,  834,  834,  834,  834,  834,  834,  835,
      835,  835,  835,  835,  835,  836,  836,  836,  836,  836,
      836,  837,  837,  837,  837,  837,  837,  199,  199,  199,

      199,  199, 1392,  199, 1392, 1392, 1392, 1392, 1392, 1392,
     1392,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      839,  839,  839,  839,  839,  839,  841,  841,  841,  841,
      841,  841,  842,  842,  842,  842,  842,  842,  843,  843,
      843,  843,  843,  843,  844,  844,  844,  844,  844,  844,
      845,  845,  845,  845,  845,  845,  846,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  847,  848,  848,
      848,  848,  848,  848,  936,  936,  936, 1392,  936, 1392,
      936, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  936,  936,
      936,  629,  629,  629, 1392,  629,  629,  955,  955,  955,

      955,  955,  955,  964,  964,  964,  964,  964,  964,  965,
      965,  965,  965,  965,  965,  972,  972,  972,  972,  972,
      972,  292,  292,  292,  292,  292,  292,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659, 1392, 1392,
     1392, 1392, 1392, 1392, 1392,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  980,  980,  980,  980,  980,
      980,  982,  982,  982,  982,  982,  982,  984,  984,  984,
      984,  984,  984,   79, 1392,   79,   79,   79,   79,   79,
       79,   79,   79,   79, 1392, 1392, 1392, 1392, 1392, 1392,
     1392,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,  987,  987,  987,  987,  987,  987,   90, 1392,   90,
       90,   90,   90,   90,   90,   90,   90,   90, 1392, 1392,
     1392, 1392, 1392, 1392, 1392,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  988,  988,  988,  988,  988,
      988,  333,  333,  333,  333,  333,  333,  989,  989,  989,
      989,  989,  989,  991,  991,  991,  991,  991,  991,  992,
      992,  992,  992,  992,  992,  993,  993,  993,  993,  993,
      993,  994,  994,  994,  994,  994,  994,  995,  995,  995,
      995,  995,  995,  996,  996,  996,  996,  996,  996,  997,
      997,  997,  997,  997,  997,  998,  998,  998,  998,  998,

      998,  333, 1392,  333, 1392,  333, 1392,  333, 1392, 1392,
     1392, 1392, 1392,  333,  333,   99,   99,   99,   99,   99,
       99,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711, 1001,
     1001, 1001, 1001, 1001, 1001, 1003, 1003, 1003, 1003, 1003,
     1003, 1005, 1005, 1005, 1005, 1005, 1005,  115, 1392,  115,
      115,  115,  115,  115,  115,  115,  115,  115, 1392, 1392,
     1392, 1392, 1392, 1392, 1392,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115, 1008, 1008, 1008, 1008, 1008,

     1008,  381,  381,  381,  381,  381,  381, 1009, 1009, 1009,
     1009, 1009, 1009, 1011, 1011, 1011, 1011, 1011, 1011, 1012,
     1012, 1012, 1012, 1012, 1012, 1013, 1013, 1013, 1013, 1013,
     1013, 1014, 1014, 1014, 1014, 1014, 1014, 1015, 1015, 1015,
     1015, 1015, 1015, 1016, 1016, 1016, 1016, 1016, 1016, 1017,
     1017, 1017, 1017, 1017, 1017, 1018, 1018, 1018, 1018, 1018,
     1018,  381, 1392,  381, 1392,  381, 1392,  381, 1392, 1392,
     1392, 1392, 1392,  381,  381,  128,  128,  128,  128,  128,
      128,  432,  432,  432,  432,  432,  432,  432,  432, 1392,
     1392, 1392, 1392, 1392, 1392, 1392,  432,  432,  432,  432,

      432,  432,  432,  432,  432, 1028, 1028, 1028, 1028, 1028,
     1028, 1030, 1030, 1030, 1030, 1030, 1030, 1031, 1031, 1031,
     1031, 1031, 1031, 1032, 1032, 1032, 1032, 1032, 1032, 1033,
     1033, 1033, 1033, 1033, 1033, 1034, 1034, 1034, 1034, 1034,
     1034, 1035, 1035, 1035, 1035, 1035, 1035, 1036, 1036, 1036,
     1036, 1036, 1036, 1037, 1037, 1037, 1037, 1037, 1037,  155,
      155,  155,  155,  155,  155,  171,  171,  171,  171,  171,
      171,  171, 1392,  171, 1392, 1392, 1392, 1392, 1392, 1392,
     1392,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171, 1038, 1038, 1038, 1038, 1038, 1038,  481,  481,  481,

      481,  481,  481, 1039, 1039, 1039, 1039, 1039, 1039, 1041,
     1041, 1041, 1041, 1041, 1041, 1042, 1042, 1042, 1042, 1042,
     1042, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1044, 1044,
     1044, 1044, 1044, 1045, 1045, 1045, 1045, 1045, 1045, 1046,
     1046, 1046, 1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047,
     1047, 1048, 1048, 1048, 1048, 1048, 1048,  481, 1392,  481,
     1392,  481, 1392,  481, 1392, 1392, 1392, 1392, 1392,  481,
      481,  183,  183,  183,  183,  183,  183,  199,  199,  199,
      199,  199, 1392,  199, 1392, 1392, 1392, 1392, 1392, 1392,
     1392,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      936,  936,  936, 1392,  936, 1392,  936, 1392, 1392, 1392,
     1392, 1392, 1392, 1392,  936,  936,  936,  936,  936,  936,
     1392,  936,  936, 1123, 1123, 1123, 1123, 1123, 1123, 1132,
     1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133, 1133,
     1133, 1140, 1140, 1140, 1140, 1140, 1140,  629,  629,  629,
      629,  629,  629, 1142, 1142, 1142, 1142, 1142, 1142, 1143,
     1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144, 1144,
     1144, 1145, 1145, 1145, 1145, 1145, 1145, 1146, 1146, 1146,
     1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1148,
     1148, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149,

     1149, 1150, 1150, 1150, 1150, 1150, 1150,  199,  199,  199,
      199,  199, 1392,  199, 1392, 1392, 1392, 1392, 1392, 1392,
     1392,  199,  199,  199,  659,  659,  659,  659,  659,  659,
      659,  659,  659, 1392,  659,  659,  659,  659,  659,  659,
      659, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156,
     1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157, 1157, 1158,
     1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159,
     1159,   79, 1392,   79,   79,   79,   79,   79,   79,   79,
       79,   79, 1392, 1392, 1392, 1392, 1392, 1392, 1392,   79,
       79,   79,   79,   90, 1392,   90,   90,   90,   90,   90,

       90,   90,   90,   90, 1392, 1392, 1392, 1392, 1392, 1392,
     1392,   90,   90,   90,   90,  333, 1392,  333, 1392,  333,
     1392,  333, 1392, 1392, 1392, 1392, 1392,  333,  333,  333,
      333,  333,  333,  333,  333,  711,  711,  711,  711,  711,
      711,  711,  711,  711, 1392,  711,  711,  711,  711,  711,
      711,  711, 1162, 1162, 1162, 1162, 1162, 1162, 1163, 1163,
     1163, 1163, 1163, 1163, 1164, 1164, 1164, 1164, 1164, 1164,
     1165, 1165, 1165, 1165, 1165, 1165, 1166, 1166, 1166, 1166,
     1166, 1166,  115, 1392,  115,  115,  115,  115,  115,  115,
      115,  115,  115, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

      115,  115,  115,  115,  381, 1392,  381, 1392,  381, 1392,
      381, 1392, 1392, 1392, 1392, 1392,  381,  381,  381,  381,
      381,  381,  381,  381,  432,  432,  432,  432,  432,  432,
      432,  432, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  171,  171,
      171,  171,  171,  171,  171, 1392,  171, 1392, 1392, 1392,
     1392, 1392, 1392, 1392,  171,  171,  171,  171,  481, 1392,
      481, 1392,  481, 1392,  481, 1392, 1392, 1392, 1392, 1392,
      481,  481,  481,  481,  481,  481,  481,  481,  199,  199,
      199,  199,  199, 1392,  199, 1392, 1392, 1392, 1392, 1392,

     1392, 1392,  199,  199,  199,  936,  936,  936,  936,  936,
      936, 1217, 1217, 1217, 1217, 1217, 1217, 1219, 1219, 1219,
     1219, 1219, 1219, 1220, 1220, 1220, 1220, 1220, 1220, 1221,
     1221, 1221, 1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222,
     1222, 1223, 1223, 1223, 1223, 1223, 1223, 1224, 1224, 1224,
     1224, 1224, 1224, 1225, 1225, 1225, 1225, 1225, 1225, 1226,
     1226, 1226, 1226, 1226, 1226,  936,  936,  936, 1392,  936,
     1392,  936, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  936,
      936,  936,  629,  629,  629,  629,  629,  629,  199,  199,
      199,  199,  199, 1392,  199, 1392, 1392, 1392, 1392, 1392,

     1392, 1392,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659, 1392, 1392, 1392, 1392, 1392, 1392, 1392,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659, 1233,
     1233, 1233, 1233, 1233, 1233,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711, 1392, 1392, 1392, 1392,
     1392, 1392, 1392,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711, 1234, 1234, 1234, 1234, 1234, 1234,  936,
      936,  936,  936,  936,  936, 1277, 1392, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1392, 1392, 1277, 1392,

     1392, 1277, 1392, 1277, 1277, 1277, 1277, 1293, 1392, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1392, 1392,
     1293, 1392, 1392, 1293, 1392, 1293, 1293, 1293, 1293, 1324,
     1324, 1324, 1324, 1324, 1325, 1325, 1325, 1325, 1277, 1277,
     1277, 1277, 1277, 1277, 1327, 1327, 1327, 1327, 1327, 1327,
     1329, 1329, 1329, 1329, 1329, 1329, 1331, 1331, 1331, 1331,
     1331, 1331, 1339, 1339, 1339, 1339, 1339, 1340, 1340, 1340,
     1340, 1293, 1293, 1293, 1293, 1293, 1293, 1342, 1342, 1342,
     1342, 1342, 1342, 1344, 1344, 1344, 1344, 1344, 1344, 1346,
     1346, 1346, 1346, 1346, 1346,  199,  199,  199,  199,  199,

      199, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1392, 1392, 1277, 1392, 1392, 1277, 1392, 1277,
     1277, 1277, 1277, 1325, 1325, 1325, 1325, 1325, 1325, 1277,
     1277, 1277, 1277, 1277, 1277, 1361, 1361, 1361, 1361, 1361,
     1361, 1362, 1362, 1362, 1362, 1362, 1362, 1363, 1363, 1363,
     1363, 1363, 1363, 1364, 1364, 1364, 1364, 1364, 1364, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1392, 1392, 1293, 1392, 1392, 1293, 1392, 1293, 1293, 1293,
     1293, 1340, 1340, 1340, 1340, 1340, 1340, 1293, 1293, 1293,
     1293, 1293, 1293, 1369, 1369, 1369, 1369, 1369, 1369, 1370,

     1370, 1370, 1370, 1370, 1370, 1371, 1371, 1371, 1371, 1371,
     1371, 1372, 1372, 1372, 1372, 1372, 1372, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1392, 1392,
     1277, 1392, 1392, 1277, 1392, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1325, 1325, 1325, 1325, 1325,
     1325,    3, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392

    } ;

static yyconst flex_int16_t yy_chk[10292] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        9, 1401,    5,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,   11,   13,   11,   11,   11,   11,   11,   11,
       11,   11, 1340,   11,   11,   11,   11,   14,   14,   14,
       14,   20,   20,   20,   20,   20,   20,   20,   20,   14,
      143, 1325,  143,   16,   16,    9,   16,   16,   16,   16,

       16,   16,   16,   16,  225,   16,   16,   16,   16,  295,
      295,   17,   17,   13,   17,   17,   17,   17,   17,   17,
       17,   17,   19,   19,  225,   19,   19,   19,   19,   19,
       19,   19,   19,   25,   25,  310,  310,   19,   28,   28,
       23,   28,   28,   28,   28,   28,   28,   28,   28, 1270,
       28,   28,   28,   28,  225,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   22,   23,   22,   22,   22,   22,   22,   22,   22,

       22,   63,   65,   52,   52,   52,   52,  229,   76,   63,
       65,   76,   22,   64,   64,   64,   64,  202,   64,  352,
      352, 1131,  229,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  202,   22,   66,   66,   66,   66,   66,   66,   66,
       66,   66,  229,   23,   23,  205,   23,   23,   23,   23,
       23,   23,   23,   23,   52,   23,   23,   23,   23,   30,
       30,  202,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  102,  102,  102,  102,  205,  102,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  290,  366,  366,  205,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   72,   72,   72,   72,   72,   72,   72,   72,
      101,  103,  130,  132,  254,   36,  158,  254,  101,  103,
      130,  132,   36,  160,  158,   36,  546,   36,  290,  400,
      400,  160, 1102,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   36,   30,   30,   30,   30,
       31,   31,   36,   31,  185,   36,  546,   36,   31,   39,

      187,   31,  185,   31,   31,  207,   39,   31,  187,   39,
       31,   39, 1101,   31,  126,  126,  126,  126,  207,  261,
       31,   31,  210,   31,  211,  203,  126,  204,   31,   39,
      210,   31,  211,   31,   31,  203,   39,   31,   32,   39,
       31,   39,   32,   31,  261,  204,   32,  206,  207,   32,
       44,   32,   32, 1153,   32,   33,  206,   44, 1100,   33,
       44,   32,   44,   33,  206,  203,   33, 1153,   32,   33,
      213,   33,   32, 1153,  261,  204,   32, 1068,  213,   32,
       44,   32,   32,  283,   32,   33,  206,   44,   34,   33,
       44,   32,   44,   33,  206,   34,   33,   34,   34,   33,

       34,   33,  226,   35,  212,   37,   34,   35,  283,   37,
       35, 1007,  212,   35,  212,   35,   37,  224,   34,   37,
      230,   37,  300,  226,  289,   34,  300,   34,   34,  238,
       34,  230,  300,   35,  999,   37,   34,   35,  283,   37,
       35,  224,  227,   35,  238,   35,   37,   38,   38,   37,
       40,   37,   40,  226,   38,  244,   38,   38,   40,   38,
       38,  230,   41,   40,   40,   41,   41, 1563,  227, 1563,
       41,  224,  289,   40,  238,   41,   41,   38,   38,  986,
       40,  244,   40,  337,   38,   41,   38,   38,   40,   38,
       38,  337,   41,   40,   40,   41,   41,  232,  227,   42,

       41,  978,  235,   40,  249,   41,   41,   42,  232,   43,
       43,  244,   42,   42,   45,   41,   43,  977,   45,   43,
       43,   43,   42,  963,  249,   45,  235,  256,   45,   42,
       45,  131,  131,  131,  131,  947,  131,   42,  232,   43,
       43,  239,   42,   42,   45,  339,   43,  256,   45,   43,
       43,   43,   42,  339,  249,   45,  235,   46,   45,  239,
       45,   46,   47,  236,   46,   46,   47,  547,   46,   47,
      938,   46,   47,   46,   47,   46,   46,  256,  159,  159,
      159,  159,   47,  159,  236,  233,  250,   46,  260,  239,
      243,   46,   47,  250,   46,   46,   47,  547,   46,   47,

      260,   46,   47,   46,   47,   46,   46,   48,  914,   48,
      233,  247,   47,  240,  236,  233,   48,  243,   48,   48,
      385,   48,   48,  250,   48,  387,  247,   49,  385,  252,
      260,   49,  241,  387,  240,  913,  252,   48,   49,   48,
      233,   49,  437,   49,  251,  233,   48,  243,   48,   48,
      437,   48,   48,  241,   48,   50,  247,   49,   50,   50,
      234,   49,   50,  251,  240,   50,  252,   50,   49,   51,
       57,   49,  234,   49,   57,  255,   51,   57,  234,   51,
       57,   51,   57,  241,  234,   50,  414,  414,   50,   50,
      253,  246,   50,  251,  255,   50,   57,   50,  264,   51,

       57, 1451,  234,  258,   57, 1451,   51,   57,  234,   51,
       57,   51,   57,   58,  234,  246,  246,   58,  264,  253,
       58,  282,  258,   58,  255,   58,  186,  186,  186,  186,
      912,  186,  282,   58,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   58,  838,  246,  246,   58,  264,  253,
       58,  818,  258,   58,  783,   58,  296,  296,  296,  296,
      296,  296,  282,   58,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       79,   81,  285,  285,  285,  285,   81,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   89,
       89,   89,   89,   89,   89,   89,   89,   89,  302,  302,
      302,  302,  302,  302,  737,   79,   81,  338,  338,  338,

      338,   81,  338,  285,  438,   81,  353,  353,  353,  353,
      353,  353,  438,   81,  454,  454,   81,  691,   81,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   99,   99,   99,   99,   99,
       99,   99,   99,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  110,  110,
      110,  110,  110,  110,  110,  110,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,   99,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  468,  468,  651,  117,  500,  500,  650,  115,  117,

      358,  358,  358,  358,  358,  358,   99,   99,   99,  645,
       99,   99,   99,   99,   99,   99,   99,   99,  644,   99,
       99,   99,   99,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  115,  117,
      386,  386,  386,  386,  117,  386,  637,  439,  117,  401,
      401,  401,  401,  401,  401,  439,  117,  439,  535,  117,
      507,  117,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  514,  514,  542,  542,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  128,  128,  128,  128,  128,
      128,  128,  128,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  139,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  128,  144,  144,  144,  144,  144,  144,  144,  144,
      147,  147,  147,  147,  147,  147,  147,  147,  167,  167,
      167,  167,  167,  167,  167,  167,  128,  128,  128,  491,
      128,  128,  128,  128,  128,  128,  128,  128,  483,  128,
      128,  128,  128,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  145,  482,
      145,  145,  145,  145,  145,  145,  145,  145,  148,  479,
      148,  148,  148,  148,  148,  148,  148,  148,  266,  145,

      150,  150,  150,  150,  150,  150,  150,  150,  273,  148,
      262,  151,  151,  151,  151,  151,  151,  151,  151,  150,
      262,  548,  155,  461,  266,  440,  485,  273,  487,  145,
      151,  155,  444,  440,  485,  270,  487,  435,  152,  148,
      152,  152,  152,  152,  152,  152,  152,  152,  242,  150,
      262,  548,  281,  270,  266,  242,  153,  273,  153,  152,
      151,  153,  153,  153,  153,  153,  153,  153,  153,  242,
      281,  549,  278,  279,  155,  154,  154,  154,  154,  154,
      154,  154,  154,  270,  418,  242,  407,  278,  279,  152,
      154,  154,  154,  154,  154,  154,  269,  550,  391,  242,

      281,  549,  156,  269,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  278,  279,  383,
      154,  154,  154,  154,  154,  154,  156,  550,  156,  382,
      156,  156,  379,  269,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  359,  155,  155,  155,
      155,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      343,  156,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  171,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  675,  675,
      156,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  172,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  406,  406,  406,  406,  406,  406,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  194,  194,  194,  194,
      194,  194,  194,  194,  455,  455,  455,  455,  455,  455,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  183,  183,
      183,  183,  183,  183,  183,  183,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  199,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  199,  460,  460,
      460,  460,  460,  460,  183,  200,  220,  220,  220,  220,
      220,  220,  220,  220,  335,  200,  681,  681,  334,  201,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  183,
      183,  183,  331,  183,  183,  183,  183,  183,  183,  183,
      183,  323,  183,  183,  183,  183,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  201,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  698,  698,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  303,  199,  199,  199,  199,  292,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      275,  200,  200,  200,  200,  486,  486,  486,  486,  274,
      486,  245,  201,  201,  228,  201,  201,  201,  201,  201,
      201,  201,  201,  217,  201,  201,  201,  201,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  231,  237,
      267,  257,  263,  208,  259,  231,  551,  248,  237,  237,
      267,  280,  552,  263,  198,  248,  191,  263,  231,  267,
      231,  257,  248,  271,  231,  248,  280,  248,  257,  259,
      271,  265,  259,  248,  164,  231,  551,  554,  237,  237,
      267,  265,  552,  263,  265,  248,  271,  263,  231,  267,
      231,  257,  248,  265,  231,  248,  280,  248,  257,  259,

      271,  272,  259,  248,  268,  276,  315,  554,  555,  272,
      284,  265,  276,  268,  265,  277,  271,  284,  556,  557,
      272,  559,  268,  265,  560,  277,  268,  268,  528,  528,
      277,  136,  561,  562,  727,  727,  277,  116,  555,  272,
      684,  684,  276,  268,  107,  563,  528,  284,  556,  557,
      272,  559,  268,   80,  560,  277,  268,  268,  684,  564,
      277,  315,  561,  562,  288,  288,  277,  288,  288,  288,
      288,  288,  288,  288,  288,  563,  288,  288,  288,  288,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  564,
      565,  298,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  346,  346,  346,  346,  346,  346,  346,  346,  631,
      633,  308,  308,  308,  308,  308,  308,  631,  633,   69,
      565,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  332,
      332,  332,  332,  332,  332,  332,  332,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  394,  394,  394,
      394,  394,  394,  394,  394,  332,  428,  428,  428,  428,
      428,  428,  428,  428,  371,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  501,  501,  501,  501,  501,  501,
      332,  332,  332,   60,  332,  332,  332,  332,  332,  332,
      332,  332,   55,  332,  332,  332,  332,  333,  333,  333,
      333,  333,  333,  333,  333,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  371,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  364,  364,  364,  364,  364,  364,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  429,  429,  429,  429,  429,  429,  429,  429,
       54,  566,   27,  333,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  506,  506,  506,  506,  506,  506,  333,  333,
      333,  566,  333,  333,  333,  333,  333,  333,  333,  333,
       12,  333,  333,  333,  333,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      380,  380,  380,  380,  380,  380,  380,  380,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  419,  419,  419,  419,
      419,  419,  419,  419,  567,  568,  412,  412,  412,  412,
      412,  412,  744,  744,    8,  419,  447,  447,  447,  447,
      447,  447,  447,  447,  420,  420,  420,  420,  420,  420,
      420,  420,  790,  790,  567,  568,  380,  611,  611,  611,
        7,  611,  421,  420,  421,  419,    3,  421,  421,  421,
      421,  421,  421,  421,  421,  534,  534,  534,  534,  534,

      534,  380,  380,  380,    0,  380,  380,  380,  380,  380,
      380,  380,  380,  420,  380,  380,  380,  380,  381,  381,
      381,  381,  381,  381,  381,  381,  422,  422,  422,  422,
      422,  422,  422,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  808,  808,    0,  422,  569,  570,  571,  424,
      572,  424,  573,  423,  424,  424,  424,  424,  424,  424,
      424,  424,  425,  574,  425,  825,  825,  425,  425,  425,
      425,  425,  425,  425,  425,  422,  569,  570,  571,  427,
      572,  427,  573,  423,  427,  427,  427,  427,  427,  427,
      427,  427,  575,  574,  381,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  632,  632,  632,  632,    0,  632,  381,
      381,  381,  575,  381,  381,  381,  381,  381,  381,  381,
      381,    0,  381,  381,  381,  381,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  426,  426,  426,  426,  426,  426,  426,  426,  430,
      430,  430,  430,  430,  430,  430,  430,    0,  577,  578,
      426,  432,  579,  580,  430,  430,  430,  430,  430,  430,
      432,  685,  685,  685,  685,  685,  685,    0,  433,  494,

      494,  494,  494,  494,  494,  494,  494,  433,  577,  578,
      426,    0,  579,  580,  430,  430,  430,  430,  430,  430,
      431,  431,  431,  431,  431,  431,  431,  431,  956,  956,
      581,  582,  583,  432,  584,  431,  431,  431,  431,  431,
      431,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      433,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      581,  582,  583,    0,  584,  431,  431,  431,  431,  431,
      431,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  730,  730,  970,
      970,    0,  585,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  730,  432,  432,  432,  432,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  585,  433,  433,  433,  433,  434,    0,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  434,  588,  434,  529,  434,  434,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  529,  529,  529,  529,  529,  529,  589,
      590,  591,  588,  592,  595,    0,  434,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  450,  450,  450,  450,  450, 1138, 1138,    0,  589,
      590,  591,    0,  592,  595,  434,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      634,  634,  634,  634,  634,  634,  634,  634,  634,    0,
      466,  466,  466,  466,  466,  466,  480,  480,  480,  480,
      480,  480,  480,  480,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  596,  597,  598, 1160, 1160, 1652,
      519, 1652,  480, 1652,  512,  512,  512,  512,  512,  512,
      519,  640,  640,  640,  640,  640,  640,  640,  640,    0,
      520, 1167, 1167,    0,  596,  597,  598,  480,  480,  480,
      520,  480,  480,  480,  480,  480,  480,  480,  480,  599,
      480,  480,  480,  480,  481,  481,  481,  481,  481,  481,
      481,  481,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  600,  601,  602,  603,  604,  605,  607,  608,  599,
      609,  540,  540,  540,  540,  540,  540,  690,  690,  690,
      690,  690,  690,  776,  776,  610,    0,    0,    0,    0,
        0,  600,  601,  602,  603,  604,  605,  607,  608,    0,
      609,  776,    0,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  610,  519,  519,  519,  519,
      481,    0,    0,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  940,  520,  520,  520,  520,
      629,    0,    0,  940,    0,  481,  481,  481,    0,  481,
      481,  481,  481,  481,  481,  481,  481,    0,  481,  481,

      481,  481,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  553,  606,  612,
      613,  615,  617,  614,  614,  618,  614,  614,  619,  606,
      620,  621,  553,  553,  614,  623,  624,  625,  626,  627,
      614,  628,  614,    0,    0,    0,    0,  553,  606,  612,
      613,  615,  617,  614,  614,  618,  614,  614,  619,  606,
      620,  621,  553,  553,  614,  623,  624,  625,  626,  627,
      614,  628,  614,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,    0,  629,  629,  629,  629,

      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  659,    0,  661,    0,
        0,    0,    0,  661,  663,  663,  663,  663,  663,  663,
      663,  663,  663,    0,  660,  665,  665,  665,  665,  665,

      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  670,  941,  942,
        0,  659,  943,  661,  811,  811,  941,  942,  661,  942,
      943,    0,  661,  731,  731,  731,  731,  731,  731,  660,
      661,  851,  811,  661,    0,  661,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  736,  736,  736,  736,  736,  736,
        0,  851,  670,  760,  760,  760,  760,  760,  760,  760,
      760,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  715,  715,  715,
      715,  715,  715,  715,  715,  715,    0,  711,    0,    0,
        0,    0,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  711,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  696,  696,  696,

      696,  696,  696,  702,  702,  702,  702,  702,  702,  702,
      702,  713,    0,    0,    0,  852,  713,    0,    0,  712,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  852,  854,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,    0,  713,    0,    0,  712,
        0,  713,    0,    0,    0,  713,  854,  855,    0,  702,
        0,    0,    0,  713,    0,  757,  713,  757,  713,    0,
      757,  757,  757,  757,  757,  757,  757,  757,  782,  782,

      782,  782,  782,  782,  702,  702,  702,  855,  702,  702,
      702,  702,  702,  702,  702,  702,    0,  702,  702,  702,
      702,  703,  703,  703,  703,  703,  703,  703,  703,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  722,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  761,  761,  761,  761,  761,  761,  761,
      761,    0,  856,  742,  742,  742,  742,  742,  742,  765,
      765,  765,  765,  765,  765,  765,  765,  703,  758,  758,

      758,  758,  758,  758,  758,  758,  812,  812,  812,  812,
      812,  812,  856,  722,  857,    0,  858,  758,    0,    0,
        0,    0,  703,  703,  703,    0,  703,  703,  703,  703,
      703,  703,  703,  703,    0,  703,  703,  703,  703,  860,
      861,  862,  863,  759,  857,  759,  858,  758,  759,  759,
      759,  759,  759,  759,  759,  759,  762,    0,  762,    0,
        0,  762,  762,  762,  762,  762,  762,  762,  762,  860,
      861,  862,  863,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  748,  748,  748,  748,  748,  748,  748,  748,  763,

      763,  763,  763,  763,  763,  763,  763,  817,  817,  817,
      817,  817,  817,  864,  764,  865,  764,  866,  763,  764,
      764,  764,  764,  764,  764,  764,  764,  766,  766,  766,
      766,  766,  766,  766,  766,  767,  767,  767,  767,  767,
      767,  767,  767,  864,    0,  865,    0,  866,  763,  768,
      768,  768,  768,  768,  768,  768,  768,  769,  769,  769,
      769,  769,  769,  769,  769,  868,    0,  748,  770,  770,
      770,  770,  770,  770,  770,  770,  771,  950,  950,  950,
      950,  950,  950,  950,  950,  771,  957,  957,  957,  957,
      957,  957,  748,  748,  748,  868,  748,  748,  748,  748,

      748,  748,  748,  748,    0,  748,  748,  748,  748,  749,
      749,  749,  749,  749,  749,  749,  749,  772,  772,  772,
      772,  772,  772,  772,  772,  777,    0,    0,  771,  773,
      870,  871,  772,  772,  772,  772,  772,  772,  773,  872,
      874,  875,  876,  877,  777,  777,  777,  777,  777,  777,
      779,  779,  779,  779,  779,  779,  779,  779,  779,    0,
      870,  871,  772,  772,  772,  772,  772,  772,    0,  872,
      874,  875,  876,  877,    0,  794,  878,  880,  881,  882,
        0,  773,    0,  883,  794,  749,    0,    0,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  771,

        0,  771,  771,  771,  771,    0,  878,  880,  881,  882,
      749,  749,  749,  883,  749,  749,  749,  749,  749,  749,
      749,  749,  803,  749,  749,  749,  749,  794,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  884,  885,  886,
      887,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,    0,  773,  773,  773,  773,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  884,  885,  886,
      887,    0,    0,  839,  889,  890,  890,  788,  788,  788,
      788,  788,  788,  839,    0,    0,    0,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  840,

      794,  794,  794,  794,  889,  890,  890,    0,  891,  840,
      893,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  891,  894,
      893,  895,  896,  897,  898,  900,    0,    0,  823,  823,
      823,  823,  823,  823,  829,  829,  829,  829,  829,  829,
      829,  829,    0,  901,  902,  903,  905,  906,  907,  894,
      908,  895,  896,  897,  898,  900,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  936,  839,
      839,  839,  839,  901,  902,  903,  905,  906,  907,  909,

      908,  910,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  915,  840,  840,  840,  840,  916,
      917,  918,  919,  920,  921,  937,    0, 1152,  921,  909,
      829,  910,    0,    0,    0,    0, 1152,  922,  962,  962,
      962,  962,  962,  962,  915, 1152,    0,    0,    0,  916,
      917,  918,  919,  920,  921,  829,  829,  829,  921,  829,
      829,  829,  829,  829,  829,  829,  829,  922,  829,  829,
      829,  829,  830,  830,  830,  830,  830,  830,  830,  830,
      923,  924,  925,  926,  927,  928,  929,  930,  932,  933,
        0,  936,  936,  936,  936,  936,  936,  936,  936,  936,

      936,  936,  936,    0,  936,  936,  936,  936,    0,    0,
      923,  924,  925,  926,  927,  928,  929,  930,  932,  933,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
     1052,  937,  937,  937,  937,    0, 1053,    0,  830,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  959,  959,
      959,  959,  959,  959,  959,  959,  959, 1124, 1124,    0,
     1052,    0,    0,  830,  830,  830, 1053,  830,  830,  830,
      830,  830,  830,  830,  830, 1124,  830,  830,  830,  830,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  968,  968,  968,  968,
      968,  968,  968,  968,  968, 1315,    0, 1054,    0,    0,
        0,  974,    0,    0, 1315,  968,  968,  968,  968,  968,
      968,  974,    0, 1315,    0,    0,    0, 1055,  975, 1020,

     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1054,  975,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988, 1055,  987, 1057,
     1058, 1059,  974, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,    0,    0, 1057,
     1058, 1059,    0, 1008, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
        0,    0,    0,  987,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,    0,  974,  974,  974,

      974,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975, 1008,  975,  975,  975,  975,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  989,  989,  989,  989,  989,  989,  989,  989,    0,
        0, 1060, 1061, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027,

     1038, 1060, 1061, 1062, 1063, 1064, 1065,    0, 1027, 1069,
     1071, 1072, 1074, 1075, 1077, 1080, 1082, 1085, 1086, 1088,
     1090,    0, 1028, 1092, 1094,    0, 1095, 1096, 1097, 1098,
     1099, 1028,    0, 1062, 1063, 1064, 1065,  989,    0, 1069,
     1071, 1072, 1074, 1075, 1077, 1080, 1082, 1085, 1086, 1088,
     1090, 1027,    0, 1092, 1094, 1049, 1095, 1096, 1097, 1098,
     1099,    0,  989,  989,  989, 1049,  989,  989,  989,  989,
      989,  989,  989,  989, 1028,  989,  989,  989,  989,  990,
      990,  990,  990,  990,  990,  990,  990,    0,    0, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,

     1038, 1038, 1038, 1038, 1038, 1038, 1038,    0,    0,    0,
        0, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1050, 1027, 1027, 1027, 1027,    0,    0,
        0,    0,    0, 1050, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1103, 1028, 1028, 1028,
     1028,    0,    0, 1104,    0,  990,    0,    0, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
        0, 1049, 1049, 1049, 1049, 1105, 1103, 1106, 1108, 1109,
      990,  990,  990, 1104,  990,  990,  990,  990,  990,  990,
      990,  990, 1110,  990,  990,  990,  990, 1009, 1009, 1009,

     1009, 1009, 1009, 1009, 1009, 1105,    0, 1106, 1108, 1109,
        0,    0,    0, 1111, 1112, 1113, 1114, 1118, 1120,    0,
        0,    0, 1110,    0,    0,    0, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1125, 1050,
     1050, 1050, 1050, 1111, 1112, 1113, 1114, 1118, 1120, 1130,
     1130, 1130, 1130, 1130, 1130, 1142, 1169, 1125, 1125, 1125,
     1125, 1125, 1125, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127,    0, 1009,    0,    0, 1143,    0,    0,    0,
     1172, 1155,    0,    0,    0,    0, 1169, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281,    0,    0, 1009, 1009,

     1009,    0, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1172, 1009, 1009, 1009, 1009, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136,    0,    0,    0,    0, 1155,    0, 1151,    0,
     1177,    0, 1136, 1136, 1136, 1136, 1136, 1136, 1151, 1287,
     1287, 1287, 1287, 1287, 1287, 1287, 1287,    0, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1177, 1142, 1142, 1142, 1142,    0,    0,    0, 1162, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1010, 1143, 1143, 1143, 1143, 1155, 1155, 1155, 1155,

     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155,    0,    0, 1010, 1010, 1010,    0,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1162, 1010,
     1010, 1010, 1010, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1179, 1151, 1151, 1151, 1151, 1168, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1168,    0,
        0,    0,    0,    0,    0,    0, 1171, 1168, 1180,    0,
     1176, 1176,    0, 1179, 1181, 1178,    0, 1171, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,

     1162, 1162, 1162, 1162, 1162, 1162, 1171, 1168, 1180, 1039,
     1176, 1176, 1178, 1316, 1181, 1178, 1173, 1171, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303,    0, 1316,    0, 1173,
     1182,    0,    0, 1316, 1039, 1039, 1039,    0, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1173, 1039, 1039, 1039,
     1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1173,
     1182, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1170, 1168, 1168, 1168, 1168, 1174, 1175,
     1175, 1175, 1175, 1184, 1190, 1175, 1192, 1196, 1185, 1187,
     1170, 1184, 1186, 1198, 1174, 1188, 1189,    0, 1183, 1183,

     1183, 1183, 1185, 1170, 1183, 1187, 1186, 1191, 1174, 1191,
     1188, 1189,    0, 1184, 1190, 1175, 1192, 1196, 1185, 1187,
     1170, 1184, 1186, 1198, 1174, 1188, 1189, 1040,    0,    0,
        0,    0, 1185,    0, 1183, 1187, 1186, 1191,    0, 1191,
     1188, 1189, 1193, 1193, 1194, 1175, 1194, 1200, 1201, 1200,
     1202, 1203, 1040, 1040, 1040, 1195, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1183, 1040, 1040, 1040, 1040, 1195,
     1204, 1197, 1193, 1193, 1194, 1199, 1194, 1200, 1201, 1200,
     1202, 1203, 1205, 1207, 1210, 1195, 1197, 1206, 1208, 1206,
     1209, 1199, 1211, 1213, 1209, 1207, 1212, 1212, 1214, 1195,

     1204, 1197, 1216, 1208, 1227, 1199, 1211, 1228, 1229, 1214,
     1230, 1231, 1205, 1207, 1210, 1215, 1197, 1206, 1208, 1206,
     1209, 1199, 1211, 1213, 1209, 1207, 1212, 1212, 1214, 1215,
     1232, 1233, 1216, 1208, 1227, 1236, 1211, 1228, 1229, 1214,
     1230, 1231, 1235, 1237, 1235, 1215, 1238, 1239, 1238, 1248,
     1240, 1240, 1240, 1240, 1234, 1243, 1240,    0, 1237, 1215,
     1232, 1242, 1251, 1242, 1244, 1236,    0, 1244, 1245, 1252,
        0, 1243, 1235, 1237, 1235,    0, 1238, 1239, 1238, 1248,
     1245, 1249, 1253, 1249, 1250, 1243, 1233, 1240, 1237, 1255,
     1250, 1242, 1251, 1242, 1244, 1256, 1227, 1244, 1245, 1252,

     1229, 1243, 1230, 1258, 1234, 1240, 1254, 1260, 1263, 1264,
     1245, 1249, 1253, 1249, 1250, 1254,    0, 1240,    0, 1255,
     1250,    0, 1232,    0,    0, 1256,    0,    0,    0,    0,
        0,    0,    0, 1258,    0, 1240, 1254, 1260, 1263, 1264,
        0,    0,    0,    0,    0, 1254, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1241, 1246, 1246, 1246, 1246,    0, 1266, 1246,
        0, 1267, 1268, 1267, 1268, 1271, 1273, 1274, 1241, 1275,

     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241,
     1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 1266,    0,
     1246, 1267, 1268, 1267, 1268, 1271, 1273, 1274,    0, 1275,
        0,    0,    0, 1247,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1276, 1288, 1289,    0, 1292, 1247,
     1246, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247,
     1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1247, 1257,
     1259, 1261, 1262, 1265, 1276, 1288, 1289, 1291, 1292, 1257,
     1305, 1307, 1259, 1308, 1310, 1261, 1262, 1313, 1291, 1265,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1257,

     1259, 1261, 1262, 1265,    0,    0,    0, 1291,    0, 1257,
     1305, 1307, 1259, 1308, 1310, 1261, 1262, 1313, 1291, 1265,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1272, 1290, 1304, 1306, 1311,
     1317, 1311, 1309, 1306, 1314, 1314, 1304, 1318, 1290, 1319,
     1322, 1272,    0,    0,    0,    0, 1309, 1323,    0,    0,
        0,    0,    0,    0,    0, 1272, 1290, 1304, 1306, 1311,
     1317, 1311, 1309, 1306, 1314, 1314, 1304, 1318, 1290, 1319,
     1322, 1272, 1277, 1277, 1277, 1277, 1309, 1323, 1277, 1283,

     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283,    0, 1334,    0, 1335, 1338,
     1348, 1349, 1350, 1351, 1350, 1352, 1353, 1354, 1357, 1277,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1334, 1277, 1335, 1338,
     1348, 1349, 1350, 1351, 1350, 1352, 1353, 1354, 1357, 1277,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1358, 1277, 1301, 1301,
     1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1301, 1301, 1301, 1277,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1361, 1358, 1355,    0, 1356,
     1277,    0, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277,
     1293, 1293, 1293, 1293, 1312, 1361, 1293, 1355, 1333, 1356,
     1367, 1366, 1365, 1366, 1368, 1373, 1375, 1376, 1378, 1312,
     1377, 1376, 1333, 1381,    0, 1382, 1384, 1385, 1387,    0,
     1373, 1389, 1377, 1391, 1312, 1378,    0, 1293, 1333, 1365,
     1367, 1366, 1365, 1366, 1368, 1373, 1375, 1376, 1378, 1312,
     1377, 1376, 1333, 1381, 1379, 1382, 1384, 1385, 1387, 1386,
     1373, 1389, 1377, 1391,    0, 1378,    0, 1293, 1390, 1355,

     1379, 1356,    0, 1386, 1390,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1379,    0,    0,    0,    0, 1386,
        0,    0,    0,    0,    0,    0,    0,    0, 1390,    0,
     1379,    0, 1293, 1386, 1390,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1293,    0,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1320, 1320,
     1320, 1320,    0,    0, 1320,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1320,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1320,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1320,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1320,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1320,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1320,    0, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,

     1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321, 1321, 1321,
        0,    0, 1321,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1321,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1321,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1321,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1321,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1321,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1321,    0, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1336, 1336, 1336, 1336,    0,    0,
     1336,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1336,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1336,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1336,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1336,    0, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1337, 1337, 1337, 1337,    0,    0, 1337,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1337,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1337,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1337,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1337,    0, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1359, 1359, 1359, 1359,    0,    0, 1359,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1359,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1359,    0,    0, 1359,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1359,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1359,    0,    0, 1359,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1359,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1359,    0,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1360, 1360,
     1360, 1360,    0,    0, 1360,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1360, 1360,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1360,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1360, 1360,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1360,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1360,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1360,    0, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1360, 1393,    0, 1393, 1393,

     1393, 1393, 1393, 1393, 1393, 1393, 1393,    0,    0,    0,
        0,    0,    0,    0, 1393, 1393, 1393, 1393, 1394,    0,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,    0,
        0,    0,    0,    0,    0,    0, 1394, 1394, 1394, 1394,
     1395,    0, 1395,    0, 1395,    0,    0,    0,    0,    0,
        0,    0,    0, 1395, 1396,    0, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396,    0,    0,    0,    0,    0,
        0,    0, 1396, 1396, 1396, 1396, 1397,    0, 1397,    0,
     1397,    0,    0,    0,    0,    0,    0,    0,    0, 1397,
     1398,    0,    0, 1398, 1398, 1398, 1398, 1398,    0,    0,

        0,    0,    0,    0,    0,    0, 1398, 1399, 1399, 1399,
     1399, 1399, 1399, 1399,    0, 1399,    0,    0,    0,    0,
        0,    0,    0, 1399, 1399, 1399, 1399, 1400,    0, 1400,
        0, 1400,    0,    0,    0,    0,    0,    0,    0,    0,
     1400, 1402, 1402, 1402,    0, 1402, 1402, 1403, 1403, 1403,
     1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1405,
     1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406, 1406, 1406,
     1406, 1407,    0, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407,    0,    0,    0,    0,    0,    0,    0, 1407,
     1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408, 1408, 1409,

     1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410,
     1410, 1411, 1411, 1411, 1411, 1411, 1411, 1412,    0, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,    0,    0,
        0,    0,    0,    0,    0, 1412, 1412, 1412, 1412, 1413,
     1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414,
     1414, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416,
     1416, 1416, 1416, 1417,    0, 1417,    0, 1417,    0, 1417,
        0,    0,    0,    0,    0, 1417, 1417, 1418, 1418, 1418,
        0, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
     1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421,

     1421, 1422, 1422, 1422, 1422, 1422, 1422, 1423,    0, 1423,
     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,    0,    0,
        0,    0,    0,    0,    0, 1423, 1423, 1423, 1423, 1424,
     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
     1425, 1426, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427,
     1427, 1427, 1427, 1428,    0, 1428,    0, 1428,    0, 1428,
        0,    0,    0,    0,    0, 1428, 1428, 1429, 1429, 1429,
        0, 1429, 1429, 1430, 1430, 1430, 1430, 1430, 1430, 1431,
     1431, 1431, 1431, 1431, 1431, 1432, 1432, 1432, 1432, 1432,
     1432, 1433, 1433, 1433, 1433, 1433, 1433, 1434, 1434, 1434,

     1434, 1434, 1434, 1434, 1434,    0,    0,    0,    0,    0,
        0,    0, 1434, 1434, 1434, 1435, 1435, 1435,    0, 1435,
     1435, 1436, 1436, 1436, 1436, 1436, 1436, 1437, 1437, 1437,
     1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1438, 1439,
     1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440,
     1440, 1440,    0, 1440,    0,    0,    0,    0,    0,    0,
        0, 1440, 1440, 1440, 1440, 1441, 1441, 1441, 1441, 1441,
     1441, 1442, 1442, 1442, 1442, 1442, 1442, 1443, 1443, 1443,
     1443, 1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444, 1445,
        0, 1445,    0, 1445,    0, 1445,    0,    0,    0,    0,

        0, 1445, 1445, 1446, 1446, 1446,    0, 1446, 1446, 1447,
     1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448, 1448, 1448,
     1448, 1449, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
     1450, 1450, 1450, 1452, 1452, 1452, 1452, 1452,    0, 1452,
        0,    0,    0,    0,    0,    0,    0, 1452, 1452, 1452,
     1453,    0,    0, 1453, 1453, 1453, 1453, 1453,    0,    0,
        0,    0,    0,    0,    0,    0, 1453, 1454, 1454, 1454,
        0, 1454, 1454, 1455, 1455, 1455, 1455, 1455, 1455, 1456,
     1456, 1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457,
     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1459,    0, 1459,

        0, 1459,    0,    0,    0,    0,    0,    0,    0,    0,
     1459, 1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461,
     1461, 1461, 1461, 1462, 1462, 1462, 1462, 1462, 1462, 1463,
     1463, 1463, 1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464,
     1464, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466,
     1466, 1466, 1466, 1467, 1467, 1467, 1467, 1467, 1467, 1468,
     1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469,
     1469, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470,
     1470, 1470,    0,    0,    0,    0,    0,    0,    0, 1470,
     1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471, 1471, 1472,

     1472, 1472, 1472, 1472, 1472, 1473, 1473, 1473, 1473, 1473,
     1473, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475,
     1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1476, 1477,
     1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478,
     1478, 1479, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480,
     1480, 1480, 1480, 1481, 1481, 1481, 1481, 1481, 1481, 1482,
     1482, 1482, 1482, 1482, 1482, 1483,    0, 1483,    0, 1483,
        0, 1483,    0,    0,    0,    0,    0, 1483, 1483, 1484,
     1484, 1484,    0, 1484, 1484, 1485, 1485, 1485, 1485,    0,
     1485, 1486, 1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487,

     1487, 1487, 1487, 1488, 1488, 1488, 1488, 1488, 1488, 1489,
     1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490,
     1490, 1491, 1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492,
     1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493, 1493, 1494,
     1494, 1494, 1494, 1494, 1494, 1495, 1495, 1495, 1495, 1495,
     1495, 1496, 1496, 1496, 1496, 1496, 1496, 1497, 1497, 1497,
     1497, 1497, 1497, 1498, 1498, 1498, 1498, 1498, 1498, 1499,
     1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1500, 1500, 1500, 1500,    0,    0,    0,    0,
        0,    0,    0, 1500, 1500, 1500, 1500, 1501, 1501, 1501,

     1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502, 1502, 1503,
     1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504,
     1504, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,
     1506, 1506, 1506, 1507,    0, 1507,    0, 1507,    0, 1507,
        0,    0,    0,    0,    0, 1507, 1507, 1508, 1508, 1508,
        0, 1508, 1508, 1509, 1509, 1509, 1509,    0, 1509, 1510,
     1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511, 1511, 1511,
     1511, 1512, 1512, 1512, 1512, 1512, 1512, 1513, 1513, 1513,
     1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514, 1515,
     1515, 1515, 1515, 1515, 1515, 1516, 1516, 1516, 1516, 1516,

     1516, 1517, 1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518,
     1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519, 1519, 1520,
     1520, 1520, 1520, 1520, 1520, 1521, 1521, 1521, 1521, 1521,
     1521, 1522, 1522, 1522, 1522, 1522, 1522, 1523, 1523, 1523,
     1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524,    0,    0,    0,    0,    0,    0,    0, 1524, 1524,
     1524, 1525, 1525, 1525,    0, 1525, 1525, 1526, 1526, 1526,
     1526, 1526, 1526, 1527, 1527, 1527, 1527, 1527, 1527, 1528,
     1528, 1528, 1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529,
     1529, 1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531,

     1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532, 1532, 1533,
     1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534,
     1534, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536,
     1536, 1536, 1536, 1537, 1537, 1537, 1537, 1537, 1537, 1538,
     1538, 1538, 1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539,
     1539, 1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541,
     1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1542, 1543,
     1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1544, 1545, 1545, 1545, 1545, 1545, 1545, 1546,    0, 1546,
        0, 1546,    0, 1546,    0,    0,    0,    0,    0, 1546,

     1546, 1547, 1547, 1547,    0, 1547, 1547, 1548, 1548, 1548,
     1548,    0, 1548, 1549, 1549, 1549, 1549, 1549, 1549, 1550,
     1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551,
     1551, 1552, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553,
     1553, 1553, 1553, 1554, 1554, 1554, 1554, 1554, 1554, 1555,
     1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556,
     1556, 1557, 1557, 1557, 1557, 1557, 1557, 1558, 1558, 1558,
     1558, 1558, 1558, 1559, 1559, 1559, 1559, 1559, 1559, 1560,
     1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561, 1561,
     1561, 1562, 1562, 1562, 1562, 1562, 1562, 1564, 1564, 1564,

     1564, 1564,    0, 1564,    0,    0,    0,    0,    0,    0,
        0, 1564, 1564, 1564, 1565, 1565, 1565, 1565, 1565, 1565,
     1566, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567,
     1567, 1567, 1568, 1568, 1568, 1568, 1568, 1568, 1569, 1569,
     1569, 1569, 1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570,
     1571, 1571, 1571, 1571, 1571, 1571, 1572, 1572, 1572, 1572,
     1572, 1572, 1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574,
     1574, 1574, 1574, 1574, 1575, 1575, 1575,    0, 1575,    0,
     1575,    0,    0,    0,    0,    0,    0,    0, 1575, 1575,
     1575, 1576, 1576, 1576,    0, 1576, 1576, 1577, 1577, 1577,

     1577, 1577, 1577, 1578, 1578, 1578, 1578, 1578, 1578, 1579,
     1579, 1579, 1579, 1579, 1579, 1580, 1580, 1580, 1580, 1580,
     1580, 1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,    0,    0,
        0,    0,    0,    0,    0, 1582, 1582, 1582, 1582, 1583,
     1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584,
     1584, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586, 1586,
     1586, 1586, 1586, 1587,    0, 1587, 1587, 1587, 1587, 1587,
     1587, 1587, 1587, 1587,    0,    0,    0,    0,    0,    0,
        0, 1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588,

     1588, 1589, 1589, 1589, 1589, 1589, 1589, 1590,    0, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,    0,    0,
        0,    0,    0,    0,    0, 1590, 1590, 1590, 1590, 1591,
     1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592, 1592, 1592,
     1592, 1593, 1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594,
     1594, 1594, 1594, 1595, 1595, 1595, 1595, 1595, 1595, 1596,
     1596, 1596, 1596, 1596, 1596, 1597, 1597, 1597, 1597, 1597,
     1597, 1598, 1598, 1598, 1598, 1598, 1598, 1599, 1599, 1599,
     1599, 1599, 1599, 1600, 1600, 1600, 1600, 1600, 1600, 1601,
     1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602, 1602, 1602,

     1602, 1603,    0, 1603,    0, 1603,    0, 1603,    0,    0,
        0,    0,    0, 1603, 1603, 1604, 1604, 1604, 1604, 1604,
     1604, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605, 1605,
     1605, 1605,    0,    0,    0,    0,    0,    0,    0, 1605,
     1605, 1605, 1605, 1606, 1606, 1606, 1606, 1606, 1606, 1607,
     1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608,
     1608, 1609, 1609, 1609, 1609, 1609, 1609, 1610,    0, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,    0,    0,
        0,    0,    0,    0,    0, 1610, 1610, 1610, 1610, 1611,
     1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612,

     1612, 1613, 1613, 1613, 1613, 1613, 1613, 1614, 1614, 1614,
     1614, 1614, 1614, 1615, 1615, 1615, 1615, 1615, 1615, 1616,
     1616, 1616, 1616, 1616, 1616, 1617, 1617, 1617, 1617, 1617,
     1617, 1618, 1618, 1618, 1618, 1618, 1618, 1619, 1619, 1619,
     1619, 1619, 1619, 1620, 1620, 1620, 1620, 1620, 1620, 1621,
     1621, 1621, 1621, 1621, 1621, 1622, 1622, 1622, 1622, 1622,
     1622, 1623,    0, 1623,    0, 1623,    0, 1623,    0,    0,
        0,    0,    0, 1623, 1623, 1624, 1624, 1624, 1624, 1624,
     1624, 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625,    0,
        0,    0,    0,    0,    0,    0, 1625, 1625, 1625, 1626,

     1626, 1626, 1626, 1626, 1626, 1627, 1627, 1627, 1627, 1627,
     1627, 1628, 1628, 1628, 1628, 1628, 1628, 1629, 1629, 1629,
     1629, 1629, 1629, 1630, 1630, 1630, 1630, 1630, 1630, 1631,
     1631, 1631, 1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632,
     1632, 1633, 1633, 1633, 1633, 1633, 1633, 1634, 1634, 1634,
     1634, 1634, 1634, 1635, 1635, 1635, 1635, 1635, 1635, 1636,
     1636, 1636, 1636, 1636, 1636, 1637, 1637, 1637, 1637, 1637,
     1637, 1637,    0, 1637,    0,    0,    0,    0,    0,    0,
        0, 1637, 1637, 1637, 1637, 1638, 1638, 1638, 1638, 1638,
     1638, 1639, 1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640,

     1640, 1640, 1640, 1641, 1641, 1641, 1641, 1641, 1641, 1642,
     1642, 1642, 1642, 1642, 1642, 1643, 1643, 1643, 1643, 1643,
     1643, 1644, 1644, 1644, 1644, 1644, 1644, 1645, 1645, 1645,
     1645, 1645, 1645, 1646, 1646, 1646, 1646, 1646, 1646, 1647,
     1647, 1647, 1647, 1647, 1647, 1648, 1648, 1648, 1648, 1648,
     1648, 1649, 1649, 1649, 1649, 1649, 1649, 1650,    0, 1650,
        0, 1650,    0, 1650,    0,    0,    0,    0,    0, 1650,
     1650, 1651, 1651, 1651, 1651, 1651, 1651, 1653, 1653, 1653,
     1653, 1653,    0, 1653,    0,    0,    0,    0,    0,    0,
        0, 1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1654,

     1655, 1655, 1655,    0, 1655,    0, 1655,    0,    0,    0,
        0,    0,    0,    0, 1655, 1655, 1655, 1656, 1656, 1656,
        0, 1656, 1656, 1657, 1657, 1657, 1657, 1657, 1657, 1658,
     1658, 1658, 1658, 1658, 1658, 1659, 1659, 1659, 1659, 1659,
     1659, 1660, 1660, 1660, 1660, 1660, 1660, 1661, 1661, 1661,
     1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662, 1662, 1663,
     1663, 1663, 1663, 1663, 1663, 1664, 1664, 1664, 1664, 1664,
     1664, 1665, 1665, 1665, 1665, 1665, 1665, 1666, 1666, 1666,
     1666, 1666, 1666, 1667, 1667, 1667, 1667, 1667, 1667, 1668,
     1668, 1668, 1668, 1668, 1668, 1669, 1669, 1669, 1669, 1669,

     1669, 1670, 1670, 1670, 1670, 1670, 1670, 1671, 1671, 1671,
     1671, 1671,    0, 1671,    0,    0,    0,    0,    0,    0,
        0, 1671, 1671, 1671, 1672, 1672, 1672, 1672, 1672, 1672,
     1672, 1672, 1672,    0, 1672, 1673, 1673, 1673, 1673, 1673,
     1673, 1674, 1674, 1674, 1674, 1674, 1674, 1675, 1675, 1675,
     1675, 1675, 1675, 1676, 1676, 1676, 1676, 1676, 1676, 1677,
     1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678, 1678,
     1678, 1679,    0, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
     1679, 1679,    0,    0,    0,    0,    0,    0,    0, 1679,
     1679, 1679, 1679, 1680,    0, 1680, 1680, 1680, 1680, 1680,

     1680, 1680, 1680, 1680,    0,    0,    0,    0,    0,    0,
        0, 1680, 1680, 1680, 1680, 1681,    0, 1681,    0, 1681,
        0, 1681,    0,    0,    0,    0,    0, 1681, 1681, 1682,
     1682, 1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1683,
     1683, 1683, 1683, 1683,    0, 1683, 1684, 1684, 1684, 1684,
     1684, 1684, 1685, 1685, 1685, 1685, 1685, 1685, 1686, 1686,
     1686, 1686, 1686, 1686, 1687, 1687, 1687, 1687, 1687, 1687,
     1688, 1688, 1688, 1688, 1688, 1688, 1689, 1689, 1689, 1689,
     1689, 1689, 1690,    0, 1690, 1690, 1690, 1690, 1690, 1690,
     1690, 1690, 1690,    0,    0,    0,    0,    0,    0,    0,

     1690, 1690, 1690, 1690, 1691,    0, 1691,    0, 1691,    0,
     1691,    0,    0,    0,    0,    0, 1691, 1691, 1692, 1692,
     1692, 1692, 1692, 1692, 1693, 1693, 1693, 1693, 1693, 1693,
     1693, 1693,    0,    0,    0,    0,    0,    0,    0, 1693,
     1693, 1693, 1694, 1694, 1694, 1694, 1694, 1694, 1695, 1695,
     1695, 1695, 1695, 1695, 1695,    0, 1695,    0,    0,    0,
        0,    0,    0,    0, 1695, 1695, 1695, 1695, 1696,    0,
     1696,    0, 1696,    0, 1696,    0,    0,    0,    0,    0,
     1696, 1696, 1697, 1697, 1697, 1697, 1697, 1697, 1698, 1698,
     1698, 1698, 1698,    0, 1698,    0,    0,    0,    0,    0,

        0,    0, 1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699,
     1699, 1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701, 1701,
     1701, 1701, 1701, 1702, 1702, 1702, 1702, 1702, 1702, 1703,
     1703, 1703, 1703, 1703, 1703, 1704, 1704, 1704, 1704, 1704,
     1704, 1705, 1705, 1705, 1705, 1705, 1705, 1706, 1706, 1706,
     1706, 1706, 1706, 1707, 1707, 1707, 1707, 1707, 1707, 1708,
     1708, 1708, 1708, 1708, 1708, 1709, 1709, 1709,    0, 1709,
        0, 1709,    0,    0,    0,    0,    0,    0,    0, 1709,
     1709, 1709, 1710, 1710, 1710, 1710, 1710, 1710, 1711, 1711,
     1711, 1711, 1711,    0, 1711,    0,    0,    0,    0,    0,

        0,    0, 1711, 1711, 1711, 1712, 1712, 1712, 1712, 1712,
     1712, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713,    0,    0,    0,    0,    0,    0,    0, 1713,
     1713, 1713, 1713, 1714, 1714, 1714, 1714, 1714, 1714, 1715,
     1715, 1715, 1715, 1715, 1715, 1716, 1716, 1716, 1716, 1716,
     1716, 1716, 1716, 1716, 1716, 1716,    0,    0,    0,    0,
        0,    0,    0, 1716, 1716, 1716, 1716, 1717, 1717, 1717,
     1717, 1717, 1717, 1718, 1718, 1718, 1718, 1718, 1718, 1719,
     1719, 1719, 1719, 1719, 1719, 1720,    0, 1720, 1720, 1720,
     1720, 1720, 1720, 1720, 1720, 1720,    0,    0, 1720,    0,

        0, 1720,    0, 1720, 1720, 1720, 1720, 1721,    0, 1721,
     1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721,    0,    0,
     1721,    0,    0, 1721,    0, 1721, 1721, 1721, 1721, 1722,
     1722, 1722, 1722, 1722, 1723, 1723, 1723, 1723, 1724, 1724,
     1724, 1724, 1724, 1724, 1725, 1725, 1725, 1725, 1725, 1725,
     1726, 1726, 1726, 1726, 1726, 1726, 1727, 1727, 1727, 1727,
     1727, 1727, 1728, 1728, 1728, 1728, 1728, 1729, 1729, 1729,
     1729, 1730, 1730, 1730, 1730, 1730, 1730, 1731, 1731, 1731,
     1731, 1731, 1731, 1732, 1732, 1732, 1732, 1732, 1732, 1733,
     1733, 1733, 1733, 1733, 1733, 1734, 1734, 1734, 1734, 1734,

     1734, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1735,    0,    0, 1735,    0,    0, 1735,    0, 1735,
     1735, 1735, 1735, 1736, 1736, 1736, 1736, 1736, 1736, 1737,
     1737, 1737, 1737, 1737, 1737, 1738, 1738, 1738, 1738, 1738,
     1738, 1739, 1739, 1739, 1739, 1739, 1739, 1740, 1740, 1740,
     1740, 1740, 1740, 1741, 1741, 1741, 1741, 1741, 1741, 1742,
     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
        0,    0, 1742,    0,    0, 1742,    0, 1742, 1742, 1742,
     1742, 1743, 1743, 1743, 1743, 1743, 1743, 1744, 1744, 1744,
     1744, 1744, 1744, 1745, 1745, 1745, 1745, 1745, 1745, 1746,

     1746, 1746, 1746, 1746, 1746, 1747, 1747, 1747, 1747, 1747,
     1747, 1748, 1748, 1748, 1748, 1748, 1748, 1749, 1749, 1749,
     1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749,    0,    0,
     1749,    0,    0, 1749,    0, 1749, 1749, 1749, 1749, 1750,
     1750, 1750, 1750, 1750, 1750, 1751, 1751, 1751, 1751, 1751,
     1751, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392

    } ;

static yyconst flex_int16_t yy_rule_linenum[181] =
    {   0,
      271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
      291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
      301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
      351,  352,  353,  354,  355,  356,  357,  358,  359,  360,
      361,  362,  363,  364,  365,  366,  367,  368,  369,  370,

      371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
      391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
      401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
      411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
      431,  432,  433,  434,  435,  436,  437,  438,  439,  440,
      441,  442,  443,  444,  445,  446,  447,  448,  449,  452
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3379 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 270 "lib/SPARQLfedScanner.lpp"

#line 3543 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1393 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1392 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 181 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 181 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 182 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::IT_VALUES;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::IT_SADI;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRBEFORE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRAFTER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_TZ;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_UUID;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRUUID;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRIREF;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext, yylloc); return token::PNAME_NS;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext, yylloc); return token::PNAME_LN;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 430 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 431 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 433 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 434 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 435 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 436 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 437 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 438 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 439 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 440 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 441 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 442 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 443 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 444 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 445 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 446 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 447 "lib/SPARQLfedScanner.lpp"
{return token::INSERTDATA;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 448 "lib/SPARQLfedScanner.lpp"
{return token::DELETEDATA;}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 449 "lib/SPARQLfedScanner.lpp"
{return token::DELETEWHERE;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 451 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 452 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 458 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4573 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1393 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1393 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1392);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 458 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::runtime_error("program flow exception -- imroper call to SPARQLfedScanner::typedLiteral"));
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::location_type*& yylloc, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    YaccDriver::unescapeString(yytext+skip, yyleng-skip-skip, space, yylloc);
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext, SPARQLfedParser::location_type*& yylloc){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	driver->error(*yylloc, std::string() + "Inexplicable lack of ':' in prefix: \"" + yytext + "\"");
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL)
	driver->error(*yylloc, std::string() + "Unknown prefix: \"" + ret.substr(0, index) + "\"");

    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


