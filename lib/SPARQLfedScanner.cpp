#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1078] =
    {   0,
        0,    0,  125,  123,    2,    1,    1,   69,  123,    2,
      123,  123,  123,    9,   10,   11,   67,   47,   68,   41,
       66,  108,  102,   30,   60,   58,   61,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,   49,   50,
      123,  123,   48,  123,  123,  123,  123,   27,  123,   28,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,    2,
        1,   59,    0,  118,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  106,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   57,    0,  117,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  121,    0,  111,    0,  114,  109,  109,  108,    0,
      103,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   62,  101,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   63,  105,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  107,    0,    0,  102,    0,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   19,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   79,   64,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  122,
       98,    0,    0,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  118,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  106,  106,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  106,  106,
      106,  106,  106,  106,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  117,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  112,  112,
        0,  115,  115,    0,    0,  109,    0,    0,  110,  103,
        0,  103,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  103,  103,  103,  103,  103,  103,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  105,  105,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  105,  105,  105,  105,  105,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   54,   22,   14,   94,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   75,    0,    0,    0,    0,
        0,    0,    0,   93,    0,   92,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       70,   91,    0,    0,    0,   76,    0,  104,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,  106,  106,  106,
      106,  106,  106,  106,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  106,  106,  106,
      106,  106,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  112,    0,    0,  113,    0,  115,    0,    0,
      116,    0,  110,    0,  110,  103,  103,  103,  103,  103,
      103,  103,  103,  103,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  103,  103,  103,

      103,  103,    0,    0,    0,    0,    0,    0,  105,  105,
      105,  105,  105,  105,  105,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  105,  105,
      105,  105,  105,    0,    0,  107,    0,    0,    0,    0,
        0,    0,    0,    3,    0,    0,    0,    0,    0,    0,
        0,    0,   31,    0,   23,    0,   37,   53,    0,    0,
       15,    0,    0,    0,    0,    0,   36,    0,    0,    0,
        0,   71,    0,   35,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  104,    0,  104,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  104,  104,  104,  104,  104,  104,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   99,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  106,  106,  106,  106,  106,    0,
        0,  106,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  113,    0,  113,    0,  116,    0,  116,
      103,  103,  103,  103,  103,    0,    0,  103,  105,  105,
      105,  105,  105,    0,    0,  105,    0,    0,   77,   74,

       34,    0,    0,   90,    0,    0,    0,    0,    0,    0,
        0,   40,   18,   18,    0,    0,    0,   83,    0,   84,
        0,   24,    0,   44,   16,    0,    0,    0,    0,   21,
        0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
       81,    0,   29,   45,    0,   17,  104,  104,  104,  104,
      104,  104,  104,  104,  104,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  104,  104,
      104,  104,  104,    0,    0,  100,  120,    0,    0,    0,
        0,  106,  119,    0,    0,    0,    0,  103,  105,    0,
        0,    0,   39,    0,   33,    0,    0,   88,   46,    0,

       20,   32,    0,    0,    0,    0,    0,   65,   25,    0,
        4,    0,    0,   95,    5,    0,    0,   38,   52,    0,
        0,  104,  104,  104,  104,  104,    0,    0,  104,    0,
        0,    0,    0,    0,    0,    0,   85,    0,    0,   51,
        0,    0,    7,    0,    0,   43,   80,    0,  104,   26,
       78,    0,   73,   13,    6,    0,    0,    0,    0,   42,
       82,    0,    0,   12,    0,   86,    0,    0,   97,   55,
        0,    0,   89,    0,   72,   96,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   67,   74,   75,   76,   77,   78,   79,   80,
       81,   67,   82,   83,   84,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1090] =
    {   0,
        0,    0,  872,12220,  118,12220,  844,  805,  117,  146,
      245,  790,  352,  123,12220,12220,  110,12220,  111,  778,
    12220,  114,  451,12220,  545,12220,  773,  644,    0,  745,
      107,  112,  336,   92,  330,  167,  341,  346,  120,  537,
      548,  831,  837,  542,  351,  884,  547,  849,  296,12220,
      717,  743,    0,  898,  556,  899,  929,12220,  664,12220,
      894,  923,  940,  957,  974,  991,  345, 1008,   95, 1025,
      104, 1042, 1059, 1076, 1093, 1110,  171, 1113, 1130,  137,
    12220,12220, 1225,  739, 1226, 1154, 1170, 1260,  378, 1277,
     1218, 1294, 1304, 1321,  362, 1332, 1367, 1383, 1398,  542,

     1415, 1432, 1442, 1452, 1469,  581, 1550, 1584, 1601, 1618,
     1635, 1652, 1669, 1686, 1703,  671, 1720,  769, 1737, 1754,
     1771, 1788, 1805,  174, 1808, 1825,12220, 1915,  717, 1921,
     1849, 1865, 1950, 1175, 1967, 1984, 1994, 2004, 2021, 1205,
      949,12220,  651,  127,  626,  857,  186,  327,  904,  159,
     2105, 2139, 2156, 2173, 2190, 2207, 2224, 1913, 2241,  795,
     2258, 1222, 2275, 2292, 2309, 2326, 2343,  231, 2346, 2363,
     2439,    0,12220, 2381, 2397, 2412, 1329, 2474, 2429, 2491,
     2501, 2518, 1487,12220, 2599, 2633, 2650, 2667, 2684, 2701,
     2718, 2735, 2752,  806, 2769, 1890, 2786, 2803, 2820, 2837,

     2854,  408, 2857, 2874,  627,  168, 2954,    0, 2935, 2936,
     2948, 2956, 2950, 2967, 2984, 3001, 3018, 3035, 3052,  546,
     3069, 3086, 3103, 3120, 3137, 2032, 3154, 3171, 3188, 3205,
     3222,  437, 3225, 3242, 3302, 3303, 3304, 3312, 3313, 3323,
     3357, 3362, 3367, 3377, 3322, 3407, 3412, 3420, 3425, 3459,
     3464, 3475, 3470, 3483, 3510, 3518, 3557, 3520, 3566, 3571,
     3576, 3611, 3613, 3622, 3623, 3641, 3631, 3671, 3672, 3691,
     3689, 3728, 3736, 3742, 3777, 3790, 3788, 3782,  695,12220,
    12220, 3848, 3921, 3796,12220, 3926, 3927, 3932, 3937, 3938,
     3972, 3977, 3971, 3988, 4005, 4022, 4039, 4056, 4073, 4090,

     4107, 4124, 1873, 4141, 4158,12220, 4253, 4176,  580, 4193,
     4223, 4240, 4288, 4305, 4322, 4339, 4356,  578, 4373, 4390,
     4407, 4424, 4441, 4458, 4475,    0,    0, 4492, 4509, 4526,
     4543, 4560, 4577, 4594,  534, 3945, 4611, 4628, 4645, 2436,
     4662, 4679, 4696, 4713, 3485,  630, 4203, 4730,    0,    0,
        0,    0,    0,    0, 4747, 4764, 4781, 4798, 4815, 4832,
     4849, 4866, 4883, 4900, 2427, 4917, 4934,12220, 5024, 4952,
      574, 4969, 4994, 5011, 5059, 5076, 5093, 5110,  353,  738,
      350,  854, 1263,  407,  557, 1265,  918,  607,  603,    0,
        0,    0, 5127, 5144, 5161, 5178, 5195, 5212, 5229,  513,

     5246, 5263, 5280, 5297, 5314, 2526, 5331, 5348, 5365, 5382,
     5399,  731, 5402, 5419,    0,    0,    0,    0,    0,    0,
     5436, 5453, 5470, 5487, 5504, 5521, 5538, 5555, 5572, 5589,
     3695, 5606, 5623, 5640,  552, 5657, 5674, 5691, 5708, 5725,
     5742, 5759,    0,    0, 5776, 5793, 5810, 5827, 5844, 5861,
     5878,  506, 5895, 5912, 5929, 5946, 4250, 5963, 5980, 5997,
     6014, 6031,  900, 6034, 6051,    0,    0,    0,    0,    0,
        0, 6068, 6085, 6102, 6119, 6136, 6153, 6170, 6187, 6204,
     6221, 4974, 6238, 6255,    0, 6315, 6316, 6317, 6325, 6326,
     6327, 6335, 6336, 6366, 6374, 6375, 6376, 6384, 6378, 6395,

     6412, 6429, 6446, 6463, 6480, 6497, 6514, 6531, 5019, 6548,
     6565, 6634, 6636, 6642, 6644, 6652, 6686, 6687, 6692, 6702,
     6710, 6704, 6741, 6747, 6753, 6758, 6764, 6798, 6807, 6788,
     6809, 6822, 6846, 6856, 6861, 6867, 6880, 6895, 6910, 6908,
     6925, 6926, 6945, 6953, 6963, 6965, 6984, 7003, 6983, 7002,
     7014, 7023, 7042, 7033, 7063, 7081, 7086, 7051, 7091, 7100,
     7140, 7121, 7135, 7145, 7158, 7156, 7179, 7240, 7274, 7291,
     7308, 7325, 7342, 7359, 7376, 7393, 1880, 7410, 7142, 7427,
     7444, 7461, 7478, 7495, 1138, 7498, 7515, 7575, 7576, 7577,
     7585, 7586, 7587, 7595, 7589, 7606, 7701,  593, 7660, 7652,

     7671, 7686, 7167, 7736, 7753, 7763, 7773, 7790, 7159, 7885,
     7808, 7825, 7855, 7914, 7872, 7949, 7966,    0,    0,    0,
        0,    0,    0,    0, 7983, 8000, 8017, 8034, 8051, 8068,
     8085, 8102, 8119, 8136, 6572, 8153, 8170,    0,    0,    0,
        0,    0, 8187, 8204, 8294,  587, 8300, 8228, 8244, 8329,
     7629, 8346, 7842, 8363, 8373, 8390, 7708, 8480, 8408, 8425,
     8450, 2983, 2959, 3012,  561,  555, 3404, 2962, 3454,  551,
      536,  533,  532,  515,  486,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 8467, 8515, 8532, 8549, 8566, 8583,
     8600, 8617, 8634, 8651, 7612, 8668, 8685,    0,    0,    0,

        0,    0, 8702, 8719, 8795, 8737, 8754, 8771,    0,    0,
        0,    0,    0,    0,    0, 8830, 8847, 8864, 8881, 8898,
     8915, 8932, 8949, 8966, 8983, 7880, 9000, 9017,    0,    0,
        0,    0,    0, 9034, 9051,  436, 8304, 8309, 8315, 9111,
     9112, 9077, 9106, 9139, 9174, 9176, 9187, 9182, 9188, 9197,
     9232, 9238, 9244, 9250, 9256, 9287, 9293, 9295, 9301, 9336,
     9338, 9347, 9346, 9355, 9385, 9390, 9395, 9400, 9401, 9406,
     9443, 9445, 9451, 9453, 9492, 9461, 9498,  131, 9500, 9509,
     9511, 9546, 9519, 9554, 9560, 9573, 9597, 9581, 9612, 9562,
     9618, 9624, 9655, 9669, 9639, 9674, 9679,    0,    0,    0,

     9673, 9690, 9707, 9724, 9741, 9758, 9775,  340, 8788, 9792,
     9809, 9826, 9843, 7911, 9860, 9877, 9894, 9911, 9928, 1185,
     9931, 9948,    0,    0,    0,    0,    0,    0, 9965, 9982,
     9999,10016,10033,10050,10067,10084,10101,10118, 8268,10135,
    10152,10212,10213,10214,  420,10208,  363,10225,10242,10259,
    10276,10293,10310,10327,    0,    0,    0,    0,    0,10344,
    10361,    0,  391,10378,  322,10395,10412,10429,10446,10463,
    10480,10497,  326,  309,  252,  223,  219,  194,  190,  185,
        0,    0,    0,    0,    0,10514,10531,    0,    0,    0,
        0,    0,    0,10548,10565,    0,10625,10626,10627,10635,

    10636,10637,10645,10646,10676,10684,10695,10697,10703,10718,
    10734,10742,10753,10748,10765,10788,10776,10796,10806,10804,
    10827,10816,10844,10846,10854,  146,  132,10862,10864,10874,
    10885,10908,10902,10913,10925,10943,10952,10962,10960,10971,
    10983,10999,11001,11010,11011,11020,    0,    0,    0,    0,
        0,    0,    0,    0,    0,11014,11031,11048,11065,11082,
    11099,11116,11133,11150,11167, 8430,11184,11201,    0,    0,
        0,    0,    0,11218,11235,11295,12220,    0,11260,11289,
    11306,    0,12220,    0,11323,11340,11357,    0,    0,11424,
    11429,11419,11430,11438,11468,11473,11481,11479,11487,11489,

    11524,11526,11532,11534,11540,11542,  114,12220,11577,11585,
    11579,11590,11595,11596,11630,11635,11645,11643,11644,11653,
    11684,    0,    0,    0,    0,    0,11649,11678,    0,11711,
    11748,11749,11750,11769,11758,11796,11804,11806,11812,11814,
       99,11851,11824,11862,11863,11852,11868,11882,    0,11903,
    11905,11916,11922,11924,11933,11961,11972,11973,   93,11971,
    11981,12012,12021,11991,12029,12030,12031,   76,12039,12049,
    12083,12069,12220,12084,12092,12093,12220,12171,12176,12181,
    12184,  116,12189,12194,12196,12201,12206,12211,12214
    } ;

static yyconst flex_int16_t yy_def[1090] =
    {   0,
     1077,    1, 1077, 1077, 1077, 1077, 1077, 1077, 1078, 1079,
     1077, 1077, 1080, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1081, 1077, 1077, 1077, 1082, 1077,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1077, 1077,
     1077, 1077,   30,   30,   30,   30,   30, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1078, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1079, 1077, 1077, 1077, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1080, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1081,  171, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,

     1077, 1077, 1077, 1077, 1082,   30,   30,   23,   30,   30,
       30,   30, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1077, 1077,
     1077, 1077,   30,   30, 1077,   30,   30,   30,   30,   30,
       30,   30, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1083, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077,  107,  107, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,  107,  107,
      107,  107,  107,  107, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1084, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,  151,
      151,  151, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077,  151,  151,  151,  151,  151,  151,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077,  185,  185, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077,  185,  185,  185,  185,  185,
      185, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1085,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1077, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077,   30,   30,   30,
       30,   30,   30,   30, 1077, 1077, 1083,  597, 1077, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1086,
     1077, 1077, 1077, 1087, 1077, 1077, 1077,  107,  107,  107,
      107,  107,  107,  107, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077,  107,  107,  107,
      107,  107, 1077, 1077, 1084,  645, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1088, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077,  151,  151,  151,  151,  151,
      151,  151,  151,  151, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077,  151,  151,  151,

      151,  151, 1077, 1077, 1089, 1077, 1077, 1077,  185,  185,
      185,  185,  185,  185,  185, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,  185,  185,
      185,  185,  185, 1077, 1077, 1085,   30,   30,   30,   30,
       30, 1077, 1077,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30, 1077,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  568,  568,  568,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077,  568,  568,  568,  568,  568,  568, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077,   30,   30,   30,  597, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077,  107,  107,  107,  107,  107, 1077,
     1077,  107,  645, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
      151,  151,  151,  151,  151, 1077, 1077,  151,  185,  185,
      185,  185,  185, 1077, 1077,  185,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30, 1077, 1077,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  568,  568,  568,  568,
      568,  568,  568,  568,  568, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,  568,  568,
      568,  568,  568, 1077, 1077,   30, 1077,  597, 1077, 1077,
     1077,  107, 1077,  645, 1077, 1077, 1077,  151,  185,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30, 1077, 1077,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  568,  568,  568,  568,  568, 1077, 1077,  568,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
     1077,   30,   30,   30,   30,   30,   30,   30,  568,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1077,   30,
       30,   30,   30,   30,   30,   30,   30, 1077,   30,   30,
       30,   30, 1077,   30,   30,   30,    0, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077
    } ;

static yyconst flex_int16_t yy_nxt[12340] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   39,   40,
       41,   42,   43,   44,   45,   46,   39,   47,   39,   48,
       39,   39,   49,    4,   50,   51,   52,   53,   31,   32,
       33,   34,   54,   55,   37,   38,   39,   39,   40,   41,
       56,   43,   44,   45,   46,   57,   47,   39,   48,   39,
       39,   58,   59,   60,    4,   61,   62,   63,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   64,   65,   65,

       66,    4,    4,   67,   68,    4,   69,   70,   71,   72,
       73,   74,   75,   76,    4,   77,   78,   79,    4,   80,
      205, 1073,   80,   84,  141,  141,  141,  141,  143,  145,
      144,  146,  148,  247,  149,  235,  142,  209,   80, 1068,
      209,   80,  248,  236, 1059,  380,  150,  144,  237,  238,
     1041,  240,  209,  209,  241,  209,  242,  209,  239,  381,
      209,  209,  247,  926,  235,  209,  209,  927,  209,  209,
       85,  248,  236, 1008,  388,  150,  388,  237,  238,  389,
      240,  209,  209,  241,  209,  242,  209,  239,  381,  209,
      209,  292,  292,  292,  209,  292, 1007,  209,  293,  293,

      293,  293,  293,  293,  293,  880,  147,   86,  209,  209,
      880,  251,  209,  209,  878,  209,  209,   87,  385,   88,
       88,   88,   88,   88,   88,   89,   90,   90,   90,   90,
       91,   92,   92,   93,   94,   95,   97,  209,  209,  878,
      252,  209,  209,  876,  209,  209,   98,  385,   99,   99,
       99,   99,   99,   99,  100,  101,  101,  101,  101,  102,
      103,  103,  104,  105,  106,  107,  302,  302,  303,  364,
      364,  365,  876,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  279,  279,  279,

      279,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  430,  430,  431,  874,
      108,  109,  110,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  111,  112,  112,  113,  874,  386,  114,  115,
      280,  116,  117,  118,  119,  120,  121,  122,  123,  387,
      124,  125,  126,  129,  243,  665,  249,  665,  244,  253,
      666,  209,  245,  379,  250,  209,  645,  209,  209,  254,
      246,  209,  209,  270,  209,  662,  209,  255,  387,  209,
      256,  257,  209,  243,  209,  249,  209,  244,  253,  209,

      209,  245,  983,  250,  209,  130,  209,  209,  254,  246,
      209,  209,  270,  209,  662,  209,  255,  597,  209,  256,
      257,  209,  670,  209,  670,  209,  977,  671,  209,  291,
      291,  291,  291,  291,  291,  291,  291,  798,  291,  291,
      291,  291,  131,  291,  291,  291,  316,  316,  316,  316,
      316,  316,  132,  485,  133,  133,  133,  133,  133,  133,
      134,  135,  135,  135,  135,  136,  137,  137,  138,  139,
      140,  151,  310,  310,  310,  310,  310,  310,  310,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  481,  481,  482,  675,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  508,  508,  509,  675,  152,  153,  154,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  155,  156,
      156,  157,  673,  673,  158,  159,  671,  160,  161,  162,
      163,  164,  165,  166,  167,  258,  168,  169,  170,  172,
      173,  671,  672,  259,  672,  666,  261,  673,  209,  260,
      262,  666,  209,  209,  263,  209,  269,  209,  276,  209,
      209,  277,  209,  209,  258,  209,  209,  209,  863,  845,

      252,  209,  259,  443,  209,  261,  171,  209,  260,  262,
      390,  209,  209,  263,  209,  269,  209,  276,  209,  209,
      277,  209,  209,  389,  209,  209,  209,  389,  128,  252,
      209,  326,   96,  209,   83,  174,  319,  319,  319,  319,
      319,  319,  319,  206,  485,  175,  382,  176,  176,  176,
      176,  176,  176,  177,  178,  178,  178,  178,  179,  180,
      180,  181,  182,  183,  185,  325,  325,  325,  325,  325,
      325,  379,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  279,  279,  279,  279,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  634,  634,  635,  369,  186,
      187,  188,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  189,  190,  190,  191,  307,  285,  192,  193,  280,
      194,  195,  196,  197,  198,  199,  200,  201,  663,  202,
      203,  204,  206,  207,  282,  206,  208,  354,  354,  354,
      664,  354,  281,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  210,  209,  209,  209,
      211,  209,  209,  212,  209,  209,  209,  184,  147,  664,

      127,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  210,  209,  209,  209,  211,
      209,  209,  212,  209,  209,  209,  694,  694,  695,   82,
      213,  214,  215,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  217,  218,  218,  219,   81,  220,  221,  222,
      223,  224,  225,  226,  227,  228,  229,  230,  231,  264,
      232,  233,  234,  355,  355,  355,  355,  355,  355,  355,
      266, 1077,  209,  265,  382,  383,  209,  146,  209,  209,
      267,  268,  209, 1077,  278,  209,  667, 1077,  264,  384,
      209,  420,  420,  420,  209,  420, 1077,  209, 1077,  266,

     1077,  209,  471,  471,  471,  209,  471,  209,  209,  267,
      268,  209,  271,  278,  209,  667,  272, 1077,  384,  209,
      273, 1077,  148,  209,  149,  209,  209,  264, 1077,  209,
      274,  275,  209,  674,  249,  674,  150, 1077,  675,  209,
      209,  271,  250,  209,  209,  272,  209,  209, 1077,  273,
      141,  141,  141,  141,  209,  283,  264, 1077,  209,  274,
      275,  209,  142,  249, 1077,  150, 1077, 1077,  209,  209,
      209,  250,  209,  209,  209,  209,  209,  209,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  725,  725,  726, 1077,  209,

     1077, 1077,  284,  209, 1077, 1077,  209,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  288,  288,  288,  288,  288,  288,  288,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  289,  289,  289,
      286,  286,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  295,  296,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  298,  298,  298,  298,  297,
      299,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  306,   83,  838,  838,  839, 1077,   83,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  372,
      372,  372,  372,  372,  372,  372, 1077, 1077,   85,   83,
      965,  965,  966,  668,   83,  386, 1077, 1077,   83,  378,
      378,  378,  378,  378,  378,  669,   83,  387, 1077,   83,

     1077,   83,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312, 1077, 1077, 1077,   86,  421,  421,  421,  421,
      421,  421,  421, 1077,  669,   87,  387,   88,   88,   88,
       88,   88,   88,   89,   90,   90,   90,   90,   91,   92,
       92,   93,   94,   95,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,   97,  436,  436,  436,  436,  436,  436,  436,
     1077, 1077,   98, 1077,   99,   99,   99,   99,   99,   99,
      100,  101,  101,  101,  101,  102,  103,  103,  104,  105,
      106,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,  320,

      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      326,  442,  442,  442,  442,  442,  442, 1077,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,

      327,  327, 1077, 1077, 1077, 1077,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327, 1077, 1077, 1077, 1077,  328,  329,  330,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  332,  333,  333,
      334, 1077,  335,  336,  337, 1077,  338,  339,  340,  341,
      342,  343,  344,  345, 1077,  346,  347,  348,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  351,
      351,  351,  351,  351,  351,  351,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  352,  352,  352,  349,  349,
      107,  107,  107,  107,  107,  107,  107,  107, 1077,  107,
      107,  107,  107, 1077,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  357,  358,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      360,  360,  360,  360,  359,  361,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  368,  128, 1077, 1077,
     1077, 1077,  128,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371, 1077, 1077, 1077, 1077,  130,  594,
      594,  594,  594,  594,  128, 1077,  828,  828,  828,  128,
      828, 1077, 1077,  128,  472,  472,  472,  472,  472,  472,
      472,  128, 1077, 1077,  128, 1077,  128,  151,  151,  151,

      151,  151,  151,  151,  151,  131,  151,  151,  151,  151,
     1077,  151,  151,  151, 1077,  132, 1077,  133,  133,  133,
      133,  133,  133,  134,  135,  135,  135,  135,  136,  137,
      137,  138,  139,  140,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  390,  391, 1077,  390,  499,  499,  499,  499,
      499,  499,  499,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392, 1077, 1077, 1077,
     1077,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392, 1077, 1077, 1077, 1077,
      393,  394,  395,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  397,  398,  398,  399, 1077,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411, 1077,
      412,  413,  414,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  417,  417,  417,  417,  417,  417,
      417,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      418,  418,  418,  415,  415,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  423,  424,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  426,  426,
      426,  426,  425,  427,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  173,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  642,  642,  642,  642,  642, 1077,  174,
      625,  625,  625,  625,  625,  625,  625, 1077, 1077,  175,
     1077,  176,  176,  176,  176,  176,  176,  177,  178,  178,
      178,  178,  179,  180,  180,  181,  182,  183,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  443,
      685,  685,  685,  685,  685,  685,  685,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444, 1077, 1077, 1077, 1077,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
     1077, 1077, 1077, 1077,  445,  446,  447,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  449,  450,  450,  451,

     1077,  452,  453,  454, 1077,  455,  456,  457,  458,  459,
      460,  461,  462, 1077,  463,  464,  465,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  468,  468,
      468,  468,  468,  468,  468,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,

      469,  469,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  469,  469,  469,  466,  466,  185,
      185,  185,  185,  185,  185,  185,  185, 1077,  185,  185,
      185,  185, 1077,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  474,  475,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  477,

      477,  477,  477,  476,  478,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484, 1077,  209,  209,  487,  663,
      209,  209,  668,  209,  209, 1077,  488,  486, 1077,  209,
      489,  664, 1077,  209,  669,  209,  209,  209,  873,  209,

      873,  209,  209,  874,  209,  209,  209,  487, 1077,  209,
      209, 1077,  209,  209, 1077,  488,  486, 1077,  209,  489,
      664, 1077,  209,  669,  209,  209,  209,  875,  209,  875,
      209,  209,  876,  209,  490,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,

      491,  491,  493,  493,  493,  493,  493,  493,  493,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  494,  494,
      494,  491,  491,  209,  209,  209,  209,  209,  209,  209,
      209, 1077,  209,  209,  209,  209, 1077,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209,  209,  209,  209,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  497,  497,  497,  209,
      497,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  501,  502,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  504,  504,  504,
      504,  503,  505,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  209,  513,  209,  514,  512,  209,  209,
      209,  209,  209,  209,  209,  516, 1077,  209,  209,  515,
      209,  209, 1077,  209,  209, 1077, 1077,  524,  209, 1077,
      209,  209,  209,  513,  209,  514,  512,  209,  209,  209,
      209,  209,  209,  209,  516,  517,  209,  209,  515,  209,
      209, 1077,  209,  209,  520, 1077,  524,  209,  518,  209,

      209, 1077,  209,  209,  519,  209, 1077,  209,  209, 1077,
      209, 1077,  209,  521,  517,  209,  522, 1077,  209,  877,
     1077,  877,  523,  520,  878,  209, 1077,  518, 1077, 1077,
     1077,  209,  209,  519,  209, 1077,  209,  209, 1077,  209,
     1077,  209,  521,  526,  209,  522, 1077,  209,  209,  525,
     1077,  523,  209,  209,  209,  209,  527,  209, 1077, 1077,
      209,  209, 1077, 1077,  528,  209,  209, 1077,  209,  879,
      209,  879,  526,  209,  880, 1077, 1077,  209,  525, 1077,
     1077,  209,  209, 1077,  209,  527,  209, 1077, 1077,  209,
      209, 1077,  530,  528,  209,  209, 1077,  209, 1077,  209,

      209,  529,  209,  530,  209,  209,  531,  209, 1077,  209,
     1077,  209,  209, 1077, 1077,  209,  209,  532,  533, 1077,
      209,  530, 1077,  209,  209, 1077, 1077, 1077,  209,  209,
      529,  209,  530,  209,  209,  532,  209, 1077,  209, 1077,
      209,  209, 1077, 1077,  209,  209,  532,  533, 1077,  209,
     1077,  209,  209,  209,  536,  534,  535,  209,  209,  209,
      209,  541, 1077,  209, 1077,  209,  209, 1077,  209,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633, 1077,
      209, 1077, 1077,  536,  534,  535,  537,  209,  209, 1077,
      541, 1077,  209,  538,  209,  209,  539,  209,  209,  543,

     1077, 1077,  209, 1077,  540,  209,  542,  209, 1077, 1077,
     1077,  209,  209, 1077,  209,  537,  209,  209, 1077,  209,
     1077,  209,  538, 1077,  209,  539,  544,  209,  543, 1077,
     1077,  209, 1077,  540,  209,  542,  209, 1077, 1077, 1077,
      209,  209, 1077,  209, 1077,  209,  209, 1077,  209, 1077,
      209,  545,  209,  209,  546,  544,  209, 1077,  209,  209,
     1077,  209,  547,  209,  209, 1077, 1077,  209,  209,  548,
      209,  209,  209, 1077,  549, 1077,  209,  550, 1077,  209,
      545,  209,  209,  546, 1077,  209,  209,  209,  209,  209,
      209,  547,  209,  209, 1077, 1077,  209,  209, 1077,  209,

      209,  209,  551,  549,  552,  209,  550, 1077,  209, 1077,
     1077,  209,  209,  209, 1077,  209,  209,  209,  209,  209,
      209, 1077,  553, 1077, 1077,  554, 1077, 1077, 1077,  555,
      209,  551,  209,  552,  209, 1077,  209,  209, 1077,  209,
     1077,  209,  209, 1077, 1077,  209,  209, 1077,  209,  209,
     1077,  553, 1077, 1077,  554, 1077, 1077, 1077,  555,  209,
     1077,  209, 1077,  209, 1077,  209,  209,  556,  209,  209,
      560,  557,  558,  209, 1077,  559,  209,  209, 1077, 1077,
     1077,  209, 1077,  209,  209, 1077,  561,  209, 1077, 1077,
      209,  702,  702,  702,  702,  702,  556, 1077,  209,  560,

      557,  558,  209, 1077,  559,  209,  209, 1077, 1077, 1077,
      209, 1077,  209,  209,  567,  561,  209,  562,  209,  209,
     1077,  563,  209,  209,  566,  209,  564,  209, 1077,  209,
      209,  209,  565,  209, 1077,  209,  209,  209,  209, 1077,
     1077,  209, 1077,  567,  209, 1077,  562,  209, 1077, 1077,
      563,  209,  209,  566,  209,  564,  209, 1077,  209,  209,
      209,  565,  209, 1077,  209,  209,  209,  209,  568, 1077,
      209, 1077,  589,  209, 1077, 1077,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,

     1077, 1077, 1077, 1077,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568, 1077,
     1077, 1077, 1077,  569,  570,  571,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  572,  573,  573,  574, 1077,
     1077,  575,  576, 1077,  577,  578,  579,  580,  581,  582,
      583,  584,  209,  585,  586,  587,  209,  209,  209,  209,
     1077,  209,  209,  209,  209,  209, 1077,  209,  209,  209,
      209, 1077,  209,  209, 1077,  209,  209, 1077, 1077,  588,
     1077,  209, 1077, 1077, 1077,  209,  209,  209,  209, 1077,

      209,  209,  209,  209,  209, 1077,  209,  209,  209,  209,
     1077,  209,  209,  209,  209,  209, 1077,  209,  209, 1077,
      209, 1077,  209, 1077, 1077,  209, 1077, 1077, 1077,  327,
      327,  327,  327,  327,  327,  327,  327, 1077,  327,  327,
      327,  327,  209,  327,  327,  327,  209,  209, 1077,  209,
     1077,  209, 1077, 1077,  209,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  286,
      286,  286,  286,  286,  287,  286,  286,  286,  286,  286,

      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  287,  287,
      287,  287,  287,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  286,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  286,  286,  286,  286,  286,  286,  286,  286,  286,

      286,  286,  286,  286,  286,  286,  286,  286,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  598,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636, 1077, 1077,  599,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83, 1077, 1077,  600,  716,  716,  716,  716,  716,  716,
      716, 1077, 1077,  601, 1077,  602,  602,  602,  602,  602,
      602,  603,  604,  604,  604,  604,  605,  606,  606,  607,
      608,  609,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  618,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  621,  621,  621,  621,  621,  621,
      621,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      622,  622,  622,  619,  619,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  624,  624,  624, 1077,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  627,  628,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  630,  630,  630,  630,  629,
      631,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  349,  349,  349,  349,  349,
      350,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  350,  350,  350,  350,  350,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  349,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  646,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      733,  733,  733,  733,  733, 1077, 1077,  647,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128, 1077, 1077,  648,  741,  741,  741,  741,  741,
     1077, 1077, 1077, 1077,  649, 1077,  650,  650,  650,  650,
      650,  650,  651,  652,  652,  652,  652,  653,  654,  654,
      655,  656,  657,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  661,  661,  661,  661,  661,  661,

      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  676,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  679,
      679,  679,  679,  679,  679,  679,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  680,  680,  680,  677,  677,
      392,  392,  392,  392,  392,  392,  392,  392, 1077,  392,
      392,  392,  392, 1077,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  683,  683,  683,  392,  683,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  687,  688,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  690,  690,  690,  690,  689,  691,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  415,  415,  415,  415,  415,  416,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  416,  416,  416,  416,  416,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  415,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      709,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  712,  712,
      712,  712,  712,  712,  712,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  713,  713,  713,  710,  710,  444,
      444,  444,  444,  444,  444,  444,  444, 1077,  444,  444,
      444,  444, 1077,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  715,  715,  715, 1077,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  718,  719,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      720,  722,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  723,  723,

      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  466,  466,  466,  466,
      466,  467,  466,  466,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  467,  467,  467,  467,  467,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  466,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,

      466,  466,  466,  466,  466,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  209,  209,  209, 1077,
      209,  209,  209,  209,  209,  209,  209,  209,  209, 1077,
      209,  209,  209,  209,  209,  209,  209,  209, 1077, 1077,
      209,  209, 1077,  209,  209,  209,  209,  209, 1077,  209,
      209,  209,  209,  209,  209,  209,  209,  209, 1077,  209,

      209,  209,  209,  209,  209,  209,  209,  209, 1077,  209,
      209,  209,  209,  209,  209,  209,  209,  209, 1077,  209,
      209,  209,  209,  209,  209,  209, 1077, 1077, 1077,  209,
     1077, 1077,  209, 1077, 1077, 1077,  209, 1077, 1077, 1077,
      209, 1077, 1077,  209,  209,  209,  209, 1077,  209,  209,
      209,  209,  209,  209,  209, 1077, 1077, 1077,  209, 1077,
     1077,  209,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  491,  491,  491,  491,

      491,  492,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  490,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  492,  492,  492,  492,  492,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  491,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  491,  491,

      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  744,  745,  859,  859,
      859,  859,  859,  746, 1077,  209, 1077,  209, 1077,  209,
      748,  209,  209,  209,  209,  747, 1077,  209, 1077,  209,
      209, 1077,  209,  209, 1077,  744,  745,  209, 1077, 1077,

      209, 1077,  746, 1077,  209, 1077,  209, 1077,  209,  748,
      209,  209,  209,  209,  747, 1077,  209, 1077,  209,  209,
     1077,  209,  209, 1077, 1077,  749,  209,  209,  209,  209,
      752,  209,  750,  751,  209,  209,  754,  209,  753, 1077,
      209, 1077, 1077,  209, 1077,  209, 1077,  209, 1077,  209,
      209,  209,  209, 1077,  749,  209,  209,  209,  209,  752,
      209,  750,  751,  209,  209,  754,  209,  753, 1077,  209,
     1077,  755,  209, 1077,  209, 1077,  209, 1077,  209,  209,
      209,  209,  209, 1077,  209, 1077,  209,  209,  209,  209,
     1077, 1077,  209,  756,  209,  209,  757, 1077,  209,  209,

      755,  209, 1077,  758, 1077,  209,  209, 1077, 1077,  759,
     1077,  209,  209, 1077, 1077,  209, 1077,  209,  209, 1077,
     1077,  209,  756,  209,  209,  757, 1077,  209,  209,  209,
      209,  762,  758,  209,  209,  209,  209, 1077,  759,  209,
     1077,  209, 1077,  209,  760, 1077,  209,  761,  209, 1077,
      209, 1077,  209, 1077,  209,  209,  763,  209,  209, 1077,
      762, 1077,  209,  209, 1077,  209, 1077,  209,  209,  764,
      209, 1077,  209,  760, 1077,  209,  761,  209, 1077,  209,
     1077,  209,  765,  209,  209,  764,  209,  209,  766, 1077,
     1077,  209,  209, 1077,  209, 1077,  209,  209,  764,  209,

     1077,  209,  209,  767,  209, 1077,  209, 1077,  209,  209,
     1077,  765,  209, 1077, 1077,  209,  209,  766, 1077,  768,
      209,  209, 1077,  209, 1077,  209,  209, 1077,  209, 1077,
      209,  209,  767,  209, 1077,  209,  209,  209,  209,  769,
      209,  209, 1077,  209,  209, 1077,  770, 1077,  768,  209,
      209,  209,  771,  209,  209,  209,  209,  209,  209,  772,
     1077, 1077,  773, 1077, 1077,  209,  209,  209,  769,  209,
      209,  209,  209,  209,  209,  770,  774, 1077,  209, 1077,
      209,  771,  209, 1077,  209,  209,  209,  209,  772, 1077,
      209,  773,  775,  209,  209,  209,  209, 1077,  209,  209,

      209,  209,  209,  209,  209,  774,  209,  778,  209, 1077,
      209,  209,  776,  209, 1077,  209,  777, 1077, 1077,  209,
     1077,  775,  209,  209,  209,  209, 1077,  209,  779,  209,
      209,  209,  209,  209, 1077,  209, 1077,  209,  780,  209,
      209,  776,  209,  209,  209,  777,  781,  209,  209, 1077,
      209,  209, 1077,  209,  209,  209,  782,  779,  209,  209,
      209,  209,  209, 1077,  209,  784, 1077,  780,  209, 1077,
     1077,  209,  209,  209,  209,  781,  209,  209,  209,  209,
      209,  209, 1077,  209,  209,  782, 1077,  209,  209,  783,
      209,  209,  209,  209,  784,  785,  209,  209, 1077,  789,

      209, 1077, 1077,  209,  209, 1077,  786,  209,  209, 1077,
      209,  209,  209,  787,  788, 1077,  209, 1077,  783,  209,
     1077,  209,  209,  790,  785,  209,  209,  209,  789,  209,
     1077,  209,  209,  209,  209,  786,  209,  209, 1077,  209,
      209,  209,  787,  788,  791,  209, 1077, 1077,  209, 1077,
     1077,  209,  790, 1077, 1077,  209,  209, 1077,  209, 1077,
      209,  209,  209,  209, 1077,  209,  209,  794,  209,  209,
      209,  792, 1077,  791,  209, 1077,  209,  209, 1077,  793,
      209,  209, 1077,  209, 1077,  209,  209,  795,  209, 1077,
      209,  209, 1077,  209, 1077,  209,  794,  209,  209,  209,

      792,  209,  796,  209,  209,  209,  209, 1077,  793,  209,
      209, 1077,  209, 1077,  209,  209,  795,  209, 1077,  209,
      209, 1077,  209,  797,  209, 1077,  209,  209,  209, 1077,
      209,  796,  209,  209, 1077,  209,  829,  829,  829,  829,
      829,  829,  829,  854,  854,  854,  854,  854,  854,  209,
     1077, 1077,  797,  209, 1077, 1077,  209,  798,  799, 1077,
      798,  848,  848,  848,  848,  848,  848,  848,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800, 1077, 1077, 1077, 1077,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800, 1077, 1077, 1077, 1077,  801,  802,  803,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  805,  806,  806,
      807, 1077,  808,  809,  810,  811,  812,  813,  814,  815,
      816,  817,  818,  819, 1077,  820,  821,  822,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  825,
      825,  825,  825,  825,  825,  825,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  826,  826,  826,  823,  823,
      568,  568,  568,  568,  568,  568,  568,  568, 1077,  568,
      568,  568,  568, 1077,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  828,  828,  828,  828,  828,  828,

      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  831,  832,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      834,  834,  834,  834,  833,  835,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  841,

      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  209,  209,  209, 1077,
      209,  209,  209,  209,  209,  209,  209,  209,  209, 1077,
      209,  209,  209,  209,  209,  209,  209,  843, 1077, 1077,
      209, 1077, 1077,  209, 1077,  209,  209,  209, 1077,  842,
      209,  209,  209,  209,  209,  209,  209,  209, 1077,  209,
      209,  209,  209,  209,  209,  209,  597, 1077, 1077,  209,
     1077,  597,  209,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,

      844,  844,  844,  844,  844,  844,  844,  598,  885,  885,
      885,  885,  885,  597, 1077, 1077, 1077, 1077,  597, 1077,
     1077, 1077,  597,  866,  866,  866,  866,  866,  866,  866,
      597, 1077, 1077,  597, 1077,  597,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846, 1077, 1077,  599,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597, 1077, 1077, 1077,
     1077,  600,  872,  872,  872,  872,  872,  872, 1077, 1077,

     1077,  601, 1077,  602,  602,  602,  602,  602,  602,  603,
      604,  604,  604,  604,  605,  606,  606,  607,  608,  609,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  306,   83,   83,   83,   83,   83,   83,   83,   83,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868, 1077, 1077,   85,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96, 1077, 1077,   86,  893,  893,  893,  893,
      893, 1077, 1077, 1077, 1077,   87, 1077,   88,   88,   88,
       88,   88,   88,   89,   90,   90,   90,   90,   91,   92,

       92,   93,   94,   95,   97,  956,  956,  956,  956,  956,
      956,  956, 1077, 1077,   98, 1077,   99,   99,   99,   99,
       99,   99,  100,  101,  101,  101,  101,  102,  103,  103,
      104,  105,  106,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,

      855,  619,  619,  619,  619,  619,  620,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  618,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      620,  620,  620,  620,  620,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  619,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,

      862,  862,  862,  862,  862,  646,  645, 1077, 1077, 1077,
     1077,  645,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865, 1077, 1077,  209, 1077,  647, 1077,  209,
      209, 1077,  209,  645,  209, 1077,  209,  209,  645, 1077,
      209, 1077,  645,  209,  973,  973,  973,  973,  973, 1077,
      645, 1077, 1077,  645,  209,  645, 1077, 1077,  209,  209,
     1077,  209, 1077,  209,  648,  209,  209, 1077, 1077,  209,
     1077, 1077,  209, 1077,  649, 1077,  650,  650,  650,  650,

      650,  650,  651,  652,  652,  652,  652,  653,  654,  654,
      655,  656,  657,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  368,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128, 1026, 1026, 1026, 1026,
     1026, 1077, 1077,  130,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684, 1077, 1077,
      131, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
      132, 1077,  133,  133,  133,  133,  133,  133,  134,  135,
      135,  135,  135,  136,  137,  137,  138,  139,  140,  881,

      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  677,  677,  677,  677,
      677,  678,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  676,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  678,  678,  678,  678,  678,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  677,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,

      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      173,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  800,  800,  800,  800,  800,  800,  800,  800,
     1077,  800,  800,  800,  800,  174,  800,  800,  800, 1077,
     1077, 1077, 1077, 1077, 1077,  175, 1077,  176,  176,  176,

      176,  176,  176,  177,  178,  178,  178,  178,  179,  180,
      180,  181,  182,  183,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  710,  710,
      710,  710,  710,  711,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  709,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  711,  711,  711,
      711,  711,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  890,

      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  710,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,

      894,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  209,  209, 1077, 1077,  209,  209, 1077,  209,
      209,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897, 1077, 1077,
      209,  209,  209, 1077,  209,  209,  209,  209,  209,  209,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,

      897,  897,  897,  897,  897,  897,  897, 1077,  899,  209,
      898, 1077, 1077,  209, 1077,  209,  209,  209,  900,  209,
      902,  209,  209,  209,  209, 1077,  901,  209,  209,  209,
      209, 1077,  209,  209, 1077,  209,  209,  899,  209,  898,
     1077, 1077,  209,  903,  209,  209,  209,  900,  209,  902,
      209,  209,  209,  209, 1077,  901,  209,  209,  209,  209,
     1077,  209,  209, 1077,  209,  209, 1077,  209, 1077, 1077,
     1077,  209,  903,  209,  209, 1077, 1077,  209,  904,  209,
      209, 1077, 1077,  209,  905,  209,  209, 1077, 1077,  209,
      906,  209,  209, 1077, 1077,  209,  907,  209,  209, 1077,

      908,  209,  209, 1077,  209, 1077,  209,  904,  209,  209,
     1077, 1077,  209,  905,  209,  209, 1077, 1077,  209,  906,
      209,  209, 1077,  909,  209,  907,  209,  209,  209,  908,
      209, 1077,  209,  209,  209,  209,  209, 1077,  209, 1077,
      209,  209,  209,  209, 1077, 1077,  209,  910, 1077,  209,
     1077, 1077,  909, 1077, 1077, 1077, 1077,  209, 1077, 1077,
     1077,  209, 1077,  209,  209,  209, 1077,  209,  911,  209,
      209,  209,  209, 1077, 1077,  209,  910,  209,  209,  209,
     1077,  209,  912,  209,  209, 1077,  209,  209,  209,  913,
     1077,  209,  209, 1077,  209,  209,  209,  911,  914, 1077,

      209, 1077, 1077,  209, 1077, 1077,  209, 1077,  209, 1077,
      209,  912,  209,  209, 1077,  209,  209,  209,  914, 1077,
      209,  209, 1077,  209,  209,  209,  915,  914,  917,  209,
      209,  209,  209,  209,  916,  209,  209,  918,  209, 1077,
      209,  209,  209,  209, 1077,  209,  209,  209,  209,  209,
     1077,  209,  919, 1077,  209,  915, 1077,  917, 1077,  209,
      209, 1077,  209,  916,  209,  209,  918,  209, 1077,  209,
      209,  209,  209, 1077,  209,  209,  209,  209,  209,  920,
      209,  919, 1077,  209,  209,  921,  209, 1077,  209, 1077,
      209,  209,  209,  209,  209, 1077,  209,  922,  209,  209,

     1077,  209,  209, 1077, 1077, 1077,  924, 1077,  920,  209,
     1077, 1077, 1077,  209,  921,  209, 1077,  209, 1077,  209,
      209,  209,  209,  209,  923,  209,  922,  209,  209,  925,
      209,  209,  928,  209, 1077,  924, 1077,  209,  209,  209,
      209,  209, 1077,  209, 1077,  209,  209, 1077,  209,  932,
      209,  929,  209,  923,  209,  930,  209,  209,  925,  209,
      209,  928,  209, 1077,  209, 1077,  209,  209,  209,  209,
      209, 1077,  209, 1077,  209,  209, 1077,  209,  932,  209,
      929,  209,  931,  209,  930,  209,  209,  209,  209,  209,
     1077,  209, 1077,  209,  209,  209,  209, 1077, 1077,  209,

     1077,  209,  209,  939,  933,  209,  934,  209,  209, 1077,
      209,  931,  935, 1077,  209, 1077,  209, 1077,  209, 1077,
      209,  209,  209,  209,  209,  937,  209,  936,  209,  209,
      209,  209,  939,  933,  209,  934,  209,  209,  209,  209,
     1077,  935,  209,  209, 1077,  209, 1077,  209,  938, 1077,
      209,  209, 1077,  209,  937,  209,  936,  209,  209,  209,
      209, 1077, 1077,  209,  940,  209,  209,  209, 1077,  209,
      941,  209,  209, 1077,  209, 1077, 1077,  938, 1077, 1077,
      944, 1077,  209,  942,  209, 1077,  209,  209,  209,  209,
     1077, 1077,  209,  940,  209,  209,  209, 1077,  209,  941,

      209,  209,  943,  209, 1077,  945, 1077, 1077, 1077,  944,
      209,  946,  942,  209,  209,  209,  209,  209, 1077,  209,
      209, 1077,  209, 1077,  209,  209, 1077,  209, 1077,  209,
     1077,  943,  209, 1077,  945, 1077, 1077, 1077, 1077,  209,
      946, 1077, 1077,  209,  209, 1077,  209, 1077,  209,  209,
     1077,  209, 1077,  209, 1077, 1077,  209,  947,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  950,  950,  950,  950,  950,
      950,  950,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  951,  951,  951,  948,  948,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,

      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  954,  954,  954,  800,  954,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  958,  959,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  961,  961,  961,  961,  960,  962,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  963,  963,  963,  963,  963,

      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  823,  823,  823,  823,  823,  824,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  824,  824,  824,  824,  824,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  823,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      823,  823,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  209,  209,  209, 1077,  209,  209,  209,
      209,  209,  209, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077,  976, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077,  209,  209,  209, 1077,  209,  209,  209,  209,
      209,  209,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  978,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  980,  980,  980,  980,  980,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
      982,  982,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  984,  984,  984,  984,

      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  988,  988,

      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  209,  990,  209, 1077,
      209,  209,  209,  209,  209,  209,  209,  209,  209, 1077,
      209,  209,  991,  209,  209,  209,  209,  209, 1077,  992,
      209,  209, 1077,  209,  209,  209,  990,  209, 1077,  209,

      209,  209,  209,  209,  209,  209,  209,  209,  993,  209,
      209,  991,  209,  209,  209,  209,  209,  209,  992,  209,
      209,  209,  209,  209,  209,  209, 1077,  995, 1077,  209,
     1077, 1077,  209,  996, 1077,  994,  209,  993,  209, 1077,
      209, 1077,  209,  209,  997,  209,  209, 1077,  209, 1077,
      209,  209, 1077,  209,  209, 1077,  995, 1077,  209,  209,
     1077,  209,  996,  998,  994,  209,  209,  209, 1077,  209,
     1077,  209,  209,  997,  209,  209, 1077,  209,  999,  209,
      209, 1077,  209,  209, 1077, 1077, 1077,  209,  209,  209,
      209, 1077,  998,  209,  209,  209,  209, 1077,  209, 1001,

     1077,  209, 1077, 1077,  209, 1077,  209,  999,  209, 1000,
      209,  209,  209,  209, 1077, 1077,  209, 1003,  209,  209,
     1077,  209,  209,  209,  209,  209, 1077,  209, 1001,  209,
      209, 1077, 1077,  209, 1002,  209,  209,  209, 1004,  209,
     1077,  209,  209, 1077,  209,  209, 1003,  209, 1077,  209,
      209,  209,  209,  209,  209, 1005, 1077,  209,  209, 1077,
     1077,  209,  209, 1002,  209,  209,  209, 1004,  209, 1077,
      209, 1077,  209,  209,  209,  209,  209, 1077,  209, 1077,
      209,  209, 1077,  209, 1005,  209,  209,  209, 1006,  209,
      209,  209,  209,  209,  209,  209, 1077,  209, 1077,  209,

     1077,  209,  209,  209,  209, 1010, 1077,  209, 1009,  209,
      209, 1077,  209, 1077,  209,  209,  209, 1006,  209,  209,
      209,  209,  209,  209,  209, 1077,  209, 1077,  209, 1077,
      209,  209,  209,  209, 1010, 1011,  209, 1009,  209,  209,
     1012,  209, 1077,  209,  209, 1013, 1077,  209,  209,  209,
      209,  209, 1077,  209,  209,  209,  209, 1014,  209,  209,
     1077,  209,  209, 1077, 1011, 1077,  209, 1077, 1077, 1012,
      209, 1077,  209,  209, 1013, 1077,  209, 1077,  209,  209,
     1016, 1077,  209,  209,  209,  209, 1014,  209,  209, 1015,
      209,  209, 1017,  209, 1077,  209, 1077,  209, 1077,  209,

      209,  209,  209,  209, 1077,  209, 1018,  209,  209, 1016,
      209, 1077,  209,  209, 1077, 1077, 1019,  209, 1015,  209,
      209, 1017,  209, 1077,  209, 1077,  209, 1077,  209,  209,
      209,  209,  209, 1077,  209, 1018,  209,  209, 1077,  209,
     1020,  209,  209, 1021,  209, 1019,  209,  209,  209,  209,
     1077,  209,  209,  209, 1077,  209,  209,  209,  209,  209,
      209,  209, 1077, 1077, 1077,  209, 1077, 1077,  209, 1020,
     1077,  209, 1021,  209, 1077,  209,  209, 1077,  209, 1077,
      209,  209, 1077, 1077,  209,  209, 1077,  209,  209, 1077,
      209, 1077, 1077, 1077,  209, 1077, 1077,  209,  955,  955,

      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022,  948,  948,  948,  948,  948,  949,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  947,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  949,  949,  949,  949,  949,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

      948, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,

     1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029,  209, 1077, 1077, 1077,
      209, 1077, 1077,  209,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597, 1077, 1077, 1077, 1077,  209, 1077, 1077, 1077,  209,
     1077, 1077,  209,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865, 1030, 1031,
      209, 1077, 1077, 1077,  209,  209, 1032,  209, 1077,  209,
      209,  209,  209, 1077,  209,  209, 1077,  209,  209,  209,
     1077, 1033, 1077,  209, 1077, 1077,  209, 1030, 1031,  209,
     1077, 1077, 1077,  209,  209, 1032,  209, 1077,  209,  209,

      209,  209, 1034,  209,  209, 1077,  209,  209,  209,  209,
     1033, 1035,  209,  209,  209,  209,  209, 1077,  209, 1036,
      209,  209,  209, 1077,  209, 1077,  209,  209,  209,  209,
      209, 1034,  209, 1077,  209,  209, 1077,  209,  209, 1077,
     1035, 1077,  209,  209, 1077,  209, 1077,  209, 1077,  209,
      209,  209, 1077,  209, 1077,  209,  209,  209,  209,  209,
     1077,  209, 1077,  209,  209,  209,  209,  209, 1077,  209,
     1037,  209,  209,  209,  209,  209, 1077,  209, 1038,  209,
      209,  209,  209,  209, 1077,  209, 1039, 1040,  209, 1077,
      209, 1077, 1077, 1077,  209, 1077,  209, 1077,  209, 1037,

      209,  209,  209,  209,  209, 1077,  209, 1038,  209,  209,
      209,  209,  209, 1042,  209, 1039, 1040,  209,  209,  209,
      209, 1043,  209, 1077,  209,  209,  209,  209, 1077, 1077,
      209,  209, 1077,  209, 1077,  209,  209,  209,  209, 1044,
      209,  209, 1042,  209,  209, 1077, 1077,  209, 1077,  209,
     1043,  209, 1077,  209,  209,  209,  209, 1077, 1077,  209,
      209, 1077,  209, 1077,  209,  209,  209,  209, 1044,  209,
      209,  209,  209,  209, 1077,  209,  209, 1046,  209, 1077,
      209, 1045, 1077,  209,  209,  209,  209, 1047,  209,  209,
      209,  209,  209,  209,  209, 1077, 1077, 1077,  209, 1077,

      209,  209, 1077, 1077,  209,  209, 1046,  209, 1077,  209,
     1045, 1077,  209,  209,  209,  209, 1047,  209,  209,  209,
      209,  209,  209,  209, 1077,  209, 1077,  209, 1048,  209,
      209, 1077,  209, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1077, 1077,  209, 1077,  209, 1077, 1050, 1048,  209,  209,
     1077,  209, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1052,
     1051,  209, 1053, 1077, 1077, 1050, 1077, 1077,  209,  209,
      209,  209, 1077,  209,  209,  209,  209,  209,  209,  209,

     1077, 1054, 1077,  209, 1055, 1077,  209, 1077, 1052, 1051,
      209, 1053, 1077, 1077,  209, 1077, 1077,  209,  209,  209,
      209, 1077,  209,  209,  209,  209,  209,  209,  209, 1077,
     1054, 1077,  209, 1055, 1057,  209, 1077,  209, 1056,  209,
     1077,  209, 1058,  209,  209,  209,  209,  209, 1077,  209,
     1077,  209,  209,  209,  209,  209, 1077,  209, 1077,  209,
      209, 1077,  209, 1057, 1077,  209,  209, 1077, 1077,  209,
      209, 1058,  209,  209,  209, 1077,  209, 1077,  209, 1077,
      209,  209,  209,  209,  209, 1077,  209, 1077,  209,  209,
     1060,  209,  209,  209,  209, 1077,  209,  209,  209,  209,

      209,  209, 1061,  209,  209, 1062, 1077,  209,  209,  209,
      209,  209, 1077,  209, 1063, 1077,  209, 1077, 1077, 1060,
     1077,  209,  209,  209, 1077,  209,  209,  209,  209,  209,
      209, 1061,  209,  209, 1062, 1077,  209,  209,  209,  209,
      209, 1077,  209, 1063,  209,  209,  209, 1077,  209, 1077,
      209,  209,  209,  209, 1077, 1077,  209,  209, 1077,  209,
     1077,  209, 1064,  209,  209,  209, 1077,  209, 1077,  209,
      209, 1077,  209,  209,  209,  209, 1077,  209,  209,  209,
      209,  209,  209, 1077, 1077, 1077,  209, 1077, 1077, 1077,
      209, 1064,  209,  209,  209, 1077,  209, 1077,  209,  209,

     1077,  209, 1065,  209, 1077, 1077,  209,  209, 1067,  209,
      209, 1066,  209,  209,  209, 1077,  209,  209,  209,  209,
      209,  209,  209, 1077, 1077, 1077,  209, 1077, 1077,  209,
     1077,  209,  209, 1077, 1077,  209,  209, 1067,  209,  209,
     1066,  209,  209,  209, 1077,  209,  209,  209,  209,  209,
      209,  209, 1070,  209, 1077,  209, 1069,  209,  209, 1071,
      209,  209,  209, 1072, 1077,  209,  209, 1077,  209,  209,
      209,  209,  209, 1077,  209,  209,  209,  209,  209,  209,
      209, 1070,  209, 1077,  209, 1069,  209,  209, 1077,  209,
      209,  209, 1072, 1077,  209,  209, 1077,  209,  209,  209,

      209,  209, 1077,  209,  209,  209,  209,  209,  209,  209,
      209, 1074, 1077,  209, 1075, 1077,  209,  209, 1077,  209,
     1077, 1077, 1077,  209,  209,  209,  209, 1077,  209,  209,
     1076,  209,  209,  209,  209, 1077, 1077,  209,  209,  209,
      209,  209, 1077, 1075, 1077, 1077,  209, 1077, 1077, 1077,
     1077, 1077, 1077,  209,  209, 1077, 1077,  209,  209, 1077,
      209,  209,  209,  209, 1077, 1077,  209,  209, 1077,  209,
      209,   83, 1077,   83,   83,   83,   96, 1077,   96,   96,
       96,  128, 1077,  128,  128,  128,  171,  171,  171,  597,
      597,  597,  597,  597,  645,  645,  645,  645,  645,  736,

      736,   83, 1077,   83,   83,   83,   96, 1077,   96,   96,
       96,  128, 1077,  128,  128,  128,  171,  171,  171,    3,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077
    } ;

static yyconst flex_int16_t yy_chk[12340] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
     1082, 1068,    5,    9,   14,   14,   14,   14,   17,   19,
       17,   19,   22,   34,   22,   31,   14,   34,   80, 1059,
       34,   80,   34,   31, 1041,  144,   22,  144,   31,   31,
     1007,   32,   31,   32,   32,   31,   32,   32,   31,  144,
       32,   39,   34,  778,   31,   39,   34,  778,   39,   34,
        9,   34,   31,  927,  150,   22,  150,   31,   31,  150,
       32,   31,   32,   32,   31,   32,   32,   31,  144,   32,
       39,   69,   69,   69,   39,   69,  926,   39,   71,   71,

       71,   71,   71,   71,   71,  880,  147,    9,   36,  206,
      879,   36,   36,  206,  878,   36,  206,    9,  147,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   36,  206,  877,
       36,   36,  206,  876,   36,  206,   10,  147,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   11,   77,   77,   77,  124,
      124,  124,  875,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   49,   49,   49,

       49,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  168,  168,  168,  874,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  873,  148,   11,   11,
       49,   11,   11,   11,   11,   11,   11,   11,   11,  148,
       11,   11,   11,   13,   33,  381,   35,  381,   33,   37,
      381,   35,   33,  379,   35,   35,  865,   33,   35,   38,
       33,   33,   37,   45,   33,  379,   37,   38,  148,   37,
       38,   38,   45,   33,   38,   35,   45,   33,   37,   45,

       35,   33,  863,   35,   35,   13,   33,   35,   38,   33,
       33,   37,   45,   33,  379,   37,   38,  847,   37,   38,
       38,   45,  384,   38,  384,   45,  845,  384,   45,   67,
       67,   67,   67,   67,   67,   67,   67,  808,   67,   67,
       67,   67,   13,   67,   67,   67,   95,   95,   95,   95,
       95,   95,   13,  736,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   23,   89,   89,   89,   89,   89,   89,   89,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,  202,  202,  202,  675,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  232,  232,  232,  674,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  673,  672,   23,   23,  671,   23,   23,   23,
       23,   23,   23,   23,   23,   40,   23,   23,   23,   25,
       25,  670,  385,   40,  385,  666,   41,  385,   40,   40,
       41,  665,   40,   44,   41,   40,   44,   44,   47,   41,
       44,   47,   47,   41,   40,   47,   41,   55,  646,  598,

       55,   55,   40,  452,   55,   41,  435,   40,   40,   41,
      400,   40,   44,   41,   40,   44,   44,   47,   41,   44,
       47,   47,   41,  389,   47,   41,   55,  388,  371,   55,
       55,  335,  318,   55,  309,   25,  100,  100,  100,  100,
      100,  100,  100,  220,  205,   25,  145,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,  106,  106,  106,  106,  106,
      106,  143,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  279,  279,  279,  279,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  346,  346,  346,  129,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   84,   59,   28,   28,  279,
       28,   28,   28,   28,   28,   28,   28,   28,  380,   28,
       28,   28,   30,   30,   52,   30,   30,  116,  116,  116,
      380,  116,   51,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   27,   20,  380,

       12,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  412,  412,  412,    8,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,    7,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   42,
       30,   30,   30,  118,  118,  118,  118,  118,  118,  118,
       43,    3,   42,   42,  382,  146,   42,  146,   43,   42,
       43,   43,   43,    0,   48,   43,  382,    0,   42,  146,
       48,  160,  160,  160,   48,  160,    0,   48,    0,   43,

        0,   42,  194,  194,  194,   42,  194,   43,   42,   43,
       43,   43,   46,   48,   43,  382,   46,    0,  146,   48,
       46,    0,  149,   48,  149,   46,   48,   56,    0,   46,
       46,   46,   46,  387,   54,  387,  149,    0,  387,   54,
       56,   46,   54,   54,   56,   46,   54,   56,    0,   46,
      141,  141,  141,  141,   46,   54,   56,    0,   46,   46,
       46,   46,  141,   54,    0,  149,    0,    0,   54,   56,
       57,   54,   54,   56,   57,   54,   56,   57,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  463,  463,  463,    0,   57,

        0,    0,   57,   57,    0,    0,   57,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   83,   85,  585,  585,  585,    0,   85,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,  134,
      134,  134,  134,  134,  134,  134,    0,    0,   83,   85,
      820,  820,  820,  383,   85,  386,    0,    0,   85,  140,
      140,  140,  140,  140,  140,  383,   85,  386,    0,   85,

        0,   85,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,    0,    0,    0,   83,  162,  162,  162,  162,
      162,  162,  162,    0,  383,   83,  386,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   93,   93,   93,   93,   93,

       93,   93,   93,   93,   93,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   96,  177,  177,  177,  177,  177,  177,  177,
        0,    0,   96,    0,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      107,  183,  183,  183,  183,  183,  183,    0,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,    0,    0,    0,    0,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    0,    0,    0,    0,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,    0,  107,  107,  107,    0,  107,  107,  107,  107,
      107,  107,  107,  107,    0,  107,  107,  107,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      114,  114,  114,  114,  114,  114,  114,  114,    0,  114,
      114,  114,  114,    0,  114,  114,  114,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  128,  130,    0,    0,
        0,    0,  130,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,    0,    0,    0,    0,  128,  303,
      303,  303,  303,  303,  130,    0,  577,  577,  577,  130,
      577,    0,    0,  130,  196,  196,  196,  196,  196,  196,
      196,  130,    0,    0,  130,    0,  130,  158,  158,  158,

      158,  158,  158,  158,  158,  128,  158,  158,  158,  158,
        0,  158,  158,  158,    0,  128,    0,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  151,  151,    0,  151,  226,  226,  226,  226,
      226,  226,  226,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,    0,    0,    0,
        0,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,    0,    0,    0,    0,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      151,  151,  151,  151,  151,  151,    0,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,    0,
      151,  151,  151,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  156,  156,  156,  156,  156,  156,  156,  156,  156,

      156,  156,  156,  156,  156,  156,  156,  156,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  171,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  365,  365,  365,  365,  365,    0,  171,
      340,  340,  340,  340,  340,  340,  340,    0,    0,  171,
        0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  185,
      406,  406,  406,  406,  406,  406,  406,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,    0,    0,    0,    0,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
        0,    0,    0,    0,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

        0,  185,  185,  185,    0,  185,  185,  185,  185,  185,
      185,  185,  185,    0,  185,  185,  185,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  192,
      192,  192,  192,  192,  192,  192,  192,    0,  192,  192,
      192,  192,    0,  192,  192,  192,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  207,  209,  210,  211,  663,
      209,  210,  668,  209,  210,    0,  211,  210,    0,  211,
      212,  663,    0,  211,  668,  207,  211,  212,  662,  207,

      662,  212,  207,  662,  212,  209,  210,  211,    0,  209,
      210,    0,  209,  210,    0,  211,  210,    0,  211,  212,
      663,    0,  211,  668,  207,  211,  212,  664,  207,  664,
      212,  207,  664,  212,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  221,  221,  221,  221,  221,  221,  221,
      221,    0,  221,  221,  221,  221,    0,  221,  221,  221,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  235,  236,  237,  237,  235,  236,  237,
      235,  236,  237,  238,  239,  240,    0,  238,  239,  238,
      238,  239,    0,  245,  240,    0,    0,  245,  240,    0,
      245,  240,  235,  236,  237,  237,  235,  236,  237,  235,
      236,  237,  238,  239,  240,  241,  238,  239,  238,  238,
      239,    0,  245,  240,  242,    0,  245,  240,  241,  245,

      240,    0,  241,  242,  241,  241,    0,  242,  243,    0,
      242,    0,  243,  243,  241,  243,  244,    0,  244,  667,
        0,  667,  244,  242,  667,  244,    0,  241,    0,    0,
        0,  241,  242,  241,  241,    0,  242,  243,    0,  242,
        0,  243,  243,  247,  243,  244,    0,  244,  246,  246,
        0,  244,  246,  247,  244,  246,  248,  247,    0,    0,
      247,  248,    0,    0,  249,  248,  249,    0,  248,  669,
      249,  669,  247,  249,  669,    0,    0,  246,  246,    0,
        0,  246,  247,    0,  246,  248,  247,    0,    0,  247,
      248,    0,  251,  249,  248,  249,    0,  248,    0,  249,

      250,  250,  249,  252,  250,  251,  251,  250,    0,  251,
        0,  253,  251,    0,    0,  253,  252,  252,  253,    0,
      252,  251,    0,  252,  254,    0,    0,    0,  254,  250,
      250,  254,  252,  250,  251,  251,  250,    0,  251,    0,
      253,  251,    0,    0,  253,  252,  252,  253,    0,  252,
        0,  255,  252,  254,  256,  255,  255,  254,  255,  256,
      254,  258,    0,  256,    0,  258,  256,    0,  258,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,    0,
      255,    0,    0,  256,  255,  255,  257,  255,  256,    0,
      258,    0,  256,  257,  258,  256,  257,  258,  257,  260,

        0,    0,  257,    0,  257,  257,  259,  259,    0,    0,
        0,  259,  260,    0,  259,  257,  260,  261,    0,  260,
        0,  261,  257,    0,  261,  257,  261,  257,  260,    0,
        0,  257,    0,  257,  257,  259,  259,    0,    0,    0,
      259,  260,    0,  259,    0,  260,  261,    0,  260,    0,
      261,  262,  262,  261,  263,  261,  262,    0,  263,  262,
        0,  263,  264,  264,  265,    0,    0,  264,  265,  265,
      264,  265,  267,    0,  266,    0,  267,  267,    0,  267,
      262,  262,  266,  263,    0,  262,  266,  263,  262,  266,
      263,  264,  264,  265,    0,    0,  264,  265,    0,  264,

      265,  267,  268,  266,  269,  267,  267,    0,  267,    0,
        0,  266,  268,  269,    0,  266,  268,  269,  266,  268,
      269,    0,  270,    0,    0,  270,    0,    0,    0,  271,
      271,  268,  270,  269,  271,    0,  270,  271,    0,  270,
        0,  268,  269,    0,    0,  268,  269,    0,  268,  269,
        0,  270,    0,    0,  270,    0,    0,    0,  271,  271,
        0,  270,    0,  271,    0,  270,  271,  272,  270,  272,
      274,  272,  272,  272,    0,  273,  272,  273,    0,    0,
        0,  273,    0,  274,  273,    0,  274,  274,    0,    0,
      274,  431,  431,  431,  431,  431,  272,    0,  272,  274,

      272,  272,  272,    0,  273,  272,  273,    0,    0,    0,
      273,    0,  274,  273,  278,  274,  274,  275,  275,  274,
        0,  276,  275,  278,  277,  275,  276,  278,    0,  277,
      278,  276,  276,  277,    0,  276,  277,  284,  276,    0,
        0,  284,    0,  278,  284,    0,  275,  275,    0,    0,
      276,  275,  278,  277,  275,  276,  278,    0,  277,  278,
      276,  276,  277,    0,  276,  277,  284,  276,  282,    0,
      284,    0,  284,  284,    0,    0,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

        0,    0,    0,    0,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,    0,
        0,    0,    0,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,    0,
        0,  282,  282,    0,  282,  282,  282,  282,  282,  282,
      282,  282,  283,  282,  282,  282,  283,  286,  287,  283,
        0,  286,  287,  288,  286,  287,    0,  288,  289,  290,
      288,    0,  289,  290,    0,  289,  290,    0,    0,  283,
        0,  283,    0,    0,    0,  283,  286,  287,  283,    0,

      286,  287,  288,  286,  287,    0,  288,  289,  290,  288,
        0,  289,  290,  291,  289,  290,    0,  291,  292,    0,
      291,    0,  292,    0,    0,  292,    0,    0,    0,  336,
      336,  336,  336,  336,  336,  336,  336,    0,  336,  336,
      336,  336,  291,  336,  336,  336,  291,  292,    0,  291,
        0,  292,    0,    0,  292,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  295,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  301,  301,  301,  301,  301,  301,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  307,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,    0,    0,  307,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,    0,    0,  307,  457,  457,  457,  457,  457,  457,
      457,    0,    0,  307,    0,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  337,  337,  337,  337,  337,

      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,    0,  338,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  369,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      482,  482,  482,  482,  482,    0,    0,  369,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  374,  374,  374,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,    0,    0,  369,  509,  509,  509,  509,  509,
        0,    0,    0,    0,  369,    0,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  398,  398,  398,  398,

      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      401,  401,  401,  401,  401,  401,  401,  401,    0,  401,
      401,  401,  401,    0,  401,  401,  401,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  405,  405,

      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  439,  439,  439,  439,  439,  439,  439,  439,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  453,
      453,  453,  453,  453,  453,  453,  453,    0,  453,  453,
      453,  453,    0,  453,  453,  453,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,    0,  455,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,

      474,  474,  474,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  486,  487,  488,    0,
      486,  487,  488,  486,  487,  488,  489,  490,  491,    0,
      489,  490,  491,  489,  490,  491,  492,  493,    0,    0,
      492,  493,    0,  492,  493,  486,  487,  488,    0,  486,
      487,  488,  486,  487,  488,  489,  490,  491,    0,  489,

      490,  491,  489,  490,  491,  492,  493,  494,    0,  492,
      493,  494,  492,  493,  494,  495,  496,  497,    0,  495,
      496,  497,  495,  496,  497,  498,    0,    0,    0,  498,
        0,    0,  498,    0,    0,    0,  494,    0,    0,    0,
      494,    0,    0,  494,  495,  496,  497,    0,  495,  496,
      497,  495,  496,  497,  498,    0,    0,    0,  498,    0,
        0,  498,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  501,  501,  501,  501,

      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  512,  513,  635,  635,
      635,  635,  635,  514,    0,  512,    0,  513,    0,  512,
      516,  513,  512,  514,  513,  515,    0,  514,    0,  515,
      514,    0,  515,  516,    0,  512,  513,  516,    0,    0,

      516,    0,  514,    0,  512,    0,  513,    0,  512,  516,
      513,  512,  514,  513,  515,    0,  514,    0,  515,  514,
        0,  515,  516,    0,    0,  517,  516,  517,  518,  516,
      520,  517,  518,  519,  517,  518,  522,  519,  521,    0,
      519,    0,    0,  520,    0,  522,    0,  520,    0,  522,
      520,  521,  522,    0,  517,  521,  517,  518,  521,  520,
      517,  518,  519,  517,  518,  522,  519,  521,    0,  519,
        0,  523,  520,    0,  522,    0,  520,    0,  522,  520,
      521,  522,  523,    0,  521,    0,  523,  521,  524,  523,
        0,    0,  524,  524,  525,  524,  525,    0,  525,  526,

      523,  525,    0,  526,    0,  527,  526,    0,    0,  527,
        0,  523,  527,    0,    0,  523,    0,  524,  523,    0,
        0,  524,  524,  525,  524,  525,    0,  525,  526,  530,
      525,  530,  526,  530,  527,  526,  530,    0,  527,  528,
        0,  527,    0,  528,  528,    0,  528,  529,  529,    0,
      531,    0,  529,    0,  531,  529,  531,  531,  530,    0,
      530,    0,  530,  532,    0,  530,    0,  532,  528,  532,
      532,    0,  528,  528,    0,  528,  529,  529,    0,  531,
        0,  529,  533,  531,  529,  531,  531,  533,  534,    0,
        0,  533,  532,    0,  533,    0,  532,  534,  532,  532,

        0,  534,  535,  535,  534,    0,  535,    0,  536,  535,
        0,  533,  536,    0,    0,  536,  533,  534,    0,  537,
      533,  537,    0,  533,    0,  537,  534,    0,  537,    0,
      534,  535,  535,  534,    0,  535,  538,  536,  535,  538,
      538,  536,    0,  538,  536,    0,  539,    0,  537,  540,
      537,  539,  540,  540,  537,  539,  540,  537,  539,  541,
        0,    0,  542,    0,    0,  538,  541,  542,  538,  538,
      541,  542,  538,  541,  542,  539,  543,    0,  540,    0,
      539,  540,  540,    0,  539,  540,  543,  539,  541,    0,
      543,  542,  545,  543,  544,  541,  542,    0,  544,  541,

      542,  544,  541,  542,  545,  543,  546,  548,  545,    0,
      546,  545,  546,  546,    0,  543,  547,    0,    0,  543,
        0,  545,  543,  544,  549,  547,    0,  544,  549,  547,
      544,  549,  547,  545,    0,  546,    0,  545,  550,  546,
      545,  546,  546,  550,  548,  547,  551,  550,  548,    0,
      550,  548,    0,  549,  547,  551,  552,  549,  547,  551,
      549,  547,  551,    0,  552,  554,    0,  550,  552,    0,
        0,  552,  550,  548,  554,  551,  550,  548,  554,  550,
      548,  554,    0,  553,  551,  552,    0,  553,  551,  553,
      553,  551,  558,  552,  554,  555,  558,  552,    0,  558,

      552,    0,    0,  554,  555,    0,  555,  554,  555,    0,
      554,  555,  553,  556,  557,    0,  553,    0,  553,  553,
        0,  558,  556,  559,  555,  558,  556,  557,  558,  556,
        0,  557,  559,  555,  557,  555,  559,  555,    0,  559,
      555,  560,  556,  557,  560,  560,    0,    0,  560,    0,
        0,  556,  559,    0,    0,  556,  557,    0,  556,    0,
      557,  559,  562,  557,    0,  559,  562,  563,  559,  562,
      560,  561,    0,  560,  560,    0,  563,  560,    0,  561,
      563,  561,    0,  563,    0,  561,  564,  564,  561,    0,
      564,  562,    0,  564,    0,  562,  563,  566,  562,  565,

      561,  566,  565,  565,  566,  563,  565,    0,  561,  563,
      561,    0,  563,    0,  561,  564,  564,  561,    0,  564,
      567,    0,  564,  567,  567,    0,  566,  567,  565,    0,
      566,  565,  565,  566,    0,  565,  579,  579,  579,  579,
      579,  579,  579,  609,  609,  609,  609,  609,  609,  567,
        0,    0,  567,  567,    0,    0,  567,  568,  568,    0,
      568,  603,  603,  603,  603,  603,  603,  603,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,    0,    0,    0,    0,  568,  568,  568,  568,

      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,    0,    0,    0,    0,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,    0,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,    0,  568,  568,  568,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  571,  571,  571,  571,  571,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      575,  575,  575,  575,  575,  575,  575,  575,    0,  575,
      575,  575,  575,    0,  575,  575,  575,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  587,

      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  588,  589,  590,    0,
      588,  589,  590,  588,  589,  590,  591,  592,  593,    0,
      591,  592,  593,  591,  592,  593,  594,  589,    0,    0,
      594,    0,    0,  594,    0,  588,  589,  590,    0,  588,
      589,  590,  588,  589,  590,  591,  592,  593,    0,  591,
      592,  593,  591,  592,  593,  594,  599,    0,    0,  594,
        0,  599,  594,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  597,  695,  695,
      695,  695,  695,  599,    0,    0,    0,    0,  599,    0,
        0,    0,  599,  651,  651,  651,  651,  651,  651,  651,
      599,    0,    0,  599,    0,  599,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,    0,    0,  597,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,    0,    0,    0,
        0,  597,  657,  657,  657,  657,  657,  657,    0,    0,

        0,  597,    0,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  610,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,    0,    0,  610,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,    0,    0,  610,  726,  726,  726,  726,
      726,    0,    0,    0,    0,  610,    0,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  614,  814,  814,  814,  814,  814,
      814,  814,    0,    0,  614,    0,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  644,  644,  644,  645,  647,    0,    0,    0,
        0,  647,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,    0,    0,  737,    0,  645,    0,  737,
      738,    0,  737,  647,  738,    0,  739,  738,  647,    0,
      739,    0,  647,  739,  839,  839,  839,  839,  839,    0,
      647,    0,    0,  647,  737,  647,    0,    0,  737,  738,
        0,  737,    0,  738,  645,  739,  738,    0,    0,  739,
        0,    0,  739,    0,  645,    0,  645,  645,  645,  645,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  658,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  966,  966,  966,  966,
      966,    0,    0,  658,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,    0,    0,
      658,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      658,    0,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  686,

      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      705,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  809,  809,  809,  809,  809,  809,  809,  809,
        0,  809,  809,  809,  809,  705,  809,  809,  809,    0,
        0,    0,    0,    0,    0,  705,    0,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  721,

      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  740,  741,    0,    0,  740,  741,    0,  740,
      741,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,    0,    0,
      744,  740,  741,    0,  744,  740,  741,  744,  740,  741,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,    0,  746,  744,
      745,    0,    0,  744,    0,  745,  744,  746,  747,  745,
      749,  746,  745,  748,  746,    0,  748,  748,  747,  749,
      748,    0,  747,  749,    0,  747,  749,  746,  750,  745,
        0,    0,  750,  750,  745,  750,  746,  747,  745,  749,
      746,  745,  748,  746,    0,  748,  748,  747,  749,  748,
        0,  747,  749,    0,  747,  749,    0,  750,    0,    0,
        0,  750,  750,  751,  750,    0,    0,  751,  751,  752,
      751,    0,    0,  752,  752,  753,  752,    0,    0,  753,
      753,  754,  753,    0,    0,  754,  754,  755,  754,    0,

      755,  755,  751,    0,  755,    0,  751,  751,  752,  751,
        0,    0,  752,  752,  753,  752,    0,    0,  753,  753,
      754,  753,    0,  756,  754,  754,  755,  754,  756,  755,
      755,    0,  756,  755,  757,  756,  758,    0,  757,    0,
      758,  757,  759,  758,    0,    0,  759,  759,    0,  759,
        0,    0,  756,    0,    0,    0,    0,  756,    0,    0,
        0,  756,    0,  757,  756,  758,    0,  757,  760,  758,
      757,  759,  758,    0,    0,  759,  759,  760,  759,  761,
        0,  760,  762,  761,  760,    0,  761,  763,  762,  763,
        0,  763,  762,    0,  763,  762,  764,  760,  764,    0,

      764,    0,    0,  764,    0,    0,  760,    0,  761,    0,
      760,  762,  761,  760,    0,  761,  763,  762,  763,    0,
      763,  762,    0,  763,  762,  764,  765,  764,  768,  764,
      765,  766,  764,  765,  766,  766,  767,  769,  766,    0,
      767,  768,  769,  767,    0,  768,  769,  770,  768,  769,
        0,  770,  770,    0,  770,  765,    0,  768,    0,  765,
      766,    0,  765,  766,  766,  767,  769,  766,    0,  767,
      768,  769,  767,    0,  768,  769,  770,  768,  769,  771,
      770,  770,    0,  770,  771,  772,  772,    0,  771,    0,
      772,  771,  773,  772,  774,    0,  773,  773,  774,  773,

        0,  774,  776,    0,    0,    0,  776,    0,  771,  776,
        0,    0,    0,  771,  772,  772,    0,  771,    0,  772,
      771,  773,  772,  774,  775,  773,  773,  774,  773,  777,
      774,  776,  779,  775,    0,  776,    0,  775,  776,  777,
      775,  779,    0,  777,    0,  779,  777,    0,  779,  783,
      780,  780,  781,  775,  780,  781,  781,  780,  777,  781,
      783,  779,  775,    0,  783,    0,  775,  783,  777,  775,
      779,    0,  777,    0,  779,  777,    0,  779,  783,  780,
      780,  781,  782,  780,  781,  781,  780,  782,  781,  783,
        0,  782,    0,  783,  782,  784,  783,    0,    0,  784,

        0,  785,  784,  790,  784,  785,  785,  790,  785,    0,
      790,  782,  786,    0,  786,    0,  782,    0,  786,    0,
      782,  786,  788,  782,  784,  788,  788,  787,  784,  788,
      785,  784,  790,  784,  785,  785,  790,  785,  787,  790,
        0,  786,  787,  786,    0,  787,    0,  786,  789,    0,
      786,  788,    0,  789,  788,  788,  787,  789,  788,  791,
      789,    0,    0,  791,  791,  792,  791,  787,    0,  792,
      792,  787,  792,    0,  787,    0,    0,  789,    0,    0,
      795,    0,  789,  793,  795,    0,  789,  795,  791,  789,
        0,    0,  791,  791,  792,  791,  793,    0,  792,  792,

      793,  792,  794,  793,    0,  796,    0,    0,    0,  795,
      794,  797,  793,  795,  794,  796,  795,  794,    0,  796,
      797,    0,  796,    0,  797,  793,    0,  797,    0,  793,
        0,  794,  793,    0,  796,    0,    0,    0,    0,  794,
      797,    0,    0,  794,  796,    0,  794,    0,  796,  797,
        0,  796,    0,  797,    0,    0,  797,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  803,  803,  803,  803,  803,  803,  803,  803,  803,

      803,  803,  803,  803,  803,  803,  803,  803,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,

      837,  837,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  842,  843,  844,    0,  842,  843,  844,
      842,  843,  844,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  842,    0,    0,    0,    0,    0,    0,
        0,    0,  842,  843,  844,    0,  842,  843,  844,  842,
      843,  844,  846,  846,  846,  846,  846,  846,  846,  846,

      846,  846,  846,  846,  846,  846,  846,  846,  846,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  853,  853,  853,  853,  853,  853,

      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  867,  867,  867,  867,

      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  886,  886,

      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  897,  898,  899,    0,
      897,  898,  899,  897,  898,  899,  900,  901,  902,    0,
      900,  901,  902,  900,  901,  902,  903,  904,    0,  903,
      903,  904,    0,  903,  904,  897,  898,  899,    0,  897,

      898,  899,  897,  898,  899,  900,  901,  902,  905,  900,
      901,  902,  900,  901,  902,  903,  904,  905,  903,  903,
      904,  905,  903,  904,  905,  906,    0,  907,    0,  906,
        0,    0,  906,  908,    0,  906,  907,  905,  908,    0,
      907,    0,  908,  907,  909,  908,  905,    0,  909,    0,
      905,  909,    0,  905,  906,    0,  907,    0,  906,  910,
        0,  906,  908,  910,  906,  907,  910,  908,    0,  907,
        0,  908,  907,  909,  908,  911,    0,  909,  911,  911,
      909,    0,  911,  912,    0,    0,    0,  912,  910,  914,
      912,    0,  910,  914,  913,  910,  914,    0,  913,  915,

        0,  913,    0,    0,  911,    0,  915,  911,  911,  913,
      915,  911,  912,  915,    0,    0,  912,  917,  914,  912,
        0,  917,  914,  913,  917,  914,    0,  913,  915,  916,
      913,    0,    0,  916,  916,  915,  916,  918,  919,  915,
        0,  918,  915,    0,  918,  920,  917,  919,    0,  920,
      917,  919,  920,  917,  919,  921,    0,  922,  916,    0,
        0,  922,  916,  916,  922,  916,  918,  919,  921,    0,
      918,    0,  921,  918,  920,  921,  919,    0,  920,    0,
      919,  920,    0,  919,  921,  923,  922,  924,  923,  923,
      922,  924,  923,  922,  924,  925,    0,  921,    0,  925,

        0,  921,  925,  928,  921,  929,    0,  928,  928,  929,
      928,    0,  929,    0,  923,  930,  924,  923,  923,  930,
      924,  923,  930,  924,  925,    0,  931,    0,  925,    0,
      931,  925,  928,  931,  929,  931,  928,  928,  929,  928,
      932,  929,    0,  933,  930,  934,    0,  933,  930,  932,
      933,  930,    0,  932,  934,  931,  932,  935,  934,  931,
        0,  934,  931,    0,  931,    0,  935,    0,    0,  932,
      935,    0,  933,  935,  934,    0,  933,    0,  932,  933,
      937,    0,  932,  934,  936,  932,  935,  934,  936,  936,
      934,  936,  938,  937,    0,  935,    0,  937,    0,  935,

      937,  939,  935,  938,    0,  939,  939,  938,  939,  937,
      938,    0,  940,  936,    0,    0,  940,  936,  936,  940,
      936,  938,  937,    0,  941,    0,  937,    0,  941,  937,
      939,  941,  938,    0,  939,  939,  938,  939,    0,  938,
      942,  940,  943,  945,  942,  940,  943,  942,  940,  943,
        0,  944,  945,  941,    0,  944,  945,  941,  944,  945,
      941,  946,    0,    0,    0,  946,    0,    0,  946,  942,
        0,  943,  945,  942,    0,  943,  942,    0,  943,    0,
      944,  945,    0,    0,  944,  945,    0,  944,  945,    0,
      946,    0,    0,    0,  946,    0,    0,  946,  956,  956,

      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  958,  958,  958,  958,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,

      968,  968,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  976,    0,    0,    0,
      976,    0,    0,  976,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,    0,    0,    0,    0,  976,    0,    0,    0,  976,
        0,    0,  976,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,

      981,  981,  981,  981,  981,  981,  981,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  990,  991,
      992,    0,    0,    0,  992,  990,  992,  992,    0,  990,
      991,  993,  990,    0,  991,  993,    0,  991,  993,  994,
        0,  994,    0,  994,    0,    0,  994,  990,  991,  992,
        0,    0,    0,  992,  990,  992,  992,    0,  990,  991,

      993,  990,  996,  991,  993,    0,  991,  993,  994,  995,
      994,  997,  994,  995,  996,  994,  995,    0,  996, 1000,
      998,  996,  997,    0,  998,    0,  997,  998,  999,  997,
     1000,  996,  999,    0, 1000,  999,    0, 1000,  995,    0,
      997,    0,  995,  996,    0,  995,    0,  996,    0,  998,
      996,  997,    0,  998,    0,  997,  998,  999,  997, 1000,
        0,  999,    0, 1000,  999, 1001, 1000, 1002,    0, 1001,
     1003, 1002, 1001, 1003, 1002, 1004,    0, 1003, 1004, 1004,
     1003, 1005, 1004, 1006,    0, 1005, 1005, 1006, 1005,    0,
     1006,    0,    0,    0, 1001,    0, 1002,    0, 1001, 1003,

     1002, 1001, 1003, 1002, 1004,    0, 1003, 1004, 1004, 1003,
     1005, 1004, 1006, 1010, 1005, 1005, 1006, 1005, 1009, 1006,
     1011, 1012, 1009,    0, 1011, 1009, 1010, 1011,    0,    0,
     1010, 1012,    0, 1010,    0, 1012, 1013, 1014, 1012, 1013,
     1013, 1014, 1010, 1013, 1014,    0,    0, 1009,    0, 1011,
     1012, 1009,    0, 1011, 1009, 1010, 1011,    0,    0, 1010,
     1012,    0, 1010,    0, 1012, 1013, 1014, 1012, 1013, 1013,
     1014, 1015, 1013, 1014,    0, 1015, 1016, 1017, 1015,    0,
     1016, 1016,    0, 1016, 1018, 1019, 1017, 1020, 1018, 1019,
     1017, 1018, 1019, 1017, 1020,    0,    0,    0, 1020,    0,

     1015, 1020,    0,    0, 1015, 1016, 1017, 1015,    0, 1016,
     1016,    0, 1016, 1018, 1019, 1017, 1020, 1018, 1019, 1017,
     1018, 1019, 1017, 1020,    0, 1021,    0, 1020, 1021, 1021,
     1020,    0, 1021, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
        0,    0, 1030,    0, 1021,    0, 1030, 1021, 1021, 1030,
        0, 1021, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1032,
     1031, 1030, 1033,    0,    0, 1030,    0,    0, 1030, 1031,
     1032, 1033,    0, 1031, 1032, 1033, 1031, 1032, 1033, 1035,

        0, 1034,    0, 1035, 1035,    0, 1035,    0, 1032, 1031,
     1034, 1033,    0,    0, 1034,    0,    0, 1034, 1031, 1032,
     1033,    0, 1031, 1032, 1033, 1031, 1032, 1033, 1035,    0,
     1034,    0, 1035, 1035, 1038, 1035,    0, 1036, 1036, 1034,
        0, 1036, 1039, 1034, 1036, 1037, 1034, 1038,    0, 1037,
        0, 1038, 1037, 1039, 1038, 1040,    0, 1039,    0, 1040,
     1039,    0, 1040, 1038,    0, 1043, 1036,    0,    0, 1043,
     1036, 1039, 1043, 1036, 1037,    0, 1038,    0, 1037,    0,
     1038, 1037, 1039, 1038, 1040,    0, 1039,    0, 1040, 1039,
     1042, 1040, 1042, 1046, 1043,    0, 1042, 1046, 1043, 1042,

     1046, 1043, 1044, 1044, 1045, 1045,    0, 1044, 1045, 1047,
     1044, 1045,    0, 1047, 1048,    0, 1047,    0,    0, 1042,
        0, 1042, 1046, 1048,    0, 1042, 1046, 1048, 1042, 1046,
     1048, 1044, 1044, 1045, 1045,    0, 1044, 1045, 1047, 1044,
     1045,    0, 1047, 1048, 1050, 1047, 1051,    0, 1050,    0,
     1051, 1050, 1048, 1051,    0,    0, 1048, 1052,    0, 1048,
        0, 1052, 1052, 1053, 1052, 1054,    0, 1053,    0, 1054,
     1053,    0, 1054, 1050, 1055, 1051,    0, 1050, 1055, 1051,
     1050, 1055, 1051,    0,    0,    0, 1052,    0,    0,    0,
     1052, 1052, 1053, 1052, 1054,    0, 1053,    0, 1054, 1053,

        0, 1054, 1056, 1055,    0,    0, 1056, 1055, 1058, 1056,
     1055, 1057, 1060, 1057, 1058,    0, 1060, 1057, 1058, 1060,
     1057, 1058, 1061,    0,    0,    0, 1061,    0,    0, 1061,
        0, 1056, 1064,    0,    0, 1056, 1064, 1058, 1056, 1064,
     1057, 1060, 1057, 1058,    0, 1060, 1057, 1058, 1060, 1057,
     1058, 1061, 1063, 1062,    0, 1061, 1062, 1062, 1061, 1065,
     1062, 1064, 1063, 1067,    0, 1064, 1063,    0, 1064, 1063,
     1065, 1066, 1067,    0, 1065, 1066, 1067, 1065, 1066, 1067,
     1069, 1063, 1062,    0, 1069, 1062, 1062, 1069,    0, 1062,
     1070, 1063, 1067,    0, 1070, 1063,    0, 1070, 1063, 1065,

     1066, 1067,    0, 1065, 1066, 1067, 1065, 1066, 1067, 1069,
     1072, 1071,    0, 1069, 1072,    0, 1069, 1072,    0, 1070,
        0,    0,    0, 1070, 1071, 1074, 1070,    0, 1071, 1074,
     1074, 1071, 1074, 1075, 1076,    0,    0, 1075, 1076, 1072,
     1075, 1076,    0, 1072,    0,    0, 1072,    0,    0,    0,
        0,    0,    0, 1071, 1074,    0,    0, 1071, 1074,    0,
     1071, 1074, 1075, 1076,    0,    0, 1075, 1076,    0, 1075,
     1076, 1078,    0, 1078, 1078, 1078, 1079,    0, 1079, 1079,
     1079, 1080,    0, 1080, 1080, 1080, 1081, 1081, 1081, 1083,
     1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084, 1084, 1085,

     1085, 1086,    0, 1086, 1086, 1086, 1087,    0, 1087, 1087,
     1087, 1088,    0, 1088, 1088, 1088, 1089, 1089, 1089, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077
    } ;

static yyconst flex_int16_t yy_rule_linenum[124] =
    {   0,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      297,  298,  299,  300,  301,  302,  303,  304,  305,  306,

      307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
      317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  331
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/** \file SPARQLfedScanner.ll Define the Flex lexical scanner */
#line 5 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 60 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 3636 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 206 "lib/SPARQLfedScanner.lpp"

#line 3800 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1078 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1077 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 124 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 124 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 125 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 207 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 208 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 209 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 210 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 211 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 212 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 213 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 214 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 215 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 216 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 217 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 218 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 219 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 220 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 221 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 222 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 223 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 224 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 225 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 226 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 227 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 228 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 229 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 230 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 231 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 232 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 233 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 234 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 235 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 236 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 237 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATA;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 238 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 239 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 240 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 241 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 242 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 243 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 244 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 245 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 246 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 247 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 248 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 249 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 250 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 251 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 252 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 253 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 254 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 255 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 256 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 257 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 258 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 259 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 260 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT_SPACECHAR_IN;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT_SPACECHAR_EXISTS;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 330 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4542 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1078 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1078 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1077);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 337 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


