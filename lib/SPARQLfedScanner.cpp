#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[991] =
    {   0,
        0,    0,  101,  100,    1,   63,  100,    1,  100,  100,
      100,   40,   41,   19,   60,   47,   61,   43,   62,   80,
       95,   48,   56,   54,   57,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,   50,   51,  100,  100,
       49,   38,  100,   39,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,    1,   55,    0,   92,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   99,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
        0,   91,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,   82,    0,   84,   81,
       81,   80,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   58,   78,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   59,   98,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   79,    0,    0,

       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   27,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   94,   75,    0,   52,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   99,   99,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       99,   99,   99,   99,   99,   99,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   91,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       83,   83,    0,   85,   85,    0,    0,   81,    0,    0,
       86,   96,    0,   96,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   96,   96,   96,   96,   96,

       96,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   98,   98,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,   98,   98,   98,
       98,   98,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   36,   28,   22,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   64,
        0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
        0,    0,    0,   99,   99,   99,   99,   99,   99,   99,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   99,   99,   99,   99,   99,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   83,    0,
        0,   88,    0,   85,    0,    0,   87,    0,   86,    0,
       86,   96,   96,   96,   96,   96,   96,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,   96,   96,   96,   96,    0,    0,    0,    0,
        0,    0,   98,   98,   98,   98,   98,   98,   98,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,   98,   98,   98,   98,    0,    0,   79,

        0,    0,    0,    0,    0,    0,    0,   14,    0,    0,
        0,    0,    0,    0,    0,   29,    0,   13,   35,    0,
        0,   23,    0,    0,    9,    0,    0,    0,    0,   65,
        0,    8,    0,    0,   42,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   76,    0,    0,
        0,    3,   97,    0,   97,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,   97,   97,   97,
       97,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   99,   99,   99,   99,
       99,    0,    0,   99,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,   88,    0,   87,
        0,   87,   96,   96,   96,   96,   96,    0,    0,   96,
       98,   98,   98,   98,   98,    0,    0,   98,    0,    0,
       68,   10,    0,    0,    0,    0,    0,    0,   77,    0,
        6,    0,    0,   70,    0,   71,    0,   30,    0,   24,
        0,    0,   26,    0,    0,   74,    0,    0,    0,    0,
        0,    0,   45,    0,   25,   97,   97,   97,   97,   97,
       97,   97,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   97,   97,   97,   97,   97,
        0,    0,   90,    0,    0,    0,    0,   99,   89,    0,
        0,    0,    0,   96,   98,    0,    0,   11,    0,    4,
        0,    0,   46,    5,    0,    0,    0,    0,   31,    0,
       15,    0,    0,    0,   16,    0,   12,   34,    0,   97,
       97,   97,   97,   97,    0,    0,   97,    0,    0,    0,
        0,    0,   72,    0,    0,   33,    0,   18,    2,    0,
        7,    0,   97,   32,    0,   67,   21,   17,    0,    0,
       44,   69,    0,   20,   73,    0,   37,    0,   66,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   67,   74,   75,   76,   77,   78,   79,   80,
       81,   67,   82,   83,   84,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1003] =
    {   0,
        0,    0,  602,10521,  118,  574,  117,  146,  245,  571,
      352,  123,10521,10521,  110,10521,  111,  560,10521,  114,
      451,10521,  545,10521,  548,  644,    0,  745,  107,  112,
      336,   92,  338,  124,   97,  114,  379,  343,  537,  542,
      167,  353,  564,  169,  326,  554,  296,10521,  516,  535,
        0,10521,  471,10521,  779,  796,  813,  830,  847,  864,
      881,  898,   93,  915,  105,  932,  949,  966,  983, 1000,
       44, 1003, 1020,  265,10521, 1115,  546, 1116, 1044, 1060,
     1150,  334, 1167, 1108, 1184, 1194, 1211,  388, 1222, 1257,
     1273, 1288,  571, 1305, 1322, 1332, 1342, 1359,  683, 1440,

     1474, 1491, 1508, 1525, 1542, 1559, 1576, 1593,  341, 1610,
     1065, 1627, 1644, 1661, 1678, 1695,  175, 1698, 1715,10521,
     1805,  524, 1811, 1739, 1755, 1840, 1085, 1857, 1874, 1884,
     1894, 1911, 1122,  629,10521,  486,  358,  458,  556,  186,
      559, 1155,  130, 1995, 2029, 2046, 2063, 2080, 2097, 2114,
     1803, 2131, 1217, 2148, 1367, 2165, 2182, 2199, 2216, 2233,
      231, 2236, 2253, 2329,    0,10521, 2271, 2287, 2302, 1780,
     2364, 2319, 2381, 2391, 2408, 1932,10521, 2489, 2523, 2540,
     2557, 2574, 2591, 2608, 2625, 2642, 1223, 2659, 2326, 2676,
     2693, 2710, 2727, 2744,  350, 2747, 2764,  434,  532, 2844,

        0,  552, 2825, 2837, 2835, 2852, 2869, 2886, 2903, 2920,
     2937,  351, 2954, 2971, 2988, 3005, 2416, 3022, 3039, 3056,
     3073, 3090,  408, 3093, 3110, 2827, 2828, 2836, 2839, 3179,
     3171, 3181, 3173, 3176, 3182, 3187, 3194, 3192, 3224, 3229,
     3231, 3232, 3246, 3238, 3278, 3239, 3284, 3286, 3276, 3295,
     3289, 3330, 3335, 3343, 3338, 3348, 3298, 3353, 3354, 3393,
     3399, 3391,  695,10521,10521, 3454,10521, 3398, 3401, 3406,
     3407, 3514, 3527, 3532, 3523, 3540, 3557, 3574, 3591, 3608,
     3625, 3642, 3659, 3676, 1763, 3693, 3710,10521, 3805, 3728,
      389, 3745, 3775, 3792, 3840, 3857, 3874, 3891, 3908,  386,

     3925, 3942, 3959, 3976, 3993, 4010, 4027,    0,    0, 4044,
     4061, 4078, 4095, 4112, 4129, 4146,  338, 4163, 4180, 4197,
     4214, 3495, 4231, 4248, 4265, 4282, 3762,  437, 4292, 4309,
        0,    0,    0,    0,    0,    0, 4326, 4343, 4360, 4377,
     4394, 4411, 4428, 4445, 4462, 4479, 2317, 4496, 4513,10521,
     4603, 4531,  372, 4548, 4573, 4590, 4638, 4655, 4672, 4689,
     2854, 3350,  159, 3353, 4770,  372,  626, 4771, 1850,  405,
      402,    0,    0,    0, 4720, 4749, 4766, 4783, 4800, 4817,
     4834,  321, 4851, 4868, 4885, 4902, 3802, 4919, 4936, 4953,
     4970, 4708,  630, 4730, 4987,    0,    0,    0,    0,    0,

        0, 5004, 5021, 5038, 5055, 5072, 5089, 5106, 5123, 5140,
     5157, 2794, 5174, 5191, 5208,  362, 5225, 5242, 5259, 5276,
     5293, 5310, 5327,    0,    0, 5344, 5361, 5378, 5395, 5412,
     5429, 5446,  305, 5463, 5480, 5497, 5514, 4555, 5531, 5548,
     5565, 5582, 5599,  702, 5602, 5619,    0,    0,    0,    0,
        0,    0, 5636, 5653, 5670, 5687, 5704, 5721, 5738, 5755,
     5772, 5789, 3357, 5806, 5823,    0, 5883, 5884, 5885, 5886,
     5891, 5892, 5893, 5894, 5899, 5900, 5891, 5908, 5925, 5942,
     5959, 5976, 5993, 6010, 6027, 6044, 3482, 6061, 6078, 6147,
     6149, 6140, 6154, 6142, 6156, 6161, 6159, 6195, 6193, 6200,

     6201, 6203, 6206, 6215, 6216, 6217, 6251, 6256, 6238, 6258,
     6261, 6273, 6268, 6296, 6310, 6308, 6305, 6307, 6318, 6326,
     6331, 6344, 6354, 6363, 6362, 6365, 6368, 6380, 6399, 6389,
     6415, 6407, 6417, 6423, 6430, 6488, 6522, 6539, 6556, 6573,
     6590, 6607, 6624, 6641, 4598, 6658, 5852, 6675, 6692, 6709,
     6726, 6743,  731, 6746, 6763, 6410, 6412, 6425, 6823, 6824,
     6786, 6815, 6910,  393, 6881, 6833, 6880, 6895, 6415, 6945,
     6962, 6972, 6982, 6999, 6860, 7094, 7017, 7034, 7064, 7123,
     7081, 7158, 7175,    0,    0,    0,    0,    0,    0,    0,
     7192, 7209, 7226, 7243, 7260, 7277, 7294, 7311, 7328, 7345,

     6861, 7362, 7379,    0,    0,    0,    0,    0, 7396, 7413,
     7503,  380, 7509, 7437, 7453, 7538, 6907, 7555, 7051, 7572,
     7582, 7599, 7101, 7689, 7617, 7634, 7659, 1851, 6166, 3583,
      366,  353, 4682, 7163, 6300,  350,  349,  345,  339,  327,
      326,    0,    0,    0,    0,    0,    0,    0, 7676, 7724,
     7741, 7758, 7775, 7792, 7809, 7826, 7843, 7860, 7118, 7877,
     7894,    0,    0,    0,    0,    0, 7911, 7928, 8004, 7946,
     7963, 7980,    0,    0,    0,    0,    0,    0,    0, 8039,
     8056, 8073, 8090, 8107, 8124, 8141, 8158, 8175, 8192, 7461,
     8209, 8226,    0,    0,    0,    0,    0, 8243, 8260,  312,

     7524, 7525, 7527, 8320, 8321, 8283, 8312, 8343, 8378, 8384,
     8348, 8385, 8387, 8393, 8395, 8401, 8436, 8379, 8406, 8441,
     8446, 8438, 8449, 8444, 8451, 8481, 8459, 8486, 8494, 8496,
     8499, 8501, 8502, 8517, 8508, 8547, 8539, 8545, 8557, 8555,
     8554, 8566, 8560, 8596, 8602, 8575, 8605, 8603, 8611, 8623,
     8633, 8612,    0,    0,    0, 8624, 8641, 8658, 8675, 8692,
     8709, 8726,  148, 7997, 8743, 8760, 8777, 7491, 8794, 8811,
     8828, 8845, 8862, 1028, 8865, 8882,    0,    0,    0,    0,
        0,    0, 8899, 8916, 8933, 8950, 8967, 8984, 9001, 9018,
     9035, 9052, 7477, 9069, 9086, 8617,  238, 9103,  184, 9120,

     9137, 9154, 9171, 9188, 9205, 9222,    0,    0,    0,    0,
        0, 9239, 9256,    0,  205, 9273,  161, 9290, 9307, 9324,
     9341, 9358, 9375, 9392,  189,  176,  175,  172,  153,  143,
      141,  140,    0,    0,    0,    0,    0, 9409, 9426,    0,
        0,    0,    0,    0,    0, 9443, 9460,    0, 8618, 9520,
     9521, 9522, 9527, 9532, 9529, 9537, 9540, 9534, 9542, 9574,
     9543, 9579, 9581, 9582, 9589, 9587, 9601, 9590, 9592, 9598,
     9628, 9635, 9636, 9637, 9638, 9643, 9655, 9683, 9648, 9689,
     9686, 9692, 9694, 9704, 9697,    0,    0,    0,    0,    0,
        0,    0, 9695, 9712, 9729, 9746, 9763, 9780, 9797, 9814,

     9831, 9848, 7639, 9865, 9882,    0,    0,    0,    0,    0,
     9899, 9916,10521,    0, 9933, 9950, 9967,    0,10521,    0,
     9984,10001,10018,    0,    0,10085,10080, 9702,10079,10087,
    10094,10099,10092,10093,10133,10102,10136,10138,10139,10157,
    10145,10156,10188,10148,10154,10191,10193,10194,10196,    0,
        0,    0,    0,    0,10187,10204,    0,10264,10276,10275,
    10278,10267,10270,10286,10288,10281,10318,10320,10323,10326,
    10328,10338,    0,10331,10336,10333,10339,10344,10376,10381,
    10378,10379,10394,10386,10387,10397,10389,10392,10395,10521,
    10472,10477,10482,10485,  140,10490,10495,10497,10502,10507,

    10512,10515
    } ;

static yyconst flex_int16_t yy_def[1003] =
    {   0,
      990,    1,  990,  990,  990,  990,  991,  992,  990,  990,
      993,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  994,  990,  990,  990,  995,  990,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  990,  990,  990,  990,
       28,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  991,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  992,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      993,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  994,  164,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  995,   28,   28,

       21,   28,   28,   28,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  990,  990,  990,  990,  990,   28,   28,   28,
       28,   28,   28,   28,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  996,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  100,  100,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      100,  100,  100,  100,  100,  100,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      997,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  144,  144,  144,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  144,  144,  144,  144,  144,

      144,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  178,  178,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  178,  178,  178,  178,
      178,  178,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  998,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,   28,   28,   28,   28,   28,
      990,  990,  996,  563,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  999,  990,  990,  990, 1000,
      990,  990,  990,  100,  100,  100,  100,  100,  100,  100,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  100,  100,  100,  100,  100,  990,  990,
      997,  611,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990, 1001,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  144,  144,  144,  144,  144,  144,  144,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  144,  144,  144,  144,  144,  990,  990, 1002,  990,
      990,  990,  178,  178,  178,  178,  178,  178,  178,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  178,  178,  178,  178,  178,  990,  990,  998,

       28,   28,   28,   28,   28,  990,  990,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  536,  536,  536,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  536,  536,  536,  536,
      536,  536,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,   28,  563,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  100,  100,  100,  100,
      100,  990,  990,  100,  611,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  144,  144,  144,  144,  144,  990,  990,  144,
      178,  178,  178,  178,  178,  990,  990,  178,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  536,  536,  536,  536,  536,
      536,  536,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  536,  536,  536,  536,  536,
      990,  990,  990,  563,  990,  990,  990,  100,  990,  611,
      990,  990,  990,  144,  178,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,  536,
      536,  536,  536,  536,  990,  990,  536,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  536,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,    0,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990
    } ;

static yyconst flex_int16_t yy_nxt[10641] =
    {   0,
        4,    5,    5,    5,    5,    6,    7,    8,    9,    4,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   35,   35,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   35,   46,
       35,   35,   47,    4,   48,   49,   50,   51,   29,   30,
       31,   32,   33,   34,   35,   36,   35,   35,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   35,   46,   35,
       35,   52,   53,   54,    4,   55,   56,   57,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   58,   59,   59,

       60,    4,    4,   61,   62,    4,   63,   64,   65,   66,
       67,   68,   69,   70,    4,   71,   72,   73,    4,   74,
       74,   74,   74,   77,  134,  134,  134,  134,  136,  138,
      137,  139,  141,  237,  142,  226,  135,  202,  202,  284,
      284,  285,  202,  227,  198,  370,  143,  370,  202,  228,
      371,  230,  202,  202,  231,  242,  232,  202,  229,  243,
      832,  832,  237,  830,  226,  202,  202,  202,  241,  202,
       78,  202,  227,  830,  631,  143,  631,  202,  228,  632,
      230,  202,  202,  231,  242,  232,  202,  229,  243,  274,
      274,  274,  828,  274,  202,  828,  826,  241,  202,  275,

      275,  275,  275,  275,  275,  275,  140,   79,  202,  826,
      202,  253,  202,  259,  202,  611,  919,   80,  367,   81,
       81,   81,   81,   81,   81,   82,   83,   83,   83,   83,
       84,   85,   85,   86,   87,   88,   90,  202,  563,  202,
      253,  202,  259,  202,  913,  753,   91,  367,   92,   92,
       92,   92,   92,   92,   93,   94,   94,   94,   94,   95,
       96,   96,   97,   98,   99,  100,   74,   74,   74,   74,
      346,  346,  347,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  263,  263,  263,

      263,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  411,  411,  412,  466,
      101,  102,  103,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  104,  105,  105,  106,  641,  641,  107,  108,
      264,  109,  110,  111,  112,  113,  114,  115,  116,  639,
      117,  118,  119,  122,  233,  639,  238,  260,  234,  637,
      637,  202,  235,  632,  239,  247,  362,  202,  137,  202,
      236,  202,  240,  202,  202,  254,  632,  636,  202,  636,
      363,  815,  637,  233,  202,  238,  260,  234,  202,  797,

      202,  235,  424,  239,  247,  123,  202,  244,  202,  236,
      202,  240,  202,  202,  254,  245,  164,  202,  372,  363,
      202,  246,  371,  202,  202,  371,  121,  202,  292,  292,
      292,  292,  292,  292,  292,  308,  244,  336,  336,  336,
       89,  336,  124,   76,  245,  462,  462,  463,  199,  202,
      246,  466,  125,  202,  126,  126,  126,  126,  126,  126,
      127,  128,  128,  128,  128,  129,  130,  130,  131,  132,
      133,  144,  298,  298,  298,  298,  298,  298,  364,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  486,  486,  487,  361,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  600,  600,  601,  351,  145,  146,  147,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  148,  149,
      149,  150,  289,  267,  151,  152,  266,  153,  154,  155,
      156,  157,  158,  159,  160,  248,  161,  162,  163,  165,
      166,  265,  177,  202,  365,  250,  139,  202,  202,  368,
      140,  120,  202,  202,  249,  251,  252,  202,  366,  261,
      262,  369,  255,  202,  248,  202,  256,  202,   75,  202,

      257,  990,  202,  990,  250,  202,  202,  202,  990,  202,
      258,  202,  202,  249,  251,  252,  202,  366,  261,  262,
      369,  255,  202,  990,  202,  256,  202,  990,  202,  257,
      134,  134,  134,  134,  202,  167,  990,  990,  202,  258,
      990,  638,  135,  638,  990,  168,  639,  169,  169,  169,
      169,  169,  169,  170,  171,  171,  171,  171,  172,  173,
      173,  174,  175,  176,  178,  301,  301,  301,  301,  301,
      301,  301,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  263,  263,  263,  263,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  658,  658,  659,  990,  179,
      180,  181,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  182,  183,  183,  184,  990,  990,  185,  186,  264,
      187,  188,  189,  190,  191,  192,  193,  194,  990,  195,
      196,  197,  199,  200,  990,  199,  201,  307,  307,  307,
      307,  307,  307,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  203,  202,  202,  202,
      204,  202,  202,  202,  202,  202,  202,  689,  689,  690,

      990,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  203,  202,  202,  202,  204,
      202,  202,  202,  202,  202,  202,  792,  792,  793,  990,
      205,  206,  207,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  209,  210,  210,  211,  990,  212,  213,  214,
      990,  215,  216,  217,  218,  219,  220,  221,  222,  990,
      223,  224,  225,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

      269,  269,  269,  269,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  270,  270,  270,  270,  270,  270,
      270,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      271,  271,  271,  268,  268,  273,  273,  273,  273,  273,
      273,  273,  273,  990,  273,  273,  273,  273,  990,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  277,  278,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  280,  280,  280,  280,  279,
      281,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  286,  286,  286,  286,  286,  286,

      286,  286,  286,  286,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  288,   76,  902,  902,  903,  990,   76,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  337,
      337,  337,  337,  337,  337,  337,  990,  990,   78,   76,
      990,  990,  990,  141,   76,  142,  990,  990,   76,  354,
      354,  354,  354,  354,  354,  354,   76,  143,  990,   76,
      990,   76,  294,  294,  294,  294,  294,  294,  294,  294,

      294,  294,  990,  990,  990,   79,  360,  360,  360,  360,
      360,  360,  990,  990,  990,   80,  143,   81,   81,   81,
       81,   81,   81,   82,   83,   83,   83,   83,   84,   85,
       85,   86,   87,   88,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  297,  297,  297,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,   90,  401,  401,  401,  990,  401,  990,  452,
      452,  452,   91,  452,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   95,   96,   96,   97,   98,
       99,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  302,  302,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      308,  402,  402,  402,  402,  402,  402,  402,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  990,  990,  990,  990,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  990,  990,  990,  990,  310,  311,  312,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  314,  315,  315,
      316,  990,  317,  318,  319,  990,  320,  321,  322,  323,
      324,  325,  326,  327,  990,  328,  329,  330,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  333,
      333,  333,  333,  333,  333,  333,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  334,  334,  334,  331,  331,
      100,  100,  100,  100,  100,  100,  100,  100,  990,  100,
      100,  100,  100,  990,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  339,  340,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      342,  342,  342,  342,  341,  343,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  350,  121,  990,  990,
      990,  990,  121,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  990,  990,  990,  990,  123,  560,
      560,  560,  560,  560,  121,  640,  825,  640,  825,  121,
      641,  826,  990,  121,  417,  417,  417,  417,  417,  417,
      417,  121,  990,  990,  121,  990,  121,  144,  144,  144,
      144,  144,  144,  144,  144,  124,  144,  144,  144,  144,

      990,  144,  144,  144,  990,  125,  990,  126,  126,  126,
      126,  126,  126,  127,  128,  128,  128,  128,  129,  130,
      130,  131,  132,  133,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  372,  373,  990,  372,  423,  423,  423,  423,
      423,  423,  990,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  990,  990,  990,
      990,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  990,  990,  990,  990,
      375,  376,  377,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  379,  380,  380,  381,  990,  382,  383,  384,

      990,  385,  386,  387,  388,  389,  390,  391,  392,  990,
      393,  394,  395,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  398,  398,  398,  398,  398,  398,
      398,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  400,  400,

      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      399,  399,  399,  396,  396,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  404,  405,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  407,  407,
      407,  407,  406,  408,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  166,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  608,  608,  608,  608,  608,  990,  167,
      453,  453,  453,  453,  453,  453,  453,  990,  990,  168,
      990,  169,  169,  169,  169,  169,  169,  170,  171,  171,
      171,  171,  172,  173,  173,  174,  175,  176,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  422,  422,  422,  422,  422,  422,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  424,
      477,  477,  477,  477,  477,  477,  477,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  990,  990,  990,  990,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      990,  990,  990,  990,  426,  427,  428,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  430,  431,  431,  432,
      990,  433,  434,  435,  990,  436,  437,  438,  439,  440,

      441,  442,  443,  990,  444,  445,  446,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  449,  449,
      449,  449,  449,  449,  449,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  450,  450,  450,  447,  447,  178,
      178,  178,  178,  178,  178,  178,  178,  990,  178,  178,
      178,  178,  990,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  455,  456,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  458,
      458,  458,  458,  457,  459,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  990,  202,  468,  202,  491,
      202,  990,  490,  202,  361,  469,  467,  202,  202,  990,
      202,  202,  202,  492,  202,  202,  628,  990,  990,  202,
      666,  666,  666,  666,  666,  202,  468,  202,  491,  202,

      990,  490,  202,  990,  469,  467,  202,  202,  990,  202,
      202,  202,  492,  202,  202,  628,  990,  990,  202,  470,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  473,  473,  473,
      473,  473,  473,  473,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  475,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  474,  474,  474,  471,  471,  202,  202,
      202,  202,  202,  202,  202,  202,  990,  202,  202,  202,
      202,  990,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  476,  476,  476,  990,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  479,  480,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  482,  482,  482,  482,  481,
      483,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  489,  489,  489,  489,  489,  489,

      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  493,  494,  495,  202,  497,  202,  202,  202,  496,
      202,  498,  202,  202,  202,  501,  202,  499,  202,  500,
      990,  502,  202,  202,  990,  202,  990,  202,  990,  202,
      493,  494,  495,  202,  497,  202,  202,  202,  496,  202,
      498,  202,  202,  202,  501,  202,  499,  202,  500,  505,
      502,  202,  202,  503,  202,  202,  202,  514,  202,  202,
      202,  504,  202,  202,  202,  508,  202,  506,  507,  512,
      202,  990,  509,  202,  202,  510,  990,  202,  505,  990,
      990,  202,  503,  511,  202,  990,  514,  990,  202,  202,

      504,  202,  202,  202,  508,  202,  506,  507,  512,  202,
      990,  509,  202,  202,  510,  517,  202,  202,  513,  202,
      202,  202,  511,  202,  515,  202,  516,  202,  518,  202,
      202,  202,  990,  990,  202,  519,  202,  528,  990,  202,
      202,  990,  990,  202,  517,  990,  202,  513,  202,  990,
      202,  990,  202,  515,  202,  516,  202,  518,  202,  202,
      202,  520,  990,  202,  519,  202,  528,  521,  202,  202,
      629,  202,  202,  364,  522,  202,  202,  523,  525,  202,
      202,  529,  630,  202,  202,  633,  524,  526,  202,  202,
      520,  990,  527,  202,  202,  202,  521,  530,  202,  202,

      202,  531,  990,  522,  202,  202,  523,  525,  202,  202,
      529,  630,  202,  202,  633,  524,  526,  202,  202,  990,
      990,  527,  202,  202,  202,  990,  530,  202,  202,  532,
      531,  534,  202,  990,  202,  533,  202,  535,  202,  202,
      202,  990,  202,  202,  202,  990,  202,  202,  202,  990,
      990,  202,  202,  697,  697,  697,  697,  697,  532,  990,
      534,  202,  990,  202,  533,  202,  535,  202,  202,  202,
      990,  202,  202,  202,  536,  202,  202,  202,  990,  990,
      202,  202,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  990,  990,  990,  990,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  990,  990,  990,  990,  537,
      538,  539,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  540,  541,  541,  542,  202,  990,  543,  544,  202,
      545,  546,  547,  548,  549,  550,  551,  552,  202,  553,
      554,  555,  202,  202,  990,  990,  990,  202,  705,  705,
      705,  705,  705,  990,  202,  990,  990,  990,  202,  591,
      591,  591,  591,  591,  591,  591,  990,  202,  827,  990,

      827,  202,  202,  828,  990,  990,  202,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  268,  268,  268,  268,  268,  269,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,  269,  269,  269,  269,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  557,  557,  557,  557,  557,  557,  557,  557,

      557,  557,  557,  557,  557,  557,  557,  557,  557,  268,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  562,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  564,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  990,  990,  565,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  990,  990,  566,  649,  649,  649,  649,

      649,  649,  649,  990,  990,  567,  990,  568,  568,  568,
      568,  568,  568,  569,  570,  570,  570,  570,  571,  572,
      572,  573,  574,  575,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  582,  582,  582,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  584,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  587,  587,  587,  587,

      587,  587,  587,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  588,  588,  588,  585,  585,  309,  309,  309,
      309,  309,  309,  309,  309,  990,  309,  309,  309,  309,
      990,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  590,  590,  590,  990,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  593,  594,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  596,  596,  596,  596,  595,  597,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,

      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  331,  331,  331,  331,  331,  332,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  332,  332,  332,  332,  332,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  605,  605,  605,  605,  605,

      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  331,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  612,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  680,
      680,  680,  680,  680,  680,  680,  613,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  990,  990,  614,  782,  782,  782,  829,  782,  829,

      990,  990,  830,  615,  990,  616,  616,  616,  616,  616,
      616,  617,  618,  618,  618,  618,  619,  620,  620,  621,
      622,  623,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      634,  368,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  635,  369,  642,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  635,  369,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  645,  645,  645,  645,  645,  645,
      645,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      646,  646,  646,  643,  643,  374,  374,  374,  374,  374,
      374,  374,  374,  990,  374,  374,  374,  374,  990,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  648,  648,  648,  990,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,

      648,  648,  648,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      651,  652,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  654,  654,  654,  654,  653,  655,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,

      401,  401,  401,  401,  401,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  396,  396,  396,  396,  396,  397,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  397,  397,  397,  397,  397,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      396,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  416,  416,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  673,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  676,  676,  676,  676,

      676,  676,  676,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  677,  677,  677,  674,  674,  425,  425,  425,
      425,  425,  425,  425,  425,  990,  425,  425,  425,  425,
      990,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  679,  679,  679,  990,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  682,  683,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  685,  685,  685,  685,  684,  686,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  447,  447,  447,  447,  447,  448,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  448,  448,  448,  448,  448,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  447,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  990,  990,  202,  202,  783,  783,  783,  783,
      783,  783,  783,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  990,  990,  202,  202,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  701,  701,  701,  701,  701,  701,  701,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  701,  471,
      471,  471,  471,  471,  472,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  470,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  472,  472,
      472,  472,  472,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  471,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  708,
      709,  710,  711,  202,  713,  202,  629,  712,  202,  714,
      202,  715,  202,  990,  202,  202,  990,  202,  630,  202,

      202,  202,  202,  990,  202,  990,  202,  990,  708,  709,
      710,  711,  202,  713,  202,  990,  712,  202,  714,  202,
      715,  202,  990,  202,  202,  716,  202,  630,  202,  202,
      202,  202,  990,  202,  202,  202,  202,  990,  202,  717,
      202,  202,  202,  718,  202,  202,  719,  202,  720,  724,
      990,  202,  721,  990,  716,  722,  202,  202,  202,  723,
      202,  202,  202,  202,  990,  202,  990,  202,  717,  202,
      202,  202,  718,  202,  202,  719,  202,  720,  724,  202,
      202,  721,  727,  202,  722,  202,  202,  202,  723,  202,
      202,  202,  202,  725,  728,  726,  202,  202,  990,  202,

      990,  202,  202,  202,  731,  729,  202,  730,  202,  202,
      990,  727,  202,  202,  202,  831,  990,  831,  202,  990,
      832,  202,  725,  728,  726,  202,  202,  732,  202,  990,
      202,  202,  202,  731,  729,  202,  730,  202,  202,  733,
      734,  202,  202,  202,  735,  990,  202,  202,  202,  202,
      202,  202,  736,  202,  737,  202,  732,  990,  738,  202,
      990,  990,  990,  202,  739,  990,  202,  202,  733,  734,
      202,  202,  202,  735,  990,  202,  202,  202,  202,  202,
      202,  736,  202,  737,  202,  202,  741,  738,  202,  202,
      990,  740,  202,  739,  743,  202,  202,  744,  990,  202,

      202,  202,  742,  202,  202,  202,  202,  202,  202,  202,
      202,  990,  746,  202,  202,  741,  745,  990,  202,  990,
      740,  202,  990,  743,  202,  202,  744,  990,  202,  990,
      202,  742,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  746,  202,  747,  202,  745,  990,  748,  202,  749,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  750,  202,  202,  202,  752,  202,  751,  202,  202,
      202,  202,  747,  202,  990,  202,  748,  202,  749,  990,
      202,  202,  202,  990,  202,  202,  202,  202,  990,  202,
      750,  202,  990,  202,  752,  202,  751,  202,  990,  202,

      202,  990,  990,  990,  202,  753,  754,  990,  753,  800,
      800,  800,  800,  800,  800,  800,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      990,  990,  990,  990,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  990,
      990,  990,  990,  756,  757,  758,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  760,  761,  761,  762,  990,
      763,  764,  765,  990,  766,  767,  768,  769,  770,  771,

      772,  773,  990,  774,  775,  776,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  779,  779,  779,
      779,  779,  779,  779,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  781,  781,  781,  781,  781,  781,  781,  781,  781,

      781,  781,  781,  780,  780,  780,  777,  777,  536,  536,
      536,  536,  536,  536,  536,  536,  990,  536,  536,  536,
      536,  990,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  785,  786,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  787,  789,  787,  787,  787,  787,  787,  787,

      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  202,  202,  990,  990,  202,  202,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  563,  990,  990,
      990,  990,  563,  202,  202,  990,  990,  202,  202,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  564,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  990,  563,  990,  990,  990,  990,  563,
      990,  990,  990,  563,  806,  806,  806,  806,  806,  806,
      990,  563,  990,  990,  563,  990,  563,  811,  811,  811,
      811,  811,  990,  565,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  990,  990,  990,  990,

      566,  818,  818,  818,  818,  818,  818,  818,  990,  990,
      567,  990,  568,  568,  568,  568,  568,  568,  569,  570,
      570,  570,  570,  571,  572,  572,  573,  574,  575,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,

      288,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  990,  990,   78,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,  990,  634,   79,  824,  824,  824,  824,  824,
      824,  990,  990,  990,   80,  635,   81,   81,   81,   81,

       81,   81,   82,   83,   83,   83,   83,   84,   85,   85,
       86,   87,   88,   90,  837,  837,  837,  837,  837,  990,
      990,  990,  990,   91,  635,   92,   92,   92,   92,   92,
       92,   93,   94,   94,   94,   94,   95,   96,   96,   97,
       98,   99,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  807,  807,  807,  807,  807,  807,  807,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      585,  585,  585,  585,  585,  586,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  584,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  586,
      586,  586,  586,  586,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  585,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,

      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  612,  611,  990,  990,  990,  990,
      611,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  990,  990,  990,  990,  613,  845,  845,  845,
      845,  845,  611,  990,  990,  202,  202,  611,  202,  202,
      202,  611,  202,  910,  910,  910,  910,  910,  990,  611,
      990,  990,  611,  990,  611,  893,  893,  893,  893,  893,
      893,  893,  990,  614,  202,  202,  990,  202,  202,  202,

      990,  202,  990,  615,  990,  616,  616,  616,  616,  616,
      616,  617,  618,  618,  618,  618,  619,  620,  620,  621,
      622,  623,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,

      350,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  954,  954,  954,  954,  954,
      990,  990,  123,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  990,  990,  124,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  125,
      990,  126,  126,  126,  126,  126,  126,  127,  128,  128,

      128,  128,  129,  130,  130,  131,  132,  133,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  643,  643,  643,  643,  643,
      644,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  642,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  644,  644,  644,  644,  644,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  643,  835,  835,  835,  835,  835,  835,

      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  166,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  755,  755,  755,  755,  755,  755,  755,  755,  990,
      755,  755,  755,  755,  167,  755,  755,  755,  990,  990,

      990,  990,  990,  990,  168,  990,  169,  169,  169,  169,
      169,  169,  170,  171,  171,  171,  171,  172,  173,  173,
      174,  175,  176,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  674,  674,  674,
      674,  674,  675,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  673,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  675,  675,  675,  675,
      675,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  674,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  846,  846,  846,  846,  846,  846,  846,

      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  202,  202,  990,  990,  202,  202,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  202,  990,  990,  990,  202,  202,
      202,  202,  852,  202,  202,  202,  849,  849,  849,  849,

      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  202,  850,  851,  990,  202,  202,  202,
      202,  852,  202,  202,  202,  202,  202,  990,  202,  202,
      202,  853,  202,  854,  202,  990,  202,  990,  202,  855,
      202,  856,  202,  850,  851,  857,  202,  202,  202,  202,
      990,  202,  202,  202,  202,  202,  990,  202,  202,  202,
      853,  202,  854,  202,  990,  202,  990,  202,  855,  202,
      856,  202,  858,  859,  857,  202,  202,  202,  860,  202,
      202,  202,  202,  202,  861,  202,  202,  202,  862,  202,
      202,  202,  202,  990,  202,  864,  202,  990,  990,  990,

      202,  858,  859,  990,  202,  990,  202,  860,  202,  863,
      202,  202,  202,  861,  202,  202,  202,  862,  202,  202,
      202,  202,  202,  202,  864,  202,  202,  202,  990,  202,
      866,  202,  865,  202,  869,  202,  867,  202,  863,  202,
      202,  202,  202,  202,  202,  868,  202,  202,  870,  202,
      990,  202,  990,  202,  990,  202,  202,  990,  202,  866,
      202,  865,  202,  869,  202,  867,  202,  990,  202,  202,
      202,  202,  202,  202,  868,  202,  202,  870,  202,  871,
      202,  872,  202,  990,  202,  875,  202,  202,  202,  873,
      202,  202,  202,  874,  877,  202,  202,  990,  202,  202,

      202,  202,  202,  990,  876,  202,  878,  202,  871,  202,
      872,  202,  990,  202,  875,  202,  881,  202,  873,  202,
      202,  202,  874,  877,  202,  202,  879,  202,  202,  202,
      202,  202,  990,  876,  202,  878,  202,  202,  880,  990,
      202,  202,  990,  202,  202,  881,  202,  202,  202,  202,
      202,  882,  883,  202,  884,  879,  202,  202,  202,  202,
      990,  990,  202,  202,  202,  885,  202,  880,  202,  990,
      202,  990,  202,  202,  202,  202,  202,  202,  202,  202,
      882,  883,  202,  884,  990,  202,  202,  202,  202,  990,
      990,  202,  202,  202,  885,  990,  990,  202,  990,  990,

      990,  990,  990,  202,  990,  990,  990,  202,  886,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  889,  889,  889,  889,
      889,  889,  889,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  890,  890,  890,  890,  890,  890,  890,

      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  890,  890,  890,  887,  887,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  892,  892,  892,  990,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  895,  896,  897,  897,  897,

      897,  897,  897,  897,  897,  897,  897,  898,  898,  898,
      898,  897,  899,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  777,  777,  777,
      777,  777,  778,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  778,  778,  778,  778,
      778,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  777,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,

      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,

      916,  916,  916,  916,  916,  916,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      920,  920,  920,  920,  920,  920,  920,  920,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  924,  924,  924,  924,  924,  924,  924,

      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  926,  202,  202,  928,  202,  202,  202,  202,  930,
      202,  927,  202,  202,  202,  932,  931,  202,  202,  202,
      929,  202,  202,  202,  202,  202,  990,  202,  202,  990,
      926,  202,  202,  928,  202,  202,  202,  202,  930,  202,

      927,  202,  202,  202,  932,  931,  202,  202,  202,  929,
      202,  202,  202,  202,  202,  202,  202,  202,  933,  202,
      202,  936,  935,  202,  202,  934,  202,  202,  202,  937,
      202,  202,  202,  202,  202,  202,  938,  202,  990,  202,
      990,  990,  202,  202,  202,  990,  202,  933,  202,  202,
      936,  935,  202,  202,  934,  202,  202,  202,  937,  202,
      202,  202,  202,  202,  202,  938,  202,  990,  202,  202,
      942,  202,  202,  202,  939,  202,  940,  202,  202,  202,
      202,  202,  202,  202,  202,  943,  990,  941,  202,  202,
      990,  990,  990,  202,  945,  990,  202,  990,  202,  942,

      202,  990,  202,  939,  990,  940,  202,  202,  202,  202,
      202,  202,  202,  202,  943,  944,  941,  202,  202,  946,
      990,  990,  202,  945,  202,  202,  990,  202,  202,  202,
      202,  202,  947,  202,  202,  202,  949,  948,  202,  202,
      990,  990,  202,  202,  944,  202,  990,  202,  946,  202,
      990,  990,  990,  202,  990,  990,  202,  202,  990,  202,
      202,  947,  202,  202,  202,  949,  948,  202,  202,  990,
      990,  202,  202,  990,  202,  990,  202,  990,  202,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  950,  950,  950,  950,

      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  887,  887,  887,  887,  887,  888,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  886,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  888,  888,  888,  888,  888,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  887,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,

      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  611,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  958,
      202,  202,  960,  961,  202,  202,  202,  959,  202,  962,
      202,  990,  202,  202,  202,  202,  990,  202,  202,  202,
      202,  990,  990,  202,  202,  990,  964,  202,  958,  202,
      202,  960,  961,  202,  202,  202,  959,  202,  962,  202,
      990,  202,  202,  202,  202,  990,  202,  202,  202,  202,
      990,  963,  202,  202,  202,  964,  202,  202,  202,  202,
      202,  202,  965,  966,  202,  967,  202,  968,  990,  202,
      202,  990,  970,  202,  990,  202,  990,  202,  202,  202,

      963,  202,  202,  202,  990,  990,  202,  202,  202,  202,
      202,  965,  966,  202,  967,  202,  968,  990,  202,  202,
      969,  970,  202,  971,  202,  990,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      972,  202,  990,  990,  990,  990,  990,  990,  990,  969,
      990,  990,  971,  990,  990,  990,  990,  990,  202,  990,
      990,  202,  202,  202,  202,  202,  202,  202,  202,  972,
      202,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,

      973,  973,  973,  973,  973,  202,  975,  976,  202,  974,
      977,  202,  202,  978,  979,  202,  202,  202,  980,  202,
      202,  202,  202,  202,  990,  990,  202,  202,  990,  202,
      990,  202,  990,  202,  202,  975,  976,  202,  974,  977,
      202,  202,  978,  979,  202,  202,  202,  980,  202,  202,
      202,  202,  202,  990,  990,  202,  202,  981,  202,  202,
      202,  202,  202,  202,  202,  202,  982,  202,  202,  202,
      983,  202,  202,  202,  202,  990,  202,  202,  202,  202,
      202,  202,  984,  202,  202,  202,  981,  990,  202,  202,
      202,  990,  202,  202,  202,  982,  202,  202,  202,  983,

      202,  202,  202,  202,  990,  202,  202,  202,  202,  202,
      202,  984,  202,  202,  202,  985,  986,  202,  202,  202,
      202,  202,  202,  202,  202,  987,  202,  202,  202,  988,
      202,  202,  202,  202,  202,  202,  202,  989,  202,  202,
      202,  990,  202,  990,  985,  986,  202,  990,  202,  202,
      202,  202,  202,  202,  987,  202,  202,  202,  988,  202,
      202,  202,  202,  202,  202,  202,  989,  202,  202,  202,
      990,  202,   76,  990,   76,   76,   76,   89,  990,   89,
       89,   89,  121,  990,  121,  121,  121,  164,  164,  164,
      563,  563,  563,  563,  563,  611,  611,  611,  611,  611,

      700,  700,   76,  990,   76,   76,   76,   89,  990,   89,
       89,   89,  121,  990,  121,  121,  121,  164,  164,  164,
        3,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990
    } ;

static yyconst flex_int16_t yy_chk[10641] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    7,   12,   12,   12,   12,   15,   17,
       15,   17,   20,   32,   20,   29,   12,   32,   35,   71,
       71,   71,   35,   29,  995,  143,   20,  143,   29,   29,
      143,   30,   29,   30,   30,   36,   30,   30,   29,   36,
      832,  831,   32,  830,   29,   34,   32,   35,   34,   34,
        7,   35,   29,  829,  363,   20,  363,   29,   29,  363,
       30,   29,   30,   30,   36,   30,   30,   29,   36,   63,
       63,   63,  828,   63,   34,  827,  826,   34,   34,   65,

       65,   65,   65,   65,   65,   65,  140,    7,   41,  825,
       44,   41,   41,   44,   44,  817,  815,    7,  140,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,   41,  799,   44,
       41,   41,   44,   44,  797,  763,    8,  140,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    9,   74,   74,   74,   74,
      117,  117,  117,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   47,   47,   47,

       47,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,  161,  161,  161,  700,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,  641,  640,    9,    9,
       47,    9,    9,    9,    9,    9,    9,    9,    9,  639,
        9,    9,    9,   11,   31,  638,   33,   45,   31,  637,
      636,   45,   31,  632,   33,   38,  137,   31,  137,   33,
       31,   31,   33,   33,   38,   42,  631,  366,   38,  366,
      137,  612,  366,   31,   42,   33,   45,   31,   42,  564,

       45,   31,  433,   33,   38,   11,   31,   37,   33,   31,
       31,   33,   33,   38,   42,   37,  416,   38,  382,  137,
       37,   37,  371,   42,   37,  370,  353,   42,   82,   82,
       82,   82,   82,   82,   82,  317,   37,  109,  109,  109,
      300,  109,   11,  291,   37,  195,  195,  195,  212,   37,
       37,  198,   11,   37,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   21,   88,   88,   88,   88,   88,   88,  138,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,  223,  223,  223,  136,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,  328,  328,  328,  122,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   77,   53,   21,   21,   50,   21,   21,   21,
       21,   21,   21,   21,   21,   39,   21,   21,   21,   23,
       23,   49,   25,  199,  139,   40,  139,  199,   39,  141,
       18,   10,   39,   40,   39,   40,   40,   40,  139,   46,
       46,  141,   43,  202,   39,   46,   43,  202,    6,   46,

       43,    3,  199,    0,   40,   43,  199,   39,    0,   43,
       43,   39,   40,   39,   40,   40,   40,  139,   46,   46,
      141,   43,  202,    0,   46,   43,  202,    0,   46,   43,
      134,  134,  134,  134,   43,   23,    0,    0,   43,   43,
        0,  367,  134,  367,    0,   23,  367,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   26,   93,   93,   93,   93,   93,
       93,   93,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  263,  263,  263,  263,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  393,  393,  393,    0,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,    0,    0,   26,   26,  263,
       26,   26,   26,   26,   26,   26,   26,   26,    0,   26,
       26,   26,   28,   28,    0,   28,   28,   99,   99,   99,
       99,   99,   99,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,  444,  444,  444,

        0,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  553,  553,  553,    0,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,    0,   28,   28,   28,
        0,   28,   28,   28,   28,   28,   28,   28,   28,    0,
       28,   28,   28,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   61,   61,   61,   61,   61,
       61,   61,   61,    0,   61,   61,   61,   61,    0,   61,
       61,   61,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   76,   78,  774,  774,  774,    0,   78,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,  111,
      111,  111,  111,  111,  111,  111,    0,    0,   76,   78,
        0,    0,    0,  142,   78,  142,    0,    0,   78,  127,
      127,  127,  127,  127,  127,  127,   78,  142,    0,   78,
        0,   78,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,    0,    0,    0,   76,  133,  133,  133,  133,
      133,  133,    0,    0,    0,   76,  142,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   89,  153,  153,  153,    0,  153,    0,  187,
      187,  187,   89,  187,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      100,  155,  155,  155,  155,  155,  155,  155,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,    0,    0,    0,    0,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,    0,    0,    0,    0,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,    0,  100,  100,  100,    0,  100,  100,  100,  100,
      100,  100,  100,  100,    0,  100,  100,  100,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      107,  107,  107,  107,  107,  107,  107,  107,    0,  107,
      107,  107,  107,    0,  107,  107,  107,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  121,  123,    0,    0,
        0,    0,  123,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,    0,    0,    0,    0,  121,  285,
      285,  285,  285,  285,  123,  369,  628,  369,  628,  123,
      369,  628,    0,  123,  170,  170,  170,  170,  170,  170,
      170,  123,    0,    0,  123,    0,  123,  151,  151,  151,
      151,  151,  151,  151,  151,  121,  151,  151,  151,  151,

        0,  151,  151,  151,    0,  121,    0,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  144,  144,    0,  144,  176,  176,  176,  176,
      176,  176,    0,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,    0,    0,    0,
        0,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,    0,    0,    0,    0,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,    0,  144,  144,  144,

        0,  144,  144,  144,  144,  144,  144,  144,  144,    0,
      144,  144,  144,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  164,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  169,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  347,  347,  347,  347,  347,    0,  164,
      189,  189,  189,  189,  189,  189,  189,    0,    0,  164,
        0,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  178,
      217,  217,  217,  217,  217,  217,  217,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,    0,    0,    0,    0,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
        0,    0,    0,    0,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
        0,  178,  178,  178,    0,  178,  178,  178,  178,  178,

      178,  178,  178,    0,  178,  178,  178,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  185,
      185,  185,  185,  185,  185,  185,  185,    0,  185,  185,
      185,  185,    0,  185,  185,  185,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  200,  203,  204,  226,  227,
      203,    0,  226,  227,  361,  204,  203,  228,  204,    0,
      229,  228,  204,  228,  229,  200,  361,    0,    0,  200,
      412,  412,  412,  412,  412,  203,  204,  226,  227,  203,

        0,  226,  227,    0,  204,  203,  228,  204,    0,  229,
      228,  204,  228,  229,  200,  361,    0,    0,  200,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209,  209,  209,  209,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  213,  213,
      213,  213,  213,  213,  213,  213,    0,  213,  213,  213,
      213,    0,  213,  213,  213,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,    0,  215,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  230,  231,  232,  233,  234,  231,  234,  233,  233,
      230,  234,  232,  235,  230,  237,  232,  235,  236,  236,
        0,  238,  236,  238,    0,  237,    0,  238,    0,  237,
      230,  231,  232,  233,  234,  231,  234,  233,  233,  230,
      234,  232,  235,  230,  237,  232,  235,  236,  236,  241,
      238,  236,  238,  239,  237,  239,  238,  246,  237,  239,
      240,  240,  241,  242,  240,  243,  241,  242,  242,  244,
      246,    0,  243,  244,  246,  243,    0,  243,  241,    0,
        0,  243,  239,  243,  239,    0,  246,    0,  239,  240,

      240,  241,  242,  240,  243,  241,  242,  242,  244,  246,
        0,  243,  244,  246,  243,  249,  243,  249,  245,  245,
      243,  249,  243,  245,  247,  247,  248,  248,  250,  247,
      251,  248,    0,    0,  251,  251,  250,  257,    0,  257,
      250,    0,    0,  257,  249,    0,  249,  245,  245,    0,
      249,    0,  245,  247,  247,  248,  248,  250,  247,  251,
      248,  252,    0,  251,  251,  250,  257,  253,  257,  250,
      362,  252,  257,  364,  254,  252,  253,  254,  255,  255,
      253,  258,  362,  255,  254,  364,  254,  256,  254,  256,
      252,    0,  256,  256,  258,  259,  253,  258,  258,  259,

      252,  259,    0,  254,  252,  253,  254,  255,  255,  253,
      258,  362,  255,  254,  364,  254,  256,  254,  256,    0,
        0,  256,  256,  258,  259,    0,  258,  258,  259,  260,
      259,  261,  262,    0,  260,  260,  262,  262,  260,  268,
      261,    0,  269,  268,  261,    0,  269,  270,  271,    0,
        0,  270,  271,  463,  463,  463,  463,  463,  260,    0,
      261,  262,    0,  260,  260,  262,  262,  260,  268,  261,
        0,  269,  268,  261,  266,  269,  270,  271,    0,    0,
      270,  271,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  266,    0,    0,    0,    0,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,    0,    0,    0,    0,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  272,    0,  266,  266,  272,
      266,  266,  266,  266,  266,  266,  266,  266,  273,  266,
      266,  266,  273,  274,    0,    0,    0,  274,  487,  487,
      487,  487,  487,    0,  272,    0,    0,    0,  272,  322,
      322,  322,  322,  322,  322,  322,    0,  273,  630,    0,

      630,  273,  274,  630,    0,    0,  274,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  289,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,    0,    0,  289,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,    0,    0,  289,  387,  387,  387,  387,

      387,  387,  387,    0,    0,  289,    0,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  306,  306,  306,  306,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  318,  318,  318,
      318,  318,  318,  318,  318,    0,  318,  318,  318,  318,
        0,  318,  318,  318,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,    0,  320,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  349,  349,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  351,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  438,
      438,  438,  438,  438,  438,  438,  351,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,    0,    0,  351,  545,  545,  545,  633,  545,  633,

        0,    0,  633,  351,    0,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      365,  368,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  365,  368,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  365,  368,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  383,  383,  383,  383,  383,
      383,  383,  383,    0,  383,  383,  383,  383,    0,  383,
      383,  383,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,    0,  385,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,

      386,  386,  386,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  415,  415,  415,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  422,  422,  422,  422,  422,  422,

      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  430,  430,  430,  430,

      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  434,  434,  434,
      434,  434,  434,  434,  434,    0,  434,  434,  434,  434,
        0,  434,  434,  434,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,    0,  436,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  457,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  464,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  467,  468,  469,  470,  467,  468,
      469,  470,  471,  472,  473,  474,  471,  472,  473,  474,
      475,  476,    0,    0,  475,  476,  547,  547,  547,  547,
      547,  547,  547,  467,  468,  469,  470,  467,  468,  469,
      470,  471,  472,  473,  474,  471,  472,  473,  474,  475,
      476,    0,    0,  475,  476,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  478,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  484,  484,  484,  484,  484,  484,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  490,
      491,  492,  493,  494,  495,  492,  629,  494,  490,  496,
      491,  497,  490,    0,  491,  493,    0,  495,  629,  493,

      497,  495,  496,    0,  497,    0,  496,    0,  490,  491,
      492,  493,  494,  495,  492,    0,  494,  490,  496,  491,
      497,  490,    0,  491,  493,  498,  495,  629,  493,  497,
      495,  496,    0,  497,  499,  496,  498,    0,  499,  499,
      498,  500,  501,  500,  502,  500,  501,  503,  502,  506,
        0,  503,  503,    0,  498,  504,  504,  505,  506,  505,
      504,  505,  506,  499,    0,  498,    0,  499,  499,  498,
      500,  501,  500,  502,  500,  501,  503,  502,  506,  509,
      503,  503,  509,  509,  504,  504,  505,  506,  505,  504,
      505,  506,  507,  507,  510,  508,  507,  508,    0,  510,

        0,  508,  511,  510,  513,  511,  511,  512,  509,  513,
        0,  509,  509,  513,  512,  635,    0,  635,  512,    0,
      635,  507,  507,  510,  508,  507,  508,  514,  510,    0,
      508,  511,  510,  513,  511,  511,  512,  514,  513,  515,
      516,  514,  513,  512,  517,    0,  517,  512,  518,  516,
      517,  515,  518,  516,  519,  515,  514,    0,  520,  519,
        0,    0,    0,  519,  521,    0,  514,  520,  515,  516,
      514,  520,  521,  517,    0,  517,  521,  518,  516,  517,
      515,  518,  516,  519,  515,  522,  523,  520,  519,  522,
        0,  522,  519,  521,  525,  523,  520,  526,    0,  523,

      520,  521,  524,  525,  524,  521,  526,  525,  524,  527,
      526,    0,  528,  527,  522,  523,  527,    0,  522,    0,
      522,  528,    0,  525,  523,  528,  526,    0,  523,    0,
      530,  524,  525,  524,  530,  526,  525,  524,  527,  526,
      529,  528,  527,  529,  529,  527,    0,  531,  532,  532,
      528,  556,  532,  557,  528,  556,  531,  557,  533,  530,
      531,  533,  533,  530,  534,  535,  558,  534,  534,  529,
      558,  535,  529,  529,    0,  535,  531,  532,  532,    0,
      556,  532,  557,    0,  556,  531,  557,  533,    0,  531,
      533,  533,    0,  534,  535,  558,  534,  534,    0,  558,

      535,    0,    0,    0,  535,  536,  536,    0,  536,  569,
      569,  569,  569,  569,  569,  569,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
        0,    0,    0,    0,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,    0,
        0,    0,    0,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,    0,
      536,  536,  536,    0,  536,  536,  536,  536,  536,  536,

      536,  536,    0,  536,  536,  536,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  543,  543,
      543,  543,  543,  543,  543,  543,    0,  543,  543,  543,
      543,    0,  543,  543,  543,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  559,  560,    0,    0,  559,  560,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  565,    0,    0,
        0,    0,  565,  559,  560,    0,    0,  559,  560,  562,

      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  563,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,    0,  565,    0,    0,    0,    0,  565,
        0,    0,    0,  565,  575,  575,  575,  575,  575,  575,
        0,  565,    0,    0,  565,    0,  565,  601,  601,  601,
      601,  601,    0,  563,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,    0,    0,    0,    0,

      563,  617,  617,  617,  617,  617,  617,  617,    0,    0,
      563,    0,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  574,

      576,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,    0,    0,  576,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,    0,  634,  576,  623,  623,  623,  623,  623,
      623,    0,    0,    0,  576,  634,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  580,  659,  659,  659,  659,  659,    0,
        0,    0,    0,  580,  634,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  592,  592,  592,  592,  592,  592,  592,

      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  598,  598,  598,  598,  598,

      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  611,  613,    0,    0,    0,    0,
      613,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,    0,    0,    0,    0,  611,  690,  690,  690,
      690,  690,  613,    0,    0,  701,  702,  613,  703,  701,
      702,  613,  703,  793,  793,  793,  793,  793,    0,  613,
        0,    0,  613,    0,  613,  768,  768,  768,  768,  768,
      768,  768,    0,  611,  701,  702,    0,  703,  701,  702,

        0,  703,    0,  611,    0,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,

      624,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  903,  903,  903,  903,  903,
        0,    0,  624,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,    0,    0,  624,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  624,
        0,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  624,  624,  624,  624,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  669,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  764,  764,  764,  764,  764,  764,  764,  764,    0,
      764,  764,  764,  764,  669,  764,  764,  764,    0,    0,

        0,    0,    0,    0,  669,    0,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  704,  705,    0,    0,  704,  705,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  708,    0,    0,    0,  708,  711,
      704,  705,  711,  711,  704,  705,  707,  707,  707,  707,

      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  709,  710,    0,  708,  711,  709,
      718,  711,  711,  709,  718,  710,  712,    0,  713,  710,
      712,  712,  713,  713,  714,    0,  715,    0,  714,  714,
      715,  715,  716,  709,  710,  716,  716,  719,  709,  718,
        0,  719,  709,  718,  710,  712,    0,  713,  710,  712,
      712,  713,  713,  714,    0,  715,    0,  714,  714,  715,
      715,  716,  717,  720,  716,  716,  719,  717,  721,  722,
      719,  717,  720,  722,  723,  724,  720,  721,  724,  724,
      723,  721,  725,    0,  723,  727,  725,    0,    0,    0,

      727,  717,  720,    0,  727,    0,  717,  721,  722,  726,
      717,  720,  722,  723,  724,  720,  721,  724,  724,  723,
      721,  725,  726,  723,  727,  725,  726,  728,    0,  727,
      729,  728,  728,  727,  733,  729,  730,  730,  726,  729,
      731,  730,  732,  733,  731,  731,  732,  733,  734,  735,
        0,  726,    0,  735,    0,  726,  728,    0,  734,  729,
      728,  728,  734,  733,  729,  730,  730,    0,  729,  731,
      730,  732,  733,  731,  731,  732,  733,  734,  735,  736,
      737,  737,  735,    0,  737,  740,  738,  734,  736,  738,
      738,  734,  736,  739,  742,  741,  740,    0,  739,  741,

      740,  743,  739,    0,  741,  743,  743,  742,  736,  737,
      737,  742,    0,  737,  740,  738,  746,  736,  738,  738,
      746,  736,  739,  742,  741,  740,  744,  739,  741,  740,
      743,  739,    0,  741,  743,  743,  742,  744,  745,    0,
      742,  744,    0,  745,  748,  746,  747,  745,  748,  746,
      747,  747,  749,  752,  750,  744,  749,  752,  796,  849,
        0,    0,  796,  849,  750,  751,  744,  745,  750,    0,
      744,    0,  745,  748,  751,  747,  745,  748,  751,  747,
      747,  749,  752,  750,    0,  749,  752,  796,  849,    0,
        0,  796,  849,  750,  751,    0,    0,  750,    0,    0,

        0,    0,    0,  751,    0,    0,    0,  751,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  761,  761,  761,  761,  761,  761,  761,

      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,    0,
      766,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  771,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  798,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  805,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  819,  819,  819,  819,  819,  819,  819,  819,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  838,  838,  838,  838,  838,  838,  838,

      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  850,  851,  852,  854,  850,  851,  852,  853,  856,
      855,  853,  853,  854,  855,  858,  857,  854,  856,  858,
      855,  857,  856,  859,  861,  857,    0,  859,  861,    0,
      850,  851,  852,  854,  850,  851,  852,  853,  856,  855,

      853,  853,  854,  855,  858,  857,  854,  856,  858,  855,
      857,  856,  859,  861,  857,  860,  859,  861,  860,  860,
      862,  865,  863,  864,  862,  862,  863,  864,  866,  867,
      865,  868,  866,  869,  865,  868,  869,  869,    0,  870,
        0,    0,  867,  870,  860,    0,  867,  860,  860,  862,
      865,  863,  864,  862,  862,  863,  864,  866,  867,  865,
      868,  866,  869,  865,  868,  869,  869,    0,  870,  871,
      875,  867,  870,  871,  871,  867,  872,  873,  874,  875,
      872,  873,  874,  875,  876,  877,    0,  874,  876,  879,
        0,    0,    0,  879,  879,    0,  877,    0,  871,  875,

      877,    0,  871,  871,    0,  872,  873,  874,  875,  872,
      873,  874,  875,  876,  877,  878,  874,  876,  879,  880,
        0,    0,  879,  879,  878,  877,    0,  881,  878,  877,
      880,  881,  881,  882,  880,  883,  884,  882,  885,  883,
        0,    0,  885,  928,  878,  884,    0,  928,  880,  884,
        0,    0,    0,  878,    0,    0,  881,  878,    0,  880,
      881,  881,  882,  880,  883,  884,  882,  885,  883,    0,
        0,  885,  928,    0,  884,    0,  928,    0,  884,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  894,  894,  894,  894,

      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  900,  900,

      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,

      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,

      922,  922,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  926,
      929,  927,  929,  931,  929,  927,  926,  927,  930,  932,
      926,    0,  930,  933,  934,  931,    0,  933,  934,  931,
      932,    0,    0,  936,  932,    0,  936,  936,  926,  929,
      927,  929,  931,  929,  927,  926,  927,  930,  932,  926,
        0,  930,  933,  934,  931,    0,  933,  934,  931,  932,
        0,  935,  936,  932,  935,  936,  936,  937,  935,  938,
      939,  937,  937,  938,  939,  940,  941,  942,    0,  944,
      941,    0,  944,  944,    0,  945,    0,  942,  940,  945,

      935,  942,  940,  935,    0,    0,  937,  935,  938,  939,
      937,  937,  938,  939,  940,  941,  942,    0,  944,  941,
      943,  944,  944,  946,  945,    0,  942,  940,  945,  943,
      942,  940,  946,  943,  947,  948,  946,  949,  947,  948,
      949,  949,    0,    0,    0,    0,    0,    0,    0,  943,
        0,    0,  946,    0,    0,    0,    0,    0,  943,    0,
        0,  946,  943,  947,  948,  946,  949,  947,  948,  949,
      949,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,

      956,  956,  956,  956,  956,  958,  959,  960,  962,  958,
      961,  963,  962,  962,  964,  963,  960,  959,  965,  961,
      960,  959,  966,  961,    0,    0,  966,  964,    0,  965,
        0,  964,    0,  965,  958,  959,  960,  962,  958,  961,
      963,  962,  962,  964,  963,  960,  959,  965,  961,  960,
      959,  966,  961,    0,    0,  966,  964,  967,  965,  967,
      964,  968,  965,  967,  969,  968,  970,  970,  969,  971,
      972,  970,  974,  971,  976,    0,  974,  975,  976,  972,
      977,  975,  975,  972,  977,  978,  967,    0,  967,  978,
      968,    0,  967,  969,  968,  970,  970,  969,  971,  972,

      970,  974,  971,  976,    0,  974,  975,  976,  972,  977,
      975,  975,  972,  977,  978,  979,  980,  979,  978,  981,
      982,  979,  980,  981,  982,  983,  980,  984,  985,  986,
      987,  984,  985,  988,  987,  983,  989,  988,  986,  983,
      989,    0,  986,    0,  979,  980,  979,    0,  981,  982,
      979,  980,  981,  982,  983,  980,  984,  985,  986,  987,
      984,  985,  988,  987,  983,  989,  988,  986,  983,  989,
        0,  986,  991,    0,  991,  991,  991,  992,    0,  992,
      992,  992,  993,    0,  993,  993,  993,  994,  994,  994,
      996,  996,  996,  996,  996,  997,  997,  997,  997,  997,

      998,  998,  999,    0,  999,  999,  999, 1000,    0, 1000,
     1000, 1000, 1001,    0, 1001, 1001, 1001, 1002, 1002, 1002,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990
    } ;

static yyconst flex_int16_t yy_rule_linenum[100] =
    {   0,
      178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
      188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
      198,  199,  200,  201,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  220,  221,  222,  223,  224,  225,  226,  227,
      228,  229,  230,  231,  232,  233,  234,  235,  236,  237,
      238,  239,  240,  241,  242,  243,  244,  245,  246,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  262,  263,  264,  265,  266,  267,
      268,  269,  270,  271,  272,  273,  274,  275,  276

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/** \file SPARQLfedScanner.ll Define the Flex lexical scanner */
#line 5 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 57 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* START patterns for SPARQLfed terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 3230 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 177 "lib/SPARQLfedScanner.lpp"

#line 3394 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 991 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 990 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 100 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 100 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 101 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 178 "lib/SPARQLfedScanner.lpp"
{ /* yylloc->step(); @@ needed? useful? */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 179 "lib/SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 180 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 181 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 182 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 183 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 184 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 185 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 186 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 187 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 188 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 189 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 190 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 191 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 192 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 193 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 194 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 195 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 196 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 197 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 198 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 199 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 200 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 201 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 202 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 203 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 204 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 205 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 206 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 207 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 208 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 209 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 210 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 211 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 212 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 213 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 214 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 215 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 216 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 217 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 218 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 219 "lib/SPARQLfedScanner.lpp"
{return token::IT_NULL;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 220 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 221 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 222 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 223 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 224 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 225 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 226 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 227 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 228 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 229 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 230 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 231 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 232 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 233 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 234 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 235 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 236 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 237 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 238 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 239 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 240 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 241 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 242 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 243 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 244 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 245 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 246 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 247 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 248 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 249 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 250 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 251 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 252 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 253 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 254 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 255 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 256 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 257 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 258 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 259 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 260 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{yylval->p_POS = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{yylval->p_POS = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 278 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
ECHO;
	YY_BREAK
#line 4012 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 991 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 991 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 990);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 279 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


