#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1369] =
    {   0,
        0,    0,  180,  178,    2,    1,    1,   71,  178,    2,
      178,  178,  178,    9,   10,   20,   70,   11,   88,    4,
       67,  159,  153,   38,   82,    3,   83,   69,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,   72,   73,   68,  178,   66,  178,  178,    7,    5,
        8,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
        2,    1,   81,    0,  169,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  157,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,  168,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  172,  177,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  162,   37,    0,  165,   12,
      160,  160,  159,    0,  154,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   84,  152,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   85,  156,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  158,    0,
        0,  153,    0,    0,    0,    0,    0,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  129,   86,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   46,  119,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  173,  149,    0,    0,    0,   79,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  169,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  157,  157,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  157,  157,  157,  157,  157,  157,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  168,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  177,  177,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  177,  177,  177,
      177,  177,  177,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  174,  163,  163,    0,
      166,  166,    0,    0,  160,    0,    0,  161,  154,    0,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  154,  154,  154,  154,  154,  154,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  156,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  156,  156,  156,  156,  156,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   98,   45,   58,   77,   31,   23,
      146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   94,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  145,    0,    0,  144,    0,    0,    0,
       87,  120,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
        0,  143,    0,    0,    0,    0,    0,   95,    0,    0,
        0,    0,    0,    0,  155,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   13,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    0,  157,  157,
      157,  157,  157,  157,  157,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  157,  157,
      157,  157,  157,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  177,  177,  177,  177,  177,  177,  177,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  177,  177,  177,  177,  177,    0,    0,    0,
      163,    0,    0,  164,    0,  166,    0,    0,  167,    0,
      161,    0,  161,  154,  154,  154,  154,  154,  154,  154,
      154,  154,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  154,  154,  154,  154,  154,
        0,    0,    0,    0,    0,    0,  156,  156,  156,  156,
      156,  156,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  156,  156,  156,  156,
      156,    0,    0,  158,    0,    0,    0,    0,    0,    0,
        0,   14,   62,    0,    0,   99,    0,    0,    0,    0,

        0,   48,    0,    0,    0,    0,    0,   32,    0,   43,
        0,   76,    0,    0,    0,   24,    0,    0,    0,    0,
        0,   40,    0,    0,    0,    0,    0,   90,    0,    0,
       39,    0,    0,    0,    0,   47,    0,    0,    0,    0,
        0,    0,   97,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  121,
        0,    0,   52,  112,  155,    0,  155,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,

      155,  155,  155,  155,  155,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  157,  157,  157,  157,  157,    0,    0,
      157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  177,  177,  177,  177,  177,    0,    0,  177,    0,
      164,    0,  164,    0,  167,    0,  167,  154,  154,  154,
      154,  154,    0,    0,  154,  156,  156,  156,  156,  156,
        0,    0,  156,    0,   96,   93,   41,    0,    0,    0,
        0,  141,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  100,   57,   27,    0,  115,    0,    0,  133,    0,
        0,  134,    0,  105,   33,  123,    0,   63,    0,  113,
       25,    0,    0,   30,    0,   59,    0,  138,  101,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  131,    0,    0,    0,    0,    0,    0,
        0,  104,   36,   64,    0,   55,    0,   26,  155,  155,
      155,  155,  155,  155,  155,  155,  155,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      155,  155,  155,  155,  155,    0,    0,  151,    0,    0,
      171,    0,    0,    0,    0,  157,  170,    0,    0,    0,

        0,  177,  154,  156,    0,  102,    0,    0,   44,    0,
        0,   53,    0,    0,    0,  140,   65,    0,   29,   54,
        0,    0,    0,    0,    0,    0,   34,    0,   15,    0,
        0,  147,    0,   16,    0,    0,  124,    0,    0,    0,
       42,   75,    0,    0,    0,    0,  103,    0,    0,  139,
        0,    0,   35,  155,  155,  155,  155,  155,    0,    0,
      155,    0,  175,    0,    0,  176,    0,    0,    0,    0,
        0,   56,    0,    0,    0,    0,    0,    0,  135,    0,
        0,    0,   74,  116,    0,   18,    0,  117,    0,   61,
        0,    0,    0,    0,    0,  109,  130,    0,  122,    0,

        0,  155,    0,    0,  128,    0,  107,   92,    0,    0,
       22,   17,    0,    0,    0,    0,    0,    0,   60,  132,
        0,  125,  126,  127,  111,    0,    0,  118,    0,    0,
        0,   21,    0,    0,    0,    0,    0,  136,  137,    0,
      148,  110,  108,   78,    0,    0,    0,    0,    0,    0,
        0,    0,   50,    0,    0,    0,   49,   91,   51,    0,
      142,    0,    0,    0,    0,    0,  106,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   10,   10,   94,   95,   96,
       97,   97,   97,   98,   99,   99,   99,   99,   99,  100,
      101,   99,  102,  103,  104,  105,  104,  106,  104,  104,
      107,  108,  109,  109,  109,  109,  109,  109,  109,  110,
      110,  110,  110,  111,  111,  111,  111,  111,  111,  111,
      111,  112,  111,  111,  111,  113,  113,  113,  113,  114,
      113,  113,  115,  116,  116,  116,  116,  116,  116,  117,
      118,  119,  119,  120,  121,  122,  122,  122,  122,  122,

      122,  122,  122,  123,  124,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  126,  127,  128,  129,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  132,  133,  134,
      135,  135,  135,  136,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119
    } ;

static yyconst flex_int32_t yy_meta[137] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    3,    3,
        1,    3,    3,    3,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        3,    1,    3,    1,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    7,    7,    7,    7,    7,    7,    7,

        7,    8,    7,    7,    7,    7,    9,    7,    7,    7,
        7,    7,    7,    7,    9,    7,   10,   11,   12,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1715] =
    {   0,
        0,    0, 1969, 9696,  135, 9696, 1933, 1878,  134,   36,
      250, 1893,  374,  141, 9696,  490,  155, 9696,  166,  179,
     9696,  368,  605, 9696,  709, 9696, 1830,  825,    0,  943,
      363,  706, 1043, 1084, 1113, 1154,  378, 1202,  731, 1253,
     1298, 1313, 1361, 1402, 1427, 1478, 1172, 1521, 1361, 1539,
     1574,  145, 9696, 1650, 1670,    0, 1591, 1627, 9696, 1606,
     9696,    0,    0,  115,  124,    0,  114,    0,  126,  124,
        0,  133,    0,  356, 1594,    0, 1624,  168, 1631,    0,
      137, 9696, 9696, 1743, 1672,  742,    0,    0,    0,  367,
        0, 1657,    0, 1664,    0, 1006, 1686,    0,    0,    0,

     1200,    0, 1729,    0, 1777,    0, 1324, 1875,    0,    0,
     1441, 1695,    0,  373,    0,  290,  406,    0, 1736,    0,
     1060, 1580,    0, 1917,  523, 1924,    0, 9696, 2031, 1629,
     2037,    0,    0,    0, 1940,    0, 1965,    0, 1972,    0,
     1555,  791, 9696, 2147,    0,    0, 2028, 2040,    0,  741,
        0,  291,  651,    0, 2173,    0, 1589, 1532,    0, 2198,
      862, 2205,    0,  135, 2303, 2313, 9696, 2321, 2333, 9696,
     2341, 2364, 2374, 2394, 2427,    0,    0, 2329, 2341,    0,
     1030,    0,  294, 1070,    0, 2453,    0, 1997, 1493,    0,
     2478, 1152, 2485,    0, 2513, 2571, 9696,    0,    0,    0,

     2495,    0, 2556,    0, 2605,    0, 2522, 9696, 2703,    0,
        0, 2580, 2745,    0, 1385,    0,  296, 1162,    0, 2738,
        0, 2763, 1490,    0, 2765, 1244, 2778,    0, 1562, 2879,
     1520, 2994,    0,  231,  272,  265,  254,  380,  381, 1452,
        0, 3036,    0, 3045,    0, 1685, 1415,    0,  326,  352,
     1726,    0, 3038,    0, 3063, 1434,    0, 3065, 1274, 3078,
        0,  382,  414,  473,  496,    0,  508,  514, 3161,  543,
      693, 1525,  556,  560,  628,  624,  622,  694,  701, 1048,
      704,  706,    0,  718,  842, 3162,  838,  852,  841,  912,
      946, 1497,  957,  957, 1032,  959, 1032, 1044, 1040, 1058,

     1094, 1092, 1175, 1094, 1111, 1410, 1145, 1147, 1168, 1181,
     1150,    0,    0, 1164, 1542, 1161, 1209, 1224, 1227, 1253,
     1240, 1259, 1903, 9696, 9696, 3227, 1431, 1388, 9696,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   97, 1742,
        0, 1367,  716,    0, 1376,    0,    0,    0, 2030,    0,
        0, 9696, 3356,    0, 1405,    0,    0,    0,    0,    0,
        0,    0,    0, 1390,    0,    0,    0,    0,    0,    0,
        0, 3472,    0, 1356,    0, 3124,    0, 3270,    0, 2063,
     1321,    0,  353, 1576,    0, 3263,    0, 3143, 1317,    0,
     3288, 1672, 3295,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  134, 2261,    0,    0, 1315,    0,    0,    0,
     2343,    0,    0, 9696, 3596,    0, 1332,    0,    0,    0,
        0,    0,    0,    0, 3712,    0, 1300,    0, 3325,    0,
     3334,    0, 2511, 1193,    0,  359, 1982,    0, 3327,    0,
     3352, 1211,    0, 3515, 2294, 3522,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  269, 2553,    0,    0, 1193,
        0,    0,    0, 2570,    0,    0, 1268, 3620, 3629, 3649,
     3827, 3835, 3679, 3855, 3863, 3886, 3427, 3657, 3916,    0,
        0, 1188,    0, 3821,    0, 3830,    0, 2619, 1157,    0,
      692,  708, 2796,    0, 3942,    0, 3967, 1176,    0, 3969,

     2912, 3982,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  320, 3087,    0,    0, 1167,    0,    0,    0, 3117,
        0,    0,    0, 1197,    0,    0,    0,    0,    0,    0,
        0, 4080,    0, 1131,    0, 4122,    0, 4131,    0, 3346,
     1104,    0,  713, 3357,    0, 4124,    0, 4149, 1119,    0,
     4151, 3390, 4164,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  624, 3595,    0,    0, 1115,    0,    0,    0,
     3628,    0,    0,    0, 4265,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1228, 3832,    0,    0, 1108,    0,    0,    0,

     3996,    0,    0, 1256, 1262, 1301, 1292, 1296, 1308, 1306,
     3160, 1302, 1327, 1367, 1371,    0, 1390, 1389, 1414, 1406,
     1414, 1425, 1433, 1436, 1466, 1473, 1476, 1475, 1510, 1523,
     1517, 1531, 1535,    0, 1544, 1578, 1588, 1581, 1587, 1600,
     1625, 1636, 1646,    0, 1171, 1649, 1854, 1883, 1898, 2061,
        0,    0, 2049, 2076, 2168, 2168, 2161, 2172, 2295, 2392,
     2439, 4357, 2439, 2450, 2455, 2708, 1166, 2725, 2714, 4365,
     2714,    0, 2900, 2888, 2902, 2893, 2946,    0, 3006, 3017,
     3002, 3006, 3172, 3209, 4433,    0,    0, 4475, 4484,    0,
     4182,    0, 1192, 3548,    0, 4477,    0, 4330, 1064,    0,

     4502, 3781, 4509,    0, 1073, 1069,    0,    0,    0, 1008,
     1007,    0,    0,    0,    0,    0,    0, 4621, 4751, 4622,
        0,    0,    0, 4525,    0, 4550,    0, 4557,    0, 4613,
     4881,    0,    0,    0, 4657,    0,    0,    0, 4997,    0,
        0,    0,    0,    0,    0,    0,    0, 1411, 4349,    0,
        0, 1038,    0,    0,    0, 4563,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5121, 5246, 4753,    0,    0,
        0, 4614,    0, 4700,    0, 4786,    0, 4621, 5371,    0,
        0,    0, 5487,    0,    0,    0,    0,    0,    0,    0,
        0, 1519, 4581,    0,    0, 1036,    0,    0,    0, 4620,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4745,
     4884, 4818, 4833, 4892, 4905, 4923, 4943, 4913, 4951, 4963,
     5113, 5121, 5129, 5605,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1595, 4712,    0,    0, 1014,    0,
        0,    0, 4734,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 5083,    0,    0,    0, 5720,    0,    0,    0,
        0,    0,    0,    0,    0, 4310, 4749,    0,    0,  999,
        0,    0,    0, 4913,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1073, 5838,    0,    0,    0,    0,    0,
        0,    0,    0, 3248, 3250,    0, 3238, 3466, 3497, 3480,

     3499,    0, 3605, 3719, 3720, 3720, 3722, 3783, 3800,    0,
     3829,    0, 3815, 3830, 3854,    0, 3934, 3927, 3930, 3927,
     4089,    0, 4106, 4099, 4090, 4278, 4283, 4280, 4289, 4330,
        0, 1063, 4363, 4353, 4366,    0, 4380, 4383, 4444, 4443,
     4452, 4443,    0, 4800, 4864, 4886, 4908, 5011, 5010, 5022,
     5009, 5085, 2083, 5109, 5106, 5120, 5122, 5109, 5115, 5129,
     5112, 5112, 5114, 5110, 5132, 5188, 5181, 5192, 5190,    0,
     5193, 5194,    0,    0, 5956,    0,    0,  968,    0, 5079,
        0, 5171,    0, 5161,  848,    0, 1518, 3579, 5167,    0,
     5176,    0, 5201,  863,    0, 5225, 4883, 5281,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  718, 5184,    0,
        0,  851,    0,    0,    0, 5222,    0,    0, 6074,  874,
     5306, 5311,  790, 6203,    0,  762,    0,    0,    0,    0,
        0,    0,    0, 6319,    0,    0,    0,    0,    0,    0,
        0, 6443,    0,  743,    0,    0,    0,    0,    0,    0,
        0, 6559,    0,    0,    0,    0,    0,    0,    0, 5328,
     5413, 5421, 5429, 5437, 5453, 6190, 6198, 6677,    0,    0,
        0,    0,    0,    0,    0, 6792,    0,    0,    0,    0,
        0,    0,    0, 6910,    0,    0,    0, 5258, 5258, 5261,
     5358,    0, 5446, 5428, 5441, 5450, 5475, 5472, 5508, 5497,

     5554,    0,    0,  738, 5568,    0, 5583, 5589,    0, 5599,
     5626,    0, 5688,    0,    0, 9696, 5699,    0, 5712,    0,
        0, 5699, 5735,    0, 5755,    0, 5799,    0,    0, 5830,
     5831, 5833, 5845, 5921, 5950,  785,  753,  735,  735, 5935,
     5937, 5963, 6034,    0, 6067, 6058, 6059, 6099, 6162, 6175,
     6178,    0,    0,    0, 6189,    0, 6177,    0, 7028,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4585,
     5244,    0,    0,  656,    0,    0,    0, 5353,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4588, 6137,
     9696, 7157,    0,    0,    0, 7273, 9696, 7397,    0,    0,

        0, 7513, 7631, 7746, 6194,    0, 6178, 6185,    0, 6186,
     6184, 2043, 6202, 6202,  736,    0,    0, 6203,    0, 3412,
     6196, 6191, 6192, 6192, 6194, 6195,    0, 6213,    0, 6211,
     6200,    0, 6200,    0, 6200, 6215, 9696,  710,  703,  599,
        0,    0, 6216, 6211, 6213, 6239,    0, 6235, 6249,    0,
     6240, 6238,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  397,    0,  347,  311,    0,  296, 6252, 6312, 6298,
     6312,    0, 6454, 6313, 6358,  339, 6388, 6458,    0, 6415,
     6420, 6427,    0,    0, 6419,    0, 6421,    0, 6420,    0,
      376,  370,  361, 6419, 6420,    0,    0, 6419,    0, 6434,

     6436,    0, 6415, 6420,    0, 6423,    0,    0, 6442, 6439,
        0,    0,  332, 6434, 6450, 6440, 6450, 6446,    0,    0,
     6438, 9696, 9696, 9696,    0, 6452, 6471,    0, 6486, 6200,
     6199,    0, 6504, 6519, 6519, 6524, 6537,    0,    0, 6553,
        0,    0,    0,    0,  157,  125, 6584, 6570, 6628, 6646,
     6673, 6657, 9696, 6671, 6686, 6742, 9696,    0, 9696,  183,
        0,  121,  163, 6768, 6772, 6781, 9696, 9696, 7881, 7892,
     7903, 7912,  146, 7917, 7922, 7927, 7932, 7937, 7942, 7947,
     7952, 7957, 7962, 7973, 7978, 7982, 7985, 7990, 7995, 8000,
     8011, 8016, 8020, 8023, 8028, 8033, 8038, 8043, 8048, 8053,

     8058, 8063, 8068, 8073, 8078, 8083, 8088, 8099, 8104, 8108,
     8111, 8116, 8121, 8126, 8131, 8136, 8141, 8146, 8151, 8156,
     8161, 8166, 8171, 8176, 8181, 8186, 8191, 8196, 8201, 8206,
     8211, 8216, 8221, 8226, 8235, 8240, 8244, 8247, 8252, 8257,
     8262, 8267, 8272, 8277, 8282, 8287, 8292, 8297, 8302, 8307,
     8312, 8320, 8320, 8325, 8330, 8335, 8340, 8345, 8350, 8355,
     8360, 8365, 8370, 8375, 8380, 8385, 8390, 8395, 8400, 8405,
     8410, 8421, 8426, 8431, 8436, 8441, 8446, 8451, 8456, 8461,
     8466, 8471, 8476, 8481, 8486, 8491, 8496, 8501, 8506, 8511,
     8516, 8521, 8526, 8531, 8536, 8541, 8546, 8551, 8556, 8561,

     8566, 8571, 8576, 8587, 8592, 8597, 8602, 8607, 8612, 8617,
     8622, 8627, 8632, 8637, 8642, 8647, 8652, 8657, 8662, 8667,
     8672, 8677, 8682, 8687, 8692, 8697, 8702, 8707, 8712, 8717,
     8722, 8727, 8732, 8737, 8742, 8747, 8752, 8757, 8762, 8767,
     8772, 8777, 8782, 8787, 8792, 8797, 8802, 8807, 8812, 8817,
     8822, 8827, 8832, 8837, 8842, 8847, 8852, 8857, 8862, 8867,
     8872, 8877, 8882, 8887, 8892, 8897, 8902, 8907, 8912, 8917,
     8922, 8927, 8932, 8939, 8939, 8944, 8949, 8954, 8959, 8964,
     8969, 8974, 8979, 8984, 8989, 8994, 8999, 9004, 9009, 9014,
     9019, 9024, 9029, 9040, 9045, 9049, 9052, 9057, 9062, 9067,

     9078, 9083, 9088, 9099, 9104, 9109, 9114, 9119, 9124, 9129,
     9134, 9139, 9144, 9149, 9154, 9165, 9170, 9174, 9177, 9182,
     9187, 9192, 9203, 9208, 9213, 9218, 9223, 9228, 9233, 9238,
     9243, 9248, 9253, 9258, 9263, 9268, 9273, 9278, 9283, 9288,
     9293, 9298, 9303, 9312, 9317, 9322, 9327, 9332, 9337, 9342,
     9347, 9352, 9357, 9362, 9367, 9375, 9375, 9380, 9385, 9390,
     9395, 9400, 9405, 9410, 9415, 9420, 9425, 9430, 9435, 9440,
     9445, 9450, 9455, 9460, 9465, 9470, 9475, 9486, 9491, 9496,
     9501, 9506, 9511, 9516, 9521, 9532, 9537, 9542, 9547, 9552,
     9557, 9562, 9567, 9572, 9577, 9582, 9587, 9592, 9597, 9602,

     9607, 9612, 9617, 9622, 9627, 9638, 9643, 9648, 9659, 9664,
     9669, 9674, 9679, 9684
    } ;

static yyconst flex_int16_t yy_def[1715] =
    {   0,
     1368,    1, 1368, 1368, 1368, 1368, 1368, 1368, 1369, 1370,
     1368, 1368, 1371, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1372, 1368, 1368, 1368, 1373, 1368,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   46,   30,   46,   46,
       46, 1368, 1368, 1368, 1368,   30,   46,   46, 1368, 1368,
     1368, 1374, 1375, 1374, 1374, 1376, 1377, 1378, 1378, 1368,
     1379, 1368, 1380, 1381, 1381, 1382, 1368, 1368, 1368, 1383,
     1368, 1368, 1368, 1384, 1368, 1368, 1385, 1386, 1387, 1368,
     1388, 1368, 1389, 1368, 1390, 1368, 1391, 1392, 1393, 1394,

     1368, 1395, 1368, 1396, 1368, 1397, 1368, 1368, 1398, 1399,
     1398, 1398, 1400, 1401, 1402, 1402, 1368, 1403, 1368, 1404,
     1405, 1405, 1406, 1368, 1368, 1368, 1407, 1368, 1408, 1368,
     1368, 1409, 1410, 1411, 1368, 1412, 1368, 1413, 1368, 1414,
     1368, 1368, 1368, 1368, 1415, 1416, 1415, 1415, 1417, 1418,
     1419, 1419, 1368, 1420, 1368, 1421, 1422, 1422, 1423, 1368,
     1368, 1368, 1424, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1425, 1426, 1425, 1425, 1427,
     1428, 1429, 1429, 1368, 1430, 1368, 1431, 1432, 1432, 1433,
     1368, 1368, 1368, 1434, 1435, 1435, 1368, 1436, 1437, 1438,

     1368, 1439, 1368, 1440, 1368, 1441, 1368, 1368, 1368, 1442,
     1443, 1442, 1442, 1444, 1445, 1446, 1446, 1368, 1447, 1368,
     1448, 1449, 1449, 1450, 1368, 1368, 1368, 1451, 1452, 1368,
      230, 1368,  230,  230,  230,  230,  230,  230,  230, 1453,
     1454, 1453, 1453, 1453, 1455, 1456, 1368, 1457, 1457, 1457,
     1458, 1459, 1368, 1460, 1461, 1461, 1462, 1368, 1368, 1368,
     1463,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230, 1368, 1368, 1368, 1368,  230,  230, 1368,  230,
      230,  230,  230,  230,  230,  230, 1464, 1465, 1466, 1466,
     1466, 1466, 1466, 1467, 1468, 1468, 1466, 1469, 1368, 1470,
     1471, 1368, 1472, 1473, 1368, 1474, 1475, 1474, 1474, 1476,
     1477, 1478, 1479, 1368, 1480, 1481, 1480, 1480, 1482, 1483,
     1484, 1368,  372, 1485, 1486, 1485, 1485, 1485, 1487, 1488,
     1368, 1489, 1489, 1490, 1491, 1368, 1492, 1493, 1493, 1494,
     1368, 1368, 1368, 1495,  372,  372,  372,  372,  372,  372,

     1496, 1497, 1498, 1498, 1498, 1499, 1500, 1500, 1498, 1501,
     1368, 1502, 1503, 1368, 1504, 1505, 1368, 1506, 1507, 1506,
     1506, 1508, 1509, 1510, 1368,  425, 1511, 1512, 1511, 1511,
     1511, 1513, 1514, 1368, 1515, 1515, 1516, 1517, 1368, 1518,
     1519, 1519, 1520, 1368, 1368, 1368, 1521,  425,  425,  425,
      425,  425,  425, 1522, 1523, 1524, 1524, 1524, 1525, 1526,
     1526, 1524, 1527, 1368, 1528, 1529, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  479,
      479, 1530, 1531, 1530, 1530, 1530, 1532, 1533, 1368, 1534,
     1534, 1534, 1535, 1536, 1368, 1537, 1538, 1538, 1539, 1368,

     1368, 1368, 1540,  479,  479,  479,  479,  479,  479, 1541,
     1542, 1543, 1543, 1543, 1544, 1545, 1545, 1543, 1546, 1368,
     1547, 1548, 1549, 1368, 1550, 1551, 1550, 1550, 1552, 1553,
     1554, 1368,  532, 1555, 1556, 1555, 1555, 1555, 1557, 1558,
     1368, 1559, 1559, 1560, 1561, 1368, 1562, 1563, 1563, 1564,
     1368, 1368, 1368, 1565,  532,  532,  532,  532,  532,  532,
     1566, 1567, 1568, 1568, 1568, 1569, 1570, 1570, 1568, 1571,
     1368, 1572, 1573, 1574, 1368,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
     1575, 1576, 1577, 1577, 1577, 1578, 1579, 1579, 1577, 1580,

     1368, 1581, 1582,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575, 1368,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575, 1368, 1583, 1584, 1583, 1583, 1585,
     1586, 1587, 1587, 1368, 1588, 1368, 1589, 1590, 1590, 1591,

     1368, 1368, 1368, 1592,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575, 1593, 1593, 1594, 1594, 1368,
     1595, 1596, 1597, 1368, 1598, 1368, 1599, 1368, 1600, 1368,
     1601, 1602, 1602, 1603, 1604, 1605, 1605, 1606, 1368,  739,
      739,  739,  739,  739,  739, 1607, 1608, 1609, 1609, 1609,
     1610, 1611, 1611, 1609, 1612, 1368, 1613, 1614,  739,  739,
      739,  739,  739, 1615, 1615, 1616, 1616, 1368, 1617, 1618,
     1619, 1368, 1620, 1368, 1621, 1368, 1622, 1368, 1623, 1624,
     1624, 1625, 1368,  783,  783,  783,  783,  783,  783, 1626,
     1627, 1628, 1628, 1628, 1629, 1630, 1630, 1628, 1631, 1368,

     1632, 1633,  783,  783,  783,  783,  783, 1634, 1634, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368,  824,  824,  824,  824,  824,  824,
      824,  824, 1635, 1636, 1637, 1637, 1637, 1638, 1639, 1639,
     1637, 1640, 1368, 1641, 1642,  824,  824,  824,  824,  824,
     1643, 1643, 1644, 1645, 1645, 1646, 1368,  857,  857,  857,
      857,  857,  857, 1647, 1648, 1649, 1649, 1649, 1650, 1651,
     1651, 1649, 1652, 1368, 1653, 1654,  857,  857,  857,  857,
      857, 1655, 1655, 1656, 1368,  885,  885,  885,  885, 1657,
     1657,  885,  885,  885,  885,  885,  885,  885,  885,  885,

      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885, 1368,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885, 1368,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885, 1368,  975,  975, 1658, 1659, 1658,
     1658, 1658, 1660, 1661, 1368, 1662, 1662, 1662, 1663, 1664,
     1368, 1665, 1666, 1666, 1667, 1368, 1368, 1368, 1668,  975,

      975,  975,  975,  975,  975, 1669, 1670, 1671, 1671, 1671,
     1672, 1673, 1673, 1671, 1674, 1368, 1675, 1676, 1368, 1019,
     1677, 1677, 1019, 1678, 1679, 1368, 1680, 1681, 1680, 1680,
     1682, 1683, 1684, 1368, 1034, 1034, 1034, 1034, 1685, 1685,
     1034, 1686, 1687, 1368, 1688, 1689, 1688, 1688, 1690, 1691,
     1692, 1368, 1052, 1052, 1052, 1052, 1693, 1693, 1052, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1068, 1068,
     1068, 1068, 1694, 1694, 1068, 1368, 1076, 1076, 1076, 1076,
     1695, 1695, 1076, 1368, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1368, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1368, 1368, 1368, 1368, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1368, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1696, 1697, 1698,
     1698, 1698, 1699, 1700, 1700, 1698, 1701, 1368, 1702, 1703,
     1159, 1159, 1159, 1159, 1159, 1704, 1704, 1084, 1705, 1705,
     1368, 1706, 1707, 1707, 1708, 1368, 1368, 1709, 1710, 1710,

     1711, 1368, 1368, 1368, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1368, 1368, 1368, 1368,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1159, 1159, 1159, 1159, 1159, 1712, 1712,
     1159, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1368, 1084, 1084, 1368, 1084, 1368, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1368, 1368, 1368, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1159, 1713, 1713, 1084, 1084, 1084, 1084, 1368, 1368,
     1084, 1084, 1368, 1084, 1368, 1084, 1084, 1084, 1084, 1084,
     1084, 1368, 1368, 1368, 1084, 1084, 1084, 1084, 1084, 1714,
     1714, 1084, 1368, 1368, 1368, 1084, 1368, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1368, 1368, 1368, 1084,
     1368, 1084, 1368, 1368, 1368, 1084, 1368, 1084, 1368, 1368,
     1084, 1368, 1368, 1368, 1368, 1368, 1368,    0, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368
    } ;

static yyconst flex_int16_t yy_nxt[9833] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   39,   51,   39,
       52,    4,   53,   54,   55,   56,   31,   32,   33,   34,
       57,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   58,   48,   49,   50,   39,   51,   39,
       59,   60,   61,    4,   62,   63,   63,   64,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   65,   66,   66,   67,    4,    4,
       68,   69,    4,   70,   71,   72,   73,   74,   75,   76,
       77,    4,   78,   79,   80,    4,   81,   98,   81,   81,
       85,   81,  142,  142,  142,  142,  323,  323,  323,  323,
      467,  229,  164,   99,  143,  100,  100,  100,  100,  100,
      100,  101,  102,  102,  102,  102,  103,  104,  104,  105,
      106,  107,  164,  165, 1364,  166,  166,  166,  166,  166,
      166,  166,  166,  167,  168, 1363,  169,  169,  169,  169,
      169,  169,  169,  169, 1362,   86,  331,  331,  170,  171,

      171,  171,  171,  171,  171,  171,  171,  324,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  333,  333,  333,  333,
      330,  330,  335,  396,  396,   87,  336,  336,  336,  336,
      335,  336,  337,  337,  337,  337,  337,  337,  337,  337,
      337,   88, 1304,   89,   89,   89,   89,   89,   89,   90,
       91,   91,   91,   91,   92,   93,   93,   94,   95,   96,
      108,  108,  108,  108,  108,  108,  108,  108,  348,  348,
      348,  348,  349,  575, 1303,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      576,  577,  578,  575,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      576,  577,  578, 1335,  109,  110,  110,  111,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  112,  113,  113,  114,  449,  449,
      115,  116, 1324,  117,  118,  119,  120,  121,  122,  123,
      124, 1323,  125,  126,  127,  130,  172, 1322,  173,  173,
      173,  173,  173,  173,  173,  173,  108,  144,  262,  233,

      175,  233,  209, 1313,  108,  144,  263,  174,  175,  233,
      209,  264,  265,  281,  233,  233,  233,  579,  233,  505,
      505,  266,  581, 1304,  233,  580,  233,  282,  262,  233,
      233,  233,  233,  233,  604,  131,  263,  174, 1022,  233,
      233,  264,  265,  281,  233,  233,  233,  579,  233,  339,
      340,  266,  581,  342,  233,  580,  233,  282,  233,  373,
      233,  343,  605,  233,  604,  426,  233,  373,  344,  344,
      344,  344,  344,  426, 1303,  132,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  398,  398,  398,  398,  395,
      395,  133,  605,  134,  134,  134,  134,  134,  134,  135,

      136,  136,  136,  136,  137,  138,  138,  139,  140,  141,
      144,  144,  144,  144,  144,  144,  144,  144,  400,  400,
      400,  400,  606,  400, 1021,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      607,  608,  606,  609,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      607,  608,  614,  609,  145,  146,  146,  147,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  148,  149,  149,  150,  620,  621,
      151,  152,  614,  153,  154,  155,  156,  157,  158,  159,
      160, 1293,  161,  162,  163,  175,  175,  175,  175,  175,
      175,  175,  175,  410,  410,  410,  410,  411,  620,  621,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  622,  623,  624,  625,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  622,  623,  624,  625,  176,

      177,  177,  178,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  179,
      180,  180,  181,  556,  556,  182,  183, 1292,  184,  185,
      186,  187,  188,  189,  190,  191, 1291,  192,  193,  194,
      196,  197,  233,  626,  233,  267,  615, 1276,   84, 1160,
      627,  616,  268,   84,  233,  269, 1240,  270,  233,  630,
      631,  233, 1239,  453,  453,  453,  453,  233,  453,  233,
      632,  633,  233,  626,  233,  267,  615,  233, 1238,  233,
      627,  616,  268,  233,  233,  269,  233,  270,  233,  630,
      631,  233,  142,  142,  142,  142, 1237,  233,  481,  233,

      632,  633, 1218,   84,  143,  766,  481,  233,   84,  233,
      198,  709,   84,  233,  481,  710,  233, 1001, 1001,  533,
       84,  711,  481,   84,  718,   84,  199,  533,  200,  200,
      200,  200,  200,  200,  201,  202,  202,  202,  202,  203,
      204,  204,  205,  206,  207,  209,  209,  209,  209,  209,
      209,  209,  209,  451,  451,  451,  451,  448,  448,  233,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  634,  640,  641,  642,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  634,  640,  641,  642,  210,
      211,  211,  212,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  213,
      214,  214,  215,  233, 1000,  216,  217,  643,  218,  219,
      220,  221,  222,  223,  224,  225, 1174,  226,  227,  228,
      230,  231,  975,  230,  230,  230,  230,  230,  230,  230,
      230,  232,  463,  463,  463,  463,  464,  643,  233,  234,
      233,  235,  233,  233,  233,  233,  233,  233,  233,  236,
      233,  237,  233,  233,  233,  238,  233,  233,  239,  233,

      233,  233,  233,  644,  646,  647,  650,  233,  233,  234,
      233,  235,  233,  233,  233,  233,  233,  233,  233,  236,
      233,  237,  233,  233,  233,  238,  233,  233,  239,  233,
      233,  233,  233,  644,  646,  647,  650,  240,  241,  241,
      242,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  244,  245,  245,
      246, 1159,  247,  248,  249,  250,  251,  252,  253,  254,
      255,  256,  257,  258, 1116,  259,  260,  261,  271,  233,
      648,  233,  272,  628,  653,  651,  273,  649,  652,  233,
      574,  233,  858,  654,  274,  233,  655,  629,  233,  362,

      362,  362,  362,  362,  362,  362,  362,  825,  271,  233,
      648,  233,  272,  628,  653,  651,  273,  649,  652,  233,
      233,  233,  233,  654,  274,  233,  655,  629,  233,  784,
      233,  740,  275,  656, 1022, 1021,  233,  657, 1020,  233,
      658,  276,  507,  507,  507,  507,  504,  504,  661,  233,
      233,  233,  233,  403,  404, 1019,  277, 1012,  662,  278,
      233,  233,  275,  656,  279,  233,  233,  657,  233,  233,
      658,  276,  406,  406,  406,  406,  406,  953,  661,  233,
      667,  233,  509,  509,  509,  509,  277,  509,  662,  278,
      233,  233,  233,  668,  279,  233,  932,  673,  233,  674,

      233,  583,  233,  669,  678,  280,  233,  233,  555,  233,
      667,  233,  870,  659,  233,  311,  660,  671,  532,  670,
      233,  312,  233,  668,  857,  233,  233,  673,  672,  674,
      233,  313,  233,  669,  678,  280,  233,  233,  233,  233,
      233,  233,  283,  659,  233,  311,  660,  671,  233,  670,
      284,  312,  679,  285,  286,  233,  233,  233,  672,  195,
      504,  313,  519,  519,  519,  519,  520,  680,  233,  839,
      233,  479,  283,  681,  560,  560,  560,  560,  233,  560,
      284,  824,  679,  285,  286,  164,  448,  233,  287,  233,
      288,  233,  682,  683,  684,  892,  289,  680,  685,  233,

      893,  233,  290,  681,  796,  233,  685,  425,  233,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  287,  233,
      288,  233,  682,  683,  684,  892,  289,  584,  584,  233,
      893,  233,  290,  291,  233,  233,  292,  293,  233,  894,
      895,  294,  896,  897,  233,  582,  233,  295,  296,  233,
      233,  233,  898,  233,  570,  570,  570,  570,  571,  233,
      902,  233,  297,  291,  233,  233,  292,  293,  233,  894,
      895,  294,  896,  897,  233,  903,  233,  295,  296,  233,
      233,  233,  898,  233,  600,  600,  600,  600,  601,  233,
      902,  233,  297,  783,  129,  233,  319,  233,  233,  233,

      233,  298,  904,  233,  233,  903,  905,  233,  395,  233,
      752,  299,  300,  233,  233,  233,  233,  371,  371,  371,
      371,  371,  371,  371,  371,  906,  319,  233,  907,  233,
      233,  298,  904,  233,  233,  372,  905,  233,  233,  233,
      233,  299,  300,  233,  233,  233,  233,  663,  233,  739,
      233,  908,   97,  301,  233,  906,  664,  233,  907,  909,
      665,  666,  302,  233,  910,  233,  303,   84,  233,  330,
      233,  708,  706,  233,  911,  233,  304,  663,  233,  233,
      233,  908,  233,  301,  233,  912,  664,  233,  913,  909,
      665,  666,  302,  233,  910,  233,  303,  558,  558,  558,

      558,  555,  555,  233,  911,  233,  304,  705,  645,  233,
      741,  741,  233,  305,  233,  912,  233,  306,  913,  914,
      307,  308,  915,  916,  233,  917,  233,  597,  739,  230,
      233,  309,  310,  233,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  305,  233,  582,  233,  306, 1368,  914,
      307,  308,  915,  916,  233,  917,  233,  233,  314,  233,
      233,  309,  310,  233,  918,  617,  919,  233,  920,  315,
      921,  618,  316,  317,  233,  318,  233,  619,  233,  574,
      675,  320,  321,  567,  922,  676,  516,  233,  314,  233,
      923,  677,  233,  233,  918,  617,  919,  233,  920,  315,

      921,  618,  316,  317,  233,  318,  233,  619,  233,  233,
      675,  320,  321,  322,  922,  676,  233,  233,  785,  785,
      923,  677,  233,  233,  977,  460,  233,  233,  233,  924,
      233,  925,  977,  233,  277,  926,  783,  278,  927,  233,
      415,  928,  279,  322,  233,  233,  233,  233,  424,  424,
      424,  424,  424,  424,  424,  424,  327,  233,  233,  924,
      233,  925,  233,  233,  277,  926,  233,  278,  927,  233,
      311,  928,  279,  407,  233,  233,  312,  929,  353,  930,
      233,  233,  456,  457,  931,  933,  313,  345,  745,  745,
      745,  745,  233,  745,  826,  826,  233,  329,  326,  233,

      311,  459,  459,  459,  459,  459,  312,  929,  328,  930,
      233,  233,  824,  325,  931,  933,  313,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  352,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  755,  755,  755,  755,  756,   98,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  586,  586,  586,

      586,  583,  583,   99,   86,  100,  100,  100,  100,  100,
      100,  101,  102,  102,  102,  102,  103,  104,  104,  105,
      106,  107,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  589,  589,
      589,  589,  233,  589,   87,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  331,  331,  331,  331,  331,  331,
       88,  208,   89,   89,   89,   89,   89,   89,   90,   91,
       91,   91,   91,   92,   93,   93,   94,   95,   96,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  372,  372,  372,  372,  372,

      372,  372,  372,  128,  323,  323,  323,  323,  934,   83,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,   82,  935,  936,  934,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  324,  935,  936, 1368,  374,
      375,  375,  376,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  378,
      379,  379,  380, 1368,  381,  382,  383, 1368,  384,  385,

      386,  387,  388,  389,  390,  391, 1368,  392,  393,  394,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  414,  129, 1273, 1273, 1273, 1273,  129,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      512,  513,  131, 1368,  789,  789,  789,  789,  129,  789,

      937,  938, 1368,  129, 1136, 1137, 1138,  129, 1139,  515,
      515,  515,  515,  515, 1368,  129, 1368, 1368,  129,  939,
      129,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      937,  938,  132,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  715,  715,  715,  715,  715,  715,  133,  939,
      134,  134,  134,  134,  134,  134,  135,  136,  136,  136,
      136,  137,  138,  138,  139,  140,  141,  425,  425,  425,
      425,  425,  425,  425,  425,  743,  743,  743,  743,  740,
      740, 1368,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  426,  426,  426,  426,  426,  426,  940,  941,  942,
      943,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  940,  941,  942,
      943,  427,  428,  428,  429,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  431,  432,  432,  433, 1368,  434,  435,  436, 1368,
      437,  438,  439,  440,  441,  442,  443,  444, 1368,  445,
      446,  447,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  468,  468,  468,  468,  468,  468,  468,
      468,  469, 1368,  166,  166,  166,  166,  166,  166,  166,
      166,  471,  471,  471,  471,  471,  471,  471,  471,  944,
     1368,  472,  470,  169,  169,  169,  169,  169,  169,  169,
      169,  171,  171,  171,  171,  171,  171,  171,  171, 1368,
     1368, 1368,  473,  396,  396,  396,  396,  396,  396,  944,
      474, 1368,  470, 1368,  475,  475,  475,  475,  475,  475,
      475,  475,  172, 1368,  173,  173,  173,  173,  173,  173,

      173,  173,  473,  476,  799,  799,  799,  799,  800,  477,
      474,  477, 1368,  174,  478,  478,  478,  478,  478,  478,
      478,  478,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  945, 1368,  476,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  174,  479,  480, 1368,  479,  479,  479,
      479,  479,  479,  479,  479,  763,  763,  763,  763,  763,
      763,  945,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  946,  949,  950,
      951,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  946,  949,  950,
      951,  482,  483,  483,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  486,  487,  487,  488,  197,  489,  490,  491,  492,
      493,  494,  495,  496,  497,  498,  499,  500, 1368,  501,
      502,  503,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  521,  521,  197,  525,  525,  525,  525,  525,  525,
      525,  525,  525, 1368,  198,  531,  531,  531,  531,  531,
      531,  531,  531,  787,  787,  787,  787,  784,  784, 1368,
      199, 1368,  200,  200,  200,  200,  200,  200,  201,  202,
      202,  202,  202,  203,  204,  204,  205,  206,  207,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  449,  449,  449,  449,  449,
      449, 1368,  198,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  807,  807,  807,  807,  807,  807,  199, 1368,
      200,  200,  200,  200,  200,  200,  201,  202,  202,  202,

      202,  203,  204,  204,  205,  206,  207,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  532,  532,  532,  532,  532,  532,  532,
      532,  828,  828,  828,  828,  825,  825, 1368,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  952,  954,  955,  963,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  952,  954,  955,  963,  534,  535,  535,

      536,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  538,  539,  539,
      540, 1368,  541,  542,  543, 1368,  544,  545,  546,  547,
      548,  549,  550,  551, 1368,  552,  553,  554,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  563,  564,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569, 1368,  566,  566,  566,  566,  566,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  230,  231, 1368,  230,

      230,  230,  230,  230,  230,  230,  230,  232,  831,  831,
      831,  831,  481,  831,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  964,
      965,  966,  967,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  964,
      965,  966,  967,  240,  241,  241,  242,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  244,  245,  245,  246,  968,  247,  248,

      249,  250,  251,  252,  253,  254,  255,  256,  257,  258,
     1368,  259,  260,  261,  175,  175,  175,  175,  175,  175,
      175,  175,  842,  842,  842,  842,  843,  968, 1368,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  969,  970,  971,  972,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  969,  970,  971,  972,  176,  177,
      177,  178,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  176,  176,  176,  179,  180,
      180,  181, 1368, 1368,  182,  183, 1368,  184,  185,  186,
      187,  188,  189,  190,  191, 1368,  192,  193,  194,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  593,  594,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599, 1368,  596,  596,  596,  596,  596,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  610,  899,  635,  505,

      505,  505,  505,  505,  505,  636, 1368, 1368,  637,  611,
      638,  612,  900,  901,  973,  613,  639,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  610,  899,  635,  850,
      850,  850,  850,  850,  850,  636,  748,  749,  637,  611,
      638,  612,  900,  901,  973,  613,  639,  685,  685,  685,
      685,  685,  685,  685,  685,  751,  751,  751,  751,  751,
      974, 1368,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685, 1085, 1086, 1087,
      974,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685, 1085, 1086, 1087,
     1368,  686,  687,  687,  688,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  689,  690,  690,  691, 1368, 1368,  692,  693, 1368,
      694,  695,  696,  697,  698,  699,  700,  701, 1368,  702,
      703,  704,  719,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  757,  757,  757,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757, 1278, 1278, 1278, 1278,  720,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  792,  793,  478,  478,  478,
      478,  478,  478,  478,  478, 1368, 1368,  721,  861,  861,
      861,  861,  858,  858,  795,  795,  795,  795,  795,  863,
      863,  863,  863,  722,  863,  723,  723,  723,  723,  723,
      723,  724,  725,  725,  725,  725,  726,  727,  727,  728,
      729,  730,  372,  372,  372,  372,  372,  372,  372,  372,

      873,  873,  873,  873,  874, 1088, 1368,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373, 1089, 1090, 1091, 1088,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373, 1089, 1090, 1091, 1368,  374,  375,  375,  376,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  378,  379,  379,  380,
     1368,  381,  382,  383, 1368,  384,  385,  386,  387,  388,

      389,  390,  391, 1368,  392,  393,  394,  767,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      468,  468,  468,  468,  468,  468,  468,  468, 1368,  811,
      811,  811,  811,  811,  811,  811,  811,  768, 1092,  810,
     1005, 1005, 1005, 1005,  813, 1005,  813, 1368,  812,  814,
      814,  814,  814,  814,  814,  814,  814,  478,  478,  478,
      478,  478,  478,  478,  478,  977, 1368, 1368, 1092,  810,
     1368, 1368, 1368,  977,  818, 1368,  818,  769,  812,  819,

      819,  819,  819,  819,  819,  819,  819,  556,  556,  556,
      556,  556,  556,  770, 1368,  771,  771,  771,  771,  771,
      771,  772,  773,  773,  773,  773,  774,  775,  775,  776,
      777,  778,  425,  425,  425,  425,  425,  425,  425,  425,
      881,  881,  881,  881,  881,  881, 1368,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426, 1093, 1094, 1095, 1096,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  426, 1093, 1094, 1095, 1096,  427,  428,  428,  429,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  431,  432,  432,  433,
     1368,  434,  435,  436, 1097,  437,  438,  439,  440,  441,
      442,  443,  444, 1098,  445,  446,  447,  471,  471,  471,
      471,  471,  471,  471,  471,  816,  816,  816,  816,  816,
      816,  816,  816, 1368, 1097, 1368,  815, 1099, 1100, 1101,
      820, 1368,  820, 1098,  817,  821,  821,  821,  821,  821,
      821,  821,  821,  475,  475,  475,  475,  475,  475,  475,
      475, 1015, 1015, 1015, 1015, 1016,  815, 1099, 1100, 1101,

     1368,  822,  476,  822,  817, 1102,  823,  823,  823,  823,
      823,  823,  823,  823,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  476,  479,  480, 1102,  479,  479,  479,  479,
      479,  479,  479,  479,  584,  584,  584,  584,  584,  584,
     1368,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481, 1103, 1104, 1105, 1106,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481, 1103, 1104, 1105, 1106,
      482,  483,  483,  484,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      486,  487,  487,  488, 1368,  489,  490,  491,  492,  493,
      494,  495,  496,  497,  498,  499,  500, 1368,  501,  502,
      503,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      835,  836,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841, 1368,  838,
      838,  838,  838,  838,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,

      532,  532,  532,  532,  532,  532,  532,  532,  889,  889,
      889,  889,  889,  889, 1368,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
     1107, 1108, 1109, 1110,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
     1107, 1108, 1109, 1110,  534,  535,  535,  536,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  538,  539,  539,  540, 1368,  541,

      542,  543, 1368,  544,  545,  546,  547,  548,  549,  550,
      551, 1368,  552,  553,  554,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  866,  867,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
     1368,  869,  869,  869,  869,  869,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  230,  231, 1368,  230,  230,  230,  230,  230,
      230,  230,  230,  232, 1003, 1003, 1003, 1003, 1000, 1000,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233, 1111, 1112, 1113, 1114,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233, 1111, 1112, 1113, 1114,  240,
      241,  241,  242,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  244,
      245,  245,  246, 1115,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  256,  257,  258,  947,  259,  260,  261,

      956,  957, 1117,  958,  959, 1118, 1119,  948, 1120,  859,
      859,  960, 1368, 1115, 1368, 1368, 1368,  961, 1121,  962,
     1368, 1368, 1122, 1008, 1009, 1368,  947,  857, 1368, 1368,
      956,  957, 1117,  958,  959, 1118, 1119,  948, 1120, 1368,
     1368,  960, 1011, 1011, 1011, 1011, 1011,  961, 1121,  962,
      975,  976, 1122,  975,  975,  975,  975,  975,  975,  975,
      975,  741,  741,  741,  741,  741,  741, 1368,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977, 1123, 1124, 1125, 1126,  977,  977,  977,

      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977, 1123, 1124, 1125, 1126,  978,  979,  979,
      980,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  982,  983,  983,
      984, 1368,  985,  986,  987,  988,  989,  990,  991,  992,
      993,  994,  995,  996, 1368,  997,  998,  999, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017,  719,  718, 1368,
     1368, 1368, 1368,  718, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1038, 1038, 1038, 1038, 1038,
     1038, 1262,  720,  718, 1161, 1161, 1368, 1368,  718, 1368,
     1263, 1368,  718,  785,  785,  785,  785,  785,  785, 1264,

      718, 1368, 1159,  718, 1368,  718, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051,  721, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1056, 1056, 1056, 1056, 1056, 1056,  722, 1368,
      723,  723,  723,  723,  723,  723,  724,  725,  725,  725,
      725,  726,  727,  727,  728,  729,  730, 1024,   98,  766,
     1060, 1368, 1060, 1368,  766, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1368,   99, 1368,  100,  100,  100,  100,
      100,  100,  101,  102,  102,  102,  102,  103,  104,  104,
      105,  106,  107, 1047, 1047, 1047, 1047, 1047, 1047, 1047,

     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1368,
     1368, 1368,  720, 1368,  766, 1368, 1368, 1368, 1368,  766,
     1368, 1368, 1368,  766,  826,  826,  826,  826,  826,  826,
     1368,  766, 1368, 1062,  766, 1062,  766, 1127, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1072, 1072, 1072, 1072,
     1072, 1072,  721,  814,  814,  814,  814,  814,  814,  814,
      814,  859,  859,  859,  859,  859,  859, 1127,  722, 1368,
      723,  723,  723,  723,  723,  723,  724,  725,  725,  725,
      725,  726,  727,  727,  728,  729,  730,  352, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049, 1049,  811,  811,  811,  811,  811,  811,
      811,  811,  814,  814,  814,  814,  814,  814,  814,  814,
     1064, 1128, 1064,  812, 1129, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065,  819,  819,  819,  819,  819,  819,  819,
      819, 1368,   86,  816,  816,  816,  816,  816,  816,  816,
      816, 1128, 1368,  812, 1129, 1368, 1368, 1368, 1066, 1368,
     1066, 1130,  817, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067,  819,  819,  819,  819,  819,  819,  819,  819, 1368,
     1368, 1368,   87,  821,  821,  821,  821,  821,  821,  821,
      821, 1130,  817, 1177, 1177, 1177, 1177, 1178,   88, 1368,

       89,   89,   89,   89,   89,   89,   90,   91,   91,   91,
       91,   92,   93,   93,   94,   95,   96,  372,  372,  372,
      372,  372,  372,  372,  372, 1080, 1080, 1080, 1080, 1080,
     1080, 1368,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373, 1131, 1132, 1133,
     1134,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373, 1131, 1132, 1133,
     1134,  374,  375,  375,  376,  377,  377,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  378,  379,  379,  380,  197,  381,  382,  383, 1368,
      384,  385,  386,  387,  388,  389,  390,  391, 1135,  392,
      393,  394,  767,  821,  821,  821,  821,  821,  821,  821,
      821,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823, 1140, 1135, 1141,
     1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1147, 1151,
     1368, 1152, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1368,  768, 1368,  198, 1368, 1368, 1140, 1368, 1141,
     1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1147, 1151,

      199, 1152,  200,  200,  200,  200,  200,  200,  201,  202,
      202,  202,  202,  203,  204,  204,  205,  206,  207, 1368,
     1368, 1368,  769, 1368, 1368, 1368, 1368, 1368, 1153, 1154,
     1155, 1156, 1157, 1158, 1368, 1368, 1368, 1368,  770, 1368,
      771,  771,  771,  771,  771,  771,  772,  773,  773,  773,
      773,  774,  775,  775,  776,  777,  778, 1042, 1153, 1154,
     1155, 1156, 1157, 1158, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1163, 1163, 1163, 1163, 1160, 1160, 1166,
     1166, 1166, 1166,  977, 1166, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1170, 1171, 1001, 1001, 1001, 1001,

     1001, 1001, 1368, 1368, 1368, 1368, 1368,  768, 1368, 1368,
     1205, 1206, 1207, 1173, 1173, 1173, 1173, 1173, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1185, 1185, 1185, 1185, 1185, 1185,
     1205, 1206, 1207, 1368, 1368, 1368, 1368,  769, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1161, 1161, 1161, 1161,
     1161, 1161, 1368,  770, 1368,  771,  771,  771,  771,  771,
      771,  772,  773,  773,  773,  773,  774,  775,  775,  776,
      777,  778,  414, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,  593,

      594, 1208, 1368, 1368,  593,  594, 1368, 1368, 1368, 1368,
     1368, 1189, 1368, 1368, 1368, 1368, 1190, 1368,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596, 1368, 1368,
     1368, 1208,  131, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1258, 1258, 1258, 1258, 1258,
     1258, 1368,  132, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1368, 1368, 1368, 1368, 1209, 1210, 1211,  133, 1212,
      134,  134,  134,  134,  134,  134,  135,  136,  136,  136,

      136,  137,  138,  138,  139,  140,  141,  425,  425,  425,
      425,  425,  425,  425,  425, 1209, 1210, 1211, 1213, 1212,
     1214, 1368,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426, 1215, 1213, 1216,
     1214,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426, 1215, 1368, 1216,
     1368,  427,  428,  428,  429,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,

      430,  431,  432,  432,  433, 1217,  434,  435,  436, 1219,
      437,  438,  439,  440,  441,  442,  443,  444, 1368,  445,
      446,  447,  479,  480, 1368,  479,  479,  479,  479,  479,
      479,  479,  479, 1368, 1368, 1217, 1220, 1221, 1222, 1219,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481, 1223, 1220, 1221, 1222,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481, 1223, 1368, 1368, 1368,  482,

      483,  483,  484,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  486,
      487,  487,  488, 1224,  489,  490,  491,  492,  493,  494,
      495,  496,  497,  498,  499,  500, 1368,  501,  502,  503,
      532,  532,  532,  532,  532,  532,  532,  532, 1368, 1368,
     1225, 1226, 1227, 1224, 1368,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
     1225, 1226, 1227, 1228,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
     1368, 1368, 1229, 1228,  534,  535,  535,  536,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  538,  539,  539,  540, 1230,  541,
      542,  543, 1229,  544,  545,  546,  547,  548,  549,  550,
      551, 1368,  552,  553,  554,  230,  231, 1368,  230,  230,
      230,  230,  230,  230,  230,  230,  232, 1368, 1230, 1231,
     1232, 1233, 1368,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233, 1234, 1231,

     1232, 1233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233, 1234, 1368,
     1368, 1368,  240,  241,  241,  242,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  244,  245,  245,  246, 1235,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258, 1368,
      259,  260,  261,  975,  976, 1368,  975,  975,  975,  975,
      975,  975,  975,  975, 1368, 1368, 1235, 1236, 1241, 1242,
     1368,  977,  977,  977,  977,  977,  977,  977,  977,  977,

      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977, 1243, 1236, 1241, 1242,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977, 1243, 1368, 1368, 1368,
      978,  979,  979,  980,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      982,  983,  983,  984, 1244,  985,  986,  987,  988,  989,
      990,  991,  992,  993,  994,  995,  996, 1368,  997,  998,
      999,  230,  231, 1368,  230,  230,  230,  230,  230,  230,

      230,  230,  232, 1368, 1244, 1245, 1246, 1247, 1368,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233, 1248, 1245, 1246, 1247,  233,  233,
      233,  233,  233, 1188,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233, 1248, 1368, 1368, 1368,  240,  241,
      241,  242,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  244,  245,
      245,  246, 1368,  247,  248,  249,  250,  251,  252,  253,

      254,  255,  256,  257,  258, 1249,  259,  260,  261, 1191,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1250, 1251, 1252, 1253,
     1265, 1268, 1269, 1270, 1368, 1249, 1271, 1272, 1274, 1275,
     1277, 1279, 1280, 1281, 1266, 1282, 1283, 1284, 1285, 1286,
     1267, 1287, 1288, 1289, 1290, 1294, 1250, 1251, 1252, 1253,
     1295, 1268, 1269, 1270,  720, 1296, 1271, 1272, 1274, 1275,
     1277, 1279, 1280, 1281, 1368, 1282, 1283, 1284, 1285, 1286,
     1297, 1287, 1288, 1289, 1290, 1294, 1298, 1299, 1300, 1301,
     1295, 1305, 1346, 1345, 1368, 1296, 1368, 1368, 1368, 1368,

     1368, 1368, 1263, 1368,  721, 1368, 1266, 1368, 1368, 1368,
     1297, 1264, 1267, 1368, 1368, 1368, 1298, 1299, 1300, 1301,
      722, 1305,  723,  723,  723,  723,  723,  723,  724,  725,
      725,  725,  725,  726,  727,  727,  728,  729,  730,  372,
      372,  372,  372,  372,  372,  372,  372, 1368, 1368, 1306,
     1307, 1308, 1311, 1368,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373, 1306,
     1307, 1308, 1311,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,

      373,  373,  373,  373,  373,  373,  373,  373,  373, 1368,
     1368, 1312, 1368,  374,  375,  375,  376,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  378,  379,  379,  380, 1314,  381,  382,
      383, 1312,  384,  385,  386,  387,  388,  389,  390,  391,
     1316,  392,  393,  394, 1197, 1273, 1273, 1273, 1273, 1278,
     1278, 1278, 1278, 1317, 1318, 1319, 1368, 1314, 1320, 1321,
     1325, 1326, 1327, 1328, 1368, 1329, 1332, 1333, 1368, 1368,
     1316, 1334, 1336, 1368, 1368, 1337, 1338, 1339, 1340, 1341,
     1368, 1342, 1309, 1317, 1318, 1319, 1315, 1368, 1320, 1321,

     1325, 1326, 1327, 1328,  768, 1329, 1332, 1333,  593,  594,
     1310, 1334, 1336,  593,  594, 1337, 1338, 1339, 1340, 1341,
     1330, 1342, 1309, 1343, 1344, 1331, 1315,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596, 1368, 1368, 1368,
     1310, 1368, 1368, 1368,  769, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1343, 1344, 1368, 1368, 1347, 1348, 1349,
      770, 1350,  771,  771,  771,  771,  771,  771,  772,  773,
      773,  773,  773,  774,  775,  775,  776,  777,  778,  425,
      425,  425,  425,  425,  425,  425,  425, 1347, 1348, 1349,
     1351, 1350, 1352, 1368,  426,  426,  426,  426,  426,  426,

      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426, 1353,
     1351, 1354, 1352,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426, 1353,
     1368, 1354, 1368,  427,  428,  428,  429,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  431,  432,  432,  433, 1355,  434,  435,
      436, 1356,  437,  438,  439,  440,  441,  442,  443,  444,
     1368,  445,  446,  447,  479,  480, 1368,  479,  479,  479,

      479,  479,  479,  479,  479, 1368, 1368, 1355, 1357, 1358,
     1359, 1356,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481, 1360, 1357, 1358,
     1359,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481, 1360, 1368, 1368,
     1368,  482,  483,  483,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  486,  487,  487,  488, 1361,  489,  490,  491,  492,

      493,  494,  495,  496,  497,  498,  499,  500, 1368,  501,
      502,  503,  532,  532,  532,  532,  532,  532,  532,  532,
     1368, 1368, 1365, 1366, 1367, 1361, 1368,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533, 1365, 1366, 1367, 1368,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533, 1368, 1368, 1368, 1368,  534,  535,  535,  536,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,

      537,  537,  537,  537,  537,  537,  538,  539,  539,  540,
     1368,  541,  542,  543, 1368,  544,  545,  546,  547,  548,
      549,  550,  551, 1368,  552,  553,  554,  230,  231, 1368,
      230,  230,  230,  230,  230,  230,  230,  230,  232, 1368,
     1368, 1368, 1368, 1368, 1368,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
     1368, 1368, 1368, 1368,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

     1368, 1368, 1368, 1368,  240,  241,  241,  242,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  244,  245,  245,  246, 1368,  247,
      248,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      258, 1368,  259,  260,  261,  975,  976, 1368,  975,  975,
      975,  975,  975,  975,  975,  975, 1368, 1368, 1368, 1368,
     1368, 1368, 1368,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977, 1368, 1368,
     1368, 1368,  977,  977,  977,  977,  977,  977,  977,  977,

      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977, 1368, 1368,
     1368, 1368,  978,  979,  979,  980,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  982,  983,  983,  984, 1368,  985,  986,  987,
      988,  989,  990,  991,  992,  993,  994,  995,  996, 1368,
      997,  998,  999,  719, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  720, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  721, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368,  722, 1368,  723,  723,  723,  723,
      723,  723,  724,  725,  725,  725,  725,  726,  727,  727,
      728,  729,  730,  372,  372,  372,  372,  372,  372,  372,

      372, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373, 1368, 1368, 1368, 1368,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373, 1368, 1368, 1368, 1368,  374,  375,  375,
      376,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  378,  379,  379,
      380, 1368,  381,  382,  383, 1368,  384,  385,  386,  387,

      388,  389,  390,  391, 1368,  392,  393,  394,  767, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  768, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  769, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368,  770, 1368,  771,  771,  771,  771,
      771,  771,  772,  773,  773,  773,  773,  774,  775,  775,
      776,  777,  778,  425,  425,  425,  425,  425,  425,  425,
      425, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426, 1368, 1368, 1368, 1368,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,

      426,  426,  426, 1368, 1368, 1368, 1368,  427,  428,  428,
      429,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  431,  432,  432,
      433, 1368,  434,  435,  436, 1368,  437,  438,  439,  440,
      441,  442,  443,  444, 1368,  445,  446,  447,  479,  480,
     1368,  479,  479,  479,  479,  479,  479,  479,  479, 1368,
     1368, 1368, 1368, 1368, 1368, 1368,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481, 1368, 1368, 1368, 1368,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481, 1368, 1368, 1368, 1368,  482,  483,  483,  484,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  486,  487,  487,  488, 1368,
      489,  490,  491,  492,  493,  494,  495,  496,  497,  498,
      499,  500, 1368,  501,  502,  503,  532,  532,  532,  532,
      532,  532,  532,  532, 1368, 1368, 1368, 1368, 1368, 1368,
     1368,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  533,  533,  533,  533, 1368, 1368, 1368, 1368,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  533, 1368, 1368, 1368, 1368,
      534,  535,  535,  536,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      538,  539,  539,  540, 1368,  541,  542,  543, 1368,  544,
      545,  546,  547,  548,  549,  550,  551, 1368,  552,  553,
      554,   84, 1368,   84,   84,   84,   84, 1368,   84, 1368,
     1368,   84,   97, 1368,   97,   97,   97,   97, 1368,   97,

     1368, 1368,   97,  129, 1368,  129,  129,  129,  129, 1368,
      129, 1368, 1368,  129,  195,  195,  195,  195, 1368,  195,
     1368, 1368,  195,  330,  330,  330,  330,  330,  331,  331,
      331,  331,  331,  333,  333,  333,  333,  333,  334,  334,
      334,  334,  334,  335,  335, 1368,  335,  335,  336,  336,
      336,  336,  336,  338,  338,  338,  338,  338,  341,  341,
      341,  341,  341,  346,  346,  346,  346,  346,  351,  351,
      351,  351,  351,   84, 1368,   84,   84,   84,   84, 1368,
       84, 1368, 1368,   84,  354,  354,  354,  354,  355,  355,
      355,   84,   84,   84,   84,   84,  357,  357,  357,  357,

      357,  359,  359,  359,  359,  359,  361,  361,  361,  361,
      361,   97, 1368,   97,   97,   97,   97, 1368,   97, 1368,
     1368,   97,  363,  363,  363,  363,  364,  364,  364,   97,
       97,   97,   97,   97,  366,  366,  366,  366,  366,  368,
      368,  368,  368,  368,  370,  370,  370,  370,  370,  395,
      395,  395,  395,  395,  396,  396,  396,  396,  396,  398,
      398,  398,  398,  398,  399,  399,  399,  399,  399,  108,
      108, 1368,  108,  108,  400,  400,  400,  400,  400,  402,
      402,  402,  402,  402,  405,  405,  405,  405,  405,  408,
      408,  408,  408,  408,  413,  413,  413,  413,  413,  129,

     1368,  129,  129,  129,  129, 1368,  129, 1368, 1368,  129,
      416,  416,  416,  416,  417,  417,  417,  129,  129,  129,
      129,  129,  419,  419,  419,  419,  419,  421,  421,  421,
      421,  421,  423,  423,  423,  423,  423,  448,  448,  448,
      448,  448,  449,  449,  449,  449,  449,  451,  451,  451,
      451,  451,  452,  452,  452,  452,  452,  144,  144, 1368,
      144,  144,  453,  453,  453,  453,  453,  455,  455,  455,
      455,  455,  458,  458,  458,  458,  458,  461,  461,  461,
      461,  461,  466,  466,  466,  466,  466,  504,  504,  504,
      504,  504,  505,  505,  505,  505,  505,  507,  507,  507,

      507,  507,  508,  508,  508,  508,  508,  175,  175, 1368,
      175,  175,  509,  509,  509,  509,  509,  511,  511,  511,
      511,  511,  514,  514,  514,  514,  514,  517,  517,  517,
      517,  517,  522,  522,  522,  522,  522,  195,  195,  195,
      195, 1368,  195, 1368, 1368,  195,  523,  523,  523,  523,
      524,  524,  524,  195,  195,  195,  195,  195,  526,  526,
      526,  526,  526,  528,  528,  528,  528,  528,  530,  530,
      530,  530,  530,  555,  555,  555,  555,  555,  556,  556,
      556,  556,  556,  558,  558,  558,  558,  558,  559,  559,
      559,  559,  559,  209,  209, 1368,  209,  209,  560,  560,

      560,  560,  560,  562,  562,  562,  562,  562,  565,  565,
      565,  565,  565,  568,  568,  568,  568,  568,  573,  573,
      573,  573,  573,  229, 1368,  229,  583,  583,  583,  583,
      583,  584,  584,  584,  584,  584,  586,  586,  586,  586,
      586,  587,  587,  587,  587,  587,  233,  233, 1368,  233,
      233,  588,  588,  588,  588,  588,  590,  590,  590,  590,
      590,  592,  592,  592,  592,  592,  595,  595,  595,  595,
      595,  598,  598,  598,  598,  598,  603,  603,  603,  603,
      603,  336,  336,  336,  336,  336,  707,  707,  707,  707,
      707,  330,  330,  330,  330,  330,  712,  712,  712,  712,

      712,  713,  713,  713,  713,  713,  714,  714,  714,  714,
      714,  716,  716,  716,  716,  716,  717,  717,  717,  717,
      717,  718,  718,  718,  718,  718,  718, 1368,  718, 1368,
     1368,  718,  355,  355,  355,  355,  355,   84,   84,   84,
       84,   84,  731,  731,  731,  731,  731,  732,  732,  732,
      732,  732,  733,  733,  733,  733,  733,  734,  734,  734,
      734,  734,  364,  364,  364,  364,  364,   97,   97,   97,
       97,   97,  735,  735,  735,  735,  735,  736,  736,  736,
      736,  736,  737,  737,  737,  737,  737,  738,  738,  738,
      738,  738,  740,  740,  740,  740,  740,  741,  741,  741,

      741,  741,  743,  743,  743,  743,  743,  744,  744,  744,
      744,  744,  373,  373, 1368,  373,  373,  372,  372,  372,
     1368,  372,  745,  745,  745,  745,  745,  747,  747,  747,
      747,  747,  750,  750,  750,  750,  750,  753,  753,  753,
      753,  753,  758,  758,  758,  758,  758,  400,  400,  400,
      400,  400,  759,  759,  759,  759,  759,  395,  395,  395,
      395,  395,  760,  760,  760,  760,  760,  761,  761,  761,
      761,  761,  762,  762,  762,  762,  762,  764,  764,  764,
      764,  764,  765,  765,  765,  765,  765,  766,  766,  766,
      766,  766,  766, 1368,  766, 1368, 1368,  766,  417,  417,

      417,  417,  417,  129,  129,  129,  129,  129,  779,  779,
      779,  779,  779,  780,  780,  780,  780,  780,  781,  781,
      781,  781,  781,  782,  782,  782,  782,  782,  784,  784,
      784,  784,  784,  785,  785,  785,  785,  785,  787,  787,
      787,  787,  787,  788,  788,  788,  788,  788,  426,  426,
     1368,  426,  426,  425,  425,  425, 1368,  425,  789,  789,
      789,  789,  789,  791,  791,  791,  791,  791,  794,  794,
      794,  794,  794,  797,  797,  797,  797,  797,  802,  802,
      802,  802,  802,  453,  453,  453,  453,  453,  803,  803,
      803,  803,  803,  448,  448,  448,  448,  448,  804,  804,

      804,  804,  804,  805,  805,  805,  805,  805,  806,  806,
      806,  806,  806,  808,  808,  808,  808,  808,  809,  809,
      809,  809,  809,  825,  825,  825,  825,  825,  826,  826,
      826,  826,  826,  828,  828,  828,  828,  828,  829,  829,
      829,  829,  829,  481,  481, 1368,  481,  481,  830,  830,
      830,  830,  830,  832,  832,  832,  832,  832,  834,  834,
      834,  834,  834,  837,  837,  837,  837,  837,  840,  840,
      840,  840,  840,  845,  845,  845,  845,  845,  509,  509,
      509,  509,  509,  846,  846,  846,  846,  846,  504,  504,
      504,  504,  504,  847,  847,  847,  847,  847,  848,  848,

      848,  848,  848,  849,  849,  849,  849,  849,  851,  851,
      851,  851,  851,  852,  852,  852,  852,  852,  524,  524,
      524,  524,  524,  195,  195,  195,  195,  195,  853,  853,
      853,  853,  853,  854,  854,  854,  854,  854,  855,  855,
      855,  855,  855,  856,  856,  856,  856,  856,  858,  858,
      858,  858,  858,  859,  859,  859,  859,  859,  861,  861,
      861,  861,  861,  862,  862,  862,  862,  862,  533,  533,
     1368,  533,  533,  532,  532,  532, 1368,  532,  863,  863,
      863,  863,  863,  865,  865,  865,  865,  865,  868,  868,
      868,  868,  868,  871,  871,  871,  871,  871,  876,  876,

      876,  876,  876,  560,  560,  560,  560,  560,  877,  877,
      877,  877,  877,  555,  555,  555,  555,  555,  878,  878,
      878,  878,  878,  879,  879,  879,  879,  879,  880,  880,
      880,  880,  880,  882,  882,  882,  882,  882,  883,  883,
      883,  883,  883,  884,  884,  590,  590,  590,  590,  590,
      885,  885,  885,  885,  885,  583,  583,  583,  583,  583,
      886,  886,  886,  886,  886,  887,  887,  887,  887,  887,
      888,  888,  888,  888,  888,  890,  890,  890,  890,  890,
      891,  891,  891,  891,  891, 1000, 1000, 1000, 1000, 1000,
     1001, 1001, 1001, 1001, 1001, 1003, 1003, 1003, 1003, 1003,

     1004, 1004, 1004, 1004, 1004,  685,  685, 1368,  685,  685,
     1005, 1005, 1005, 1005, 1005, 1007, 1007, 1007, 1007, 1007,
     1010, 1010, 1010, 1010, 1010, 1013, 1013, 1013, 1013, 1013,
     1018, 1018, 1018, 1018, 1018, 1023, 1023, 1023, 1023, 1023,
      718,  718,  718,  718,  718,  718, 1368,  718, 1368, 1368,
      718, 1025, 1025, 1025, 1025, 1026, 1026, 1026,  718,  718,
      718,  718,  718, 1028, 1028, 1028, 1028, 1028, 1030, 1030,
     1030, 1030, 1030, 1032, 1032, 1032, 1032, 1032,   84, 1368,
       84,   84,   84,   84, 1368,   84, 1368, 1368,   84,   84,
       84,   84,   84,   84,  355,  355,  355,  355,  355,   97,

     1368,   97,   97,   97,   97, 1368,   97, 1368, 1368,   97,
       97,   97,   97,   97,   97,  364,  364,  364,  364,  364,
      745,  745,  745,  745,  745, 1034, 1034, 1034, 1034, 1034,
      740,  740,  740,  740,  740, 1035, 1035, 1035, 1035, 1035,
     1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037, 1037, 1037,
     1039, 1039, 1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040,
     1041, 1041, 1041, 1041, 1041,  766,  766,  766,  766,  766,
      766, 1368,  766, 1368, 1368,  766, 1043, 1043, 1043, 1043,
     1044, 1044, 1044,  766,  766,  766,  766,  766, 1046, 1046,
     1046, 1046, 1046, 1048, 1048, 1048, 1048, 1048, 1050, 1050,

     1050, 1050, 1050,  129, 1368,  129,  129,  129,  129, 1368,
      129, 1368, 1368,  129,  129,  129,  129,  129,  129,  417,
      417,  417,  417,  417,  789,  789,  789,  789,  789, 1052,
     1052, 1052, 1052, 1052,  784,  784,  784,  784,  784, 1053,
     1053, 1053, 1053, 1053, 1054, 1054, 1054, 1054, 1054, 1055,
     1055, 1055, 1055, 1055, 1057, 1057, 1057, 1057, 1057, 1058,
     1058, 1058, 1058, 1058, 1059, 1059, 1059, 1059, 1059,  832,
      832,  832,  832,  832, 1068, 1068, 1068, 1068, 1068,  825,
      825,  825,  825,  825, 1069, 1069, 1069, 1069, 1069, 1070,
     1070, 1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071, 1073,

     1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074, 1075,
     1075, 1075, 1075, 1075,  195,  195,  195,  195, 1368,  195,
     1368, 1368,  195,  195,  195,  195,  195,  195,  524,  524,
      524,  524,  524,  863,  863,  863,  863,  863, 1076, 1076,
     1076, 1076, 1076,  858,  858,  858,  858,  858, 1077, 1077,
     1077, 1077, 1077, 1078, 1078, 1078, 1078, 1078, 1079, 1079,
     1079, 1079, 1079, 1081, 1081, 1081, 1081, 1081, 1082, 1082,
     1082, 1082, 1082, 1083, 1083, 1083, 1083, 1083,  884,  884,
      884, 1084, 1084, 1084, 1084, 1084, 1160, 1160, 1160, 1160,
     1160, 1161, 1161, 1161, 1161, 1161, 1163, 1163, 1163, 1163,

     1163, 1164, 1164, 1164, 1164, 1164,  977,  977, 1368,  977,
      977, 1165, 1165, 1165, 1165, 1165, 1167, 1167, 1167, 1167,
     1167, 1169, 1169, 1169, 1169, 1169, 1172, 1172, 1172, 1172,
     1172, 1175, 1175, 1175, 1175, 1175, 1180, 1180, 1180, 1180,
     1180, 1005, 1005, 1005, 1005, 1005, 1181, 1181, 1181, 1181,
     1181, 1000, 1000, 1000, 1000, 1000, 1182, 1182, 1182, 1182,
     1182, 1183, 1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184,
     1184, 1186, 1186, 1186, 1186, 1186, 1187, 1187, 1187, 1187,
     1187,  595,  595,  595,  595,  595,  718,  718,  718,  718,
      718,  718, 1368,  718, 1368, 1368,  718, 1026, 1026, 1026,

     1026, 1026,  718,  718,  718,  718,  718, 1192, 1192, 1192,
     1192, 1192, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194,
     1194, 1194, 1195, 1195, 1195, 1195, 1195, 1196, 1196, 1196,
     1196, 1196,  766,  766,  766,  766,  766,  766, 1368,  766,
     1368, 1368,  766, 1044, 1044, 1044, 1044, 1044,  766,  766,
      766,  766,  766, 1198, 1198, 1198, 1198, 1198, 1199, 1199,
     1199, 1199, 1199, 1200, 1200, 1200, 1200, 1200, 1201, 1201,
     1201, 1201, 1201, 1202, 1202, 1202, 1202, 1202, 1203, 1203,
     1203, 1203, 1203, 1204, 1204, 1204, 1204, 1204, 1167, 1167,
     1167, 1167, 1167, 1254, 1254, 1254, 1254, 1254, 1160, 1160,

     1160, 1160, 1160, 1255, 1255, 1255, 1255, 1255, 1256, 1256,
     1256, 1256, 1256, 1257, 1257, 1257, 1257, 1257, 1259, 1259,
     1259, 1259, 1259, 1260, 1260, 1260, 1260, 1260, 1261, 1261,
     1261, 1261, 1261,  583,  583,  583,  583,  583,  718,  718,
      718,  718,  718,  718, 1368,  718, 1368, 1368,  718,  718,
      718,  718,  718,  718, 1026, 1026, 1026, 1026, 1026,  766,
      766,  766,  766,  766,  766, 1368,  766, 1368, 1368,  766,
      766,  766,  766,  766,  766, 1044, 1044, 1044, 1044, 1044,
     1302, 1302, 1302, 1302, 1302,  595,  595,  595,  595,  595,
      583,  583,  583,  583,  583,    3, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368
    } ;

static yyconst flex_int16_t yy_chk[9833] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,   10,   81,    5,
        9,   81,   14,   14,   14,   14,   52,   52,   52,   52,
      164, 1373,  164,   10,   14,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   17,   17, 1363,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19, 1362,   19,   19,   19,   19,
       19,   19,   19,   19, 1360,    9,  339,  339,   19,   20,

       20,   20,   20,   20,   20,   20,   20,   52,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   67,   67,   67,   67,
       67,   67,   69,  403,  403,    9,   70,   70,   70,   70,
       69,   70,   72,   72,   72,   72,   72,   72,   72,   72,
       72,    9, 1346,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   78,   78,
       78,   78,   78,  234, 1345,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
      235,  236,  237,  234,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
      235,  236,  237, 1313,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,  456,  456,
       11,   11, 1293,   11,   11,   11,   11,   11,   11,   11,
       11, 1292,   11,   11,   11,   13,   22, 1291,   22,   22,
       22,   22,   22,   22,   22,   22,  116,  152,   31,   31,

      183,   31,  217, 1276,  116,  152,   31,   22,  183,   31,
      217,   31,   31,   37,   37,   31,   37,  238,   31,  512,
      512,   31,  239, 1267,   37,  238,   37,   37,   31,   31,
       37,   31,  249,   37,  262,   13,   31,   22, 1265,   31,
      249,   31,   31,   37,   37,   31,   37,  238,   31,   74,
       74,   31,  239,   74,   37,  238,   37,   37,  250,  383,
       37,   74,  263,   37,  262,  436,  250,  383,   74,   74,
       74,   74,   74,  436, 1264,   13,   90,   90,   90,   90,
       90,   90,   90,   90,   90,  114,  114,  114,  114,  114,
      114,   13,  263,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       16,   16,   16,   16,   16,   16,   16,   16,  117,  117,
      117,  117,  264,  117, 1262,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      265,  267,  264,  268,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
      265,  267,  270,  268,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   16,  273,  274,
       16,   16,  270,   16,   16,   16,   16,   16,   16,   16,
       16, 1240,   16,   16,   16,   23,   23,   23,   23,   23,
       23,   23,   23,  125,  125,  125,  125,  125,  273,  274,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  275,  275,  276,  277,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  275,  275,  276,  277,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  563,  563,   23,   23, 1239,   23,   23,
       23,   23,   23,   23,   23,   23, 1238,   23,   23,   23,
       25,   25,   32,  278,   32,   32,  271, 1215,   86, 1174,
      279,  271,   32,   86,   32,   32, 1139,   32,   32,  281,
      282,   32, 1138,  153,  153,  153,  153,   39,  153,   39,
      284,  284,   32,  278,   32,   32,  271,   39, 1137,   39,
      279,  271,   32,   39,   32,   32,   39,   32,   32,  281,
      282,   32,  142,  142,  142,  142, 1136,   39,  491,   39,

      284,  284, 1104,   86,  142, 1044,  491,   39,   86,   39,
       25,  343,   86,   39,  492,  343,   39, 1008, 1008,  543,
       86,  343,  492,   86, 1026,   86,   25,  543,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   28,   28,   28,   28,   28,
       28,   28,   28,  150,  150,  150,  150,  150,  150, 1023,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  285,  287,  288,  289,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  285,  287,  288,  289,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28, 1020, 1012,   28,   28,  290,   28,   28,
       28,   28,   28,   28,   28,   28,  994,   28,   28,   28,
       30,   30,  985,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  161,  161,  161,  161,  161,  290,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,  291,  293,  294,  296,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,  291,  293,  294,  296,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  978,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  932,   30,   30,   30,   33,   33,
      295,   33,   33,  280,  298,  297,   33,  295,  297,   33,
      884,   33,  870,  299,   33,   33,  300,  280,   33,   96,

       96,   96,   96,   96,   96,   96,   96,  839,   33,   33,
      295,   33,   33,  280,  298,  297,   33,  295,  297,   33,
       34,   33,   34,  299,   33,   33,  300,  280,   33,  796,
       34,  752,   34,  301,  711,  710,   34,  301,  706,   34,
      302,   34,  181,  181,  181,  181,  181,  181,  304,   35,
       34,   35,   34,  121,  121,  705,   35,  699,  305,   35,
       34,   35,   34,  301,   35,   35,   34,  301,   35,   34,
      302,   34,  121,  121,  121,  121,  121,  667,  304,   35,
      307,   35,  184,  184,  184,  184,   35,  184,  305,   35,
       36,   35,   36,  308,   35,   35,  645,  311,   35,  314,

       36,  597,   36,  309,  316,   36,   36,   47,  567,   36,
      307,   47,  549,  303,   47,   47,  303,  310,  541,  309,
       36,   47,   36,  308,  534,   47,   47,  311,  310,  314,
       36,   47,   36,  309,  316,   36,   36,   47,   38,   36,
       38,   47,   38,  303,   47,   47,  303,  310,   38,  309,
       38,   47,  317,   38,   38,   47,   47,   38,  310,  524,
      516,   47,  192,  192,  192,  192,  192,  318,   38,  498,
       38,  489,   38,  319,  218,  218,  218,  218,   38,  218,
       38,  482,  317,   38,   38,  467,  460,   38,   40,   40,
       40,   40,  320,  321,  322,  604,   40,  318,  693,   40,

      605,   40,   40,  319,  442,   40,  693,  434,   40,  101,
      101,  101,  101,  101,  101,  101,  101,  101,   40,   40,
       40,   40,  320,  321,  322,  604,   40,  593,  593,   40,
      605,   40,   40,   41,   41,   40,   41,   41,   40,  606,
      607,   41,  608,  609,   41,  593,   41,   41,   42,   42,
       41,   42,  610,   41,  226,  226,  226,  226,  226,   42,
      612,   42,   42,   41,   41,   42,   41,   41,   42,  606,
      607,   41,  608,  609,   41,  613,   41,   41,   42,   42,
       41,   42,  610,   41,  259,  259,  259,  259,  259,   42,
      612,   42,   42,  427,  417,   42,   49,   43,   42,   43,

       49,   43,  614,   49,   49,  613,  615,   43,  407,   43,
      389,   43,   43,   43,   49,   49,   43,  107,  107,  107,
      107,  107,  107,  107,  107,  617,   49,   43,  618,   43,
       49,   43,  614,   49,   49,  381,  615,   43,   44,   43,
       44,   43,   43,   43,   49,   49,   43,  306,   44,  374,
       44,  619,  364,   44,   44,  617,  306,   44,  618,  620,
      306,  306,   45,   45,  621,   45,   45,  355,   44,  345,
       44,  342,  328,   45,  622,   45,   45,  306,   44,   45,
       44,  619,   45,   44,   44,  623,  306,   44,  624,  620,
      306,  306,   45,   45,  621,   45,   45,  215,  215,  215,

      215,  215,  215,   45,  622,   45,   45,  327,  292,   45,
      748,  748,   45,   46,   46,  623,   46,   46,  624,  625,
       46,   46,  626,  627,   46,  628,   46,  256,  748,  247,
       46,   46,   46,   46,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   46,   46,  240,   46,   46,  231,  625,
       46,   46,  626,  627,   46,  628,   46,   48,   48,   48,
       46,   46,   46,   46,  629,  272,  630,   48,  631,   48,
      632,  272,   48,   48,   50,   48,   48,  272,   50,  229,
      315,   50,   50,  223,  633,  315,  189,   48,   48,   48,
      635,  315,   50,   50,  629,  272,  630,   48,  631,   48,

      632,  272,   48,   48,   50,   48,   48,  272,   50,   51,
      315,   50,   50,   51,  633,  315,   51,   51,  792,  792,
      635,  315,   50,   50,  987,  158,   57,   51,   51,  636,
       57,  637,  987,   57,   57,  638,  792,   57,  639,   51,
      130,  640,   57,   51,   57,   57,   51,   51,  141,  141,
      141,  141,  141,  141,  141,  141,   57,   51,   51,  636,
       57,  637,   58,   57,   57,  638,   58,   57,  639,   58,
       58,  640,   57,  122,   57,   57,   58,  641,   85,  642,
       58,   58,  157,  157,  643,  646,   58,   75,  384,  384,
      384,  384,   58,  384,  835,  835,   58,   60,   55,   58,

       58,  157,  157,  157,  157,  157,   58,  641,   58,  642,
       58,   58,  835,   54,  643,  646,   58,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   84,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,  392,  392,  392,  392,  392,   97,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  246,  246,  246,

      246,  246,  246,   97,   84,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  251,  251,
      251,  251,  251,  251,   84,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  340,  340,  340,  340,  340,  340,
       84,   27,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  108,  108,  108,  108,  108,

      108,  108,  108,   12,  323,  323,  323,  323,  647,    8,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,    7,  648,  649,  647,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  323,  648,  649,    3,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,    0,  108,  108,  108,    0,  108,  108,

      108,  108,  108,  108,  108,  108,    0,  108,  108,  108,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  129,  131, 1212, 1212, 1212, 1212,  131,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      188,  188,  129,    0,  437,  437,  437,  437,  131,  437,

      650,  653,    0,  131,  953,  953,  953,  131,  953,  188,
      188,  188,  188,  188,    0,  131,    0,    0,  131,  654,
      131,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      650,  653,  129,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  349,  349,  349,  349,  349,  349,  129,  654,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  144,  144,  144,
      144,  144,  144,  144,  144,  380,  380,  380,  380,  380,
      380,    0,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  655,  656,  657,
      658,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  655,  656,  657,
      658,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,    0,  144,  144,  144,    0,
      144,  144,  144,  144,  144,  144,  144,  144,    0,  144,
      144,  144,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  165,  165,  165,  165,  165,  165,  165,
      165,  166,    0,  166,  166,  166,  166,  166,  166,  166,
      166,  168,  168,  168,  168,  168,  168,  168,  168,  659,
        0,  169,  166,  169,  169,  169,  169,  169,  169,  169,
      169,  171,  171,  171,  171,  171,  171,  171,  171,    0,
        0,    0,  169,  404,  404,  404,  404,  404,  404,  659,
      171,    0,  166,    0,  172,  172,  172,  172,  172,  172,
      172,  172,  173,    0,  173,  173,  173,  173,  173,  173,

      173,  173,  169,  172,  445,  445,  445,  445,  445,  174,
      171,  174,    0,  173,  174,  174,  174,  174,  174,  174,
      174,  174,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  660,    0,  172,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  173,  175,  175,    0,  175,  175,  175,
      175,  175,  175,  175,  175,  411,  411,  411,  411,  411,
      411,  660,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  661,  663,  664,
      665,  175,  175,  175,  175,  175,  175,  175,  175,  175,

      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  661,  663,  664,
      665,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  195,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,    0,  175,
      175,  175,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  196,  201,  201,  201,  201,  201,  201,
      201,  201,  201,    0,  195,  207,  207,  207,  207,  207,
      207,  207,  207,  433,  433,  433,  433,  433,  433,    0,
      195,    0,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  457,  457,  457,  457,  457,
      457,    0,  196,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  464,  464,  464,  464,  464,  464,  196,    0,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  209,  209,  209,  209,  209,  209,  209,
      209,  488,  488,  488,  488,  488,  488,    0,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  666,  668,  669,  671,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  666,  668,  669,  671,  209,  209,  209,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,    0,  209,  209,  209,    0,  209,  209,  209,  209,
      209,  209,  209,  209,    0,  209,  209,  209,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  222,  222,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,    0,  222,  222,  222,  222,  222,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  230,  230,    0,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  493,  493,
      493,  493,  493,  493,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  673,
      674,  675,  676,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  673,
      674,  675,  676,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  677,  230,  230,

      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
        0,  230,  230,  230,  232,  232,  232,  232,  232,  232,
      232,  232,  501,  501,  501,  501,  501,  677,    0,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  679,  680,  681,  682,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  679,  680,  681,  682,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,    0,    0,  232,  232,    0,  232,  232,  232,
      232,  232,  232,  232,  232,    0,  232,  232,  232,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  255,  255,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,    0,  255,  255,  255,  255,  255,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  269,  611,  286,  513,

      513,  513,  513,  513,  513,  286,    0,    0,  286,  269,
      286,  269,  611,  611,  683,  269,  286,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  269,  611,  286,  520,
      520,  520,  520,  520,  520,  286,  388,  388,  286,  269,
      286,  269,  611,  611,  683,  269,  286,  326,  326,  326,
      326,  326,  326,  326,  326,  388,  388,  388,  388,  388,
      684,    0,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  894,  895,  897,
      684,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  894,  895,  897,
        0,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,    0,    0,  326,  326,    0,
      326,  326,  326,  326,  326,  326,  326,  326,    0,  326,
      326,  326,  353,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  393,  393,  393,

      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393, 1220, 1220, 1220, 1220,  353,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  441,  441,  477,  477,  477,
      477,  477,  477,  477,  477,    0,    0,  353,  540,  540,
      540,  540,  540,  540,  441,  441,  441,  441,  441,  544,
      544,  544,  544,  353,  544,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  372,  372,  372,  372,  372,  372,  372,  372,

      552,  552,  552,  552,  552,  898,    0,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  899,  900,  901,  898,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  899,  900,  901,    0,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        0,  372,  372,  372,    0,  372,  372,  372,  372,  372,

      372,  372,  372,    0,  372,  372,  372,  415,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      468,  468,  468,  468,  468,  468,  468,  468,    0,  469,
      469,  469,  469,  469,  469,  469,  469,  415,  903,  468,
      694,  694,  694,  694,  470,  694,  470,    0,  469,  470,
      470,  470,  470,  470,  470,  470,  470,  478,  478,  478,
      478,  478,  478,  478,  478,  988,    0,    0,  903,  468,
        0,    0,    0,  988,  473,    0,  473,  415,  469,  473,

      473,  473,  473,  473,  473,  473,  473,  564,  564,  564,
      564,  564,  564,  415,    0,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  425,  425,  425,  425,  425,  425,  425,  425,
      571,  571,  571,  571,  571,  571,    0,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  904,  905,  906,  907,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  904,  905,  906,  907,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
        0,  425,  425,  425,  908,  425,  425,  425,  425,  425,
      425,  425,  425,  909,  425,  425,  425,  471,  471,  471,
      471,  471,  471,  471,  471,  472,  472,  472,  472,  472,
      472,  472,  472,    0,  908,    0,  471,  911,  913,  914,
      474,    0,  474,  909,  472,  474,  474,  474,  474,  474,
      474,  474,  474,  475,  475,  475,  475,  475,  475,  475,
      475,  702,  702,  702,  702,  702,  471,  911,  913,  914,

        0,  476,  475,  476,  472,  915,  476,  476,  476,  476,
      476,  476,  476,  476,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  475,  479,  479,  915,  479,  479,  479,  479,
      479,  479,  479,  479,  594,  594,  594,  594,  594,  594,
        0,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  917,  918,  919,  920,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  917,  918,  919,  920,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,    0,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,    0,  479,  479,
      479,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      497,  497,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,    0,  497,
      497,  497,  497,  497,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,

      532,  532,  532,  532,  532,  532,  532,  532,  601,  601,
      601,  601,  601,  601,    0,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      921,  923,  924,  925,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      921,  923,  924,  925,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,    0,  532,

      532,  532,    0,  532,  532,  532,  532,  532,  532,  532,
      532,    0,  532,  532,  532,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  548,  548,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
        0,  548,  548,  548,  548,  548,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  553,  575,  575,    0,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  691,  691,  691,  691,  691,  691,

      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  926,  927,  928,  929,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  926,  927,  928,  929,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  930,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  662,  575,  575,  575,

      670,  670,  933,  670,  670,  934,  934,  662,  935,  866,
      866,  670,    0,  930,    0,    0,    0,  670,  937,  670,
        0,    0,  938,  698,  698,    0,  662,  866,    0,    0,
      670,  670,  933,  670,  670,  934,  934,  662,  935,    0,
        0,  670,  698,  698,  698,  698,  698,  670,  937,  670,
      685,  685,  938,  685,  685,  685,  685,  685,  685,  685,
      685,  749,  749,  749,  749,  749,  749,    0,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  939,  940,  941,  942,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  939,  940,  941,  942,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,    0,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,    0,  685,  685,  685,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  701,  701,  701,  701,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  718,  720,    0,
        0,    0,    0,  720,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  756,  756,  756,  756,  756,
      756, 1189,  718,  720, 1170, 1170,    0,    0,  720,    0,
     1189,    0,  720,  793,  793,  793,  793,  793,  793, 1189,

      720,    0, 1170,  720,    0,  720,  730,  730,  730,  730,
      730,  730,  730,  730,  778,  778,  778,  778,  778,  778,
      778,  778,  718,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  800,  800,  800,  800,  800,  800,  718,    0,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  719,  735,  768,
      810,    0,  810,    0,  768,  810,  810,  810,  810,  810,
      810,  810,  810,    0,  735,    0,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  774,    0,
        0,    0,  719,    0,  768,    0,    0,    0,    0,  768,
        0,    0,    0,  768,  836,  836,  836,  836,  836,  836,
        0,  768,    0,  812,  768,  812,  768,  944,  812,  812,
      812,  812,  812,  812,  812,  812,  843,  843,  843,  843,
      843,  843,  719,  813,  813,  813,  813,  813,  813,  813,
      813,  867,  867,  867,  867,  867,  867,  944,  719,    0,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  731,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      776,  776,  776,  776,  811,  811,  811,  811,  811,  811,
      811,  811,  814,  814,  814,  814,  814,  814,  814,  814,
      815,  945,  815,  811,  946,  815,  815,  815,  815,  815,
      815,  815,  815,  818,  818,  818,  818,  818,  818,  818,
      818,    0,  731,  816,  816,  816,  816,  816,  816,  816,
      816,  945,    0,  811,  946,    0,    0,    0,  817,    0,
      817,  947,  816,  817,  817,  817,  817,  817,  817,  817,
      817,  819,  819,  819,  819,  819,  819,  819,  819,    0,
        0,    0,  731,  820,  820,  820,  820,  820,  820,  820,
      820,  947,  816,  997,  997,  997,  997,  997,  731,    0,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  739,  739,  739,
      739,  739,  739,  739,  739,  874,  874,  874,  874,  874,
      874,    0,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  948,  949,  950,
      951,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  948,  949,  950,
      951,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  853,  739,  739,  739,    0,
      739,  739,  739,  739,  739,  739,  739,  739,  952,  739,
      739,  739,  766,  821,  821,  821,  821,  821,  821,  821,
      821,  822,  822,  822,  822,  822,  822,  822,  822,  823,
      823,  823,  823,  823,  823,  823,  823,  954,  952,  955,
      956,  957,  958,  959,  960,  961,  962,  963,  960,  964,
        0,  965,  980,  980,  980,  980,  980,  980,  980,  980,
      980,    0,  766,    0,  853,    0,    0,  954,    0,  955,
      956,  957,  958,  959,  960,  961,  962,  963,  960,  964,

      853,  965,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,    0,
        0,    0,  766,    0,    0,    0,    0,    0,  966,  967,
      968,  969,  971,  972,    0,    0,    0,    0,  766,    0,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  767,  966,  967,
      968,  969,  971,  972,  982,  982,  982,  982,  982,  982,
      982,  982,  982,  984,  984,  984,  984,  984,  984,  989,
      989,  989,  989,  989,  989,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  993,  993, 1009, 1009, 1009, 1009,

     1009, 1009,    0,    0,    0,    0,    0,  767,    0,    0,
     1088, 1089, 1090,  993,  993,  993,  993,  993,  996,  996,
      996,  996,  996,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  996, 1016, 1016, 1016, 1016, 1016, 1016,
     1088, 1089, 1090,    0,    0,    0,    0,  767, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1171, 1171, 1171, 1171,
     1171, 1171,    0,  767,    0,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  779,  998,  998,  998,  998,  998,  998,  998,
      998,  998,  998,  998,  998,  998,  998,  998,  998, 1021,

     1021, 1091,    0,    0, 1022, 1022,    0,    0,    0,    0,
        0, 1021,    0,    0,    0,    0, 1022,    0, 1021, 1021,
     1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022,    0,    0,
        0, 1091,  779, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1064, 1064, 1064,
     1064, 1064, 1064, 1064, 1064, 1178, 1178, 1178, 1178, 1178,
     1178,    0,  779, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065,    0,    0,    0,    0, 1093, 1094, 1095,  779, 1096,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,

      779,  779,  779,  779,  779,  779,  779,  783,  783,  783,
      783,  783,  783,  783,  783, 1093, 1094, 1095, 1097, 1096,
     1098,    0,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783, 1099, 1097, 1100,
     1098,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783, 1099,    0, 1100,
        0,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,

      783,  783,  783,  783,  783, 1101,  783,  783,  783, 1105,
      783,  783,  783,  783,  783,  783,  783,  783,    0,  783,
      783,  783,  824,  824,    0,  824,  824,  824,  824,  824,
      824,  824,  824,    0,    0, 1101, 1107, 1108, 1110, 1105,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824, 1111, 1107, 1108, 1110,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824, 1111,    0,    0,    0,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824, 1113,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,    0,  824,  824,  824,
      857,  857,  857,  857,  857,  857,  857,  857,    0,    0,
     1117, 1119, 1122, 1113,    0,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
     1117, 1119, 1122, 1123,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
        0,    0, 1125, 1123,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857, 1127,  857,
      857,  857, 1125,  857,  857,  857,  857,  857,  857,  857,
      857,    0,  857,  857,  857,  885,  885,    0,  885,  885,
      885,  885,  885,  885,  885,  885,  885,    0, 1127, 1130,
     1131, 1132,    0,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885, 1133, 1130,

     1131, 1132,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885, 1133,    0,
        0,    0,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885, 1134,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,    0,
      885,  885,  885,  975,  975,    0,  975,  975,  975,  975,
      975,  975,  975,  975,    0,    0, 1134, 1135, 1140, 1141,
        0,  975,  975,  975,  975,  975,  975,  975,  975,  975,

      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975, 1142, 1135, 1140, 1141,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975, 1142,    0,    0,    0,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975, 1143,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  975,    0,  975,  975,
      975, 1019, 1019,    0, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019,    0, 1143, 1145, 1146, 1147,    0, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1148, 1145, 1146, 1147, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1148,    0,    0,    0, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019,    0, 1019, 1019, 1019, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1149, 1019, 1019, 1019, 1024,
     1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1150, 1151, 1155, 1157,
     1190, 1205, 1207, 1208,    0, 1149, 1210, 1211, 1213, 1214,
     1218, 1221, 1222, 1223, 1190, 1224, 1225, 1226, 1228, 1230,
     1190, 1231, 1233, 1235, 1236, 1243, 1150, 1151, 1155, 1157,
     1244, 1205, 1207, 1208, 1024, 1245, 1210, 1211, 1213, 1214,
     1218, 1221, 1222, 1223,    0, 1224, 1225, 1226, 1228, 1230,
     1246, 1231, 1233, 1235, 1236, 1243, 1248, 1249, 1251, 1252,
     1244, 1268, 1331, 1330,    0, 1245,    0,    0,    0,    0,

        0,    0, 1330,    0, 1024,    0, 1331,    0,    0,    0,
     1246, 1330, 1331,    0,    0,    0, 1248, 1249, 1251, 1252,
     1024, 1268, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034,    0,    0, 1269,
     1270, 1271, 1274,    0, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1269,
     1270, 1271, 1274, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,

     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,    0,
        0, 1275,    0, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1277, 1034, 1034,
     1034, 1275, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1280, 1034, 1034, 1034, 1042, 1273, 1273, 1273, 1273, 1278,
     1278, 1278, 1278, 1281, 1282, 1285,    0, 1277, 1287, 1289,
     1294, 1295, 1298, 1300,    0, 1301, 1306, 1309,    0,    0,
     1280, 1310, 1314,    0,    0, 1315, 1316, 1317, 1318, 1321,
        0, 1326, 1273, 1281, 1282, 1285, 1278,    0, 1287, 1289,

     1294, 1295, 1298, 1300, 1042, 1301, 1306, 1309, 1303, 1303,
     1273, 1310, 1314, 1304, 1304, 1315, 1316, 1317, 1318, 1321,
     1303, 1326, 1273, 1327, 1329, 1304, 1278, 1303, 1303, 1303,
     1303, 1303, 1304, 1304, 1304, 1304, 1304,    0,    0,    0,
     1273,    0,    0,    0, 1042,    0,    0,    0,    0,    0,
        0,    0,    0, 1327, 1329,    0,    0, 1333, 1334, 1335,
     1042, 1336, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1333, 1334, 1335,
     1337, 1336, 1340,    0, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1347,
     1337, 1348, 1340, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1347,
        0, 1348,    0, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1349, 1052, 1052,
     1052, 1350, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
        0, 1052, 1052, 1052, 1068, 1068,    0, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068,    0,    0, 1349, 1351, 1352,
     1354, 1350, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1355, 1351, 1352,
     1354, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1355,    0,    0,
        0, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1356, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,    0, 1068,
     1068, 1068, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
        0,    0, 1364, 1365, 1366, 1356,    0, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1364, 1365, 1366,    0, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076,    0,    0,    0,    0, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,

     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
        0, 1076, 1076, 1076,    0, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076,    0, 1076, 1076, 1076, 1084, 1084,    0,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,    0,
        0,    0,    0,    0,    0, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
        0,    0,    0,    0, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

        0,    0,    0,    0, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,    0, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084,    0, 1084, 1084, 1084, 1159, 1159,    0, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159,    0,    0,    0,    0,
        0,    0,    0, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,    0,    0,
        0,    0, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,

     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,    0,    0,
        0,    0, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159,    0, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,    0,
     1159, 1159, 1159, 1192,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1192,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1192,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1192,    0, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196,    0,    0,    0,    0,    0,    0,    0, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196,    0,    0,    0,    0, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196,    0,    0,    0,    0, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196,    0, 1196, 1196, 1196,    0, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196,    0, 1196, 1196, 1196, 1198,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1198,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1198,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1198,    0, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202,    0,    0,    0,    0,    0,    0,    0, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202,    0,    0,    0,    0, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,

     1202, 1202, 1202,    0,    0,    0,    0, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202,    0, 1202, 1202, 1202,    0, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202,    0, 1202, 1202, 1202, 1203, 1203,
        0, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,    0,
        0,    0,    0,    0,    0,    0, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203,    0,    0,    0,    0, 1203, 1203, 1203, 1203, 1203,

     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203,    0,    0,    0,    0, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,    0,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203,    0, 1203, 1203, 1203, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204,    0,    0,    0,    0,    0,    0,
        0, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,

     1204, 1204, 1204, 1204, 1204, 1204,    0,    0,    0,    0,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204,    0,    0,    0,    0,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204,    0, 1204, 1204, 1204,    0, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204,    0, 1204, 1204,
     1204, 1369,    0, 1369, 1369, 1369, 1369,    0, 1369,    0,
        0, 1369, 1370,    0, 1370, 1370, 1370, 1370,    0, 1370,

        0,    0, 1370, 1371,    0, 1371, 1371, 1371, 1371,    0,
     1371,    0,    0, 1371, 1372, 1372, 1372, 1372,    0, 1372,
        0,    0, 1372, 1374, 1374, 1374, 1374, 1374, 1375, 1375,
     1375, 1375, 1375, 1376, 1376, 1376, 1376, 1376, 1377, 1377,
     1377, 1377, 1377, 1378, 1378,    0, 1378, 1378, 1379, 1379,
     1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380, 1381, 1381,
     1381, 1381, 1381, 1382, 1382, 1382, 1382, 1382, 1383, 1383,
     1383, 1383, 1383, 1384,    0, 1384, 1384, 1384, 1384,    0,
     1384,    0,    0, 1384, 1385, 1385, 1385, 1385, 1386, 1386,
     1386, 1387, 1387, 1387, 1387, 1387, 1388, 1388, 1388, 1388,

     1388, 1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390, 1390,
     1390, 1391,    0, 1391, 1391, 1391, 1391,    0, 1391,    0,
        0, 1391, 1392, 1392, 1392, 1392, 1393, 1393, 1393, 1394,
     1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1397, 1397, 1397, 1398,
     1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1400,
     1400, 1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401, 1402,
     1402,    0, 1402, 1402, 1403, 1403, 1403, 1403, 1403, 1404,
     1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405, 1406,
     1406, 1406, 1406, 1406, 1407, 1407, 1407, 1407, 1407, 1408,

        0, 1408, 1408, 1408, 1408,    0, 1408,    0,    0, 1408,
     1409, 1409, 1409, 1409, 1410, 1410, 1410, 1411, 1411, 1411,
     1411, 1411, 1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413,
     1413, 1413, 1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415,
     1415, 1415, 1416, 1416, 1416, 1416, 1416, 1417, 1417, 1417,
     1417, 1417, 1418, 1418, 1418, 1418, 1418, 1419, 1419,    0,
     1419, 1419, 1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421,
     1421, 1421, 1422, 1422, 1422, 1422, 1422, 1423, 1423, 1423,
     1423, 1423, 1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425,
     1425, 1425, 1426, 1426, 1426, 1426, 1426, 1427, 1427, 1427,

     1427, 1427, 1428, 1428, 1428, 1428, 1428, 1429, 1429,    0,
     1429, 1429, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431,
     1431, 1431, 1432, 1432, 1432, 1432, 1432, 1433, 1433, 1433,
     1433, 1433, 1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435,
     1435,    0, 1435,    0,    0, 1435, 1436, 1436, 1436, 1436,
     1437, 1437, 1437, 1438, 1438, 1438, 1438, 1438, 1439, 1439,
     1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440, 1441, 1441,
     1441, 1441, 1441, 1442, 1442, 1442, 1442, 1442, 1443, 1443,
     1443, 1443, 1443, 1444, 1444, 1444, 1444, 1444, 1445, 1445,
     1445, 1445, 1445, 1446, 1446,    0, 1446, 1446, 1447, 1447,

     1447, 1447, 1447, 1448, 1448, 1448, 1448, 1448, 1449, 1449,
     1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450, 1451, 1451,
     1451, 1451, 1451, 1452,    0, 1452, 1453, 1453, 1453, 1453,
     1453, 1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455,
     1455, 1456, 1456, 1456, 1456, 1456, 1457, 1457,    0, 1457,
     1457, 1458, 1458, 1458, 1458, 1458, 1459, 1459, 1459, 1459,
     1459, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461,
     1461, 1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463,
     1463, 1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465,
     1465, 1466, 1466, 1466, 1466, 1466, 1467, 1467, 1467, 1467,

     1467, 1468, 1468, 1468, 1468, 1468, 1469, 1469, 1469, 1469,
     1469, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471,
     1471, 1472, 1472, 1472, 1472, 1472, 1472,    0, 1472,    0,
        0, 1472, 1473, 1473, 1473, 1473, 1473, 1474, 1474, 1474,
     1474, 1474, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476,
     1476, 1476, 1477, 1477, 1477, 1477, 1477, 1478, 1478, 1478,
     1478, 1478, 1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480,
     1480, 1480, 1481, 1481, 1481, 1481, 1481, 1482, 1482, 1482,
     1482, 1482, 1483, 1483, 1483, 1483, 1483, 1484, 1484, 1484,
     1484, 1484, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486,

     1486, 1486, 1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488,
     1488, 1488, 1489, 1489,    0, 1489, 1489, 1490, 1490, 1490,
        0, 1490, 1491, 1491, 1491, 1491, 1491, 1492, 1492, 1492,
     1492, 1492, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494,
     1494, 1494, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496,
     1496, 1496, 1497, 1497, 1497, 1497, 1497, 1498, 1498, 1498,
     1498, 1498, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500,
     1500, 1500, 1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502,
     1502, 1502, 1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504,
     1504, 1504, 1504,    0, 1504,    0,    0, 1504, 1505, 1505,

     1505, 1505, 1505, 1506, 1506, 1506, 1506, 1506, 1507, 1507,
     1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1509, 1509,
     1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510, 1511, 1511,
     1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512, 1513, 1513,
     1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514, 1515, 1515,
        0, 1515, 1515, 1516, 1516, 1516,    0, 1516, 1517, 1517,
     1517, 1517, 1517, 1518, 1518, 1518, 1518, 1518, 1519, 1519,
     1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520, 1521, 1521,
     1521, 1521, 1521, 1522, 1522, 1522, 1522, 1522, 1523, 1523,
     1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524, 1525, 1525,

     1525, 1525, 1525, 1526, 1526, 1526, 1526, 1526, 1527, 1527,
     1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528, 1529, 1529,
     1529, 1529, 1529, 1530, 1530, 1530, 1530, 1530, 1531, 1531,
     1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532, 1533, 1533,
     1533, 1533, 1533, 1534, 1534,    0, 1534, 1534, 1535, 1535,
     1535, 1535, 1535, 1536, 1536, 1536, 1536, 1536, 1537, 1537,
     1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538, 1539, 1539,
     1539, 1539, 1539, 1540, 1540, 1540, 1540, 1540, 1541, 1541,
     1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542, 1543, 1543,
     1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544, 1545, 1545,

     1545, 1545, 1545, 1546, 1546, 1546, 1546, 1546, 1547, 1547,
     1547, 1547, 1547, 1548, 1548, 1548, 1548, 1548, 1549, 1549,
     1549, 1549, 1549, 1550, 1550, 1550, 1550, 1550, 1551, 1551,
     1551, 1551, 1551, 1552, 1552, 1552, 1552, 1552, 1553, 1553,
     1553, 1553, 1553, 1554, 1554, 1554, 1554, 1554, 1555, 1555,
     1555, 1555, 1555, 1556, 1556, 1556, 1556, 1556, 1557, 1557,
     1557, 1557, 1557, 1558, 1558, 1558, 1558, 1558, 1559, 1559,
        0, 1559, 1559, 1560, 1560, 1560,    0, 1560, 1561, 1561,
     1561, 1561, 1561, 1562, 1562, 1562, 1562, 1562, 1563, 1563,
     1563, 1563, 1563, 1564, 1564, 1564, 1564, 1564, 1565, 1565,

     1565, 1565, 1565, 1566, 1566, 1566, 1566, 1566, 1567, 1567,
     1567, 1567, 1567, 1568, 1568, 1568, 1568, 1568, 1569, 1569,
     1569, 1569, 1569, 1570, 1570, 1570, 1570, 1570, 1571, 1571,
     1571, 1571, 1571, 1572, 1572, 1572, 1572, 1572, 1573, 1573,
     1573, 1573, 1573, 1574, 1574, 1575, 1575, 1575, 1575, 1575,
     1576, 1576, 1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577,
     1578, 1578, 1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579,
     1580, 1580, 1580, 1580, 1580, 1581, 1581, 1581, 1581, 1581,
     1582, 1582, 1582, 1582, 1582, 1583, 1583, 1583, 1583, 1583,
     1584, 1584, 1584, 1584, 1584, 1585, 1585, 1585, 1585, 1585,

     1586, 1586, 1586, 1586, 1586, 1587, 1587,    0, 1587, 1587,
     1588, 1588, 1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589,
     1590, 1590, 1590, 1590, 1590, 1591, 1591, 1591, 1591, 1591,
     1592, 1592, 1592, 1592, 1592, 1593, 1593, 1593, 1593, 1593,
     1594, 1594, 1594, 1594, 1594, 1594,    0, 1594,    0,    0,
     1594, 1595, 1595, 1595, 1595, 1596, 1596, 1596, 1597, 1597,
     1597, 1597, 1597, 1598, 1598, 1598, 1598, 1598, 1599, 1599,
     1599, 1599, 1599, 1600, 1600, 1600, 1600, 1600, 1601,    0,
     1601, 1601, 1601, 1601,    0, 1601,    0,    0, 1601, 1602,
     1602, 1602, 1602, 1602, 1603, 1603, 1603, 1603, 1603, 1604,

        0, 1604, 1604, 1604, 1604,    0, 1604,    0,    0, 1604,
     1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606, 1606, 1606,
     1607, 1607, 1607, 1607, 1607, 1608, 1608, 1608, 1608, 1608,
     1609, 1609, 1609, 1609, 1609, 1610, 1610, 1610, 1610, 1610,
     1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612, 1612, 1612,
     1613, 1613, 1613, 1613, 1613, 1614, 1614, 1614, 1614, 1614,
     1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616, 1616, 1616,
     1616,    0, 1616,    0,    0, 1616, 1617, 1617, 1617, 1617,
     1618, 1618, 1618, 1619, 1619, 1619, 1619, 1619, 1620, 1620,
     1620, 1620, 1620, 1621, 1621, 1621, 1621, 1621, 1622, 1622,

     1622, 1622, 1622, 1623,    0, 1623, 1623, 1623, 1623,    0,
     1623,    0,    0, 1623, 1624, 1624, 1624, 1624, 1624, 1625,
     1625, 1625, 1625, 1625, 1626, 1626, 1626, 1626, 1626, 1627,
     1627, 1627, 1627, 1627, 1628, 1628, 1628, 1628, 1628, 1629,
     1629, 1629, 1629, 1629, 1630, 1630, 1630, 1630, 1630, 1631,
     1631, 1631, 1631, 1631, 1632, 1632, 1632, 1632, 1632, 1633,
     1633, 1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1635,
     1635, 1635, 1635, 1635, 1636, 1636, 1636, 1636, 1636, 1637,
     1637, 1637, 1637, 1637, 1638, 1638, 1638, 1638, 1638, 1639,
     1639, 1639, 1639, 1639, 1640, 1640, 1640, 1640, 1640, 1641,

     1641, 1641, 1641, 1641, 1642, 1642, 1642, 1642, 1642, 1643,
     1643, 1643, 1643, 1643, 1644, 1644, 1644, 1644,    0, 1644,
        0,    0, 1644, 1645, 1645, 1645, 1645, 1645, 1646, 1646,
     1646, 1646, 1646, 1647, 1647, 1647, 1647, 1647, 1648, 1648,
     1648, 1648, 1648, 1649, 1649, 1649, 1649, 1649, 1650, 1650,
     1650, 1650, 1650, 1651, 1651, 1651, 1651, 1651, 1652, 1652,
     1652, 1652, 1652, 1653, 1653, 1653, 1653, 1653, 1654, 1654,
     1654, 1654, 1654, 1655, 1655, 1655, 1655, 1655, 1656, 1656,
     1656, 1657, 1657, 1657, 1657, 1657, 1658, 1658, 1658, 1658,
     1658, 1659, 1659, 1659, 1659, 1659, 1660, 1660, 1660, 1660,

     1660, 1661, 1661, 1661, 1661, 1661, 1662, 1662,    0, 1662,
     1662, 1663, 1663, 1663, 1663, 1663, 1664, 1664, 1664, 1664,
     1664, 1665, 1665, 1665, 1665, 1665, 1666, 1666, 1666, 1666,
     1666, 1667, 1667, 1667, 1667, 1667, 1668, 1668, 1668, 1668,
     1668, 1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1670,
     1670, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672, 1672,
     1672, 1673, 1673, 1673, 1673, 1673, 1674, 1674, 1674, 1674,
     1674, 1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676, 1676,
     1676, 1677, 1677, 1677, 1677, 1677, 1678, 1678, 1678, 1678,
     1678, 1678,    0, 1678,    0,    0, 1678, 1679, 1679, 1679,

     1679, 1679, 1680, 1680, 1680, 1680, 1680, 1681, 1681, 1681,
     1681, 1681, 1682, 1682, 1682, 1682, 1682, 1683, 1683, 1683,
     1683, 1683, 1684, 1684, 1684, 1684, 1684, 1685, 1685, 1685,
     1685, 1685, 1686, 1686, 1686, 1686, 1686, 1686,    0, 1686,
        0,    0, 1686, 1687, 1687, 1687, 1687, 1687, 1688, 1688,
     1688, 1688, 1688, 1689, 1689, 1689, 1689, 1689, 1690, 1690,
     1690, 1690, 1690, 1691, 1691, 1691, 1691, 1691, 1692, 1692,
     1692, 1692, 1692, 1693, 1693, 1693, 1693, 1693, 1694, 1694,
     1694, 1694, 1694, 1695, 1695, 1695, 1695, 1695, 1696, 1696,
     1696, 1696, 1696, 1697, 1697, 1697, 1697, 1697, 1698, 1698,

     1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699, 1700, 1700,
     1700, 1700, 1700, 1701, 1701, 1701, 1701, 1701, 1702, 1702,
     1702, 1702, 1702, 1703, 1703, 1703, 1703, 1703, 1704, 1704,
     1704, 1704, 1704, 1705, 1705, 1705, 1705, 1705, 1706, 1706,
     1706, 1706, 1706, 1706,    0, 1706,    0,    0, 1706, 1707,
     1707, 1707, 1707, 1707, 1708, 1708, 1708, 1708, 1708, 1709,
     1709, 1709, 1709, 1709, 1709,    0, 1709,    0,    0, 1709,
     1710, 1710, 1710, 1710, 1710, 1711, 1711, 1711, 1711, 1711,
     1712, 1712, 1712, 1712, 1712, 1713, 1713, 1713, 1713, 1713,
     1714, 1714, 1714, 1714, 1714, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,

     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368
    } ;

static yyconst flex_int16_t yy_rule_linenum[179] =
    {   0,
      261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
      271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
      281,  282,  283,  284,  285,  286,  287,  288,  289,  290,
      291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
      301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  319,  320,
      321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
      331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  347,  348,  349,  350,
      351,  352,  353,  354,  355,  356,  357,  358,  359,  360,

      361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
      371,  372,  373,  374,  375,  376,  377,  378,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
      391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
      401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
      411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
      431,  432,  433,  434,  435,  436,  437,  440
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3265 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 260 "lib/SPARQLfedScanner.lpp"

#line 3429 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1369 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1368 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 179 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 179 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 180 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_VALUES;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::GT_INSERT_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_DATA;}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::GT_DELETE_LBRACKET_SPACECHAR_TAB_RETURN_LINEFEED_RBRACKET_PLUS_WHERE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRBEFORE;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRAFTER;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_TZ;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_UUID;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRUUID;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRIREF;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 430 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 431 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 433 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 434 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 435 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 436 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 437 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 439 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 440 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 446 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4449 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1369 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1369 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1368);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 446 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::location_type*& yylloc, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    // bool foundNewLine = false;
    for (size_t i = skip; i < yyleng-skip; i++) {
	// if (foundNewLine)
	//     yylloc->step();
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    if ((yytext[i] == '\r' && (i == yyleng-skip -1 || yytext[i+1] != '\n'))
		|| yytext[i] == '\n') {
		yylloc->end.lines(1);
		// foundNewLine = true;
	    }
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


