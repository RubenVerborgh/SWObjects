#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1442] =
    {   0,
        0,    0,  182,  180,    2,    1,    1,   69,  180,    2,
      180,  180,  180,    9,   10,   20,   68,   11,   86,    4,
       65,  158,  152,   36,   80,    3,   81,   67,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,   70,   71,   66,  180,   64,  180,  180,    7,    5,
        8,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
        2,    1,   79,    0,  168,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    2,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  156,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   78,    0,  167,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  171,  176,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  161,   60,    0,  164,   12,
      159,    0,  158,    0,    0,  153,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   82,  151,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       83,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  157,    0,    0,  152,    0,    0,    0,    0,    0,
       19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  127,   84,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   44,  117,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  172,  148,    0,    0,
        0,   77,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  168,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  156,  156,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  156,  156,  156,

      156,  156,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  167,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,  176,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      176,  176,  176,  176,  176,  176,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  173,
      162,    0,    0,  165,    0,    0,    0,  159,    0,    0,
      160,    0,    0,  153,    0,  153,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      153,  153,  153,  153,  153,  153,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
      155,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  155,  155,  155,  155,  155,  155,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   96,   43,   53,   75,   31,   24,  145,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  112,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  144,  121,    0,  143,    0,    0,    0,   85,  118,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
        0,  142,    0,    0,    0,    0,    0,   93,    0,    0,
        0,    0,    0,    0,  154,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    0,  156,  156,
      156,  156,  156,  156,  156,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  156,  156,
      156,  156,  156,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  176,  176,  176,  176,  176,  176,  176,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  176,  176,  176,  176,  176,    0,    0,    0,
      162,    0,    0,  163,    0,  165,    0,    0,  166,    0,
      160,    0,  160,    0,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  153,  153,  153,
      153,  153,    0,    0,    0,    0,    0,    0,  155,  155,
      155,  155,  155,  155,  155,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  155,  155,
      155,  155,  155,    0,    0,  157,    0,    0,    0,    0,

        0,    0,    0,   14,   58,    0,    0,   97,    0,    0,
        0,    0,    0,   46,    0,    0,    0,    0,    0,   32,
        0,   41,    0,   74,    0,    0,    0,   25,    0,    0,
        0,    0,    0,   39,    0,    0,    0,    0,    0,   88,
        0,    0,   37,    0,    0,    0,   45,    0,    0,    0,
        0,    0,    0,   95,    0,    0,    0,    0,   57,    0,
        0,    0,    0,    0,    0,  122,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  119,    0,    0,   47,  110,
      154,    0,  154,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  154,  154,  154,  154,  154,
      154,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  149,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
      156,  156,  156,  156,    0,    0,  156,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  176,  176,  176,
      176,  176,    0,    0,  176,    0,  163,    0,  163,    0,
      166,    0,  166,  153,  153,  153,  153,  153,    0,    0,
      153,  155,  155,  155,  155,  155,    0,    0,  155,    0,

       94,   91,   40,    0,    0,    0,    0,  140,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   98,   52,   27,
        0,  113,    0,    0,  131,    0,    0,  132,    0,  103,
       33,    0,   61,    0,  111,   26,    0,    0,   30,    0,
       54,    0,  136,    0,   99,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,  102,   59,   62,    0,
       50,    0,   22,  154,  154,  154,  154,  154,  154,  154,
      154,  154,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  154,  154,  154,  154,  154,

        0,    0,  150,    0,    0,  170,    0,    0,    0,    0,
      156,  169,    0,    0,    0,    0,  176,  153,  155,    0,
      100,    0,    0,   42,    0,    0,   48,    0,    0,    0,
      139,   63,    0,   29,   49,    0,    0,    0,    0,    0,
        0,   34,    0,   15,    0,    0,    0,  146,    0,   16,
        0,    0,  123,  124,  125,   38,   73,    0,    0,    0,
        0,  101,    0,    0,  137,    0,    0,   35,  154,  154,
      154,  154,  154,    0,    0,  154,    0,  174,    0,    0,
      175,    0,    0,    0,    0,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,  133,    0,    0,    0,   72,

      114,    0,   18,  138,    0,  115,    0,   56,    0,    0,
      107,  128,    0,  120,    0,    0,  154,    0,    0,  126,
        0,  105,   90,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,  130,    0,  109,    0,
        0,  116,    0,    0,    0,   21,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  134,  135,    0,  147,

      108,  106,   76,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  178,    0,    0,    0,    0,    0,  177,    0,
       89,  179,  178,    0,    0,  141,  177,  179,    0,  104,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   21,   28,   21,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       45,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,    1,   66,   67,   68,   69,

       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   81,   75,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,   99,   99,  100,  101,  101,  101,  101,  101,  102,
      103,  101,  104,  105,  106,  107,  106,  108,  106,  106,
      109,  110,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  113,  113,  113,  115,  115,  115,  115,  116,
      115,  115,  117,  118,  118,  118,  118,  118,  118,  119,
      120,  121,  121,  122,  123,  124,  124,  124,  124,  124,

      124,  124,  124,  125,  126,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  128,  129,  130,  131,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  133,  134,  135,  136,
      137,  137,  137,  138,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121
    } ;

static yyconst flex_int32_t yy_meta[139] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    3,    3,
        1,    3,    3,    3,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        3,    1,    3,    1,    3,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        1,    1,    1,    3,    3,    7,    7,    7,    7,    7,

        7,    7,    7,    8,    7,    7,    7,    7,    9,    7,
        7,    7,    7,    7,    7,    7,    9,    7,   10,   11,
       12,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1819] =
    {   0,
        0,    0, 1424,11244,  137,11244, 1420, 1385,  136,   36,
      254, 1361,  380,  143,11244,  498,  157,11244,  168,  181,
    11244,  374,  626,11244,  732,11244, 1315,  850,    0,  970,
      369,  729, 1072, 1113, 1142, 1183,  384, 1231,  754, 1282,
     1327, 1342, 1390, 1431, 1456, 1507, 1201, 1550, 1390, 1568,
     1603,  147,11244, 1273, 1280,    0, 1620, 1656,11244, 1207,
    11244,    0,    0,  115,  124,    0,  114,    0,  126,  121,
        0,  132,    0,  360, 1194,    0, 1651,  170, 1658,    0,
      139,11244,11244, 1772, 1282,  763,    0,    0,    0,  373,
        0, 1684,    0, 1691,    0,  541, 1713,    0,    0,    0,

     1017,    0, 1756,    0, 1806,    0, 1243, 1906,    0,    0,
     1351, 1468,    0,  230,    0,  294,  379,    0, 1706,    0,
     1087, 1158,    0, 1948,  414, 1955,    0,11244, 2064, 1236,
     2070,    0,    0,    0, 1765,    0, 1987,    0, 1994,    0,
     1582,  469,11244, 2182,    0,    0, 2019, 2059,    0,  474,
        0,  295,  541,    0, 2057,    0, 1616, 1142,    0, 2224,
      604, 2231,    0,  137, 1847, 2333,11244, 2341, 2353,11244,
     2361, 2384, 2394, 2414, 2422, 2484,    0, 2616,    0,    0,
     2369, 2378,    0,  764,    0,  298,  672,    0, 2525,    0,
     2028, 1135,    0, 2556,  703, 2577,    0, 2614, 2665,11244,

        0,    0,    0, 2556,    0, 2657,    0, 2699,    0, 2603,
    11244, 2799,    0,    0, 2623, 2674,    0,  826,    0,  300,
      733,    0, 2825,    0, 2399, 1130,    0, 2850,  887, 2857,
        0, 1196, 2960, 1178, 3088,    0,  235,  355,  382,  373,
      756,  397, 1091,    0, 3003,    0, 3130,    0,  946, 1051,
        0,  663,  688, 1057,    0, 3123,    0, 3148, 1069,    0,
     3150, 1179, 3163,    0,  479,  611,  697,  719,    0,  739,
      744, 1333,  935, 1056, 1176, 1060, 1064, 1079, 1079, 1079,
     1077, 1113, 1177, 1111, 1115,    0, 1180, 1134, 3247, 1136,
     1152, 1162, 1176, 1188, 1138, 1201, 1209, 1248, 1225, 1268,

     1236, 1228, 1267, 1284, 1274, 1446, 1275, 1438, 1563, 1321,
     1323, 1350, 1453, 1325,    0,    0, 1339, 3248, 1341, 1346,
     1391, 1389, 1441, 1435, 1455,  909,11244,11244, 3312, 1084,
     1074,11244,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   97, 1712,    0, 1015, 1203,    0, 1024,    0,    0,
        0, 1771,    0,    0,11244, 3443,    0, 1041,    0,    0,
        0,    0,    0,    0,    0,    0, 1028,    0,    0,    0,
        0,    0,    0,    0, 3561,    0,  938,    0, 3207,    0,
     3355,    0, 1820,  916,    0,  718, 1603,    0, 3348,    0,
     3373,  936,    0, 3375, 1699, 3401,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  151, 1882,    0,    0,  935,
        0,    0,    0, 2063,    0,    0,11244, 3687,    0,  927,
        0,    0,    0,    0,    0,    0,    0, 3805,    0,  888,
        0, 3397,    0, 3426,    0, 2096,  854,    0,  729, 2013,
        0, 3419,    0, 3604,  789,    0, 3606, 2160, 3619,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  213, 2279,
        0,    0,  748,    0,    0,    0, 2460,    0,    0,  825,
     3719, 3729, 3527, 3922, 3930, 3749, 3950, 3958, 3981, 3757,
     3989, 3997, 4018, 4080,    0,    0,    0, 4212,  745,    0,
     3973,    0, 4137,    0, 2596,  722,    0, 1385, 1415, 2613,

        0, 4136,    0, 3933,  733,    0, 4161, 2312, 4173,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  273,
     2664,    0,    0,  732,    0,    0,    0, 2713,    0,    0,
        0,  763,    0,    0,    0,    0,    0,    0,    0, 4286,
        0,  726,    0, 4198,    0, 4328,    0, 2775,  683,    0,
     1420, 2875,    0, 4321,    0, 3964,  699,    0, 4346, 2370,
     4353,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      324, 2936,    0,    0,  690,    0,    0,    0, 3003,    0,
        0,    0, 4456,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      378, 3064,    0,    0,  677,    0,    0,    0, 3226,    0,
        0, 1464, 1489, 1506, 1499, 1502, 1516, 1506, 3247, 1496,
     1545, 1559, 1560,    0, 1562, 1560, 1569, 1566, 1570, 1609,
     1608, 1612, 1614, 1621, 1659, 1658, 1659, 1671, 2082, 2095,
     2086,    0, 2323, 2597, 2633, 2623, 2942, 3244, 3235, 3245,
     3251,    0,    0, 3256, 3240, 3243, 3259, 3333,    0,    0,
     3321, 3331, 3336, 3366, 3511, 3522, 3507, 3524, 3546, 3546,
     3578, 4550, 3574, 3616, 3682, 3702, 2116, 3720, 3710, 4558,
     3710,    0, 3724, 3713, 3728, 3754, 3753,    0, 3757, 3769,
     3782, 3787, 3823, 3816, 4626,    0,    0, 4668, 4677,    0,

     3976,    0, 1421, 3873,    0, 4670,    0, 4521,  675,    0,
     4695, 2384, 4702,    0,  684,  690,    0,    0,    0,  621,
      618,    0,    0,    0,    0,    0,    0, 4816, 4948, 4817,
        0,    0,    0, 4718,    0, 4743,    0, 4750,    0, 4806,
     5080,    0,    0,    0, 4852,    0,    0,    0, 5198,    0,
        0,    0,    0,    0,    0,    0,    0, 1213, 3995,    0,
        0,  626,    0,    0,    0, 4056,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 5324, 5451, 4950,    0,    0,
        0, 4798,    0, 4895,    0, 4930,    0, 4825, 5578,    0,
        0,    0, 5696,    0,    0,    0,    0,    0,    0,    0,

        0, 1546, 4200,    0,    0,  593,    0,    0,    0, 4262,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4942,
     5067, 5035, 5075, 5087, 5100, 5108, 5128, 5136, 5144, 5164,
     5316, 5324, 5332, 5340, 5824,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1622, 4371,    0,    0,
      591,    0,    0,    0, 4432,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 5360,    0,    0,    0, 5941,    0,
        0,    0,    0,    0,    0,    0,    0, 3438, 4540,    0,
        0,  550,    0,    0,    0, 4602,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  627, 6061,    0,    0,    0,

        0,    0,    0,    0,    0, 3860, 3900,    0, 3912, 3925,
     3960, 3947, 3996,    0, 4189, 4191, 4220, 4522, 4542, 4547,
     4556,    0, 4563,    0, 4549, 4564, 4560,    0, 4573, 4838,
     4851, 4876, 4879,    0, 4988, 4981, 5063, 5095, 5101, 5149,
     5158, 5145,    0, 5161, 5206, 5189,    0, 5222, 5253, 5319,
     5318, 5327, 5318,    0, 5335, 5316, 5339, 5343,    0, 5329,
     5337, 5336, 5349, 5336, 5345,    0,  606,  595,  598, 5341,
     5337, 5351, 5354, 5341, 5347, 5399, 5343, 5381, 5383, 5378,
     5400, 5400, 5393, 5404, 5403,    0, 5434, 5436,    0,    0,
     6181,    0,    0,  523,    0, 5418,    0, 5427,    0, 4756,

      444,    0, 1545, 2600, 4775,    0, 5420,    0, 5445,  464,
        0, 5495, 5066, 5502,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  363, 5314,    0,    0,  463,    0,    0,
        0, 5392,    0,    0, 6301,  463, 5450, 5527,  431, 6432,
        0,  419,    0,    0,    0,    0,    0,    0,    0, 6550,
        0,    0,    0,    0,    0,    0,    0, 6676,    0,  391,
        0,    0,    0,    0,    0,    0,    0, 6794,    0,    0,
        0,    0,    0,    0,    0, 5604, 5626, 5634, 5642, 5650,
     5662, 6419, 6427, 6922,    0,    0,    0,    0,    0,    0,
        0, 7039,    0,    0,    0,    0,    0,    0,    0, 7159,

        0,    0,    0, 5642, 5642, 5645, 5655,    0, 5688, 5671,
     5710, 5719, 5747, 5806, 5817, 5805, 5863,    0,    0,  382,
     5930,    0, 5919, 5925,    0, 5935, 5992,    0, 6000,    0,
        0, 6040,    0, 6053,    0,    0, 6040, 6046,    0, 6094,
        0, 6172,    0, 6175,    0, 6174, 6175, 6233, 6278, 6297,
     6296,  418,  416,  407, 6281, 6339, 6381, 6415,    0, 6418,
     6409, 6410, 6424, 6417, 6410, 6413,    0,    0,    0, 6426,
        0, 6414,    0, 7279,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4778, 5433,    0,    0,  314,    0,
        0,    0, 5720,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 4913, 4912,11244, 7410,    0,    0,    0,
     7528,11244, 7654,    0,    0,    0, 7772, 7900, 8017, 6430,
        0, 6414, 6421,    0, 6420, 6418, 5011, 6436, 6436,  323,
        0,    0, 6437,    0, 5497, 6430, 6425, 6426, 6425, 6427,
     6428,    0, 6446,    0, 6444, 6444, 6433,    0, 6442,    0,
     6462, 6477,    0,    0,    0,    0,    0, 6478, 6469, 6467,
     6479,    0, 6471, 6542,    0, 6533, 6531,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  249,    0,  187,  159,
        0,  127, 6544, 6603, 6592, 6644,    0, 6687, 6635, 6653,
     6640, 6656, 6648, 6707, 7309,    0, 6663, 6656, 6663,    0,

        0, 6655,    0,    0, 6655,    0, 6654,    0, 6653, 6654,
        0,    0, 6653,    0, 6673, 6677,    0, 7352, 7358,    0,
     6664,    0,    0, 6683, 6677, 8153,    0,    0,    0, 6414,
        0, 7382,    0, 7389,    0, 6441,    0,    0, 6671, 6673,
     6709, 8290,    0,    0,    0, 6669,    0, 7571,    0, 7578,
        0, 7322, 6746, 6756, 6752,    0,    0, 6745,    0, 6786,
     6775,    0, 6816, 6823, 7415,    0, 6803, 6913, 8427, 8564,
     6919, 6913,    0,  192,    0,    0,    0,    0,    0,    0,
        0, 6961, 7032, 7017, 8701, 8838, 7036,    0,  179,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 7033,    0,

        0,    0,    0,   67,   58, 7094, 7082, 8975, 9112, 7150,
        0,    0,    0,  112, 7155, 7156, 7139,    0,    0,    0,
        0, 7197,11244, 7270, 7583, 7659, 7256, 7258,11244, 7277,
        0,11244, 7330, 7386, 7375,    0,    0, 7388, 7483,    0,
    11244, 9250, 9261, 9272, 9281,  148, 9286, 9291, 9296, 9301,
     9306, 9311, 9316, 9321, 9326, 9331, 9342, 9347, 9351, 9354,
     9359, 9364, 9369, 9380, 9385, 9389, 9392, 9397, 9402, 9407,
     9412, 9417, 9422, 9427, 9432, 9437, 9442, 9447, 9452, 9457,
     9468, 9473, 9477, 9480, 9485, 9490, 9495, 9500, 9505, 9510,
     9515, 9520, 9525, 9530, 9535, 9540, 9545, 9550, 9555, 9560,

     9565, 9570, 9575, 9580, 9585, 9590, 9595, 9604, 9609, 9613,
     9616, 9621, 9626, 9631, 9636, 9641, 9646, 9651, 9656, 9661,
     9666, 9671, 9676, 9681, 9689, 9689, 9694, 9699, 9704, 9709,
     9714, 9719, 9724, 9729, 9734, 9739, 9744, 9749, 9754, 9759,
     9764, 9769, 9774, 9779, 9790, 9795, 9800, 9805, 9810, 9815,
     9820, 9825, 9830, 9835, 9840, 9845, 9850, 9855, 9860, 9865,
     9870, 9875, 9880, 9885, 9890, 9895, 9900, 9905, 9910, 9915,
     9920, 9925, 9930, 9935, 9940, 9945, 9956, 9961, 9966, 9971,
     9976, 9981, 9986, 9991, 9996,10001,10006,10011,10016,10021,
    10026,10031,10036,10041,10046,10051,10056,10061,10066,10071,

    10076,10081,10086,10091,10096,10101,10106,10111,10116,10121,
    10126,10131,10136,10141,10146,10151,10156,10161,10166,10171,
    10176,10181,10186,10191,10196,10201,10206,10211,10216,10221,
    10226,10231,10236,10241,10246,10251,10256,10261,10266,10271,
    10276,10281,10286,10291,10296,10301,10308,10308,10313,10318,
    10323,10328,10333,10338,10343,10348,10353,10358,10363,10368,
    10373,10378,10383,10388,10393,10398,10409,10414,10418,10421,
    10426,10431,10436,10447,10452,10457,10468,10473,10478,10483,
    10488,10493,10498,10503,10508,10513,10518,10523,10534,10539,
    10543,10546,10551,10556,10561,10572,10577,10582,10587,10592,

    10597,10602,10607,10612,10617,10622,10627,10632,10637,10642,
    10647,10652,10657,10662,10667,10672,10681,10686,10691,10696,
    10701,10706,10711,10716,10721,10726,10731,10736,10744,10744,
    10749,10754,10759,10764,10769,10774,10779,10784,10789,10794,
    10799,10804,10809,10814,10819,10824,10829,10834,10839,10844,
    10855,10860,10865,10870,10875,10880,10885,10890,10901,10906,
    10911,10916,10921,10926,10931,10936,10941,10946,10951,10956,
    10961,10966,10971,10976,10981,10986,10991,10996,11007,11012,
    11017,11028,11033,11038,11043,11054,11065,11070,11075,11079,
    11082,11087,11092,11097,11102,11106,11109,11114,11119,11124,

    11129,11140,11145,11150,11155,11160,11165,11170,11181,11186,
    11191,11196,11201,11206,11211,11222,11227,11232
    } ;

static yyconst flex_int16_t yy_def[1819] =
    {   0,
     1441,    1, 1441, 1441, 1441, 1441, 1441, 1441, 1442, 1443,
     1441, 1441, 1444, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1445, 1441, 1441, 1441, 1446, 1441,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   46,   30,   46,   46,
       46, 1441, 1441, 1441, 1441,   30,   46,   46, 1441, 1441,
     1441, 1447, 1448, 1447, 1447, 1449, 1450, 1451, 1451, 1441,
     1452, 1441, 1453, 1454, 1454, 1455, 1441, 1441, 1441, 1456,
     1441, 1441, 1441, 1457, 1441, 1441, 1458, 1459, 1460, 1441,
     1461, 1441, 1462, 1441, 1463, 1441, 1464, 1465, 1466, 1467,

     1441, 1468, 1441, 1469, 1441, 1470, 1441, 1441, 1471, 1472,
     1471, 1471, 1473, 1474, 1475, 1475, 1441, 1476, 1441, 1477,
     1478, 1478, 1479, 1441, 1441, 1441, 1480, 1441, 1481, 1441,
     1441, 1482, 1483, 1484, 1441, 1485, 1441, 1486, 1441, 1487,
     1441, 1441, 1441, 1441, 1488, 1489, 1488, 1488, 1490, 1491,
     1492, 1492, 1441, 1493, 1441, 1494, 1495, 1495, 1496, 1441,
     1441, 1441, 1497, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441,  176, 1441, 1498, 1499,
     1498, 1498, 1500, 1501, 1502, 1502, 1441, 1503, 1441, 1504,
     1505, 1505, 1506, 1441, 1441, 1441, 1507, 1508, 1508, 1441,

     1509, 1510, 1511, 1441, 1512, 1441, 1513, 1441, 1514, 1441,
     1441, 1441, 1515, 1516, 1515, 1515, 1517, 1518, 1519, 1519,
     1441, 1520, 1441, 1521, 1522, 1522, 1523, 1441, 1441, 1441,
     1524, 1525, 1441,  233, 1441,  233,  233,  233,  233,  233,
      233,  233, 1526, 1527, 1526, 1526, 1526, 1528, 1529, 1441,
     1530, 1530, 1530, 1531, 1532, 1441, 1533, 1534, 1534, 1535,
     1441, 1441, 1441, 1536,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233, 1441, 1441, 1441, 1441,  233,
      233, 1441,  233,  233,  233,  233,  233,  233,  233, 1537,
     1538, 1539, 1539, 1539, 1539, 1539, 1540, 1541, 1541, 1539,
     1542, 1441, 1543, 1544, 1441, 1545, 1546, 1441, 1547, 1548,
     1547, 1547, 1549, 1550, 1551, 1552, 1441, 1553, 1554, 1553,
     1553, 1555, 1556, 1557, 1441,  375, 1558, 1559, 1558, 1558,
     1558, 1560, 1561, 1441, 1562, 1562, 1563, 1564, 1441, 1565,
     1566, 1566, 1567, 1441, 1441, 1441, 1568,  375,  375,  375,

      375,  375,  375, 1569, 1570, 1571, 1571, 1571, 1572, 1573,
     1573, 1571, 1574, 1441, 1575, 1576, 1441, 1577, 1578, 1441,
     1579, 1580, 1579, 1579, 1581, 1582, 1583, 1441,  428, 1584,
     1585, 1584, 1584, 1584, 1586, 1587, 1441, 1588, 1588, 1589,
     1590, 1441, 1591, 1592, 1592, 1593, 1441, 1441, 1441, 1594,
      428,  428,  428,  428,  428,  428, 1595, 1596, 1597, 1597,
     1597, 1598, 1599, 1599, 1597, 1600, 1441, 1601, 1602, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441,  484,  484,  484, 1441, 1603, 1604,
     1603, 1603, 1603, 1605, 1606, 1441, 1607, 1607, 1607, 1608,

     1609, 1441, 1610, 1611, 1611, 1612, 1441, 1441, 1441, 1613,
      484,  484,  484,  484,  484,  484,  484, 1614, 1615, 1616,
     1616, 1616, 1617, 1618, 1618, 1616, 1619, 1441, 1620, 1621,
     1622, 1441, 1623, 1624, 1623, 1623, 1625, 1626, 1627, 1441,
      540, 1628, 1629, 1628, 1628, 1628, 1630, 1631, 1441, 1632,
     1632, 1633, 1634, 1441, 1635, 1636, 1636, 1637, 1441, 1441,
     1441, 1638,  540,  540,  540,  540,  540,  540, 1639, 1640,
     1641, 1641, 1641, 1642, 1643, 1643, 1641, 1644, 1441, 1645,
     1646, 1647, 1441,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583, 1648, 1649,

     1650, 1650, 1650, 1651, 1652, 1652, 1650, 1653, 1441, 1654,
     1655,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583, 1441, 1656, 1657, 1656, 1656, 1658,

     1659, 1660, 1660, 1441, 1661, 1441, 1662, 1663, 1663, 1664,
     1441, 1441, 1441, 1665,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583, 1666, 1666, 1667, 1667, 1441,
     1668, 1669, 1670, 1441, 1671, 1441, 1672, 1441, 1673, 1441,
     1674, 1675, 1675, 1676, 1677, 1678, 1678, 1679, 1441,  749,
      749,  749,  749,  749,  749, 1680, 1681, 1682, 1682, 1682,
     1683, 1684, 1684, 1682, 1685, 1441, 1686, 1687,  749,  749,
      749,  749,  749, 1688, 1688, 1689, 1689, 1441, 1690, 1691,
     1692, 1441, 1693, 1441, 1694, 1441, 1695, 1441, 1696, 1697,
     1697, 1698, 1441,  793,  793,  793,  793,  793,  793, 1699,

     1700, 1701, 1701, 1701, 1702, 1703, 1703, 1701, 1704, 1441,
     1705, 1706,  793,  793,  793,  793,  793, 1707, 1707, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441,  835,  835,  835,  835,  835,
      835,  835,  835,  835, 1708, 1709, 1710, 1710, 1710, 1711,
     1712, 1712, 1710, 1713, 1441, 1714, 1715,  835,  835,  835,
      835,  835, 1716, 1716, 1717, 1718, 1718, 1719, 1441,  869,
      869,  869,  869,  869,  869, 1720, 1721, 1722, 1722, 1722,
     1723, 1724, 1724, 1722, 1725, 1441, 1726, 1727,  869,  869,
      869,  869,  869, 1728, 1728, 1729, 1441,  897,  897,  897,

      897, 1730, 1730,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
     1441,  991,  991, 1731, 1732, 1731, 1731, 1731, 1733, 1734,

     1441, 1735, 1735, 1735, 1736, 1737, 1441, 1738, 1739, 1739,
     1740, 1441, 1441, 1441, 1741,  991,  991,  991,  991,  991,
      991, 1742, 1743, 1744, 1744, 1744, 1745, 1746, 1746, 1744,
     1747, 1441, 1748, 1749, 1441, 1035, 1750, 1750, 1035, 1751,
     1752, 1441, 1753, 1754, 1753, 1753, 1755, 1756, 1757, 1441,
     1050, 1050, 1050, 1050, 1758, 1758, 1050, 1759, 1760, 1441,
     1761, 1762, 1761, 1761, 1763, 1764, 1765, 1441, 1068, 1068,
     1068, 1068, 1766, 1766, 1068, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1084, 1084, 1084, 1084, 1767, 1767,
     1084, 1441, 1092, 1092, 1092, 1092, 1768, 1768, 1092, 1441,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1441, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1769, 1770, 1771, 1771, 1771, 1772, 1773, 1773,
     1771, 1774, 1441, 1775, 1776, 1174, 1174, 1174, 1174, 1174,

     1777, 1777, 1100, 1778, 1778, 1441, 1779, 1780, 1780, 1781,
     1441, 1441, 1782, 1783, 1783, 1784, 1441, 1441, 1441, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1174, 1174,
     1174, 1174, 1174, 1785, 1785, 1174, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1441, 1786, 1100,
     1100, 1100, 1100, 1441, 1787, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1174, 1788, 1788, 1100,
     1100, 1100, 1100, 1441, 1441, 1786, 1789, 1790, 1791, 1441,
     1792, 1441, 1793, 1441, 1794, 1441, 1100, 1100, 1100, 1100,
     1441, 1787, 1795, 1796, 1797, 1441, 1798, 1441, 1799, 1441,
     1800, 1441, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1801, 1801, 1100, 1441, 1441, 1802, 1802,
     1370, 1370, 1803, 1441, 1804, 1805, 1804, 1804, 1806, 1807,
     1808, 1100, 1100, 1441, 1809, 1809, 1386, 1810, 1441, 1811,
     1812, 1811, 1811, 1813, 1814, 1815, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1441, 1441, 1816, 1816, 1409,
     1817, 1817, 1818, 1100, 1100, 1441, 1386, 1386, 1811, 1811,
     1810, 1100, 1441, 1441, 1409, 1409, 1100, 1100, 1441, 1386,
     1100, 1441, 1409, 1409, 1100, 1100, 1386, 1409, 1100, 1100,
        0, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441
    } ;

static yyconst flex_int16_t yy_nxt[11383] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   39,   51,   39,
       52,    4,   53,   54,   55,   56,   31,   32,   33,   34,
       57,   36,   37,   38,   39,   39,   40,   41,   42,   43,
       44,   45,   46,   58,   48,   49,   50,   39,   51,   39,
       59,   60,   61,    4,    4,    4,   62,   63,   63,   64,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   66,   66,   67,
        4,    4,   68,   69,    4,   70,   71,   72,   73,   74,
       75,   76,   77,    4,   78,   79,   80,    4,   81,   98,
       81,   81,   85,   81,  142,  142,  142,  142,  326,  326,
      326,  326,  470,  232,  164,   99,  143,  100,  100,  100,
      100,  100,  100,  101,  102,  102,  102,  102,  103,  104,
      104,  105,  106,  107,  164,  165, 1427,  166,  166,  166,
      166,  166,  166,  166,  166,  167,  168, 1319,  169,  169,
      169,  169,  169,  169,  169,  169, 1318,   86,  334,  334,

      170,  171,  171,  171,  171,  171,  171,  171,  171,  327,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  336,  336,
      336,  336,  333,  333,  338,  339,  339,  339,  339,   87,
      339, 1342,  338,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  399,  399, 1326,   88, 1319,   89,   89,   89,
       89,   89,   89,   90,   91,   91,   91,   91,   92,   93,
       93,   94,   95,   96,  108,  108,  108,  108,  108,  108,
      108,  108,  351,  351,  351,  351,  352,  583, 1038,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  452,  452, 1318,  583,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  401,  401,  401,  401,  398,  398,
      109,  110,  110,  111,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      112,  113,  113,  114,  513,  513,  115,  116, 1037,  117,
      118,  119,  120,  121,  122,  123,  124, 1292,  125,  126,
      127,  130,  172,  584,  173,  173,  173,  173,  173,  173,

      173,  173,  108,  144,  265,  236,  177,  236,  212, 1175,
      108,  144,  266,  174,  177,  236,  212,  267,  268,  284,
      236,  236,  236,  584,  236,  564,  564,  269,  585, 1255,
      236,  586,  236,  285,  265,  236,  236,  236,  589,  236,
     1254,  131,  266,  174, 1253,  236, 1233,  267,  268,  284,
      236,  236,  236,  776,  236,  342,  343,  269,  585,  345,
      236,  586,  236,  285, 1017, 1017,  236,  346,  589,  236,
      142,  142,  142,  142,  347,  347,  347,  347,  347,  592,
      592,  728,  143,  132,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  403,  403,  403,  403,  590,  403,  133,

      236,  134,  134,  134,  134,  134,  134,  135,  136,  136,
      136,  136,  137,  138,  138,  139,  140,  141,  144,  144,
      144,  144,  144,  144,  144,  144,  413,  413,  413,  413,
      414,  612,  236,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144, 1016, 1189,
      991,  612,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  454,  454,
      454,  454,  451,  451,  145,  146,  146,  147,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  148,  149,  149,  150, 1174, 1154,
      151,  152, 1153,  153,  154,  155,  156,  157,  158,  159,
      160, 1152,  161,  162,  163,  175,  365,  365,  365,  365,
      365,  365,  365,  365,  582,  870,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  456,  456,  456,  456,  613,
      456,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  837,  178,  794,  613,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  466,  466,  466,  466,
      467,  750,  179,  180,  180,  181,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  182,  183,  183,  184,  614, 1038,  185,  186,
     1037,  187,  188,  189,  190,  191,  192,  193,  194, 1036,
      195,  196,  197,  199,  200,  236, 1035,  236,  270,   84,
     1028,  236,  591,  615,   84,  271,  614,  236,  272,  236,
      273,  236,  616,  617,  236,  563,  517,  517,  517,  517,
      236,  517,  236,  587,  882,  236,  236,  236,  270,  540,

      236,  588,  236,  615,  236,  271,  236,  236,  272,  236,
      273,  236,  616,  617,  236,  527,  527,  527,  527,  528,
      236,  869,  236,  587,   84,  198,  376,  512,  851,   84,
      236,  588,  236,   84,  376,  201,  236,  429,  484,  236,
      836,   84,  164,  451,   84,  429,   84,  568,  568,  568,
      568,  202,  568,  203,  203,  203,  203,  203,  203,  204,
      205,  205,  205,  205,  206,  207,  207,  208,  209,  210,
      212,  212,  212,  212,  212,  212,  212,  212,  515,  515,
      515,  515,  512,  512,  806,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      326,  326,  326,  326,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      566,  566,  566,  566,  563,  563,  213,  214,  214,  215,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  216,  217,  217,  218,
      428,  327,  219,  220,  622,  221,  222,  223,  224,  225,
      226,  227,  228,  793,  229,  230,  231,  233,  234,  129,
      233,  233,  233,  233,  233,  233,  233,  233,  235,  578,

      578,  578,  578,  579,  622,  236,  237,  236,  238,  236,
      236,  236,  236,  236,  236,  236,  239,  236,  240,  236,
      236,  236,  241,  236,  236,  242,  236,  236,  236,  236,
      398,  762,  375,  749,  236,  236,  237,  236,  238,  236,
      236,  236,  236,  236,  236,  236,  239,  236,  240,  236,
      236,  236,  241,  236,  236,  242,  236,  236,  236,  236,
      594,  594,  594,  594,  591,  591,  243,  244,  244,  245,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  247,  248,  248,  249,
       97,  250,  251,  252,  253,  254,  255,  256,  257,  258,

      259,  260,  261,   84,  262,  263,  264,  274,  236,  623,
      236,  275,  628,  629,  624,  276,  630,  631,  236,  333,
      236,  718,  632,  277,  236,  633,  634,  236,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  274,  236,  623,
      236,  275,  628,  629,  624,  276,  630,  631,  236,  236,
      236,  236,  632,  277,  236,  633,  634,  236,  716,  236,
      715,  278,  635,  653,  605,  236,  638,  233,  236,  639,
      279,  597,  597,  597,  597,  236,  597,  642,  236,  236,
      236,  236,  406,  407,  648,  280,  590,  649,  281,  236,
      236,  278,  635,  282,  236,  236,  638,  236,  236,  639,

      279,  409,  409,  409,  409,  409, 1441,  642,  236,  650,
      236,  651,  636,  582,  648,  280,  625,  649,  281,  236,
      236,  236,  626,  282,  236,  575,  637,  236,  627,  236,
      524,  236,  640,  641,  283,  236,  236,  463,  236,  650,
      236,  651,  636,  236,  314,  652,  625,  418,  654,  236,
      315,  236,  626,  410,  236,  236,  637,  655,  627,  236,
      316,  236,  640,  641,  283,  236,  236,  236,  236,  236,
      236,  286,  658,  236,  314,  652,  661,  236,  654,  287,
      315,  662,  288,  289,  236,  236,  236,  655,  356,  348,
      316,  608,  608,  608,  608,  609,  656,  236,  332,  236,

      719,  286,  658,  657,  720,  663,  661,  236,  329,  287,
      721,  662,  288,  289,  751,  751,  236,  290,  236,  291,
      236,  659,  666,  664,  660,  292,  656,  665,  236,  670,
      236,  293,  749,  657,  236,  663,  328,  236,  374,  374,
      374,  374,  374,  374,  374,  374,  211,  290,  236,  291,
      236,  659,  666,  664,  660,  292,  677,  665,  236,  670,
      236,  293,  294,  236,  236,  295,  296,  236,  618,  678,
      297,  128,  683,  236,  684,  236,  298,  299,  236,  236,
      236,  619,  236,  620,  688,  679,  677,  621,  236,  689,
      236,  300,  294,  236,  236,  295,  296,  236,  618,  678,

      297,  680,  683,  236,  684,  236,  298,  299,  236,  236,
      236,  619,  236,  620,  688,  679,   83,  621,  236,  689,
      236,  300,   82, 1441,  236,  322,  236,  236,  236,  236,
      301,  680,  236,  236,  690,  691,  236, 1441,  236, 1441,
      302,  303,  236,  236,  236,  236,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  322,  236, 1441,  236,  236,
      301, 1441,  236,  236,  690,  691,  236,  236,  236,  236,
      302,  303,  236,  236,  236,  236,  671,  236, 1441,  236,
      692, 1441,  304,  236,  667,  672,  236,  668,  693,  681,
      694,  305,  236,  487,  236,  306,  669,  236, 1441,  236,

      682,  487,  236,  904,  236,  307,  671,  236,  236,  236,
      692,  236,  304,  236,  667,  672,  236,  668,  693,  681,
      694,  305,  236,  487,  236,  306,  669,  905,  541,  695,
      682,  487,  236,  904,  236,  307,  541,  695,  236, 1441,
     1441,  236,  308,  236,  906,  236,  309,  907,  908,  310,
      311,  909,  910,  236,  914,  236, 1441,  905, 1441,  236,
      312,  313,  236,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  308,  236,  906,  236,  309,  907,  908,  310,
      311,  909,  910,  236,  914,  236,  236,  317,  236,  236,
      312,  313,  236,  915,  916,  917,  236,  918,  318,  919,

      673,  319,  320,  236,  321,  236,  920,  236, 1441,  674,
      323,  324, 1441,  675,  676, 1441,  236,  317,  236,  921,
      922,  236,  236,  915,  916,  917,  236,  918,  318,  919,
      673,  319,  320,  236,  321,  236,  920,  236,  236,  674,
      323,  324,  325,  675,  676,  236,  236,  795,  795,  921,
      922,  236,  236,  993, 1441,  236,  236,  236,  923,  236,
      924,  993,  236,  280,  925,  793,  281,  926,  236, 1441,
      927,  282,  325,  236,  236,  236,  236,  427,  427,  427,
      427,  427,  427,  427,  427,  330,  236,  236,  923,  236,
      924,  236,  236,  280,  925,  236,  281,  926,  236,  314,

      927,  282, 1441,  236,  236,  315,  928, 1441,  929,  236,
      236,  459,  460,  930,  931,  316, 1441,  755,  755,  755,
      755,  236,  755,  838,  838,  236, 1441, 1441,  236,  314,
      462,  462,  462,  462,  462,  315,  928,  331,  929,  236,
      236,  836, 1441,  930,  931,  316,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  355,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  363,  363,  363,  363,  363,

      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  765,  765,  765,  765,  766,   98,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  334,  334,  334,  334,
      334,  334,   99,   86,  100,  100,  100,  100,  100,  100,
      101,  102,  102,  102,  102,  103,  104,  104,  105,  106,
      107,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  471,  471,  471,
      471,  471,  471,  471,  471,   87,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  725,  725,  725,  725,  725,
      725,   88, 1441,   89,   89,   89,   89,   89,   89,   90,

       91,   91,   91,   91,   92,   93,   93,   94,   95,   96,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  375,  375,  375,  375,
      375,  375,  375,  375,  753,  753,  753,  753,  750,  750,
     1441,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376, 1441, 1441, 1441, 1441,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  399,  399,  399,  399,

      399,  399,  377,  378,  378,  379,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  381,  382,  382,  383, 1441,  384,  385,  386,
     1441,  387,  388,  389,  390,  391,  392,  393,  394, 1441,
      395,  396,  397,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  417,  129, 1441, 1441, 1441,
     1441,  129,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  425,  425,

      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  520,  521,  131, 1441,  799,  799,  799,
      799,  129,  799,  932,  933,  934,  129,  966,  967,  968,
      129,  969,  523,  523,  523,  523,  523, 1441,  129, 1441,
     1441,  129, 1441,  129,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  932,  933,  934, 1441,  132,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  773,  773,  773,
      773,  773,  773,  133, 1441,  134,  134,  134,  134,  134,
      134,  135,  136,  136,  136,  136,  137,  138,  138,  139,

      140,  141,  428,  428,  428,  428,  428,  428,  428,  428,
      797,  797,  797,  797,  794,  794, 1441,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429, 1441, 1441, 1441, 1441,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  809,  809,  809,  809,  810, 1441,  430,  431,
      431,  432,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  434,  435,

      435,  436, 1441,  437,  438,  439, 1441,  440,  441,  442,
      443,  444,  445,  446,  447, 1441,  448,  449,  450,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  472, 1441,  166,  166,  166,  166,  166,  166,  166,
      166,  474,  474,  474,  474,  474,  474,  474,  474,  935,
     1441,  475,  473,  169,  169,  169,  169,  169,  169,  169,
      169,  171,  171,  171,  171,  171,  171,  171,  171, 1441,
     1441, 1441,  476,  452,  452,  452,  452,  452,  452,  935,

      477, 1441,  473, 1441,  478,  478,  478,  478,  478,  478,
      478,  478,  172, 1441,  173,  173,  173,  173,  173,  173,
      173,  173,  476,  479,  854,  854,  854,  854,  855,  480,
      477,  480, 1441,  174,  481,  481,  481,  481,  481,  481,
      481,  481,  482,  482,  482,  482,  482,  482,  482,  482,
     1441, 1441, 1441,  479, 1441, 1441, 1441,  482,  482,  482,
      482,  482,  482,  174,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  885,  885,  885,  885,  886,  482,  482,  482,
      482,  482,  482,  483,  571,  572, 1031, 1031, 1031, 1031,

     1032,  484,  485, 1441,  484,  484,  484,  484,  484,  484,
      484,  484,  486,  574,  574,  574,  574,  574, 1441,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487, 1441,  488, 1441, 1441,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  817,  817,  817,  817,  817,  817,
      489,  490,  490,  491,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,

      493,  494,  494,  495, 1441,  496,  497,  498,  499,  500,
      501,  502,  503,  504,  505,  506,  507, 1441,  508,  509,
      510,  511, 1441,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  511,  200,  511,  936,  511,
      511,  526,  526,  526,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  526,  533,  533,  533,
      533,  533,  533,  533,  533,  533,  937,  938,  936, 1441,
      511,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  200,  539,  539,

      539,  539,  539,  539,  539,  539,  937,  938,  993,  511,
      840,  840,  840,  840,  837,  837,  993,  201,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  843,  843,  843,
      843,  487,  843,  202, 1441,  203,  203,  203,  203,  203,
      203,  204,  205,  205,  205,  205,  206,  207,  207,  208,
      209,  210,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  201,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  513,  513,
      513,  513,  513,  513,  202, 1441,  203,  203,  203,  203,
      203,  203,  204,  205,  205,  205,  205,  206,  207,  207,

      208,  209,  210,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  540,
      540,  540,  540,  540,  540,  540,  540,  862,  862,  862,
      862,  862,  862, 1441,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541, 1441,
     1441, 1441, 1441,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  873,
      873,  873,  873,  870,  870,  542,  543,  543,  544,  545,

      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  546,  547,  547,  548, 1441,
      549,  550,  551, 1441,  552,  553,  554,  555,  556,  557,
      558,  559, 1441,  560,  561,  562,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  233,  234, 1441,
      233,  233,  233,  233,  233,  233,  233,  233,  235,  875,
      875,  875,  875,  939,  875,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
     1441, 1441, 1441,  939,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      564,  564,  564,  564,  564,  564,  243,  244,  244,  245,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  247,  248,  248,  249,
     1441,  250,  251,  252,  253,  254,  255,  256,  257,  258,
      259,  260,  261, 1441,  262,  263,  264,  175,  592,  592,

      592,  592,  592,  592,  592,  592,  592, 1441,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  893,  893,  893,
      893,  893,  893,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177, 1441,  178,
     1441, 1441,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  592,  592,
      592,  592,  592,  592,  179,  180,  180,  181,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  179,  179,  182,  183,  183,  184, 1441, 1441,
      185,  186, 1441,  187,  188,  189,  190,  191,  192,  193,
      194, 1441,  195,  196,  197,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  601,  602,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607, 1441,  604,  604,  604,  604,  604,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  643,  911,  940,  685,  941,  942,  943,
      644,  686,  944,  645,  945,  646,  946,  687,  947,  912,

      913,  647,  751,  751,  751,  751,  751,  751,  751,  751,
      751, 1441, 1441,  643,  911,  940,  685,  941,  942,  943,
      644,  686,  944,  645,  945,  646,  946,  687,  947,  912,
      913,  647,  695,  695,  695,  695,  695,  695,  695,  695,
      901,  901,  901,  901,  901,  901, 1441,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  948,  949,  950,  951,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  948,  949,  950,  951,  952, 1441,  696,  697,
      697,  698,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  699,  700,
      700,  701, 1441, 1441,  702,  703,  952,  704,  705,  706,
      707,  708,  709,  710,  711, 1441,  712,  713,  714,  729,
      752,  752,  752,  752,  752,  752,  752,  752,  752,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  758,  759,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764, 1441,  761,  761,  761,
      761,  761,  795,  795,  795,  795,  795,  795,  795,  795,

      795, 1441, 1441, 1441,  730,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  871,
      871, 1441,  823, 1441,  823, 1441,  731,  824,  824,  824,
      824,  824,  824,  824,  824, 1441, 1441,  869, 1441,  953,
      954,  955,  732,  956,  733,  733,  733,  733,  733,  733,
      734,  735,  735,  735,  735,  736,  737,  737,  738,  739,
      740,  375,  375,  375,  375,  375,  375,  375,  375,  953,
      954,  955,  957,  956,  958, 1441,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  959,  957,  962,  958,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  959, 1441,  962, 1441,  963, 1441,  377,  378,  378,
      379,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  381,  382,  382,
      383, 1441,  384,  385,  386,  963,  387,  388,  389,  390,
      391,  392,  393,  394, 1441,  395,  396,  397,  777,  802,

      803,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  964,  805,  805,
      805,  805,  805,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  471,
      471,  471,  471,  471,  471,  471,  471,  964,  778,  821,
      821,  821,  821,  821,  821,  821,  821,  965,  820,  970,
     1441,  971,  979,  980,  828,  981,  828,  982,  822,  829,
      829,  829,  829,  829,  829,  829,  829,  481,  481,  481,
      481,  481,  481,  481,  481, 1441, 1441,  965,  820,  970,
      779,  971,  979,  980, 1441,  981, 1441,  982,  822, 1441,

     1441, 1441, 1441,  983,  984,  985,  780,  986,  781,  781,
      781,  781,  781,  781,  782,  783,  783,  783,  783,  784,
      785,  785,  786,  787,  788,  428,  428,  428,  428,  428,
      428,  428,  428,  983,  984,  985,  987,  986,  988, 1441,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  989,  987,  990,  988,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  989, 1441,  990, 1441, 1101,

     1441,  430,  431,  431,  432,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  434,  435,  435,  436, 1441,  437,  438,  439, 1101,
      440,  441,  442,  443,  444,  445,  446,  447, 1102,  448,
      449,  450,  474,  474,  474,  474,  474,  474,  474,  474,
      826,  826,  826,  826,  826,  826,  826,  826, 1441, 1441,
     1441,  825, 1441, 1103, 1104,  830, 1441,  830, 1102,  827,
      831,  831,  831,  831,  831,  831,  831,  831,  478,  478,
      478,  478,  478,  478,  478,  478, 1441, 1021, 1021, 1021,
     1021,  825, 1021, 1103, 1104, 1105,  832,  479,  832,  827,

     1106,  833,  833,  833,  833,  833,  833,  833,  833,  481,
      481,  481,  481,  481,  481,  481,  481,  176,  176,  176,
      176,  176,  176,  176,  176, 1105, 1441,  479,  847,  848,
     1106, 1107,  176,  176,  176,  176,  176,  176,  834,  834,
      834,  834,  834,  834,  834,  834, 1441,  850,  850,  850,
      850,  850, 1441,  834,  834,  834,  834,  834,  834,  878,
      879, 1107,  176,  176,  176,  176,  176,  176,  838,  838,
      838,  838,  838,  838,  838,  838,  838, 1441,  881,  881,
      881,  881,  881,  834,  834,  834,  834,  834,  834,  483,
     1019, 1019, 1019, 1019, 1016, 1016, 1441,  484,  485, 1441,

      484,  484,  484,  484,  484,  484,  484,  484,  486,  751,
      751,  751,  751,  751,  751,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
     1441,  488, 1441, 1441,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
     1054, 1054, 1054, 1054, 1054, 1054,  489,  490,  490,  491,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  493,  494,  494,  495,

     1441,  496,  497,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507, 1441,  508,  509,  510,  835, 1441,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  835, 1108,  835, 1109,  835,  835,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853, 1108, 1110, 1109, 1441,  835,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  871,  871,  871,  871,  871,  871,  871,

      871,  871, 1441, 1110, 1441,  835,  540,  540,  540,  540,
      540,  540,  540,  540,  795,  795,  795,  795,  795,  795,
     1441,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541, 1441, 1441, 1441, 1441,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541, 1072, 1072, 1072, 1072,
     1072, 1072,  542,  543,  543,  544,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  545,  546,  547,  547,  548, 1441,  549,  550,  551,
     1441,  552,  553,  554,  555,  556,  557,  558,  559, 1441,
      560,  561,  562,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  233,  234, 1441,  233,  233,  233,  233,
      233,  233,  233,  233,  235,  838,  838,  838,  838,  838,
      838,  236,  236,  236,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236, 1441, 1441, 1441, 1441,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236, 1088, 1088, 1088, 1088,
     1088, 1088,  243,  244,  244,  245,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  247,  248,  248,  249, 1111,  250,  251,  252,
      253,  254,  255,  256,  257,  258,  259,  260,  261,  960,
      262,  263,  264,  972,  973, 1112,  974,  975, 1113, 1114,

      961, 1115, 1116, 1117,  976, 1441, 1111, 1441, 1441, 1441,
      977, 1118,  978, 1441, 1441, 1119, 1024, 1025, 1441,  960,
     1441, 1441, 1441,  972,  973, 1112,  974,  975, 1113, 1114,
      961, 1115, 1116, 1117,  976, 1027, 1027, 1027, 1027, 1027,
      977, 1118,  978,  991,  992, 1119,  991,  991,  991,  991,
      991,  991,  991,  991,  871,  871,  871,  871,  871,  871,
     1441,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993, 1441, 1441, 1441, 1441,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,

      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993, 1096, 1096, 1096, 1096,
     1096, 1096,  994,  995,  995,  996,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  998,  999,  999, 1000, 1441, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1441,
     1013, 1014, 1015, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,

     1030, 1030, 1030, 1030, 1030, 1030, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033,  729,  728, 1441, 1441, 1441, 1441,  728, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1178, 1178, 1178, 1178, 1175, 1175, 1441,  730,  728, 1176,
     1176, 1441, 1441,  728, 1441, 1441, 1441,  728, 1120, 1181,
     1181, 1181, 1181,  993, 1181,  728, 1441, 1174,  728, 1121,

      728, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1120,  731,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1122, 1121,
     1123, 1441, 1441, 1441, 1441,  732, 1441,  733,  733,  733,
      733,  733,  733,  734,  735,  735,  735,  735,  736,  737,
      737,  738,  739,  740, 1040,   98,  776, 1076, 1122, 1076,
     1123,  776, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1441,   99, 1441,  100,  100,  100,  100,  100,  100,  101,
      102,  102,  102,  102,  103,  104,  104,  105,  106,  107,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,

     1063, 1063, 1063, 1063, 1063, 1063, 1441, 1280, 1277,  730,
     1441,  776, 1288, 1288, 1288, 1288,  776, 1278, 1289, 1441,
      776, 1281, 1441, 1124, 1125, 1441, 1279, 1282,  776, 1441,
     1441,  776, 1441,  776, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1078,  731, 1078, 1124, 1125, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1441, 1441, 1441, 1441,  732, 1441,  733,
      733,  733,  733,  733,  733,  734,  735,  735,  735,  735,
      736,  737,  737,  738,  739,  740,  355,  821,  821,  821,
      821,  821,  821,  821,  821,  824,  824,  824,  824,  824,

      824,  824,  824, 1441, 1441, 1441,  822,  824,  824,  824,
      824,  824,  824,  824,  824, 1080, 1126, 1080, 1441, 1441,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,  826,  826,
      826,  826,  826,  826,  826,  826,  822, 1441, 1441, 1441,
     1441,   86, 1127, 1082, 1128, 1082, 1126,  827, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829, 1127, 1441, 1128, 1441, 1441,  827, 1192, 1192,
     1192, 1192, 1193,   87,  831,  831,  831,  831,  831,  831,
      831,  831, 1441, 1441, 1441, 1441, 1129, 1130, 1131,   88,

     1132,   89,   89,   89,   89,   89,   89,   90,   91,   91,
       91,   91,   92,   93,   93,   94,   95,   96,  375,  375,
      375,  375,  375,  375,  375,  375, 1129, 1130, 1131, 1441,
     1132, 1135, 1441,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376, 1133, 1134,
     1136, 1135,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376, 1133, 1134,
     1136, 1441, 1137, 1441,  377,  378,  378,  379,  380,  380,

      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  381,  382,  382,  383, 1441,  384,
      385,  386, 1137,  387,  388,  389,  390,  391,  392,  393,
      394, 1441,  395,  396,  397,  777,  831,  831,  831,  831,
      831,  831,  831,  831,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      486,  486,  486,  486,  486,  486,  486,  486, 1138, 1139,
     1140, 1141, 1142, 1143, 1144,  486,  486,  486,  486,  486,
      486, 1145, 1146, 1147, 1148,  778, 1149, 1150, 1151, 1155,
     1156, 1157,  200, 1158, 1159, 1160, 1163, 1441, 1138, 1139,

     1140, 1141, 1142, 1143, 1144,  486,  486,  486,  486,  486,
      486, 1145, 1146, 1147, 1148, 1441, 1149, 1150, 1151, 1155,
     1156, 1157, 1441, 1158, 1159, 1160, 1163,  779, 1017, 1017,
     1017, 1017, 1017, 1017, 1161, 1164, 1165, 1166, 1162, 1167,
     1168, 1169, 1170,  780, 1171,  781,  781,  781,  781,  781,
      781,  782,  783,  783,  783,  783,  784,  785,  785,  786,
      787,  788, 1058,  201, 1161, 1164, 1165, 1166, 1162, 1167,
     1168, 1169, 1170, 1172, 1171, 1173, 1441, 1441, 1441,  202,
     1441,  203,  203,  203,  203,  203,  203,  204,  205,  205,
      205,  205,  206,  207,  207,  208,  209,  210, 1294, 1294,

     1294, 1294, 1441, 1172, 1295, 1173, 1200, 1200, 1200, 1200,
     1200, 1200,  778, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1185, 1186, 1441, 1441, 1441,  601,  602, 1176, 1176, 1176,
     1176, 1176, 1176, 1441,  779, 1441, 1441, 1204, 1441, 1188,
     1188, 1188, 1188, 1188,  604,  604,  604,  604,  604, 1441,
      780, 1441,  781,  781,  781,  781,  781,  781,  782,  783,
      783,  783,  783,  784,  785,  785,  786,  787,  788,  417,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194,  601,  602, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1441, 1441, 1205, 1441, 1441, 1441, 1441,  131,
     1441,  604,  604,  604,  604,  604, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1441, 1441,
     1441,  132, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1441, 1441, 1441, 1441, 1220, 1221, 1222,  133, 1223,  134,

      134,  134,  134,  134,  134,  135,  136,  136,  136,  136,
      137,  138,  138,  139,  140,  141,  428,  428,  428,  428,
      428,  428,  428,  428, 1220, 1221, 1222, 1224, 1223, 1225,
     1441,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429, 1226, 1224, 1227, 1225,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429, 1226, 1441, 1227, 1441,
     1228, 1441,  430,  431,  431,  432,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  434,  435,  435,  436, 1441,  437,  438,  439,
     1228,  440,  441,  442,  443,  444,  445,  446,  447, 1441,
      448,  449,  450,  483, 1273, 1273, 1273, 1273, 1273, 1273,
     1441,  484,  485, 1441,  484,  484,  484,  484,  484,  484,
      484,  484,  486, 1441, 1229, 1441, 1230, 1231, 1441,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487, 1229,  488, 1230, 1231,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487, 1232, 1441, 1441, 1441, 1441, 1441,
      489,  490,  490,  491,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      493,  494,  494,  495, 1232,  496,  497,  498,  499,  500,
      501,  502,  503,  504,  505,  506,  507, 1441,  508,  509,
      510,  540,  540,  540,  540,  540,  540,  540,  540, 1441,
     1441, 1234, 1235, 1236, 1237, 1441,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541, 1234, 1235, 1236, 1237,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541, 1238, 1441, 1441, 1441, 1239, 1441,  542,  543,  543,
      544,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  546,  547,  547,
      548, 1238,  549,  550,  551, 1239,  552,  553,  554,  555,
      556,  557,  558,  559, 1441,  560,  561,  562,  233,  234,
     1441,  233,  233,  233,  233,  233,  233,  233,  233,  235,
     1441, 1240, 1241, 1242, 1243, 1441,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236, 1240, 1241, 1242, 1243,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236, 1244, 1441, 1441, 1441, 1441, 1441,  243,  244,  244,
      245,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  247,  248,  248,
      249, 1244,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261, 1441,  262,  263,  264,  991,  992,

     1441,  991,  991,  991,  991,  991,  991,  991,  991, 1441,
     1441, 1245, 1246, 1247, 1248, 1441,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993, 1245, 1246, 1247, 1248,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993, 1249, 1441, 1441, 1441, 1441, 1441,  994,  995,  995,
      996,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  998,  999,  999,

     1000, 1249, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1441, 1013, 1014, 1015,  233,  234,
     1441,  233,  233,  233,  233,  233,  233,  233,  233,  235,
     1441, 1250, 1251, 1252, 1256, 1441,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236, 1250, 1251, 1252, 1256,  236,  236,  236,  236,  236,
     1203,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236, 1257, 1441, 1441, 1441, 1441, 1441,  243,  244,  244,

      245,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  247,  248,  248,
      249, 1257,  250,  251,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261, 1258,  262,  263,  264, 1206, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266, 1441, 1258, 1267, 1268, 1283, 1284, 1285,
     1286, 1287, 1290, 1291, 1293, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1259, 1260, 1261, 1262, 1263,
     1264, 1265, 1266,  730, 1306, 1267, 1268, 1283, 1284, 1285,

     1286, 1287, 1290, 1291, 1293, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311,
     1312, 1441, 1313, 1441, 1306, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1441,  731, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1441, 1307, 1308, 1309, 1310, 1311,
     1312,  732, 1313,  733,  733,  733,  733,  733,  733,  734,
      735,  735,  735,  735,  736,  737,  737,  738,  739,  740,
      375,  375,  375,  375,  375,  375,  375,  375, 1441, 1441,
     1314, 1315, 1316, 1320, 1441,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
     1314, 1315, 1316, 1320,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
     1321, 1441, 1441, 1441, 1322, 1441,  377,  378,  378,  379,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  381,  382,  382,  383,
     1321,  384,  385,  386, 1322,  387,  388,  389,  390,  391,
      392,  393,  394, 1323,  395,  396,  397, 1212, 1288, 1288,
     1288, 1288, 1337, 1338, 1289, 1441, 1339, 1340, 1353, 1354,

     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1441, 1294, 1294,
     1294, 1294, 1362, 1323, 1295, 1441, 1363, 1366, 1367, 1368,
     1382, 1383, 1337, 1338, 1441, 1324, 1339, 1340, 1353, 1354,
     1355, 1356, 1357, 1358, 1359, 1360, 1361,  778, 1327, 1441,
     1441, 1441, 1362, 1325, 1384, 1341, 1363, 1366, 1367, 1368,
     1382, 1383, 1441, 1441, 1328, 1324, 1329, 1329, 1329, 1329,
     1329, 1329, 1330, 1331, 1331, 1331, 1331, 1332, 1333, 1333,
     1334, 1335, 1336, 1325, 1384, 1341, 1441, 1441, 1441,  779,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1441,
     1441, 1441, 1397, 1398, 1399,  780, 1400,  781,  781,  781,

      781,  781,  781,  782,  783,  783,  783,  783,  784,  785,
      785,  786,  787,  788,  428,  428,  428,  428,  428,  428,
      428,  428, 1397, 1398, 1399, 1401, 1400, 1402, 1441,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429, 1403, 1401, 1406, 1402,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429, 1403, 1441, 1406, 1441, 1441, 1441,
      430,  431,  431,  432,  433,  433,  433,  433,  433,  433,

      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      434,  435,  435,  436, 1441,  437,  438,  439, 1404,  440,
      441,  442,  443,  444,  445,  446,  447, 1278,  448,  449,
      450,  483, 1441, 1441, 1441, 1441, 1279, 1441, 1441,  484,
      485, 1441,  484,  484,  484,  484,  484,  484,  484,  484,
      486, 1441, 1407, 1441, 1408, 1409, 1441,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487, 1407,  488, 1408, 1409,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487, 1414, 1441, 1441, 1441, 1441, 1441,  489,  490,
      490,  491,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  493,  494,
      494,  495, 1414,  496,  497,  498,  499,  500,  501,  502,
      503,  504,  505,  506,  507, 1441,  508,  509,  510,  540,
      540,  540,  540,  540,  540,  540,  540, 1441, 1441, 1415,
     1416, 1417, 1422, 1441,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541, 1415,

     1416, 1417, 1422,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541, 1423,
     1441, 1441, 1441, 1424, 1441,  542,  543,  543,  544,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  546,  547,  547,  548, 1423,
      549,  550,  551, 1424,  552,  553,  554,  555,  556,  557,
      558,  559, 1441,  560,  561,  562,  233,  234, 1441,  233,
      233,  233,  233,  233,  233,  233,  233,  235, 1441, 1326,
     1428, 1429, 1430, 1441,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236, 1326,
     1428, 1429, 1430,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236, 1431,
     1441, 1441, 1441, 1441, 1441,  243,  244,  244,  245,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  247,  248,  248,  249, 1431,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261, 1441,  262,  263,  264,  991,  992, 1441,  991,

      991,  991,  991,  991,  991,  991,  991, 1441, 1441, 1432,
     1435, 1436, 1437, 1441,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993, 1432,
     1435, 1436, 1437,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993, 1326,
     1441, 1441, 1441, 1441, 1441,  994,  995,  995,  996,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  998,  999,  999, 1000, 1326,

     1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
     1011, 1012, 1343, 1013, 1014, 1015,  729, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1438, 1439, 1326, 1344, 1441,
     1345, 1345, 1345, 1345, 1345, 1345, 1346, 1347, 1347, 1347,
     1347, 1348, 1349, 1349, 1350, 1351, 1352,  601,  602, 1441,
     1441, 1441, 1441,  601,  602, 1438, 1439, 1326, 1441, 1364,
     1441, 1441, 1441, 1441, 1441, 1365,  604,  604,  604,  604,
      604,  730,  604,  604,  604,  604,  604, 1377, 1377, 1377,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
     1377, 1377, 1377, 1379, 1379, 1379, 1379, 1379, 1379, 1379,

     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1441,
     1405, 1441, 1441,  731, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1281, 1441, 1440, 1441, 1441,  732,
     1282,  733,  733,  733,  733,  733,  733,  734,  735,  735,
      735,  735,  736,  737,  737,  738,  739,  740,  375,  375,
      375,  375,  375,  375,  375,  375, 1440, 1441, 1441, 1441,
     1441, 1441, 1441,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376, 1441, 1441,
     1441, 1441,  376,  376,  376,  376,  376,  376,  376,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376, 1433, 1441,
     1441, 1441, 1326, 1441,  377,  378,  378,  379,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  381,  382,  382,  383, 1433,  384,
      385,  386, 1326,  387,  388,  389,  390,  391,  392,  393,
      394, 1441,  395,  396,  397,  777, 1392, 1392, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1392, 1392, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1394, 1326, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1434, 1441, 1441, 1441, 1441,  778, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1326, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1434, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441,  779, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441,  780, 1441,  781,  781,  781,  781,  781,
      781,  782,  783,  783,  783,  783,  784,  785,  785,  786,
      787,  788,  428,  428,  428,  428,  428,  428,  428,  428,

     1441, 1441, 1441, 1441, 1441, 1441, 1441,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429, 1441, 1441, 1441, 1441,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429, 1441, 1441, 1441, 1441, 1441, 1441,  430,  431,
      431,  432,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  434,  435,
      435,  436, 1441,  437,  438,  439, 1441,  440,  441,  442,

      443,  444,  445,  446,  447, 1441,  448,  449,  450,  483,
     1441, 1441, 1441, 1441, 1441, 1441, 1441,  484,  485, 1441,
      484,  484,  484,  484,  484,  484,  484,  484,  486, 1441,
     1441, 1441, 1441, 1441, 1441,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
     1441,  488, 1441, 1441,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
     1441, 1441, 1441, 1441, 1441, 1441,  489,  490,  490,  491,

      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  493,  494,  494,  495,
     1441,  496,  497,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507, 1441,  508,  509,  510,  540,  540,  540,
      540,  540,  540,  540,  540, 1441, 1441, 1441, 1441, 1441,
     1441, 1441,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541, 1441, 1441, 1441,
     1441,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,

      541,  541,  541,  541,  541,  541,  541, 1441, 1441, 1441,
     1441, 1441, 1441,  542,  543,  543,  544,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  546,  547,  547,  548, 1441,  549,  550,
      551, 1441,  552,  553,  554,  555,  556,  557,  558,  559,
     1441,  560,  561,  562, 1369, 1288, 1288, 1369, 1441, 1441,
     1370, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1371, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1372,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1371, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1372,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1327, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1328, 1441, 1329, 1329, 1329, 1329, 1329, 1329,
     1330, 1331, 1331, 1331, 1331, 1332, 1333, 1333, 1334, 1335,
     1336, 1385, 1294, 1294, 1385, 1441, 1441, 1386, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1387, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1387, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1343, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1344,
     1441, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1347, 1347,
     1347, 1347, 1348, 1349, 1349, 1350, 1351, 1352, 1369, 1288,
     1288, 1369, 1441, 1441, 1370, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1371, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1372, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1371, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1372, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1327, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1328, 1441, 1329, 1329,
     1329, 1329, 1329, 1329, 1330, 1331, 1331, 1331, 1331, 1332,
     1333, 1333, 1334, 1335, 1336, 1369, 1288, 1288, 1369, 1441,
     1441, 1370, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1371, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1372, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1371, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1372, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1327, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1328, 1441, 1329, 1329, 1329, 1329, 1329,
     1329, 1330, 1331, 1331, 1331, 1331, 1332, 1333, 1333, 1334,

     1335, 1336, 1385, 1294, 1294, 1385, 1441, 1441, 1386, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1387,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1387,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1343, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1344, 1441, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1347,
     1347, 1347, 1347, 1348, 1349, 1349, 1350, 1351, 1352, 1385,
     1294, 1294, 1385, 1441, 1441, 1386, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1387, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1387, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1343, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1344, 1441, 1345,
     1345, 1345, 1345, 1345, 1345, 1346, 1347, 1347, 1347, 1347,
     1348, 1349, 1349, 1350, 1351, 1352, 1369, 1288, 1288, 1369,
     1441, 1441, 1370, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1371, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1425, 1441,
     1441, 1372, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1371, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1425, 1441,
     1441, 1372, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1327, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1328, 1441, 1329, 1329, 1329, 1329,

     1329, 1329, 1330, 1331, 1331, 1331, 1331, 1332, 1333, 1333,
     1334, 1335, 1336, 1369, 1288, 1288, 1369, 1441, 1441, 1370,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1371, 1426, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1372, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1371, 1426, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1372, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1327, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1328, 1441, 1329, 1329, 1329, 1329, 1329, 1329, 1330,
     1331, 1331, 1331, 1331, 1332, 1333, 1333, 1334, 1335, 1336,
       84, 1441,   84,   84,   84,   84, 1441,   84, 1441, 1441,
       84,   97, 1441,   97,   97,   97,   97, 1441,   97, 1441,
     1441,   97,  129, 1441,  129,  129,  129,  129, 1441,  129,
     1441, 1441,  129,  198,  198,  198,  198, 1441,  198, 1441,
     1441,  198,  333,  333,  333,  333,  333,  334,  334,  334,

      334,  334,  336,  336,  336,  336,  336,  337,  337,  337,
      337,  337,  338,  338, 1441,  338,  338,  339,  339,  339,
      339,  339,  341,  341,  341,  341,  341,  344,  344,  344,
      344,  344,  349,  349,  349,  349,  349,  354,  354,  354,
      354,  354,   84, 1441,   84,   84,   84,   84, 1441,   84,
     1441, 1441,   84,  357,  357,  357,  357,  358,  358,  358,
       84,   84,   84,   84,   84,  360,  360,  360,  360,  360,
      362,  362,  362,  362,  362,  364,  364,  364,  364,  364,
       97, 1441,   97,   97,   97,   97, 1441,   97, 1441, 1441,
       97,  366,  366,  366,  366,  367,  367,  367,   97,   97,

       97,   97,   97,  369,  369,  369,  369,  369,  371,  371,
      371,  371,  371,  373,  373,  373,  373,  373,  398,  398,
      398,  398,  398,  399,  399,  399,  399,  399,  401,  401,
      401,  401,  401,  402,  402,  402,  402,  402,  108,  108,
     1441,  108,  108,  403,  403,  403,  403,  403,  405,  405,
      405,  405,  405,  408,  408,  408,  408,  408,  411,  411,
      411,  411,  411,  416,  416,  416,  416,  416,  129, 1441,
      129,  129,  129,  129, 1441,  129, 1441, 1441,  129,  419,
      419,  419,  419,  420,  420,  420,  129,  129,  129,  129,
      129,  422,  422,  422,  422,  422,  424,  424,  424,  424,

      424,  426,  426,  426,  426,  426,  451,  451,  451,  451,
      451,  452,  452,  452,  452,  452,  454,  454,  454,  454,
      454,  455,  455,  455,  455,  455,  144,  144, 1441,  144,
      144,  456,  456,  456,  456,  456,  458,  458,  458,  458,
      458,  461,  461,  461,  461,  461,  464,  464,  464,  464,
      464,  469,  469,  469,  469,  469,  512,  512,  512,  512,
      512,  513,  513,  513,  513,  513,  515,  515,  515,  515,
      515,  516,  516,  516,  516,  516,  177,  177, 1441,  177,
      177,  517,  517,  517,  517,  517,  519,  519,  519,  519,
      519,  522,  522,  522,  522,  522,  525,  525,  525,  525,

      525,  530,  530,  530,  530,  530,  198,  198,  198,  198,
     1441,  198, 1441, 1441,  198,  531,  531,  531,  531,  532,
      532,  532,  198,  198,  198,  198,  198,  534,  534,  534,
      534,  534,  536,  536,  536,  536,  536,  538,  538,  538,
      538,  538,  563,  563,  563,  563,  563,  564,  564,  564,
      564,  564,  566,  566,  566,  566,  566,  567,  567,  567,
      567,  567,  212,  212, 1441,  212,  212,  568,  568,  568,
      568,  568,  570,  570,  570,  570,  570,  573,  573,  573,
      573,  573,  576,  576,  576,  576,  576,  581,  581,  581,
      581,  581,  232, 1441,  232,  591,  591,  591,  591,  591,

      592,  592,  592,  592,  592,  594,  594,  594,  594,  594,
      595,  595,  595,  595,  595,  236,  236, 1441,  236,  236,
      596,  596,  596,  596,  596,  598,  598,  598,  598,  598,
      600,  600,  600,  600,  600,  603,  603,  603,  603,  603,
      606,  606,  606,  606,  606,  611,  611,  611,  611,  611,
      339,  339,  339,  339,  339,  717,  717,  717,  717,  717,
      333,  333,  333,  333,  333,  722,  722,  722,  722,  722,
      723,  723,  723,  723,  723,  724,  724,  724,  724,  724,
      726,  726,  726,  726,  726,  727,  727,  727,  727,  727,
      728,  728,  728,  728,  728,  728, 1441,  728, 1441, 1441,

      728,  358,  358,  358,  358,  358,   84,   84,   84,   84,
       84,  741,  741,  741,  741,  741,  742,  742,  742,  742,
      742,  743,  743,  743,  743,  743,  744,  744,  744,  744,
      744,  367,  367,  367,  367,  367,   97,   97,   97,   97,
       97,  745,  745,  745,  745,  745,  746,  746,  746,  746,
      746,  747,  747,  747,  747,  747,  748,  748,  748,  748,
      748,  750,  750,  750,  750,  750,  751,  751,  751,  751,
      751,  753,  753,  753,  753,  753,  754,  754,  754,  754,
      754,  376,  376, 1441,  376,  376,  375,  375,  375, 1441,
      375,  755,  755,  755,  755,  755,  757,  757,  757,  757,

      757,  760,  760,  760,  760,  760,  763,  763,  763,  763,
      763,  768,  768,  768,  768,  768,  403,  403,  403,  403,
      403,  769,  769,  769,  769,  769,  398,  398,  398,  398,
      398,  770,  770,  770,  770,  770,  771,  771,  771,  771,
      771,  772,  772,  772,  772,  772,  774,  774,  774,  774,
      774,  775,  775,  775,  775,  775,  776,  776,  776,  776,
      776,  776, 1441,  776, 1441, 1441,  776,  420,  420,  420,
      420,  420,  129,  129,  129,  129,  129,  789,  789,  789,
      789,  789,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  792,  792,  792,  792,  792,  794,  794,  794,

      794,  794,  795,  795,  795,  795,  795,  797,  797,  797,
      797,  797,  798,  798,  798,  798,  798,  429,  429, 1441,
      429,  429,  428,  428,  428, 1441,  428,  799,  799,  799,
      799,  799,  801,  801,  801,  801,  801,  804,  804,  804,
      804,  804,  807,  807,  807,  807,  807,  812,  812,  812,
      812,  812,  456,  456,  456,  456,  456,  813,  813,  813,
      813,  813,  451,  451,  451,  451,  451,  814,  814,  814,
      814,  814,  815,  815,  815,  815,  815,  816,  816,  816,
      816,  816,  818,  818,  818,  818,  818,  819,  819,  819,
      819,  819,  837,  837,  837,  837,  837,  838,  838,  838,

      838,  838,  840,  840,  840,  840,  840,  841,  841,  841,
      841,  841,  487,  487, 1441,  487,  487,  842,  842,  842,
      842,  842,  844,  844,  844,  844,  844,  846,  846,  846,
      846,  846,  849,  849,  849,  849,  849,  852,  852,  852,
      852,  852,  857,  857,  857,  857,  857,  517,  517,  517,
      517,  517,  858,  858,  858,  858,  858,  512,  512,  512,
      512,  512,  859,  859,  859,  859,  859,  860,  860,  860,
      860,  860,  861,  861,  861,  861,  861,  863,  863,  863,
      863,  863,  864,  864,  864,  864,  864,  532,  532,  532,
      532,  532,  198,  198,  198,  198,  198,  865,  865,  865,

      865,  865,  866,  866,  866,  866,  866,  867,  867,  867,
      867,  867,  868,  868,  868,  868,  868,  870,  870,  870,
      870,  870,  871,  871,  871,  871,  871,  873,  873,  873,
      873,  873,  874,  874,  874,  874,  874,  541,  541, 1441,
      541,  541,  540,  540,  540, 1441,  540,  875,  875,  875,
      875,  875,  877,  877,  877,  877,  877,  880,  880,  880,
      880,  880,  883,  883,  883,  883,  883,  888,  888,  888,
      888,  888,  568,  568,  568,  568,  568,  889,  889,  889,
      889,  889,  563,  563,  563,  563,  563,  890,  890,  890,
      890,  890,  891,  891,  891,  891,  891,  892,  892,  892,

      892,  892,  894,  894,  894,  894,  894,  895,  895,  895,
      895,  895,  896,  896,  598,  598,  598,  598,  598,  897,
      897,  897,  897,  897,  591,  591,  591,  591,  591,  898,
      898,  898,  898,  898,  899,  899,  899,  899,  899,  900,
      900,  900,  900,  900,  902,  902,  902,  902,  902,  903,
      903,  903,  903,  903, 1016, 1016, 1016, 1016, 1016, 1017,
     1017, 1017, 1017, 1017, 1019, 1019, 1019, 1019, 1019, 1020,
     1020, 1020, 1020, 1020,  695,  695, 1441,  695,  695, 1021,
     1021, 1021, 1021, 1021, 1023, 1023, 1023, 1023, 1023, 1026,
     1026, 1026, 1026, 1026, 1029, 1029, 1029, 1029, 1029, 1034,

     1034, 1034, 1034, 1034, 1039, 1039, 1039, 1039, 1039,  728,
      728,  728,  728,  728,  728, 1441,  728, 1441, 1441,  728,
     1041, 1041, 1041, 1041, 1042, 1042, 1042,  728,  728,  728,
      728,  728, 1044, 1044, 1044, 1044, 1044, 1046, 1046, 1046,
     1046, 1046, 1048, 1048, 1048, 1048, 1048,   84, 1441,   84,
       84,   84,   84, 1441,   84, 1441, 1441,   84,   84,   84,
       84,   84,   84,  358,  358,  358,  358,  358,   97, 1441,
       97,   97,   97,   97, 1441,   97, 1441, 1441,   97,   97,
       97,   97,   97,   97,  367,  367,  367,  367,  367,  755,
      755,  755,  755,  755, 1050, 1050, 1050, 1050, 1050,  750,

      750,  750,  750,  750, 1051, 1051, 1051, 1051, 1051, 1052,
     1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 1055,
     1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056, 1056, 1057,
     1057, 1057, 1057, 1057,  776,  776,  776,  776,  776,  776,
     1441,  776, 1441, 1441,  776, 1059, 1059, 1059, 1059, 1060,
     1060, 1060,  776,  776,  776,  776,  776, 1062, 1062, 1062,
     1062, 1062, 1064, 1064, 1064, 1064, 1064, 1066, 1066, 1066,
     1066, 1066,  129, 1441,  129,  129,  129,  129, 1441,  129,
     1441, 1441,  129,  129,  129,  129,  129,  129,  420,  420,
      420,  420,  420,  799,  799,  799,  799,  799, 1068, 1068,

     1068, 1068, 1068,  794,  794,  794,  794,  794, 1069, 1069,
     1069, 1069, 1069, 1070, 1070, 1070, 1070, 1070, 1071, 1071,
     1071, 1071, 1071, 1073, 1073, 1073, 1073, 1073, 1074, 1074,
     1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075,  844,  844,
      844,  844,  844, 1084, 1084, 1084, 1084, 1084,  837,  837,
      837,  837,  837, 1085, 1085, 1085, 1085, 1085, 1086, 1086,
     1086, 1086, 1086, 1087, 1087, 1087, 1087, 1087, 1089, 1089,
     1089, 1089, 1089, 1090, 1090, 1090, 1090, 1090, 1091, 1091,
     1091, 1091, 1091,  198,  198,  198,  198, 1441,  198, 1441,
     1441,  198,  198,  198,  198,  198,  198,  532,  532,  532,

      532,  532,  875,  875,  875,  875,  875, 1092, 1092, 1092,
     1092, 1092,  870,  870,  870,  870,  870, 1093, 1093, 1093,
     1093, 1093, 1094, 1094, 1094, 1094, 1094, 1095, 1095, 1095,
     1095, 1095, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098,
     1098, 1098, 1099, 1099, 1099, 1099, 1099,  896,  896,  896,
     1100, 1100, 1100, 1100, 1100, 1175, 1175, 1175, 1175, 1175,
     1176, 1176, 1176, 1176, 1176, 1178, 1178, 1178, 1178, 1178,
     1179, 1179, 1179, 1179, 1179,  993,  993, 1441,  993,  993,
     1180, 1180, 1180, 1180, 1180, 1182, 1182, 1182, 1182, 1182,
     1184, 1184, 1184, 1184, 1184, 1187, 1187, 1187, 1187, 1187,

     1190, 1190, 1190, 1190, 1190, 1195, 1195, 1195, 1195, 1195,
     1021, 1021, 1021, 1021, 1021, 1196, 1196, 1196, 1196, 1196,
     1016, 1016, 1016, 1016, 1016, 1197, 1197, 1197, 1197, 1197,
     1198, 1198, 1198, 1198, 1198, 1199, 1199, 1199, 1199, 1199,
     1201, 1201, 1201, 1201, 1201, 1202, 1202, 1202, 1202, 1202,
      603,  603,  603,  603,  603,  728,  728,  728,  728,  728,
      728, 1441,  728, 1441, 1441,  728, 1042, 1042, 1042, 1042,
     1042,  728,  728,  728,  728,  728, 1207, 1207, 1207, 1207,
     1207, 1208, 1208, 1208, 1208, 1208, 1209, 1209, 1209, 1209,
     1209, 1210, 1210, 1210, 1210, 1210, 1211, 1211, 1211, 1211,

     1211,  776,  776,  776,  776,  776,  776, 1441,  776, 1441,
     1441,  776, 1060, 1060, 1060, 1060, 1060,  776,  776,  776,
      776,  776, 1213, 1213, 1213, 1213, 1213, 1214, 1214, 1214,
     1214, 1214, 1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216,
     1216, 1216, 1217, 1217, 1217, 1217, 1217, 1218, 1218, 1218,
     1218, 1218, 1219, 1219, 1219, 1219, 1219, 1182, 1182, 1182,
     1182, 1182, 1269, 1269, 1269, 1269, 1269, 1175, 1175, 1175,
     1175, 1175, 1270, 1270, 1270, 1270, 1270, 1271, 1271, 1271,
     1271, 1271, 1272, 1272, 1272, 1272, 1272, 1274, 1274, 1274,
     1274, 1274, 1275, 1275, 1275, 1275, 1275, 1276, 1276, 1276,

     1276, 1276,  591,  591,  591,  591,  591,  728,  728,  728,
      728,  728,  728, 1441,  728, 1441, 1441,  728,  728,  728,
      728,  728,  728, 1042, 1042, 1042, 1042, 1042,  776,  776,
      776,  776,  776,  776, 1441,  776, 1441, 1441,  776,  776,
      776,  776,  776,  776, 1060, 1060, 1060, 1060, 1060, 1317,
     1317, 1317, 1317, 1317, 1326, 1441, 1326, 1326, 1326, 1326,
     1441, 1326, 1441, 1441, 1326, 1342, 1441, 1342, 1342, 1342,
     1342, 1441, 1342, 1441, 1441, 1342,  603,  603,  603,  603,
      603, 1373, 1373, 1373, 1373, 1374, 1374, 1374, 1326, 1326,
     1326, 1326, 1326, 1376, 1376, 1376, 1376, 1376, 1378, 1378,

     1378, 1378, 1378, 1380, 1380, 1380, 1380, 1380, 1388, 1388,
     1388, 1388, 1389, 1389, 1389, 1342, 1342, 1342, 1342, 1342,
     1391, 1391, 1391, 1391, 1391, 1393, 1393, 1393, 1393, 1393,
     1395, 1395, 1395, 1395, 1395,  591,  591,  591,  591,  591,
     1326, 1326, 1326, 1326, 1326, 1326, 1441, 1326, 1441, 1441,
     1326, 1374, 1374, 1374, 1374, 1374, 1326, 1326, 1326, 1326,
     1326, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411, 1411,
     1411, 1412, 1412, 1412, 1412, 1412, 1413, 1413, 1413, 1413,
     1413, 1342, 1342, 1342, 1342, 1342, 1342, 1441, 1342, 1441,
     1441, 1342, 1389, 1389, 1389, 1389, 1389, 1342, 1342, 1342,

     1342, 1342, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419,
     1419, 1419, 1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421,
     1421, 1421, 1326, 1326, 1326, 1326, 1326, 1326, 1441, 1326,
     1441, 1441, 1326, 1326, 1326, 1326, 1326, 1326, 1374, 1374,
     1374, 1374, 1374,    3, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441
    } ;

static yyconst flex_int16_t yy_chk[11383] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,   10,
       81,    5,    9,   81,   14,   14,   14,   14,   52,   52,
       52,   52,  164, 1446,  164,   10,   14,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   17,   17, 1414,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19, 1405,   19,   19,
       19,   19,   19,   19,   19,   19, 1404,    9,  342,  342,

       19,   20,   20,   20,   20,   20,   20,   20,   20,   52,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   67,   67,
       67,   67,   67,   67,   69,   70,   70,   70,   70,    9,
       70, 1389,   69,   72,   72,   72,   72,   72,   72,   72,
       72,   72,  406,  406, 1374,    9, 1282,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   78,   78,   78,   78,   78,  237, 1280,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,  459,  459, 1279,  237,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,  114,  114,  114,  114,  114,  114,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,  520,  520,   11,   11, 1277,   11,
       11,   11,   11,   11,   11,   11,   11, 1230,   11,   11,
       11,   13,   22,  238,   22,   22,   22,   22,   22,   22,

       22,   22,  116,  152,   31,   31,  186,   31,  220, 1189,
      116,  152,   31,   22,  186,   31,  220,   31,   31,   37,
       37,   31,   37,  238,   31,  571,  571,   31,  239, 1154,
       37,  240,   37,   37,   31,   31,   37,   31,  242,   37,
     1153,   13,   31,   22, 1152,   31, 1120,   31,   31,   37,
       37,   31,   37, 1060,   31,   74,   74,   31,  239,   74,
       37,  240,   37,   37, 1024, 1024,   37,   74,  242,   37,
      142,  142,  142,  142,   74,   74,   74,   74,   74,  601,
      601, 1042,  142,   13,   90,   90,   90,   90,   90,   90,
       90,   90,   90,  117,  117,  117,  117,  601,  117,   13,

     1039,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   16,   16,
       16,   16,   16,   16,   16,   16,  125,  125,  125,  125,
      125,  265, 1036,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16, 1028, 1010,
     1001,  265,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,  150,  150,
      150,  150,  150,  150,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,  994,  969,
       16,   16,  968,   16,   16,   16,   16,   16,   16,   16,
       16,  967,   16,   16,   16,   23,   96,   96,   96,   96,
       96,   96,   96,   96,  896,  882,   23,   23,   23,   23,
       23,   23,   23,   23,   23,  153,  153,  153,  153,  266,
      153,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,  851,   23,  806,  266,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,  161,  161,  161,  161,
      161,  762,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,  267,  721,   23,   23,
      720,   23,   23,   23,   23,   23,   23,   23,   23,  716,
       23,   23,   23,   25,   25,   32,  715,   32,   32,   86,
      709,  252,  605,  268,   86,   32,  267,   32,   32,  252,
       32,   32,  270,  271,   32,  575,  187,  187,  187,  187,
       39,  187,   39,  241,  557,   32,  253,   32,   32,  549,

       39,  241,   39,  268,  253,   32,   39,   32,   32,   39,
       32,   32,  270,  271,   32,  195,  195,  195,  195,  195,
       39,  542,   39,  241,   86,  532,  386,  524,  505,   86,
       39,  241,   39,   86,  386,   25,   39,  439,  496,   39,
      489,   86,  470,  463,   86,  439,   86,  221,  221,  221,
      221,   25,  221,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       28,   28,   28,   28,   28,   28,   28,   28,  184,  184,
      184,  184,  184,  184,  445,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
      326,  326,  326,  326,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
      218,  218,  218,  218,  218,  218,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
      437,  326,   28,   28,  273,   28,   28,   28,   28,   28,
       28,   28,   28,  430,   28,   28,   28,   30,   30,  420,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  229,

      229,  229,  229,  229,  273,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      410,  392,  384,  377,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      249,  249,  249,  249,  249,  249,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      367,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,  358,   30,   30,   30,   33,   33,  274,
       33,   33,  276,  277,  274,   33,  278,  278,   33,  348,
       33,  345,  279,   33,   33,  280,  281,   33,  101,  101,
      101,  101,  101,  101,  101,  101,  101,   33,   33,  274,
       33,   33,  276,  277,  274,   33,  278,  278,   33,   34,
       33,   34,  279,   33,   33,  280,  281,   33,  331,   34,
      330,   34,  282,  295,  259,   34,  284,  250,   34,  285,
       34,  254,  254,  254,  254,  254,  254,  288,   35,   34,
       35,   34,  121,  121,  290,   35,  243,  291,   35,   34,
       35,   34,  282,   35,   35,   34,  284,   35,   34,  285,

       34,  121,  121,  121,  121,  121,  234,  288,   35,  292,
       35,  293,  283,  232,  290,   35,  275,  291,   35,   36,
       35,   36,  275,   35,   35,  226,  283,   35,  275,   36,
      192,   36,  287,  287,   36,   36,   47,  158,   36,  292,
       47,  293,  283,   47,   47,  294,  275,  130,  296,   36,
       47,   36,  275,  122,   47,   47,  283,  297,  275,   36,
       47,   36,  287,  287,   36,   36,   47,   38,   36,   38,
       47,   38,  299,   47,   47,  294,  301,   38,  296,   38,
       47,  302,   38,   38,   47,   47,   38,  297,   85,   75,
       47,  262,  262,  262,  262,  262,  298,   38,   60,   38,

      346,   38,  299,  298,  346,  303,  301,   38,   55,   38,
      346,  302,   38,   38,  758,  758,   38,   40,   40,   40,
       40,  300,  305,  304,  300,   40,  298,  304,   40,  307,
       40,   40,  758,  298,   40,  303,   54,   40,  107,  107,
      107,  107,  107,  107,  107,  107,   27,   40,   40,   40,
       40,  300,  305,  304,  300,   40,  310,  304,   40,  307,
       40,   40,   41,   41,   40,   41,   41,   40,  272,  311,
       41,   12,  314,   41,  317,   41,   41,   42,   42,   41,
       42,  272,   41,  272,  319,  312,  310,  272,   42,  320,
       42,   42,   41,   41,   42,   41,   41,   42,  272,  311,

       41,  312,  314,   41,  317,   41,   41,   42,   42,   41,
       42,  272,   41,  272,  319,  312,    8,  272,   42,  320,
       42,   42,    7,    3,   42,   49,   43,   42,   43,   49,
       43,  312,   49,   49,  321,  322,   43,    0,   43,    0,
       43,   43,   43,   49,   49,   43,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   49,   43,    0,   43,   49,
       43,    0,   49,   49,  321,  322,   43,   44,   43,   44,
       43,   43,   43,   49,   49,   43,  308,   44,    0,   44,
      323,    0,   44,   44,  306,  308,   44,  306,  324,  313,
      325,   45,   45,  498,   45,   45,  306,   44,    0,   44,

      313,  498,   45,  612,   45,   45,  308,   44,   45,   44,
      323,   45,   44,   44,  306,  308,   44,  306,  324,  313,
      325,   45,   45,  499,   45,   45,  306,  613,  551,  703,
      313,  499,   45,  612,   45,   45,  551,  703,   45,    0,
        0,   45,   46,   46,  614,   46,   46,  615,  616,   46,
       46,  617,  618,   46,  620,   46,    0,  613,    0,   46,
       46,   46,   46,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   46,   46,  614,   46,   46,  615,  616,   46,
       46,  617,  618,   46,  620,   46,   48,   48,   48,   46,
       46,   46,   46,  621,  622,  623,   48,  625,   48,  626,

      309,   48,   48,   50,   48,   48,  627,   50,    0,  309,
       50,   50,    0,  309,  309,    0,   48,   48,   48,  628,
      629,   50,   50,  621,  622,  623,   48,  625,   48,  626,
      309,   48,   48,   50,   48,   48,  627,   50,   51,  309,
       50,   50,   51,  309,  309,   51,   51,  802,  802,  628,
      629,   50,   50, 1003,    0,   57,   51,   51,  630,   57,
      631, 1003,   57,   57,  632,  802,   57,  633,   51,    0,
      634,   57,   51,   57,   57,   51,   51,  141,  141,  141,
      141,  141,  141,  141,  141,   57,   51,   51,  630,   57,
      631,   58,   57,   57,  632,   58,   57,  633,   58,   58,

      634,   57,    0,   57,   57,   58,  635,    0,  636,   58,
       58,  157,  157,  637,  638,   58,    0,  387,  387,  387,
      387,   58,  387,  847,  847,   58,    0,    0,   58,   58,
      157,  157,  157,  157,  157,   58,  635,   58,  636,   58,
       58,  847,    0,  637,  638,   58,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   84,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,  395,  395,  395,  395,  395,   97,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  343,  343,  343,  343,
      343,  343,   97,   84,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  165,  165,  165,
      165,  165,  165,  165,  165,   84,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  352,  352,  352,  352,  352,
      352,   84,    0,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  108,  108,  108,  108,
      108,  108,  108,  108,  383,  383,  383,  383,  383,  383,
        0,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,    0,    0,    0,    0,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  407,  407,  407,  407,

      407,  407,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,    0,  108,  108,  108,
        0,  108,  108,  108,  108,  108,  108,  108,  108,    0,
      108,  108,  108,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  129,  131,    0,    0,    0,
        0,  131,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  191,  191,  129,    0,  440,  440,  440,
      440,  131,  440,  639,  640,  641,  131,  677,  677,  677,
      131,  677,  191,  191,  191,  191,  191,    0,  131,    0,
        0,  131,    0,  131,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  639,  640,  641,    0,  129,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  414,  414,  414,
      414,  414,  414,  129,    0,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  144,  144,  144,  144,  144,  144,  144,  144,
      436,  436,  436,  436,  436,  436,    0,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,    0,    0,    0,    0,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  448,  448,  448,  448,  448,    0,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,

      144,  144,    0,  144,  144,  144,    0,  144,  144,  144,
      144,  144,  144,  144,  144,    0,  144,  144,  144,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  166,    0,  166,  166,  166,  166,  166,  166,  166,
      166,  168,  168,  168,  168,  168,  168,  168,  168,  643,
        0,  169,  166,  169,  169,  169,  169,  169,  169,  169,
      169,  171,  171,  171,  171,  171,  171,  171,  171,    0,
        0,    0,  169,  460,  460,  460,  460,  460,  460,  643,

      171,    0,  166,    0,  172,  172,  172,  172,  172,  172,
      172,  172,  173,    0,  173,  173,  173,  173,  173,  173,
      173,  173,  169,  172,  508,  508,  508,  508,  508,  174,
      171,  174,    0,  173,  174,  174,  174,  174,  174,  174,
      174,  174,  175,  175,  175,  175,  175,  175,  175,  175,
        0,    0,    0,  172,    0,    0,    0,  175,  175,  175,
      175,  175,  175,  173,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  560,  560,  560,  560,  560,  175,  175,  175,
      175,  175,  175,  176,  225,  225,  712,  712,  712,  712,

      712,  176,  176,    0,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  225,  225,  225,  225,  225,    0,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,    0,  176,    0,    0,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  467,  467,  467,  467,  467,  467,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

      176,  176,  176,  176,    0,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,    0,  176,  176,
      176,  178,    0,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  178,  198,  178,  644,  178,
      178,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  645,  646,  644,    0,
      178,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  199,  210,  210,

      210,  210,  210,  210,  210,  210,  645,  646, 1004,  178,
      495,  495,  495,  495,  495,  495, 1004,  198,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  500,  500,  500,
      500,  500,  500,  198,    0,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  199,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  521,  521,
      521,  521,  521,  521,  199,    0,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  212,
      212,  212,  212,  212,  212,  212,  212,  528,  528,  528,
      528,  528,  528,    0,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,    0,
        0,    0,    0,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  548,
      548,  548,  548,  548,  548,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,    0,
      212,  212,  212,    0,  212,  212,  212,  212,  212,  212,
      212,  212,    0,  212,  212,  212,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  233,  233,    0,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  552,
      552,  552,  552,  647,  552,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
        0,    0,    0,  647,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      572,  572,  572,  572,  572,  572,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
        0,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,    0,  233,  233,  233,  235,  245,  245,

      245,  245,  245,  245,  245,  245,  245,    0,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  579,  579,  579,
      579,  579,  579,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,    0,  235,
        0,    0,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  602,  602,
      602,  602,  602,  602,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,    0,    0,
      235,  235,    0,  235,  235,  235,  235,  235,  235,  235,
      235,    0,  235,  235,  235,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  258,  258,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,    0,  258,  258,  258,  258,  258,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  289,  619,  648,  318,  649,  650,  651,
      289,  318,  654,  289,  655,  289,  656,  318,  657,  619,

      619,  289,  379,  379,  379,  379,  379,  379,  379,  379,
      379,    0,    0,  289,  619,  648,  318,  649,  650,  651,
      289,  318,  654,  289,  655,  289,  656,  318,  657,  619,
      619,  289,  329,  329,  329,  329,  329,  329,  329,  329,
      609,  609,  609,  609,  609,  609,    0,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  658,  661,  662,  663,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  658,  661,  662,  663,  664,    0,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,    0,    0,  329,  329,  664,  329,  329,  329,
      329,  329,  329,  329,  329,    0,  329,  329,  329,  356,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  391,  391,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,    0,  391,  391,  391,
      391,  391,  432,  432,  432,  432,  432,  432,  432,  432,

      432,    0,    0,    0,  356,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  878,
      878,    0,  473,    0,  473,    0,  356,  473,  473,  473,
      473,  473,  473,  473,  473,    0,    0,  878,    0,  665,
      666,  667,  356,  668,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  375,  375,  375,  375,  375,  375,  375,  375,  665,
      666,  667,  669,  668,  670,    0,  375,  375,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  671,  669,  673,  670,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  671,    0,  673,    0,  674,    0,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,    0,  375,  375,  375,  674,  375,  375,  375,  375,
      375,  375,  375,  375,    0,  375,  375,  375,  418,  444,

      444,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  675,  444,  444,
      444,  444,  444,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  471,
      471,  471,  471,  471,  471,  471,  471,  675,  418,  472,
      472,  472,  472,  472,  472,  472,  472,  676,  471,  678,
        0,  679,  681,  683,  476,  684,  476,  685,  472,  476,
      476,  476,  476,  476,  476,  476,  476,  480,  480,  480,
      480,  480,  480,  480,  480,    0,    0,  676,  471,  678,
      418,  679,  681,  683,    0,  684,    0,  685,  472,    0,

        0,    0,    0,  686,  687,  689,  418,  690,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  428,  428,  428,  428,  428,
      428,  428,  428,  686,  687,  689,  691,  690,  692,    0,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  693,  691,  694,  692,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  693,    0,  694,    0,  906,

        0,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,    0,  428,  428,  428,  906,
      428,  428,  428,  428,  428,  428,  428,  428,  907,  428,
      428,  428,  474,  474,  474,  474,  474,  474,  474,  474,
      475,  475,  475,  475,  475,  475,  475,  475,    0,    0,
        0,  474,    0,  909,  910,  477,    0,  477,  907,  475,
      477,  477,  477,  477,  477,  477,  477,  477,  478,  478,
      478,  478,  478,  478,  478,  478,    0,  704,  704,  704,
      704,  474,  704,  909,  910,  911,  479,  478,  479,  475,

      912,  479,  479,  479,  479,  479,  479,  479,  479,  481,
      481,  481,  481,  481,  481,  481,  481,  482,  482,  482,
      482,  482,  482,  482,  482,  911,    0,  478,  504,  504,
      912,  913,  482,  482,  482,  482,  482,  482,  483,  483,
      483,  483,  483,  483,  483,  483,    0,  504,  504,  504,
      504,  504,    0,  483,  483,  483,  483,  483,  483,  556,
      556,  913,  482,  482,  482,  482,  482,  482,  491,  491,
      491,  491,  491,  491,  491,  491,  491,    0,  556,  556,
      556,  556,  556,  483,  483,  483,  483,  483,  483,  484,
      701,  701,  701,  701,  701,  701,    0,  484,  484,    0,

      484,  484,  484,  484,  484,  484,  484,  484,  484,  759,
      759,  759,  759,  759,  759,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
        0,  484,    0,    0,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      766,  766,  766,  766,  766,  766,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,

        0,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,    0,  484,  484,  484,  488,    0,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  488,  915,  488,  916,  488,  488,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  915,  917,  916,    0,  488,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  544,  544,  544,  544,  544,  544,  544,

      544,  544,    0,  917,    0,  488,  540,  540,  540,  540,
      540,  540,  540,  540,  803,  803,  803,  803,  803,  803,
        0,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,    0,    0,    0,    0,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  810,  810,  810,  810,
      810,  810,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,    0,  540,  540,  540,
        0,  540,  540,  540,  540,  540,  540,  540,  540,    0,
      540,  540,  540,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  583,  583,    0,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  848,  848,  848,  848,  848,
      848,  583,  583,  583,  583,  583,  583,  583,  583,  583,

      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,    0,    0,    0,    0,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  855,  855,  855,  855,
      855,  855,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  918,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  672,
      583,  583,  583,  680,  680,  919,  680,  680,  920,  921,

      672,  923,  925,  926,  680,    0,  918,    0,    0,    0,
      680,  927,  680,    0,    0,  929,  708,  708,    0,  672,
        0,    0,    0,  680,  680,  919,  680,  680,  920,  921,
      672,  923,  925,  926,  680,  708,  708,  708,  708,  708,
      680,  927,  680,  695,  695,  929,  695,  695,  695,  695,
      695,  695,  695,  695,  879,  879,  879,  879,  879,  879,
        0,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,    0,    0,    0,    0,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  886,  886,  886,  886,
      886,  886,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,    0,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,    0,
      695,  695,  695,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,

      711,  711,  711,  711,  711,  711,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  728,  730,    0,    0,    0,    0,  730,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
     1000, 1000, 1000, 1000, 1000, 1000,    0,  728,  730, 1185,
     1185,    0,    0,  730,    0,    0,    0,  730,  930, 1005,
     1005, 1005, 1005, 1005, 1005,  730,    0, 1185,  730,  931,

      730,  740,  740,  740,  740,  740,  740,  740,  740,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  930,  728,
      788,  788,  788,  788,  788,  788,  788,  788,  932,  931,
      933,    0,    0,    0,    0,  728,    0,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  729,  745,  778,  820,  932,  820,
      933,  778,  820,  820,  820,  820,  820,  820,  820,  820,
        0,  745,    0,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,    0, 1205, 1204,  729,
        0,  778, 1227, 1227, 1227, 1227,  778, 1204, 1227,    0,
      778, 1205,    0,  935,  936,    0, 1204, 1205,  778,    0,
        0,  778,    0,  778,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      822,  729,  822,  935,  936,  822,  822,  822,  822,  822,
      822,  822,  822,    0,    0,    0,    0,  729,    0,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  741,  821,  821,  821,
      821,  821,  821,  821,  821,  823,  823,  823,  823,  823,

      823,  823,  823,    0,    0,    0,  821,  824,  824,  824,
      824,  824,  824,  824,  824,  825,  937,  825,    0,    0,
      825,  825,  825,  825,  825,  825,  825,  825,  826,  826,
      826,  826,  826,  826,  826,  826,  821,    0,    0,    0,
        0,  741,  938,  827,  939,  827,  937,  826,  827,  827,
      827,  827,  827,  827,  827,  827,  828,  828,  828,  828,
      828,  828,  828,  828,  829,  829,  829,  829,  829,  829,
      829,  829,  938,    0,  939,    0,    0,  826, 1013, 1013,
     1013, 1013, 1013,  741,  830,  830,  830,  830,  830,  830,
      830,  830,    0,    0,    0,    0,  940,  941,  942,  741,

      944,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  749,  749,
      749,  749,  749,  749,  749,  749,  940,  941,  942,    0,
      944,  946,    0,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  945,  945,
      948,  946,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  945,  945,
      948,    0,  949,    0,  749,  749,  749,  749,  749,  749,

      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,    0,  749,
      749,  749,  949,  749,  749,  749,  749,  749,  749,  749,
      749,    0,  749,  749,  749,  776,  831,  831,  831,  831,
      831,  831,  831,  831,  832,  832,  832,  832,  832,  832,
      832,  832,  833,  833,  833,  833,  833,  833,  833,  833,
      834,  834,  834,  834,  834,  834,  834,  834,  950,  951,
      952,  953,  955,  956,  957,  834,  834,  834,  834,  834,
      834,  958,  960,  961,  962,  776,  963,  964,  965,  970,
      971,  972,  865,  973,  974,  975,  977,    0,  950,  951,

      952,  953,  955,  956,  957,  834,  834,  834,  834,  834,
      834,  958,  960,  961,  962,    0,  963,  964,  965,  970,
      971,  972,    0,  973,  974,  975,  977,  776, 1025, 1025,
     1025, 1025, 1025, 1025,  976,  978,  979,  980,  976,  981,
      982,  983,  984,  776,  985,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  777,  865,  976,  978,  979,  980,  976,  981,
      982,  983,  984,  987,  985,  988,    0,    0,    0,  865,
        0,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865, 1235, 1235,

     1235, 1235,    0,  987, 1235,  988, 1032, 1032, 1032, 1032,
     1032, 1032,  777,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  998,  998,  998,  998,  998,  998,  998,  998,
      998, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1009, 1009,    0,    0,    0, 1037, 1037, 1186, 1186, 1186,
     1186, 1186, 1186,    0,  777,    0,    0, 1037,    0, 1009,
     1009, 1009, 1009, 1009, 1037, 1037, 1037, 1037, 1037,    0,
      777,    0,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  789,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,

     1012, 1012, 1012, 1012, 1012, 1012, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1038, 1038, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076,    0,    0, 1038,    0,    0,    0,    0,  789,
        0, 1038, 1038, 1038, 1038, 1038, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,    0,    0,
        0,  789, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
        0,    0,    0,    0, 1104, 1105, 1106,  789, 1107,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  793,  793,  793,  793,
      793,  793,  793,  793, 1104, 1105, 1106, 1109, 1107, 1110,
        0,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793, 1111, 1109, 1112, 1110,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793, 1111,    0, 1112,    0,
     1113,    0,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,    0,  793,  793,  793,
     1113,  793,  793,  793,  793,  793,  793,  793,  793,    0,
      793,  793,  793,  835, 1193, 1193, 1193, 1193, 1193, 1193,
        0,  835,  835,    0,  835,  835,  835,  835,  835,  835,
      835,  835,  835,    0, 1114,    0, 1115, 1116,    0,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835, 1114,  835, 1115, 1116,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,

      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835, 1117,    0,    0,    0,    0,    0,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835, 1117,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,    0,  835,  835,
      835,  869,  869,  869,  869,  869,  869,  869,  869,    0,
        0, 1121, 1123, 1124, 1126,    0,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,

      869, 1121, 1123, 1124, 1126,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869, 1127,    0,    0,    0, 1129,    0,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  869,  869,
      869, 1127,  869,  869,  869, 1129,  869,  869,  869,  869,
      869,  869,  869,  869,    0,  869,  869,  869,  897,  897,
        0,  897,  897,  897,  897,  897,  897,  897,  897,  897,
        0, 1132, 1134, 1137, 1138,    0,  897,  897,  897,  897,

      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897, 1132, 1134, 1137, 1138,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897, 1140,    0,    0,    0,    0,    0,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897, 1140,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,    0,  897,  897,  897,  991,  991,

        0,  991,  991,  991,  991,  991,  991,  991,  991,    0,
        0, 1142, 1144, 1146, 1147,    0,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991, 1142, 1144, 1146, 1147,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991, 1148,    0,    0,    0,    0,    0,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,

      991, 1148,  991,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,    0,  991,  991,  991, 1035, 1035,
        0, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
        0, 1149, 1150, 1151, 1155,    0, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1149, 1150, 1151, 1155, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1156,    0,    0,    0,    0,    0, 1035, 1035, 1035,

     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1156, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1157, 1035, 1035, 1035, 1040, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1158, 1160, 1161, 1162, 1163,
     1164, 1165, 1166,    0, 1157, 1170, 1172, 1220, 1222, 1223,
     1225, 1226, 1228, 1229, 1233, 1236, 1237, 1238, 1239, 1240,
     1241, 1243, 1245, 1246, 1247, 1158, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1040, 1249, 1170, 1172, 1220, 1222, 1223,

     1225, 1226, 1228, 1229, 1233, 1236, 1237, 1238, 1239, 1240,
     1241, 1243, 1245, 1246, 1247, 1251, 1252, 1258, 1259, 1260,
     1261,    0, 1263,    0, 1249, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330,    0, 1040, 1336, 1336, 1336, 1336,
     1336, 1336, 1336, 1336,    0, 1251, 1252, 1258, 1259, 1260,
     1261, 1040, 1263, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,    0,    0,
     1264, 1266, 1267, 1283,    0, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1264, 1266, 1267, 1283, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1284,    0,    0,    0, 1285,    0, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1284, 1050, 1050, 1050, 1285, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1286, 1050, 1050, 1050, 1058, 1288, 1288,
     1288, 1288, 1290, 1291, 1288,    0, 1292, 1293, 1297, 1298,

     1299, 1302, 1305, 1307, 1309, 1310, 1313,    0, 1294, 1294,
     1294, 1294, 1315, 1286, 1294,    0, 1316, 1321, 1324, 1325,
     1339, 1340, 1290, 1291,    0, 1288, 1292, 1293, 1297, 1298,
     1299, 1302, 1305, 1307, 1309, 1310, 1313, 1058, 1289,    0,
        0,    0, 1315, 1288, 1341, 1294, 1316, 1321, 1324, 1325,
     1339, 1340,    0,    0, 1289, 1288, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1289, 1289, 1288, 1341, 1294,    0,    0,    0, 1058,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346,    0,
        0,    0, 1353, 1354, 1355, 1058, 1358, 1058, 1058, 1058,

     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1353, 1354, 1355, 1360, 1358, 1361,    0, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1363, 1360, 1367, 1361, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1363,    0, 1367,    0,    0,    0,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068,    0, 1068, 1068, 1068, 1364, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1364, 1068, 1068,
     1068, 1084,    0,    0,    0,    0, 1364,    0,    0, 1084,
     1084,    0, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084,    0, 1368,    0, 1371, 1372,    0, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1368, 1084, 1371, 1372, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1382,    0,    0,    0,    0,    0, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1382, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084,    0, 1084, 1084, 1084, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092,    0,    0, 1383,
     1384, 1387, 1399,    0, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1383,

     1384, 1387, 1399, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1406,
        0,    0,    0, 1407,    0, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1406,
     1092, 1092, 1092, 1407, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092,    0, 1092, 1092, 1092, 1100, 1100,    0, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,    0, 1410,
     1415, 1416, 1417,    0, 1100, 1100, 1100, 1100, 1100, 1100,

     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1410,
     1415, 1416, 1417, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1422,
        0,    0,    0,    0,    0, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1422,
     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100,
     1100, 1100,    0, 1100, 1100, 1100, 1174, 1174,    0, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174,    0,    0, 1424,
     1427, 1428, 1430,    0, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1424,
     1427, 1428, 1430, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1433,
        0,    0,    0,    0,    0, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1433,

     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1295, 1174, 1174, 1174, 1207, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1434, 1435, 1438, 1295,    0,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1295, 1295, 1295, 1295, 1318, 1318,    0,
        0,    0,    0, 1319, 1319, 1434, 1435, 1438,    0, 1318,
        0,    0,    0,    0,    0, 1319, 1318, 1318, 1318, 1318,
     1318, 1207, 1319, 1319, 1319, 1319, 1319, 1332, 1332, 1332,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1332, 1334, 1334, 1334, 1334, 1334, 1334, 1334,

     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,    0,
     1365,    0,    0, 1207,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1365,    0, 1439,    0,    0, 1207,
     1365, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1439,    0,    0,    0,
        0,    0,    0, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,    0,    0,
        0,    0, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,

     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1425,    0,
        0,    0, 1425,    0, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1425, 1211,
     1211, 1211, 1425, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211,    0, 1211, 1211, 1211, 1213, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
     1348, 1348, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1426,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1426,    0,    0,    0,    0, 1213,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1426,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1426,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1213,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1213,    0, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,

        0,    0,    0,    0,    0,    0,    0, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217,    0,    0,    0,    0, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217,    0,    0,    0,    0,    0,    0, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217,    0, 1217, 1217, 1217,    0, 1217, 1217, 1217,

     1217, 1217, 1217, 1217, 1217,    0, 1217, 1217, 1217, 1218,
        0,    0,    0,    0,    0,    0,    0, 1218, 1218,    0,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,    0,
        0,    0,    0,    0,    0, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
        0, 1218,    0,    0, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
        0,    0,    0,    0,    0,    0, 1218, 1218, 1218, 1218,

     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
        0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218,    0, 1218, 1218, 1218, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219,    0,    0,    0,    0,    0,
        0,    0, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219,    0,    0,    0,
        0, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219,    0,    0,    0,
        0,    0,    0, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219,    0, 1219, 1219,
     1219,    0, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
        0, 1219, 1219, 1219, 1326, 1326, 1326, 1326,    0,    0,
     1326,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1326,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1326,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1326,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1326,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1326,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1326,    0, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1342, 1342, 1342, 1342,    0,    0, 1342,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1342,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1342,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1342,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1342,
        0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1369, 1369,
     1369, 1369,    0,    0, 1369,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1369,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1369,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1369,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1369,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1369,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1369,    0, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370,    0,
        0, 1370,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1370,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1370,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1370,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1370,    0, 1370, 1370, 1370, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370,

     1370, 1370, 1385, 1385, 1385, 1385,    0,    0, 1385,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1385,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1385,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 1385,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1385,    0, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386,
     1386, 1386, 1386,    0,    0, 1386,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1386,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1386,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1386,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1386,    0, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1386, 1386, 1408, 1408, 1408, 1408,
        0,    0, 1408,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1408,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1408,    0,
        0, 1408,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1408,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1408,    0,
        0, 1408,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1408,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1408,    0, 1408, 1408, 1408, 1408,

     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1409, 1409, 1409, 1409,    0,    0, 1409,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1409, 1409,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1409,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1409, 1409,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1409,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1409,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1409,    0, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1442,    0, 1442, 1442, 1442, 1442,    0, 1442,    0,    0,
     1442, 1443,    0, 1443, 1443, 1443, 1443,    0, 1443,    0,
        0, 1443, 1444,    0, 1444, 1444, 1444, 1444,    0, 1444,
        0,    0, 1444, 1445, 1445, 1445, 1445,    0, 1445,    0,
        0, 1445, 1447, 1447, 1447, 1447, 1447, 1448, 1448, 1448,

     1448, 1448, 1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450,
     1450, 1450, 1451, 1451,    0, 1451, 1451, 1452, 1452, 1452,
     1452, 1452, 1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454,
     1454, 1454, 1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456,
     1456, 1456, 1457,    0, 1457, 1457, 1457, 1457,    0, 1457,
        0,    0, 1457, 1458, 1458, 1458, 1458, 1459, 1459, 1459,
     1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461, 1461, 1461,
     1462, 1462, 1462, 1462, 1462, 1463, 1463, 1463, 1463, 1463,
     1464,    0, 1464, 1464, 1464, 1464,    0, 1464,    0,    0,
     1464, 1465, 1465, 1465, 1465, 1466, 1466, 1466, 1467, 1467,

     1467, 1467, 1467, 1468, 1468, 1468, 1468, 1468, 1469, 1469,
     1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470, 1471, 1471,
     1471, 1471, 1471, 1472, 1472, 1472, 1472, 1472, 1473, 1473,
     1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1475, 1475,
        0, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1477, 1477,
     1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478, 1479, 1479,
     1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480, 1481,    0,
     1481, 1481, 1481, 1481,    0, 1481,    0,    0, 1481, 1482,
     1482, 1482, 1482, 1483, 1483, 1483, 1484, 1484, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486,

     1486, 1487, 1487, 1487, 1487, 1487, 1488, 1488, 1488, 1488,
     1488, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490,
     1490, 1491, 1491, 1491, 1491, 1491, 1492, 1492,    0, 1492,
     1492, 1493, 1493, 1493, 1493, 1493, 1494, 1494, 1494, 1494,
     1494, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496, 1496,
     1496, 1497, 1497, 1497, 1497, 1497, 1498, 1498, 1498, 1498,
     1498, 1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500,
     1500, 1501, 1501, 1501, 1501, 1501, 1502, 1502,    0, 1502,
     1502, 1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504,
     1504, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506, 1506,

     1506, 1507, 1507, 1507, 1507, 1507, 1508, 1508, 1508, 1508,
        0, 1508,    0,    0, 1508, 1509, 1509, 1509, 1509, 1510,
     1510, 1510, 1511, 1511, 1511, 1511, 1511, 1512, 1512, 1512,
     1512, 1512, 1513, 1513, 1513, 1513, 1513, 1514, 1514, 1514,
     1514, 1514, 1515, 1515, 1515, 1515, 1515, 1516, 1516, 1516,
     1516, 1516, 1517, 1517, 1517, 1517, 1517, 1518, 1518, 1518,
     1518, 1518, 1519, 1519,    0, 1519, 1519, 1520, 1520, 1520,
     1520, 1520, 1521, 1521, 1521, 1521, 1521, 1522, 1522, 1522,
     1522, 1522, 1523, 1523, 1523, 1523, 1523, 1524, 1524, 1524,
     1524, 1524, 1525,    0, 1525, 1526, 1526, 1526, 1526, 1526,

     1527, 1527, 1527, 1527, 1527, 1528, 1528, 1528, 1528, 1528,
     1529, 1529, 1529, 1529, 1529, 1530, 1530,    0, 1530, 1530,
     1531, 1531, 1531, 1531, 1531, 1532, 1532, 1532, 1532, 1532,
     1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534,
     1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536, 1536, 1536,
     1537, 1537, 1537, 1537, 1537, 1538, 1538, 1538, 1538, 1538,
     1539, 1539, 1539, 1539, 1539, 1540, 1540, 1540, 1540, 1540,
     1541, 1541, 1541, 1541, 1541, 1542, 1542, 1542, 1542, 1542,
     1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1545, 1545, 1545, 1545, 1545, 1545,    0, 1545,    0,    0,

     1545, 1546, 1546, 1546, 1546, 1546, 1547, 1547, 1547, 1547,
     1547, 1548, 1548, 1548, 1548, 1548, 1549, 1549, 1549, 1549,
     1549, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551, 1551,
     1551, 1552, 1552, 1552, 1552, 1552, 1553, 1553, 1553, 1553,
     1553, 1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555, 1555,
     1555, 1556, 1556, 1556, 1556, 1556, 1557, 1557, 1557, 1557,
     1557, 1558, 1558, 1558, 1558, 1558, 1559, 1559, 1559, 1559,
     1559, 1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561, 1561,
     1561, 1562, 1562,    0, 1562, 1562, 1563, 1563, 1563,    0,
     1563, 1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565, 1565,

     1565, 1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567,
     1567, 1568, 1568, 1568, 1568, 1568, 1569, 1569, 1569, 1569,
     1569, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571, 1571,
     1571, 1572, 1572, 1572, 1572, 1572, 1573, 1573, 1573, 1573,
     1573, 1574, 1574, 1574, 1574, 1574, 1575, 1575, 1575, 1575,
     1575, 1576, 1576, 1576, 1576, 1576, 1577, 1577, 1577, 1577,
     1577, 1577,    0, 1577,    0,    0, 1577, 1578, 1578, 1578,
     1578, 1578, 1579, 1579, 1579, 1579, 1579, 1580, 1580, 1580,
     1580, 1580, 1581, 1581, 1581, 1581, 1581, 1582, 1582, 1582,
     1582, 1582, 1583, 1583, 1583, 1583, 1583, 1584, 1584, 1584,

     1584, 1584, 1585, 1585, 1585, 1585, 1585, 1586, 1586, 1586,
     1586, 1586, 1587, 1587, 1587, 1587, 1587, 1588, 1588,    0,
     1588, 1588, 1589, 1589, 1589,    0, 1589, 1590, 1590, 1590,
     1590, 1590, 1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592,
     1592, 1592, 1593, 1593, 1593, 1593, 1593, 1594, 1594, 1594,
     1594, 1594, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596,
     1596, 1596, 1597, 1597, 1597, 1597, 1597, 1598, 1598, 1598,
     1598, 1598, 1599, 1599, 1599, 1599, 1599, 1600, 1600, 1600,
     1600, 1600, 1601, 1601, 1601, 1601, 1601, 1602, 1602, 1602,
     1602, 1602, 1603, 1603, 1603, 1603, 1603, 1604, 1604, 1604,

     1604, 1604, 1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606,
     1606, 1606, 1607, 1607,    0, 1607, 1607, 1608, 1608, 1608,
     1608, 1608, 1609, 1609, 1609, 1609, 1609, 1610, 1610, 1610,
     1610, 1610, 1611, 1611, 1611, 1611, 1611, 1612, 1612, 1612,
     1612, 1612, 1613, 1613, 1613, 1613, 1613, 1614, 1614, 1614,
     1614, 1614, 1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616,
     1616, 1616, 1617, 1617, 1617, 1617, 1617, 1618, 1618, 1618,
     1618, 1618, 1619, 1619, 1619, 1619, 1619, 1620, 1620, 1620,
     1620, 1620, 1621, 1621, 1621, 1621, 1621, 1622, 1622, 1622,
     1622, 1622, 1623, 1623, 1623, 1623, 1623, 1624, 1624, 1624,

     1624, 1624, 1625, 1625, 1625, 1625, 1625, 1626, 1626, 1626,
     1626, 1626, 1627, 1627, 1627, 1627, 1627, 1628, 1628, 1628,
     1628, 1628, 1629, 1629, 1629, 1629, 1629, 1630, 1630, 1630,
     1630, 1630, 1631, 1631, 1631, 1631, 1631, 1632, 1632,    0,
     1632, 1632, 1633, 1633, 1633,    0, 1633, 1634, 1634, 1634,
     1634, 1634, 1635, 1635, 1635, 1635, 1635, 1636, 1636, 1636,
     1636, 1636, 1637, 1637, 1637, 1637, 1637, 1638, 1638, 1638,
     1638, 1638, 1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640,
     1640, 1640, 1641, 1641, 1641, 1641, 1641, 1642, 1642, 1642,
     1642, 1642, 1643, 1643, 1643, 1643, 1643, 1644, 1644, 1644,

     1644, 1644, 1645, 1645, 1645, 1645, 1645, 1646, 1646, 1646,
     1646, 1646, 1647, 1647, 1648, 1648, 1648, 1648, 1648, 1649,
     1649, 1649, 1649, 1649, 1650, 1650, 1650, 1650, 1650, 1651,
     1651, 1651, 1651, 1651, 1652, 1652, 1652, 1652, 1652, 1653,
     1653, 1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1655,
     1655, 1655, 1655, 1655, 1656, 1656, 1656, 1656, 1656, 1657,
     1657, 1657, 1657, 1657, 1658, 1658, 1658, 1658, 1658, 1659,
     1659, 1659, 1659, 1659, 1660, 1660,    0, 1660, 1660, 1661,
     1661, 1661, 1661, 1661, 1662, 1662, 1662, 1662, 1662, 1663,
     1663, 1663, 1663, 1663, 1664, 1664, 1664, 1664, 1664, 1665,

     1665, 1665, 1665, 1665, 1666, 1666, 1666, 1666, 1666, 1667,
     1667, 1667, 1667, 1667, 1667,    0, 1667,    0,    0, 1667,
     1668, 1668, 1668, 1668, 1669, 1669, 1669, 1670, 1670, 1670,
     1670, 1670, 1671, 1671, 1671, 1671, 1671, 1672, 1672, 1672,
     1672, 1672, 1673, 1673, 1673, 1673, 1673, 1674,    0, 1674,
     1674, 1674, 1674,    0, 1674,    0,    0, 1674, 1675, 1675,
     1675, 1675, 1675, 1676, 1676, 1676, 1676, 1676, 1677,    0,
     1677, 1677, 1677, 1677,    0, 1677,    0,    0, 1677, 1678,
     1678, 1678, 1678, 1678, 1679, 1679, 1679, 1679, 1679, 1680,
     1680, 1680, 1680, 1680, 1681, 1681, 1681, 1681, 1681, 1682,

     1682, 1682, 1682, 1682, 1683, 1683, 1683, 1683, 1683, 1684,
     1684, 1684, 1684, 1684, 1685, 1685, 1685, 1685, 1685, 1686,
     1686, 1686, 1686, 1686, 1687, 1687, 1687, 1687, 1687, 1688,
     1688, 1688, 1688, 1688, 1689, 1689, 1689, 1689, 1689, 1689,
        0, 1689,    0,    0, 1689, 1690, 1690, 1690, 1690, 1691,
     1691, 1691, 1692, 1692, 1692, 1692, 1692, 1693, 1693, 1693,
     1693, 1693, 1694, 1694, 1694, 1694, 1694, 1695, 1695, 1695,
     1695, 1695, 1696,    0, 1696, 1696, 1696, 1696,    0, 1696,
        0,    0, 1696, 1697, 1697, 1697, 1697, 1697, 1698, 1698,
     1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699, 1700, 1700,

     1700, 1700, 1700, 1701, 1701, 1701, 1701, 1701, 1702, 1702,
     1702, 1702, 1702, 1703, 1703, 1703, 1703, 1703, 1704, 1704,
     1704, 1704, 1704, 1705, 1705, 1705, 1705, 1705, 1706, 1706,
     1706, 1706, 1706, 1707, 1707, 1707, 1707, 1707, 1708, 1708,
     1708, 1708, 1708, 1709, 1709, 1709, 1709, 1709, 1710, 1710,
     1710, 1710, 1710, 1711, 1711, 1711, 1711, 1711, 1712, 1712,
     1712, 1712, 1712, 1713, 1713, 1713, 1713, 1713, 1714, 1714,
     1714, 1714, 1714, 1715, 1715, 1715, 1715, 1715, 1716, 1716,
     1716, 1716, 1716, 1717, 1717, 1717, 1717,    0, 1717,    0,
        0, 1717, 1718, 1718, 1718, 1718, 1718, 1719, 1719, 1719,

     1719, 1719, 1720, 1720, 1720, 1720, 1720, 1721, 1721, 1721,
     1721, 1721, 1722, 1722, 1722, 1722, 1722, 1723, 1723, 1723,
     1723, 1723, 1724, 1724, 1724, 1724, 1724, 1725, 1725, 1725,
     1725, 1725, 1726, 1726, 1726, 1726, 1726, 1727, 1727, 1727,
     1727, 1727, 1728, 1728, 1728, 1728, 1728, 1729, 1729, 1729,
     1730, 1730, 1730, 1730, 1730, 1731, 1731, 1731, 1731, 1731,
     1732, 1732, 1732, 1732, 1732, 1733, 1733, 1733, 1733, 1733,
     1734, 1734, 1734, 1734, 1734, 1735, 1735,    0, 1735, 1735,
     1736, 1736, 1736, 1736, 1736, 1737, 1737, 1737, 1737, 1737,
     1738, 1738, 1738, 1738, 1738, 1739, 1739, 1739, 1739, 1739,

     1740, 1740, 1740, 1740, 1740, 1741, 1741, 1741, 1741, 1741,
     1742, 1742, 1742, 1742, 1742, 1743, 1743, 1743, 1743, 1743,
     1744, 1744, 1744, 1744, 1744, 1745, 1745, 1745, 1745, 1745,
     1746, 1746, 1746, 1746, 1746, 1747, 1747, 1747, 1747, 1747,
     1748, 1748, 1748, 1748, 1748, 1749, 1749, 1749, 1749, 1749,
     1750, 1750, 1750, 1750, 1750, 1751, 1751, 1751, 1751, 1751,
     1751,    0, 1751,    0,    0, 1751, 1752, 1752, 1752, 1752,
     1752, 1753, 1753, 1753, 1753, 1753, 1754, 1754, 1754, 1754,
     1754, 1755, 1755, 1755, 1755, 1755, 1756, 1756, 1756, 1756,
     1756, 1757, 1757, 1757, 1757, 1757, 1758, 1758, 1758, 1758,

     1758, 1759, 1759, 1759, 1759, 1759, 1759,    0, 1759,    0,
        0, 1759, 1760, 1760, 1760, 1760, 1760, 1761, 1761, 1761,
     1761, 1761, 1762, 1762, 1762, 1762, 1762, 1763, 1763, 1763,
     1763, 1763, 1764, 1764, 1764, 1764, 1764, 1765, 1765, 1765,
     1765, 1765, 1766, 1766, 1766, 1766, 1766, 1767, 1767, 1767,
     1767, 1767, 1768, 1768, 1768, 1768, 1768, 1769, 1769, 1769,
     1769, 1769, 1770, 1770, 1770, 1770, 1770, 1771, 1771, 1771,
     1771, 1771, 1772, 1772, 1772, 1772, 1772, 1773, 1773, 1773,
     1773, 1773, 1774, 1774, 1774, 1774, 1774, 1775, 1775, 1775,
     1775, 1775, 1776, 1776, 1776, 1776, 1776, 1777, 1777, 1777,

     1777, 1777, 1778, 1778, 1778, 1778, 1778, 1779, 1779, 1779,
     1779, 1779, 1779,    0, 1779,    0,    0, 1779, 1780, 1780,
     1780, 1780, 1780, 1781, 1781, 1781, 1781, 1781, 1782, 1782,
     1782, 1782, 1782, 1782,    0, 1782,    0,    0, 1782, 1783,
     1783, 1783, 1783, 1783, 1784, 1784, 1784, 1784, 1784, 1785,
     1785, 1785, 1785, 1785, 1786,    0, 1786, 1786, 1786, 1786,
        0, 1786,    0,    0, 1786, 1787,    0, 1787, 1787, 1787,
     1787,    0, 1787,    0,    0, 1787, 1788, 1788, 1788, 1788,
     1788, 1789, 1789, 1789, 1789, 1790, 1790, 1790, 1791, 1791,
     1791, 1791, 1791, 1792, 1792, 1792, 1792, 1792, 1793, 1793,

     1793, 1793, 1793, 1794, 1794, 1794, 1794, 1794, 1795, 1795,
     1795, 1795, 1796, 1796, 1796, 1797, 1797, 1797, 1797, 1797,
     1798, 1798, 1798, 1798, 1798, 1799, 1799, 1799, 1799, 1799,
     1800, 1800, 1800, 1800, 1800, 1801, 1801, 1801, 1801, 1801,
     1802, 1802, 1802, 1802, 1802, 1802,    0, 1802,    0,    0,
     1802, 1803, 1803, 1803, 1803, 1803, 1804, 1804, 1804, 1804,
     1804, 1805, 1805, 1805, 1805, 1805, 1806, 1806, 1806, 1806,
     1806, 1807, 1807, 1807, 1807, 1807, 1808, 1808, 1808, 1808,
     1808, 1809, 1809, 1809, 1809, 1809, 1809,    0, 1809,    0,
        0, 1809, 1810, 1810, 1810, 1810, 1810, 1811, 1811, 1811,

     1811, 1811, 1812, 1812, 1812, 1812, 1812, 1813, 1813, 1813,
     1813, 1813, 1814, 1814, 1814, 1814, 1814, 1815, 1815, 1815,
     1815, 1815, 1816, 1816, 1816, 1816, 1816, 1816,    0, 1816,
        0,    0, 1816, 1817, 1817, 1817, 1817, 1817, 1818, 1818,
     1818, 1818, 1818, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1441
    } ;

static yyconst flex_int16_t yy_rule_linenum[181] =
    {   0,
      267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
      287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
      307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
      317,  318,  319,  320,  321,  322,  323,  324,  325,  326,
      327,  328,  329,  330,  331,  332,  333,  334,  335,  336,
      337,  338,  339,  340,  341,  342,  343,  344,  345,  346,
      347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
      357,  358,  359,  360,  361,  362,  363,  364,  365,  366,

      367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      387,  388,  389,  390,  391,  392,  393,  394,  395,  396,
      397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
      407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
      417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
      427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
      437,  438,  439,  440,  441,  442,  443,  444,  445,  448
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARUL_EGP terminals */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARUL_EGP terminals */
/* START semantic actions for SPARUL_EGP terminals */
#line 3636 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 266 "lib/SPARQLfedScanner.lpp"

#line 3800 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1442 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1441 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 181 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 181 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 182 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2502_;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_GT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::GT_H_2192_;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_VALUES;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::IT_ADD;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::IT_TO;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::IT_MOVE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_COPY;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{return token::IT_PRINT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{return token::IT_SADI;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{return token::IT_BIND;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS_MINUS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 344 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 345 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 347 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 348 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 349 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 350 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 351 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 353 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 354 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 355 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 356 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 357 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 358 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 359 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 360 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 361 "lib/SPARQLfedScanner.lpp"
{return token::IT_RAND;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 362 "lib/SPARQLfedScanner.lpp"
{return token::IT_ABS;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 363 "lib/SPARQLfedScanner.lpp"
{return token::IT_CEIL;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 364 "lib/SPARQLfedScanner.lpp"
{return token::IT_FLOOR;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 365 "lib/SPARQLfedScanner.lpp"
{return token::IT_ROUND;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 366 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONCAT;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 367 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLEN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 368 "lib/SPARQLfedScanner.lpp"
{return token::IT_UCASE;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 369 "lib/SPARQLfedScanner.lpp"
{return token::IT_LCASE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 370 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENCODE_FOR_URI;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 371 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONTAINS;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 372 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRSTARTS;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 373 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRENDS;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 374 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRBEFORE;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 375 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRAFTER;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 376 "lib/SPARQLfedScanner.lpp"
{return token::IT_YEAR;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 377 "lib/SPARQLfedScanner.lpp"
{return token::IT_MONTH;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 378 "lib/SPARQLfedScanner.lpp"
{return token::IT_DAY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 379 "lib/SPARQLfedScanner.lpp"
{return token::IT_HOURS;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 380 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUTES;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 381 "lib/SPARQLfedScanner.lpp"
{return token::IT_SECONDS;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 382 "lib/SPARQLfedScanner.lpp"
{return token::IT_TIMEZONE;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 383 "lib/SPARQLfedScanner.lpp"
{return token::IT_TZ;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 384 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOW;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 385 "lib/SPARQLfedScanner.lpp"
{return token::IT_UUID;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 386 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRUUID;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 387 "lib/SPARQLfedScanner.lpp"
{return token::IT_MD5;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 388 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA1;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 389 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA256;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 390 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA384;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 391 "lib/SPARQLfedScanner.lpp"
{return token::IT_SHA512;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 392 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 393 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 394 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 395 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 396 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 397 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 398 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 399 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 400 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 401 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 402 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 403 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUBSTR;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 404 "lib/SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 405 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 406 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 407 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 408 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 409 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 410 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 411 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 412 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 413 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 414 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 415 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 416 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 417 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRIREF;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 418 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext, yylloc); return token::PNAME_NS;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 419 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext, yylloc); return token::PNAME_LN;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 420 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 421 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 422 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 423 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 424 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 425 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 426 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 427 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 428 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 429 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 430 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 431 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 432 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 433 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 434 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 435 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 436 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, yylloc, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 437 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 438 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 439 "lib/SPARQLfedScanner.lpp"
{return token::ABOX_HR;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 440 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_UHR;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 441 "lib/SPARQLfedScanner.lpp"
{return token::UBOX_LHR;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 442 "lib/SPARQLfedScanner.lpp"
{yylval->p_RSName = new RSName(yytext + 1); return token::RSREF;}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 443 "lib/SPARQLfedScanner.lpp"
{return token::INSERTDATA;}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 444 "lib/SPARQLfedScanner.lpp"
{return token::DELETEDATA;}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 445 "lib/SPARQLfedScanner.lpp"
{return token::DELETEWHERE;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 447 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 448 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 454 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4830 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1442 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1442 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1441);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 454 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::runtime_error("program flow exception -- imroper call to SPARQLfedScanner::typedLiteral"));
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::location_type*& yylloc, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    YaccDriver::unescapeString(yytext+skip, yyleng-skip-skip, space, yylloc);
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext, SPARQLfedParser::location_type*& yylloc){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	driver->error(*yylloc, std::string() + "Inexplicable lack of ':' in prefix: \"" + yytext + "\"");
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL)
	driver->error(*yylloc, std::string() + "Unknown prefix: \"" + ret.substr(0, index) + "\"");

    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


