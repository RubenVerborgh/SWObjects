#line 2 "\\\\vboxsvr\\sparul\\lib\\SPARQLfedScanner.cpp"

#line 4 "\\\\vboxsvr\\sparul\\lib\\SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 99
#define YY_END_OF_BUFFER 100
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[986] =
    {   0,
        0,    0,  100,   99,    1,   62,   99,    1,   99,   99,
       99,   39,   40,   18,   59,   46,   60,   42,   61,   79,
       94,   47,   55,   53,   56,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   49,   50,   99,   99,
       48,   37,   99,   38,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,    1,   54,    0,   91,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   98,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
        0,   90,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,    0,   81,    0,   83,   80,
       80,   79,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   57,   77,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   58,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   78,    0,    0,

       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   26,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   93,   74,    0,   51,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   98,   98,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       98,   98,   98,   98,   98,   98,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   90,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,   82,    0,   84,   84,    0,    0,   80,    0,    0,
       85,   95,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   95,   95,   95,   95,   95,

       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   97,   97,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,   97,   97,   97,
       97,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,   27,   21,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   63,    0,
        0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    0,
        0,    0,   98,   98,   98,   98,   98,   98,   98,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   98,   98,   98,   98,   98,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   82,    0,    0,
       87,    0,   84,    0,    0,   86,    0,   85,    0,   85,
       95,   95,   95,   95,   95,   95,   95,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,   95,   95,   95,   95,    0,    0,    0,    0,    0,
        0,   97,   97,   97,   97,   97,   97,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   97,   97,   97,   97,   97,    0,    0,   78,    0,

        0,    0,    0,    0,    0,    0,   13,    0,    0,    0,
        0,    0,    0,    0,   28,    0,   12,   34,    0,    0,
       22,    0,    0,    8,    0,    0,    0,    0,   64,    0,
        7,    0,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   75,    0,    0,    0,    3,
       96,    0,   96,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   96,   96,   96,   96,   96,   96,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   98,   98,   98,   98,   98,    0,
        0,   98,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   87,    0,   87,    0,   86,    0,   86,
       95,   95,   95,   95,   95,    0,    0,   95,   97,   97,
       97,   97,   97,    0,    0,   97,    0,    0,   67,    9,
        0,    0,    0,    0,    0,    0,   76,    0,    6,    0,
        0,   69,    0,   70,    0,   29,    0,   23,    0,    0,
       25,    0,    0,   73,    0,    0,    0,    0,    0,   44,
        0,   24,   96,   96,   96,   96,   96,   96,   96,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   96,   96,   96,   96,   96,    0,    0,   89,
        0,    0,    0,    0,   98,   88,    0,    0,    0,    0,
       95,   97,    0,    0,   10,    0,    4,    0,    0,   45,
        5,    0,    0,    0,    0,   30,    0,   14,    0,    0,
        0,   15,   11,   33,    0,   96,   96,   96,   96,   96,
        0,    0,   96,    0,    0,    0,    0,    0,   71,    0,
        0,   32,    0,   17,    2,    0,    0,   96,   31,    0,
       66,   20,   16,    0,    0,   43,   68,    0,   19,   72,
        0,   36,    0,   65,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   38,   49,   50,   51,   38,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   66,   73,   74,   75,   76,   66,   77,   78,
       79,   66,   80,   81,   82,   10,   10,   83,   84,   85,
       85,   85,   85,   86,   87,   87,   87,   87,   87,   88,
       88,   87,   89,   90,   90,   90,   90,   90,   90,   90,
       91,   92,   92,   92,   92,   92,   92,   92,   92,   93,
       93,   93,   93,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   95,   95,   95,   95,   95,
       95,   95,   96,   97,   97,   97,   97,   97,   97,   98,
       99,  100,  100,  101,  102,  103,  103,  103,  103,  103,

      103,  103,  103,  104,  105,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  107,  108,  109,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  112,  113,  114,  115,
      116,  116,  116,  117,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100
    } ;

static yyconst flex_int32_t yy_meta[118] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    3,    1,    3,    1,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    6,    6,    6,    6,    6,    6,    3,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    3,    6,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[997] =
    {   0,
        0,    0,  609,10409,  116,  575,  115,  144,  241,  588,
      346,  121,10409,10409,  108,10409,  109,  571,10409,  112,
      443,10409,  535,10409,  561,  632,    0,  731,  105,  112,
      132,   90,  330,  121,  165,  166,  331,  336,  337,  347,
      370,  523,  533,  396,  167,  531,  136,10409,  517,  549,
        0,10409,  482,10409,  765,  782,  799,  816,  833,  850,
      528,  867,  104,  884,  170,  901,  918,  935,  952,  339,
      199,  962,  979,  319,10409, 1072,  540, 1073, 1003, 1019,
     1107,  561, 1124, 1066, 1141, 1151, 1168,  545, 1179, 1214,
     1230, 1245, 1024, 1262, 1279, 1289, 1299, 1316,  671, 1395,

     1429, 1446, 1463, 1480, 1497, 1514, 1531, 1548,  266, 1565,
     1043, 1582, 1599, 1616, 1633, 1650,  338, 1653, 1670,10409,
     1758,  532, 1764, 1694, 1710, 1793, 1069, 1810, 1827, 1837,
     1847, 1864, 1186, 1810,10409,  522,  177,  505, 1111,  543,
     1787, 1797,  128, 1946, 1980, 1997, 2014, 2031, 2048, 2065,
     2082, 2099,  486, 2116, 1324, 2133, 2150, 2167, 2184, 2201,
      401, 2204, 2221, 2295,    0,10409, 2239, 2255, 2270, 1747,
     2330, 2287, 2347, 2357, 2374, 1766,10409, 2453, 2487, 2504,
     2521, 2538, 2555, 2572, 2589, 2606,  492, 2623, 1875, 2640,
     2657, 2674, 2691, 2708,  429, 2711, 2728,  480,  344, 2806,

        0,  532, 2787, 2800, 2798, 2815, 2832, 2849, 2866, 2883,
     2900,  375, 2917, 2934, 2951, 2968, 2292, 2985, 3002, 3019,
     3036, 3053,  590, 3056, 3073, 2788, 2790, 2795, 2798, 3140,
     2803, 3141, 3133, 3148, 2805, 3135, 3153, 3151, 3158, 3187,
     3195, 3189, 3208, 3197, 3205, 3226, 3239, 3245, 3248, 3255,
     3256, 3278, 3290, 3311, 3265, 3316, 3319, 3321, 3299, 3355,
     3363, 3357,  781,10409,10409, 3417,10409, 3298, 3360, 3365,
     3366, 3371, 3475, 3488, 3480, 3497, 3514, 3531, 3548, 3565,
     3582, 3599, 3616, 3633, 2380, 3650, 3667,10409, 3760, 3685,
      414, 3702, 3731, 3748, 3795, 3812, 3829, 3846, 3863,  413,

     3880, 3897, 3914, 3931, 3948, 3965, 3982,    0,    0, 3999,
     4016, 4033, 4050, 4067, 4084, 4101,  369, 4118, 4135, 4152,
     4169, 3442, 4186, 4203, 4220, 4237, 3719,  618, 4247, 4264,
        0,    0,    0,    0,    0,    0, 4281, 4298, 4315, 4332,
     4349, 4366, 4383, 4400, 4417, 4434, 3455, 4451, 4468,10409,
     4556, 4486,  392, 4503, 4527, 4544, 4591, 4608, 4625, 4642,
     3272, 3316, 1807, 3321, 3355, 1811, 1815, 4721, 3526,  418,
      416,    0,    0,    0, 4672, 4700, 4717, 4734, 4751, 4768,
     4785,  340, 4802, 4819, 4836, 4853, 3757, 4870, 4887, 4904,
     4921, 4660,  717, 4682, 4938,    0,    0,    0,    0,    0,

        0, 4955, 4972, 4989, 5006, 5023, 5040, 5057, 5074, 5091,
     5108, 4508, 5125, 5142, 5159,  354, 5176, 5193, 5210, 5227,
     5244, 5261, 5278,    0,    0, 5295, 5312, 5329, 5346, 5363,
     5380, 5397,  302, 5414, 5431, 5448, 5465, 4553, 5482, 5499,
     5516, 5533, 5550,  987, 5553, 5570,    0,    0,    0,    0,
        0,    0, 5587, 5604, 5621, 5638, 5655, 5672, 5689, 5706,
     5723, 5740, 5745, 5762, 5779,    0, 5837, 5838, 5839, 5840,
     5845, 5846, 5847, 5848, 5853, 5854, 5846, 5863, 5880, 5897,
     5914, 5931, 5948, 5965, 5982, 5999, 5806, 6016, 6033, 6100,
     6102, 6093, 6107, 6095, 6109, 6114, 6112, 6147, 6145, 6152,

     6153, 6155, 6158, 6161, 6166, 6201, 6199, 6204, 6206, 6212,
     6211, 6248, 6222, 6256, 6259, 6258, 6253, 6261, 6278, 6264,
     6303, 6266, 6308, 6311, 6313, 6314, 6325, 6347, 6320, 6330,
     6355, 6360, 6365, 6367, 6424, 6458, 6475, 6492, 6509, 6526,
     6543, 6560, 6577, 1180, 6594, 6353, 6611, 6628, 6645, 6662,
     6679, 1033, 6682, 6699, 6366, 6757, 6758, 6759, 6760, 6724,
     6752, 6845,  377, 6846, 6776, 6792, 6880, 6797, 6897, 6839,
     6914, 6924, 6941, 6826, 7034, 6959, 6976, 7005, 7063, 7022,
     7098, 7115,    0,    0,    0,    0,    0,    0,    0, 7132,
     7149, 7166, 7183, 7200, 7217, 7234, 7251, 7268, 7285, 6840,

     7302, 7319,    0,    0,    0,    0,    0, 7336, 7353, 7441,
      368, 7447, 7377, 7393, 7476, 6983, 7493, 7510, 7520, 7530,
     7547, 7041, 7635, 7565, 7582, 7606, 3539, 6119, 6193,  350,
      349, 6245, 6882, 6398,  343,  333,  324,  321,  320,  275,
        0,    0,    0,    0,    0,    0,    0, 7623, 7670, 7687,
     7704, 7721, 7738, 7755, 7772, 7789, 7806, 7058, 7823, 7840,
        0,    0,    0,    0,    0, 7857, 7874,    0, 7891, 7908,
     7925,    0,    0,    0,    0,    0,    0,    0, 7942, 7959,
     7976, 7993, 8010, 8027, 8044, 8061, 8078, 8095, 7400, 8112,
     8129,    0,    0,    0,    0,    0, 8146, 8163,  226, 7461,

     7462, 7464, 8221, 8222, 8186, 8214, 8244, 8278, 8284, 8277,
     8285, 8287, 8293, 8295, 8329, 8335, 8247, 8334, 8340, 8345,
     8337, 8348, 8343, 8350, 8392, 8386, 8383, 8389, 8395, 8397,
     8400, 8435, 8441, 8406, 8442, 8436, 8444, 8456, 8477, 8478,
     8493, 8485, 8498, 8491, 8496, 8499, 8507, 8532, 8542, 8512,
        0,    0,    0, 8534, 8551, 8568, 8585, 8602, 8619, 8636,
      146, 8653, 8670, 8687, 8704, 7430, 8721, 8738, 8755, 8772,
     8789, 1353, 8792, 8809,    0,    0,    0,    0,    0,    0,
     8826, 8843, 8860, 8877, 8894, 8911, 8928, 8945, 8962, 8979,
     7416, 8996, 9013, 8534,  227, 9030,  161, 9047, 9064, 9081,

     9098, 9115, 9132, 9149,    0,    0,    0,    0,    0, 9166,
     9183,    0,  180, 9200,  134, 9217, 9234, 9251, 9268, 9285,
     9302, 9319,  166,  160,  151,  150,  138,  132,  129,  122,
        0,    0,    0,    0,    0, 9336, 9353,    0,    0,    0,
        0,    0,    0, 9370, 9387,    0, 8537, 9445, 9446, 9447,
     9452, 9457, 9454, 9462, 9464, 9465, 9467, 9498, 9500, 9503,
     9505, 9506, 9520, 9512, 9554, 9514, 9519, 9517, 9555, 9553,
     9561, 9562, 9572, 9564, 9567, 9606, 9575, 9609, 9573, 9611,
     9626, 9612,    0,    0,    0,    0,    0,    0,    0, 9618,
     9635, 9652, 9669, 9686, 9703, 9720, 9737, 9754, 9771, 7587,

     9788, 9805,    0,    0,    0,    0,    0, 9822, 9839,10409,
        0, 9856, 9873, 9890,    0,10409,    0, 9907, 9924, 9941,
        0,    0,10006, 9618, 9619,10000,10001,10015,10018,10008,
    10009,10017,10020,10053,10055,10056,10067,10061,10072,10073,
    10066,10074,10075,10108,10110,    0,    0,    0,    0,    0,
    10074,10102,    0,10133,10171,10172,10173,10162,10170,10181,
    10180,10178,10189,10179,10214,10220,10225,    0,10222,10223,
    10230,10231,10232,10239,10272,10241,10270,10278,10275,10277,
    10289,10283,10284,10286,10409,10363,10368,10373,10376,  132,
    10381,10386,10388,10393,10398,10403

    } ;

static yyconst flex_int16_t yy_def[997] =
    {   0,
      985,    1,  985,  985,  985,  985,  986,  987,  985,  985,
      988,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  989,  985,  985,  985,  990,  985,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  985,  985,  985,  985,
       28,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  986,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  987,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      988,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  989,  164,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  990,   28,   28,

       21,   28,   28,   28,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  985,  985,  985,  985,  985,   28,   28,   28,
       28,   28,   28,   28,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  991,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  985,  985,  985,  985,  985,  100,  100,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      100,  100,  100,  100,  100,  100,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      992,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  144,  144,  144,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  144,  144,  144,  144,  144,

      144,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  178,  178,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  178,  178,  178,  178,
      178,  178,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  993,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,   28,   28,   28,   28,   28,  985,
      985,  991,  562,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  994,  985,  985,  985,  995,  985,
      985,  985,  100,  100,  100,  100,  100,  100,  100,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  100,  100,  100,  100,  100,  985,  985,  992,
      610,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  996,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      144,  144,  144,  144,  144,  144,  144,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      144,  144,  144,  144,  144,  985,  985,  164,  985,  985,
      985,  178,  178,  178,  178,  178,  178,  178,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  178,  178,  178,  178,  178,  985,  985,  993,   28,

       28,   28,   28,   28,  985,  985,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
      535,  535,  535,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  535,  535,  535,  535,  535,  535,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,   28,  562,  985,  985,  985,  985,  985,

      985,  985,  985,  985,  100,  100,  100,  100,  100,  985,
      985,  100,  610,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      144,  144,  144,  144,  144,  985,  985,  144,  178,  178,
      178,  178,  178,  985,  985,  178,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  535,  535,  535,  535,  535,  535,  535,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  535,  535,  535,  535,  535,  985,  985,  985,
      562,  985,  985,  985,  100,  985,  610,  985,  985,  985,
      144,  178,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  535,  535,  535,  535,  535,
      985,  985,  535,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,  535,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,    0,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985

    } ;

static yyconst flex_int16_t yy_nxt[10527] =
    {   0,
        4,    5,    5,    5,    5,    6,    7,    8,    9,    4,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   35,   35,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   35,
       35,   47,    4,   48,   49,   50,   51,   29,   30,   31,
       32,   33,   34,   35,   36,   35,   35,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   35,   35,   52,
       53,   54,    4,   55,   56,   57,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   58,   59,   59,   60,    4,

        4,   61,   62,    4,   63,   64,   65,   66,   67,   68,
       69,   70,    4,   71,   72,   73,    4,   74,   74,   74,
       74,   77,  134,  134,  134,  134,  136,  138,  137,  139,
      141,  237,  142,  226,  135,  202,  198,  263,  263,  263,
      263,  227,  830,  370,  143,  370,  202,  228,  371,  830,
      202,  230,  828,  202,  231,  229,  232,  202,  828,  237,
      233,  226,  202,  202,  234,  241,  202,   78,  235,  227,
      826,  826,  143,  202,  202,  228,  236,  202,  202,  230,
      824,  202,  231,  229,  232,  202,  824,  610,  233,  264,
      202,  916,  234,  241,  202,  362,  235,  137,  274,  274,

      274,  202,  274,   79,  236,  202,  202,  242,  260,  363,
      202,  243,  202,   80,  562,   81,   81,   81,   81,   81,
       81,   82,   83,   83,   83,   83,   84,   85,   85,   86,
       87,   88,   90,  910,  202,  242,  260,  363,  202,  243,
      202,  751,   91,  466,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   95,   96,   96,   97,   98,
       99,  100,  275,  275,  275,  275,  275,  275,  275,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  284,  284,  285,  640,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
       74,   74,   74,   74,  101,  102,  103,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  104,  105,  105,  106,
      640,  638,  107,  108,  638,  109,  110,  111,  112,  113,
      114,  115,  116,  636,  117,  118,  119,  122,  238,  244,
      336,  336,  336,  636,  336,  248,  239,  245,  247,  631,
      631,  202,  202,  246,  240,  202,  202,  202,  202,  813,
      250,  202,  202,  795,  249,  202,  238,  244,  202,  202,
      251,  252,  202,  248,  239,  245,  247,  424,  123,  202,

      202,  246,  240,  202,  202,  202,  202,  164,  250,  202,
      202,  202,  249,  202,  253,  202,  202,  202,  251,  252,
      202,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  346,  346,  347,  124,  372,  371,  202,  371,  202,
      259,  202,  253,  202,  125,  121,  126,  126,  126,  126,
      126,  126,  127,  128,  128,  128,  128,  129,  130,  130,
      131,  132,  133,  144,  308,  202,   89,   76,  259,  202,
      199,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  411,  411,  412,  466,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  462,  462,  463,  364,  145,  146,  147,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  148,  149,
      149,  150,  361,  351,  151,  152,  289,  153,  154,  155,
      156,  157,  158,  159,  160,  254,  161,  162,  163,  165,
      166,  255,  267,  140,  202,  256,  261,  262,  202,  257,
      266,  265,  202,  202,  202,  367,  202,  202,  202,  258,
      401,  401,  401,  254,  401,  177,  452,  452,  452,  255,
      452,  140,  202,  256,  261,  262,  202,  257,  120,   75,

      202,  202,  202,  367,  202,  202,  202,  258,  985,  985,
      273,  273,  273,  273,  273,  273,  273,  273,  985,  273,
      273,  273,  273,  167,  273,  273,  273,  298,  298,  298,
      298,  298,  298,  168,  985,  169,  169,  169,  169,  169,
      169,  170,  171,  171,  171,  171,  172,  173,  173,  174,
      175,  176,  178,  292,  292,  292,  292,  292,  292,  292,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  486,  486,  487,  985,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  599,  599,  600,  985,  179,  180,  181,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  182,  183,  183,
      184,  985,  985,  185,  186,  985,  187,  188,  189,  190,
      191,  192,  193,  194,  985,  195,  196,  197,  199,  200,
      985,  199,  201,  307,  307,  307,  307,  307,  307,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  203,  202,  202,  202,  204,  202,  202,  202,
      202,  202,  263,  263,  263,  263,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      203,  202,  202,  202,  204,  202,  202,  202,  202,  202,
      657,  657,  658,  985,  205,  206,  207,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  209,  210,  210,  211,
      985,  212,  213,  214,  264,  215,  216,  217,  218,  219,
      220,  221,  222,  985,  223,  224,  225,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  270,  270,

      270,  270,  270,  270,  270,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  271,  271,  271,  268,  268,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      277,  278,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  279,  281,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  288,   76,
      688,  688,  689,  985,   76,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  301,  301,  301,  301,
      301,  301,  301,  985,   78,   76,  790,  790,  791,  365,
       76,  139,  985,  985,   76,  337,  337,  337,  337,  337,
      337,  337,   76,  366,  985,   76,  985,   76,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  985,  985,
       79,  354,  354,  354,  354,  354,  354,  354,  985,  985,
       80,  366,   81,   81,   81,   81,   81,   81,   82,   83,
       83,   83,   83,   84,   85,   85,   86,   87,   88,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,   90,  360,  360,
      360,  360,  360,  360,  780,  780,  780,   91,  780,   92,
       92,   92,   92,   92,   92,   93,   94,   94,   94,   94,
       95,   96,   96,   97,   98,   99,  299,  299,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  306,  306,

      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  308,  402,  402,  402,  402,
      402,  402,  402,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  899,  899,  900,  985,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  985,  985,  985,  985,  310,  311,
      312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      314,  315,  315,  316,  985,  317,  318,  319,  985,  320,

      321,  322,  323,  324,  325,  326,  327,  985,  328,  329,
      330,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  333,  333,  333,  333,  333,  333,  333,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  334,  334,
      334,  331,  331,  100,  100,  100,  100,  100,  100,  100,
      100,  985,  100,  100,  100,  100,  985,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  339,  340,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  342,  342,  342,  342,  341,  343,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  350,
      121,  985,  985,  985,  985,  121,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  353,  353,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  353,  353,  368,  985,  985,
      123,  134,  134,  134,  134,  141,  121,  142,  985,  369,
      985,  121,  630,  135,  630,  121,  635,  631,  635,  143,
      637,  636,  637,  121,  985,  638,  121,  985,  121,  417,
      417,  417,  417,  417,  417,  417,  124,  369,  423,  423,
      423,  423,  423,  423,  985,  985,  125,  143,  126,  126,
      126,  126,  126,  126,  127,  128,  128,  128,  128,  129,
      130,  130,  131,  132,  133,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  355,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  372,  373,  985,  372,  453,  453,  453,
      453,  453,  453,  453,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  985,  985,  985,

      985,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  985,  985,  985,  985,  375,
      376,  377,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  379,  380,  380,  381,  985,  382,  383,  384,  985,
      385,  386,  387,  388,  389,  390,  391,  392,  985,  393,
      394,  395,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  398,  398,  398,  398,  398,  398,  398,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  399,
      399,  399,  396,  396,  144,  144,  144,  144,  144,  144,
      144,  144,  985,  144,  144,  144,  144,  985,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  401,  401,

      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  404,  405,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  407,  407,  407,  407,  406,  408,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      166,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  985,
      985,  985,  985,  167,  477,  477,  477,  477,  477,  477,
      477,  985,  985,  168,  985,  169,  169,  169,  169,  169,

      169,  170,  171,  171,  171,  171,  172,  173,  173,  174,
      175,  176,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  424,  559,  559,  559,  559,  559,  985,
      985,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,

      425,  425,  425,  425,  985,  985,  985,  985,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  985,  985,  985,  985,  426,  427,  428,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  430,  431,
      431,  432,  985,  433,  434,  435,  985,  436,  437,  438,
      439,  440,  441,  442,  443,  985,  444,  445,  446,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      449,  449,  449,  449,  449,  449,  449,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  450,  450,  450,  447,
      447,  178,  178,  178,  178,  178,  178,  178,  178,  985,
      178,  178,  178,  178,  985,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  455,
      456,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  458,  458,  458,  458,  457,  459,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  985,  202,  202,
      468,  491,  202,  490,  985,  202,  202,  467,  469,  202,
      202,  202,  492,  202,  494,  202,  202,  202,  202,  985,
      499,  202,  985,  985,  985,  985,  202,  202,  468,  491,
      202,  490,  985,  202,  202,  467,  469,  202,  202,  202,
      492,  202,  494,  202,  202,  202,  202,  985,  499,  202,
      470,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  473,  473,
      473,  473,  473,  473,  473,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  474,  474,  474,  471,  471,  202,

      202,  202,  202,  202,  202,  202,  202,  985,  202,  202,
      202,  202,  985,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  476,  476,  476,  985,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  479,  480,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  482,  482,  482,  482,

      481,  483,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  493,  495,  202,  985,  202,  500,  202,  496,
      202,  202,  202,  985,  501,  202,  202,  497,  985,  202,
      502,  985,  202,  498,  202,  985,  202,  503,  202,  202,

      493,  495,  202,  202,  202,  500,  202,  496,  202,  202,
      202,  985,  501,  202,  202,  497,  985,  202,  502,  985,
      202,  498,  202,  505,  202,  503,  202,  202,  202,  504,
      202,  202,  202,  985,  506,  507,  202,  508,  512,  985,
      202,  985,  202,  985,  509,  513,  202,  510,  985,  202,
      202,  505,  985,  202,  514,  511,  202,  504,  202,  985,
      202,  985,  506,  507,  202,  508,  512,  202,  202,  985,
      202,  202,  509,  513,  202,  510,  985,  202,  202,  515,
      202,  202,  514,  511,  202,  516,  202,  517,  518,  202,
      202,  985,  361,  202,  985,  202,  202,  202,  985,  202,

      202,  202,  519,  985,  627,  525,  202,  515,  202,  520,
      202,  985,  202,  516,  202,  517,  518,  202,  202,  202,
      985,  202,  521,  202,  202,  202,  985,  985,  202,  202,
      519,  202,  627,  525,  202,  202,  628,  520,  202,  202,
      202,  364,  522,  202,  202,  523,  530,  202,  629,  528,
      521,  202,  202,  632,  524,  526,  202,  202,  527,  202,
      202,  202,  202,  202,  202,  529,  202,  202,  202,  985,
      522,  202,  202,  523,  530,  633,  629,  528,  985,  985,
      202,  632,  524,  526,  202,  202,  527,  634,  202,  202,
      202,  531,  202,  529,  202,  533,  202,  532,  202,  985,

      202,  202,  202,  534,  202,  202,  202,  202,  202,  985,
      202,  202,  202,  985,  985,  634,  202,  985,  985,  531,
      985,  985,  985,  533,  202,  532,  202,  985,  202,  202,
      202,  534,  202,  202,  202,  202,  202,  535,  202,  202,
      202,  985,  985,  985,  202,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  985,  985,
      985,  985,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  985,  985,  985,  985,

      536,  537,  538,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  539,  540,  540,  541,  202,  985,  542,  543,
      202,  544,  545,  546,  547,  548,  549,  550,  551,  202,
      552,  553,  554,  202,  590,  590,  590,  590,  590,  590,
      590,  639,  985,  639,  202,  985,  640,  985,  202,  607,
      607,  607,  607,  607,  823,  985,  823,  202,  985,  824,
      985,  202,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  268,  268,  268,  268,

      268,  269,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  269,  269,  269,  269,  269,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  268,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  563,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  985,  564,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  985,  565,  648,
      648,  648,  648,  648,  648,  648,  985,  985,  566,  985,
      567,  567,  567,  567,  567,  567,  568,  569,  569,  569,
      569,  570,  571,  571,  572,  573,  574,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  576,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  583,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  585,  585,

      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  586,
      586,  586,  586,  586,  586,  586,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  587,  587,  587,  584,  584,

      309,  309,  309,  309,  309,  309,  309,  309,  985,  309,
      309,  309,  309,  985,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  589,  589,  589,  985,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  592,  593,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  595,  595,  595,

      595,  594,  596,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  331,  331,  331,

      331,  331,  332,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  332,  332,  332,  332,
      332,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  331,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  331,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  611,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  121,  665,  665,  665,  665,  665,  985,  612,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  985,  613,  679,  679,  679,  679,  679,
      679,  679,  985,  985,  614,  985,  615,  615,  615,  615,
      615,  615,  616,  617,  617,  617,  617,  618,  619,  619,
      620,  621,  622,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  624,  624,  624,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  368,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  985,  369,  641,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  369,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  644,  644,  644,  644,  644,  644,  644,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  645,
      645,  645,  642,  642,  374,  374,  374,  374,  374,  374,
      374,  374,  985,  374,  374,  374,  374,  985,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      647,  647,  647,  985,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  650,
      651,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  653,  653,  653,  653,  652,  654,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  396,  396,  396,  396,  396,  397,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      397,  397,  397,  397,  397,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  396,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,

      664,  664,  664,  664,  664,  664,  664,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  672,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  675,  675,  675,  675,  675,
      675,  675,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  676,  676,  676,  673,  673,  425,  425,  425,  425,

      425,  425,  425,  425,  985,  425,  425,  425,  425,  985,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  678,  678,  678,  985,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  681,  682,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  684,  684,  684,  684,  683,  685,  683,

      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,

      692,  692,  692,  447,  447,  447,  447,  447,  448,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  448,  448,  448,  448,  448,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  447,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  696,
      696,  696,  696,  696,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  985,  985,  202,  202,

      704,  704,  704,  704,  704,  985,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  985,  985,  202,  202,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  471,  471,  471,  471,  471,  472,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  470,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  472,  472,  472,  472,  472,  471,  471,  471,  471,

      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      471,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  707,  708,  709,  710,  202,  712,  202,  628,
      711,  202,  713,  202,  714,  202,  985,  202,  202,  985,
      202,  629,  202,  202,  202,  202,  985,  202,  985,  202,
      707,  708,  709,  710,  202,  712,  202,  985,  711,  202,
      713,  202,  714,  202,  985,  202,  202,  715,  202,  629,
      202,  202,  202,  202,  985,  202,  202,  202,  202,  985,
      202,  716,  202,  202,  202,  717,  202,  202,  718,  202,

      719,  721,  202,  202,  720,  715,  202,  202,  825,  722,
      825,  202,  985,  826,  202,  985,  202,  985,  202,  716,
      202,  202,  202,  717,  202,  202,  718,  202,  719,  721,
      202,  202,  720,  723,  202,  202,  985,  722,  985,  202,
      202,  724,  202,  725,  202,  202,  202,  202,  727,  202,
      726,  202,  202,  202,  985,  728,  202,  202,  730,  985,
      827,  723,  827,  202,  985,  828,  985,  202,  202,  724,
      202,  725,  202,  202,  202,  202,  727,  202,  726,  202,
      202,  202,  729,  728,  202,  202,  730,  731,  732,  202,
      733,  202,  734,  202,  202,  202,  737,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  735,  202,  985,  202,
      729,  202,  985,  739,  736,  731,  732,  202,  733,  202,
      734,  202,  202,  202,  737,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  735,  202,  738,  202,  985,  202,
      740,  739,  736,  985,  202,  742,  743,  202,  202,  202,
      741,  202,  202,  202,  202,  202,  202,  744,  202,  202,
      985,  202,  746,  985,  738,  202,  202,  985,  740,  985,
      202,  202,  202,  742,  743,  202,  202,  202,  741,  985,
      202,  202,  202,  202,  202,  744,  202,  202,  202,  202,
      746,  745,  202,  202,  202,  985,  202,  747,  202,  202,

      202,  202,  750,  202,  748,  202,  202,  202,  202,  749,
      202,  202,  202,  829,  985,  829,  202,  985,  830,  745,
      202,  985,  985,  985,  202,  747,  985,  985,  202,  202,
      750,  985,  748,  202,  202,  202,  202,  749,  202,  202,
      202,  751,  752,  985,  751,  781,  781,  781,  781,  781,
      781,  781,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  985,  985,  985,  985,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,

      753,  753,  753,  985,  985,  985,  985,  754,  755,  756,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  758,
      759,  759,  760,  985,  761,  762,  763,  985,  764,  765,
      766,  767,  768,  769,  770,  771,  985,  772,  773,  774,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  777,  777,  777,  777,  777,  777,  777,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  778,  778,  778,
      775,  775,  535,  535,  535,  535,  535,  535,  535,  535,
      985,  535,  535,  535,  535,  985,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  782,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      783,  784,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  786,  786,  786,  786,  785,  787,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  202,  202,

      202,  202,  202,  202,  202,  202,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  985,  985,  985,  202,  202,  202,  202,
      202,  202,  202,  202,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  563,  562,  985,  985,  985,  985,  562,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  798,
      798,  798,  798,  798,  798,  798,  985,  564,  562,  985,

      985,  985,  633,  562,  985,  985,  985,  562,  804,  804,
      804,  804,  804,  804,  634,  562,  985,  985,  562,  985,
      562,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  985,  985,  565,  809,  809,  809,  809,  809,  985,
      985,  985,  634,  566,  985,  567,  567,  567,  567,  567,
      567,  568,  569,  569,  569,  569,  570,  571,  571,  572,
      573,  574,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  801,  801,  801,  801,

      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      288,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,  816,  816,  816,  816,  816,
      816,  816,  985,  985,  985,  985,   78,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,  985,   79,  822,  822,  822,  822,  822,  822,  985,
      985,  985,   80,  985,   81,   81,   81,   81,   81,   81,
       82,   83,   83,   83,   83,   84,   85,   85,   86,   87,
       88,   90,  835,  835,  835,  835,  835,  985,  985,  985,
      985,   91,  985,   92,   92,   92,   92,   92,   92,   93,
       94,   94,   94,   94,   95,   96,   96,   97,   98,   99,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,  300,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  584,  584,
      584,  584,  584,  585,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  583,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  585,  585,  585,
      585,  585,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  806,

      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  584,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  611,  610,  985,  985,  985,  985,  610,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      985,  985,  985,  612,  843,  843,  843,  843,  843,  610,

      985,  985,  202,  202,  610,  202,  202,  202,  610,  202,
      907,  907,  907,  907,  907,  985,  610,  985,  985,  610,
      985,  610,  890,  890,  890,  890,  890,  890,  890,  613,
      202,  202,  985,  202,  202,  202,  985,  202,  985,  614,
      985,  615,  615,  615,  615,  615,  615,  616,  617,  617,
      617,  617,  618,  619,  619,  620,  621,  622,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  350,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  950,  950,  950,  950,  950,  985,  123,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,

      353,  353,  353,  353,  353,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  985,  124,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  125,  985,  126,  126,  126,  126,  126,
      126,  127,  128,  128,  128,  128,  129,  130,  130,  131,
      132,  133,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  642,
      642,  642,  642,  642,  643,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  641,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  643,  643,

      643,  643,  643,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  642,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  642,  642,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  673,  673,
      673,  673,  673,  674,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  672,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  674,  674,  674,
      674,  674,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  673,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  844,  844,  844,  844,  844,  844,

      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  202,  202,  985,  985,  202,  202,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  202,  985,  985,  202,  202,
      202,  202,  202,  985,  202,  202,  847,  847,  847,  847,

      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  202,  848,  849,  202,  202,  202,  202,
      202,  850,  202,  202,  985,  202,  202,  985,  202,  202,
      202,  851,  202,  852,  202,  985,  202,  985,  202,  853,
      202,  854,  848,  849,  985,  985,  202,  202,  985,  850,
      202,  202,  985,  202,  202,  985,  202,  202,  202,  851,
      202,  852,  202,  985,  202,  985,  202,  853,  202,  854,
      202,  856,  857,  855,  202,  202,  202,  858,  202,  202,
      202,  202,  202,  859,  202,  202,  202,  860,  202,  202,
      202,  202,  985,  202,  985,  202,  985,  985,  202,  856,

      857,  855,  202,  202,  202,  858,  202,  202,  202,  202,
      202,  859,  202,  202,  202,  860,  202,  202,  202,  202,
      861,  202,  862,  202,  202,  864,  985,  202,  202,  863,
      202,  202,  985,  202,  202,  865,  202,  202,  202,  985,
      202,  202,  202,  866,  985,  202,  985,  202,  861,  985,
      862,  202,  202,  864,  985,  202,  202,  863,  202,  202,
      985,  202,  202,  865,  202,  202,  202,  867,  202,  202,
      202,  866,  868,  202,  869,  202,  202,  202,  870,  202,
      202,  202,  202,  202,  985,  202,  202,  202,  871,  202,
      985,  985,  872,  985,  985,  867,  985,  202,  985,  985,

      868,  202,  869,  985,  202,  202,  870,  873,  202,  202,
      202,  202,  985,  202,  202,  202,  871,  202,  202,  202,
      872,  875,  202,  202,  985,  202,  202,  874,  877,  202,
      202,  876,  878,  985,  202,  873,  202,  202,  202,  202,
      202,  202,  879,  202,  202,  985,  202,  202,  880,  875,
      202,  202,  202,  202,  202,  874,  877,  202,  202,  876,
      878,  985,  202,  881,  202,  202,  202,  202,  202,  202,
      879,  202,  202,  202,  882,  202,  880,  202,  202,  202,
      202,  202,  202,  202,  985,  202,  985,  202,  985,  985,
      985,  881,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  202,  882,  202,  985,  202,  202,  202,  985,  985,
      202,  202,  985,  985,  985,  202,  883,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  886,  886,  886,  886,  886,  886,
      886,  884,  884,  884,  884,  884,  884,  884,  884,  884,

      884,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      887,  887,  887,  884,  884,  753,  753,  753,  753,  753,
      753,  753,  753,  985,  753,  753,  753,  753,  985,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  753,  753,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  889,  889,  889,  985,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,

      889,  889,  889,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      892,  893,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  895,  895,  895,  895,  894,  896,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  902,  902,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  902,  902,  902,  902,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  775,  775,  775,  775,  775,  776,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  776,  776,  776,  776,  776,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  904,  904,  904,  904,  904,  904,  904,

      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      775,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  909,  909,  909,  909,  909,

      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  912,  912,  912,

      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  913,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,

      919,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  923,  202,  202,  925,
      202,  202,  202,  202,  927,  202,  924,  202,  202,  202,

      928,  985,  202,  202,  926,  202,  929,  202,  202,  202,
      202,  985,  202,  985,  923,  202,  202,  925,  202,  202,
      202,  202,  927,  202,  924,  202,  202,  202,  928,  985,
      202,  202,  926,  202,  929,  202,  202,  202,  202,  202,
      202,  202,  930,  202,  202,  202,  932,  202,  202,  931,
      202,  202,  933,  202,  985,  202,  985,  202,  202,  202,
      202,  202,  202,  935,  202,  202,  985,  202,  985,  202,
      930,  202,  202,  202,  932,  202,  202,  931,  202,  202,
      933,  202,  934,  202,  985,  202,  202,  202,  202,  202,
      202,  935,  202,  202,  937,  202,  202,  940,  202,  202,

      202,  936,  202,  202,  939,  202,  202,  202,  202,  202,
      934,  938,  202,  202,  202,  985,  202,  202,  944,  985,
      202,  942,  937,  202,  202,  940,  202,  202,  202,  936,
      202,  202,  939,  202,  202,  202,  202,  202,  941,  938,
      202,  202,  202,  985,  202,  202,  944,  202,  202,  942,
      202,  202,  202,  202,  202,  943,  202,  202,  945,  202,
      202,  985,  985,  202,  202,  955,  941,  202,  985,  985,
      985,  202,  985,  985,  985,  202,  985,  985,  202,  202,
      202,  202,  202,  943,  202,  202,  945,  202,  202,  985,
      985,  202,  202,  955,  985,  202,  985,  985,  985,  202,

      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  884,  884,  884,  884,  884,  885,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      883,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  885,  885,  885,  885,  885,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,

      947,  947,  884,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  952,  952,  952,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      954,  202,  202,  956,  957,  202,  202,  202,  958,  202,
      202,  202,  985,  202,  202,  959,  202,  985,  202,  202,
      202,  202,  202,  202,  960,  202,  985,  985,  954,  202,
      202,  956,  957,  202,  202,  202,  958,  202,  202,  202,
      985,  202,  202,  959,  202,  985,  202,  202,  202,  202,
      202,  202,  960,  202,  202,  963,  202,  202,  202,  961,

      962,  202,  202,  964,  985,  965,  202,  202,  202,  985,
      966,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  985,  202,  963,  202,  202,  202,  961,  962,  202,
      202,  964,  985,  965,  202,  202,  202,  985,  966,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      985,  202,  985,  202,  967,  202,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  985,  202,  985,  985,  202,  969,  202,
      985,  202,  967,  202,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,

      968,  970,  202,  202,  971,  972,  969,  202,  973,  974,
      975,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  985,  976,  970,
      202,  202,  971,  972,  202,  202,  973,  974,  975,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  976,  978,  202,  202,
      977,  202,  202,  202,  202,  202,  202,  202,  202,  979,
      202,  202,  202,  202,  985,  202,  202,  202,  980,  985,
      202,  985,  202,  202,  202,  978,  202,  202,  977,  202,
      985,  202,  202,  202,  202,  202,  202,  979,  202,  202,

      202,  202,  985,  202,  202,  202,  980,  981,  202,  982,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  983,  202,  202,  202,  202,  985,  202,  202,  984,
      202,  202,  985,  985,  202,  981,  985,  982,  985,  202,
      985,  202,  985,  202,  202,  202,  202,  202,  202,  983,
      202,  202,  202,  202,  985,  202,  202,  984,  202,  202,
      985,  985,  202,   76,  985,   76,   76,   76,   89,  985,
       89,   89,   89,  121,  985,  121,  121,  121,  164,  164,
      164,  562,  562,  562,  562,  562,  610,  610,  610,  610,
      610,  699,  699,   76,  985,   76,   76,   76,   89,  985,

       89,   89,   89,  121,  985,  121,  121,  121,    3,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985
    } ;

static yyconst flex_int16_t yy_chk[10527] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    7,   12,   12,   12,   12,   15,   17,   15,   17,
       20,   32,   20,   29,   12,   32,  990,   47,   47,   47,
       47,   29,  830,  143,   20,  143,   29,   29,  143,  829,
       29,   30,  828,   30,   30,   29,   30,   30,  827,   32,
       31,   29,   34,   32,   31,   34,   34,    7,   31,   29,
      826,  825,   20,   31,   29,   29,   31,   31,   29,   30,
      824,   30,   30,   29,   30,   30,  823,  815,   31,   47,
       34,  813,   31,   34,   34,  137,   31,  137,   63,   63,

       63,   31,   63,    7,   31,   31,   35,   36,   45,  137,
       35,   36,   45,    7,  797,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    8,  795,   35,   36,   45,  137,   35,   36,
       45,  761,    8,  699,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    9,   65,   65,   65,   65,   65,   65,   65,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   71,   71,   71,  640,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       74,   74,   74,   74,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
      639,  638,    9,    9,  637,    9,    9,    9,    9,    9,
        9,    9,    9,  636,    9,    9,    9,   11,   33,   37,
      109,  109,  109,  635,  109,   39,   33,   37,   38,  631,
      630,   33,   37,   37,   33,   33,   37,   38,   39,  611,
       40,   38,   39,  563,   39,  199,   33,   37,   40,  199,
       40,   40,   40,   39,   33,   37,   38,  433,   11,   33,

       37,   37,   33,   33,   37,   38,   39,  416,   40,   38,
       39,   41,   39,  199,   41,   41,   40,  199,   40,   40,
       40,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  117,  117,  117,   11,  382,  371,   44,  370,   41,
       44,   44,   41,   41,   11,  353,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   21,  317,   44,  300,  291,   44,   44,
      212,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,  161,  161,  161,  198,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,  195,  195,  195,  138,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,  136,  122,   21,   21,   77,   21,   21,   21,
       21,   21,   21,   21,   21,   42,   21,   21,   21,   23,
       23,   43,   53,  140,   42,   43,   46,   46,   42,   43,
       50,   49,   46,  202,   43,  140,   46,  202,   43,   43,
      153,  153,  153,   42,  153,   25,  187,  187,  187,   43,
      187,   18,   42,   43,   46,   46,   42,   43,   10,    6,

       46,  202,   43,  140,   46,  202,   43,   43,    3,    0,
       61,   61,   61,   61,   61,   61,   61,   61,    0,   61,
       61,   61,   61,   23,   61,   61,   61,   88,   88,   88,
       88,   88,   88,   23,    0,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   26,   82,   82,   82,   82,   82,   82,   82,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  223,  223,  223,    0,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  328,  328,  328,    0,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,    0,    0,   26,   26,    0,   26,   26,   26,   26,
       26,   26,   26,   26,    0,   26,   26,   26,   28,   28,
        0,   28,   28,   99,   99,   99,   99,   99,   99,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,  263,  263,  263,  263,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
      393,  393,  393,    0,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
        0,   28,   28,   28,  263,   28,   28,   28,   28,   28,
       28,   28,   28,    0,   28,   28,   28,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   58,   58,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   76,   78,
      444,  444,  444,    0,   78,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   93,   93,   93,   93,
       93,   93,   93,    0,   76,   78,  552,  552,  552,  139,
       78,  139,    0,    0,   78,  111,  111,  111,  111,  111,
      111,  111,   78,  139,    0,   78,    0,   78,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,    0,    0,
       76,  127,  127,  127,  127,  127,  127,  127,    0,    0,
       76,  139,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   89,  133,  133,
      133,  133,  133,  133,  544,  544,  544,   89,  544,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  100,  155,  155,  155,  155,
      155,  155,  155,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  772,  772,  772,    0,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,    0,    0,    0,    0,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,    0,  100,  100,  100,    0,  100,

      100,  100,  100,  100,  100,  100,  100,    0,  100,  100,
      100,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  107,  107,  107,  107,  107,  107,  107,
      107,    0,  107,  107,  107,  107,    0,  107,  107,  107,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  121,
      123,    0,    0,    0,    0,  123,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  141,    0,    0,
      121,  134,  134,  134,  134,  142,  123,  142,    0,  141,
        0,  123,  363,  134,  363,  123,  366,  363,  366,  142,
      367,  366,  367,  123,    0,  367,  123,    0,  123,  170,
      170,  170,  170,  170,  170,  170,  121,  141,  176,  176,
      176,  176,  176,  176,    0,    0,  121,  142,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  144,  144,    0,  144,  189,  189,  189,
      189,  189,  189,  189,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,    0,    0,    0,

        0,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,    0,    0,    0,    0,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,    0,  144,  144,  144,    0,
      144,  144,  144,  144,  144,  144,  144,  144,    0,  144,
      144,  144,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  151,  151,  151,  151,  151,  151,
      151,  151,    0,  151,  151,  151,  151,    0,  151,  151,
      151,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  162,  162,  162,  162,  162,  162,  162,

      162,  162,  162,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      164,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
        0,    0,    0,  164,  217,  217,  217,  217,  217,  217,
      217,    0,    0,  164,    0,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  178,  285,  285,  285,  285,  285,    0,
        0,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,    0,    0,    0,    0,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,    0,    0,    0,    0,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,    0,  178,  178,  178,    0,  178,  178,  178,
      178,  178,  178,  178,  178,    0,  178,  178,  178,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  185,  185,  185,  185,  185,  185,  185,  185,    0,
      185,  185,  185,  185,    0,  185,  185,  185,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  186,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  200,  203,  226,
      204,  227,  203,  226,    0,  227,  228,  203,  204,  229,
      228,  204,  228,  229,  231,  204,  235,  200,  231,    0,
      235,  200,    0,    0,    0,    0,  203,  226,  204,  227,
      203,  226,    0,  227,  228,  203,  204,  229,  228,  204,
      228,  229,  231,  204,  235,  200,  231,    0,  235,  200,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  213,

      213,  213,  213,  213,  213,  213,  213,    0,  213,  213,
      213,  213,    0,  213,  213,  213,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,    0,  215,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  230,  232,  233,    0,  236,  236,  233,  233,
      236,  230,  232,    0,  237,  230,  232,  234,    0,  234,
      238,    0,  238,  234,  237,    0,  238,  239,  237,  239,

      230,  232,  233,  239,  236,  236,  233,  233,  236,  230,
      232,    0,  237,  230,  232,  234,    0,  234,  238,    0,
      238,  234,  237,  241,  238,  239,  237,  239,  240,  240,
      242,  239,  240,    0,  242,  242,  241,  243,  244,    0,
      241,    0,  244,    0,  243,  245,  245,  243,    0,  243,
      245,  241,    0,  243,  246,  243,  240,  240,  242,    0,
      240,    0,  242,  242,  241,  243,  244,  246,  241,    0,
      244,  246,  243,  245,  245,  243,    0,  243,  245,  247,
      247,  243,  246,  243,  247,  248,  248,  249,  250,  249,
      248,    0,  361,  249,    0,  246,  250,  251,    0,  246,

      250,  251,  251,    0,  361,  255,  255,  247,  247,  252,
      255,    0,  247,  248,  248,  249,  250,  249,  248,  252,
        0,  249,  253,  252,  250,  251,    0,    0,  250,  251,
      251,  253,  361,  255,  255,  253,  362,  252,  255,  268,
      259,  364,  254,  268,  259,  254,  259,  252,  362,  258,
      253,  252,  254,  364,  254,  256,  254,  256,  257,  253,
      257,  256,  258,  253,  257,  258,  258,  268,  259,    0,
      254,  268,  259,  254,  259,  365,  362,  258,    0,    0,
      254,  364,  254,  256,  254,  256,  257,  365,  257,  256,
      258,  260,  257,  258,  258,  261,  260,  260,  262,    0,

      260,  269,  262,  262,  261,  269,  270,  271,  261,    0,
      270,  271,  272,    0,    0,  365,  272,    0,    0,  260,
        0,    0,    0,  261,  260,  260,  262,    0,  260,  269,
      262,  262,  261,  269,  270,  271,  261,  266,  270,  271,
      272,    0,    0,    0,  272,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,    0,    0,
        0,    0,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,    0,    0,    0,    0,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  273,    0,  266,  266,
      273,  266,  266,  266,  266,  266,  266,  266,  266,  274,
      266,  266,  266,  274,  322,  322,  322,  322,  322,  322,
      322,  369,    0,  369,  273,    0,  369,    0,  273,  347,
      347,  347,  347,  347,  627,    0,  627,  274,    0,  627,
        0,  274,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  277,  277,  277,  277,

      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  289,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,

      292,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,    0,  289,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  293,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,    0,  289,  387,
      387,  387,  387,  387,  387,  387,    0,    0,  289,    0,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  303,  303,  303,  303,

      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  311,  311,

      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,

      318,  318,  318,  318,  318,  318,  318,  318,    0,  318,
      318,  318,  318,    0,  318,  318,  318,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,    0,
      320,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  351,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,

      354,  354,  412,  412,  412,  412,  412,    0,  351,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,    0,  351,  438,  438,  438,  438,  438,
      438,  438,    0,    0,  351,    0,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,

      358,  358,  358,  358,  358,  358,  358,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  368,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,    0,  368,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  368,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  383,  383,  383,  383,  383,  383,
      383,  383,    0,  383,  383,  383,  383,    0,  383,  383,

      383,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,    0,  385,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,

      411,  411,  411,  411,  411,  411,  411,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  419,  419,  419,  419,  419,  419,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  434,  434,  434,  434,

      434,  434,  434,  434,    0,  434,  434,  434,  434,    0,
      434,  434,  434,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,    0,  436,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,

      460,  460,  460,  460,  460,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  463,
      463,  463,  463,  463,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  467,  468,
      469,  470,  467,  468,  469,  470,  471,  472,  473,  474,
      471,  472,  473,  474,  475,  476,    0,    0,  475,  476,

      487,  487,  487,  487,  487,    0,  467,  468,  469,  470,
      467,  468,  469,  470,  471,  472,  473,  474,  471,  472,
      473,  474,  475,  476,    0,    0,  475,  476,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  490,  491,  492,  493,  494,  495,  492,  628,
      494,  490,  496,  491,  497,  490,    0,  491,  493,    0,
      495,  628,  493,  497,  495,  496,    0,  497,    0,  496,
      490,  491,  492,  493,  494,  495,  492,    0,  494,  490,
      496,  491,  497,  490,    0,  491,  493,  498,  495,  628,
      493,  497,  495,  496,    0,  497,  499,  496,  498,    0,
      499,  499,  498,  500,  501,  500,  502,  500,  501,  503,

      502,  504,  504,  503,  503,  498,  504,  505,  629,  505,
      629,  505,    0,  629,  499,    0,  498,    0,  499,  499,
      498,  500,  501,  500,  502,  500,  501,  503,  502,  504,
      504,  503,  503,  506,  504,  505,    0,  505,    0,  505,
      507,  507,  506,  508,  507,  508,  506,  509,  510,  508,
      509,  509,  511,  510,    0,  511,  511,  510,  513,    0,
      632,  506,  632,  513,    0,  632,    0,  513,  507,  507,
      506,  508,  507,  508,  506,  509,  510,  508,  509,  509,
      511,  510,  512,  511,  511,  510,  513,  514,  515,  512,
      516,  513,  517,  512,  517,  513,  520,  514,  517,  516,

      515,  514,  518,  516,  515,  520,  518,  522,    0,  520,
      512,  522,    0,  522,  519,  514,  515,  512,  516,  519,
      517,  512,  517,  519,  520,  514,  517,  516,  515,  514,
      518,  516,  515,  520,  518,  522,  521,  520,    0,  522,
      523,  522,  519,    0,  521,  525,  526,  519,  521,  523,
      524,  519,  524,  523,  525,  526,  524,  527,  525,  526,
        0,  529,  530,    0,  521,  529,  527,    0,  523,    0,
      527,  530,  521,  525,  526,  530,  521,  523,  524,    0,
      524,  523,  525,  526,  524,  527,  525,  526,  528,  529,
      530,  528,  528,  529,  527,    0,  531,  531,  527,  530,

      531,  532,  534,  530,  532,  532,  533,  555,  534,  533,
      533,  555,  534,  634,    0,  634,  528,    0,  634,  528,
      528,    0,    0,    0,  531,  531,    0,    0,  531,  532,
      534,    0,  532,  532,  533,  555,  534,  533,  533,  555,
      534,  535,  535,    0,  535,  546,  546,  546,  546,  546,
      546,  546,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,    0,    0,    0,    0,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  535,    0,    0,    0,    0,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,    0,  535,  535,  535,    0,  535,  535,
      535,  535,  535,  535,  535,  535,    0,  535,  535,  535,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  539,  539,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  542,  542,  542,  542,  542,  542,  542,  542,
        0,  542,  542,  542,  542,    0,  542,  542,  542,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  547,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  553,  553,  553,  553,  553,  553,  553,  553,  553,
      553,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  556,  557,

      558,  559,  556,  557,  558,  559,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,    0,    0,    0,  556,  557,  558,  559,
      556,  557,  558,  559,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  562,  564,    0,    0,    0,    0,  564,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  568,
      568,  568,  568,  568,  568,  568,    0,  562,  564,    0,

        0,    0,  633,  564,    0,    0,    0,  564,  574,  574,
      574,  574,  574,  574,  633,  564,    0,    0,  564,    0,
      564,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,    0,    0,  562,  600,  600,  600,  600,  600,    0,
        0,    0,  633,  562,    0,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  571,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      575,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  616,  616,  616,  616,  616,
      616,  616,    0,    0,    0,    0,  575,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,    0,  575,  622,  622,  622,  622,  622,  622,    0,
        0,    0,  575,    0,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  579,  658,  658,  658,  658,  658,    0,    0,    0,
        0,  579,    0,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  582,  582,  582,

      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  595,

      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  610,  612,    0,    0,    0,    0,  612,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
        0,    0,    0,  610,  689,  689,  689,  689,  689,  612,

        0,    0,  700,  701,  612,  702,  700,  701,  612,  702,
      791,  791,  791,  791,  791,    0,  612,    0,    0,  612,
        0,  612,  766,  766,  766,  766,  766,  766,  766,  610,
      700,  701,    0,  702,  700,  701,    0,  702,    0,  610,
        0,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  623,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  900,  900,  900,  900,  900,    0,  623,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,    0,  623,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  623,    0,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      670,  670,  670,  670,  670,  670,  670,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  683,  683,  683,  683,  683,  683,  683,  683,

      683,  683,  683,  683,  683,  683,  683,  683,  683,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  703,  704,    0,    0,  703,  704,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  707,    0,    0,  717,  707,
      703,  704,  717,    0,  703,  704,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  707,  708,  709,  717,  707,  710,  708,
      717,  710,  710,  708,    0,  709,  711,    0,  712,  709,
      711,  711,  712,  712,  713,    0,  714,    0,  713,  713,
      714,  714,  708,  709,    0,    0,  710,  708,    0,  710,
      710,  708,    0,  709,  711,    0,  712,  709,  711,  711,
      712,  712,  713,    0,  714,    0,  713,  713,  714,  714,
      715,  716,  719,  715,  715,  718,  716,  720,  721,  718,
      716,  719,  721,  722,  723,  719,  720,  723,  723,  722,
      720,  724,    0,  722,    0,  724,    0,    0,  715,  716,

      719,  715,  715,  718,  716,  720,  721,  718,  716,  719,
      721,  722,  723,  719,  720,  723,  723,  722,  720,  724,
      725,  722,  726,  724,  727,  728,    0,  726,  727,  727,
      728,  726,    0,  725,  728,  729,  729,  725,  730,    0,
      729,  731,  730,  730,    0,  731,    0,  734,  725,    0,
      726,  734,  727,  728,    0,  726,  727,  727,  728,  726,
        0,  725,  728,  729,  729,  725,  730,  732,  729,  731,
      730,  730,  733,  731,  735,  734,  732,  736,  736,  734,
      732,  736,  733,  735,    0,  737,  733,  735,  737,  737,
        0,    0,  738,    0,    0,  732,    0,  738,    0,    0,

      733,  738,  735,    0,  732,  736,  736,  739,  732,  736,
      733,  735,    0,  737,  733,  735,  737,  737,  739,  740,
      738,  741,  739,  740,    0,  738,  742,  740,  743,  738,
      742,  742,  744,    0,  741,  739,  744,  745,  741,  743,
      746,  745,  745,  743,  746,    0,  739,  740,  747,  741,
      739,  740,  747,  750,  742,  740,  743,  750,  742,  742,
      744,    0,  741,  748,  744,  745,  741,  743,  746,  745,
      745,  743,  746,  748,  749,  794,  747,  748,  847,  794,
      747,  750,  847,  749,    0,  750,    0,  749,    0,    0,
        0,  748,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  748,  749,  794,    0,  748,  847,  794,    0,    0,
      847,  749,    0,    0,    0,  749,  754,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  755,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  755,  755,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  762,  762,  762,  762,  762,
      762,  762,  762,    0,  762,  762,  762,  762,    0,  762,
      762,  762,  763,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,    0,  764,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  765,  765,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  774,  774,  774,  774,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  774,  774,  774,  774,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  786,  786,  786,  786,  786,  786,  786,

      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  802,  802,  802,

      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  816,

      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,

      821,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  848,  849,  850,  852,
      848,  849,  850,  851,  854,  853,  851,  851,  852,  853,

      855,    0,  852,  854,  853,  855,  856,  854,  857,  855,
      856,    0,  857,    0,  848,  849,  850,  852,  848,  849,
      850,  851,  854,  853,  851,  851,  852,  853,  855,    0,
      852,  854,  853,  855,  856,  854,  857,  855,  856,  858,
      857,  859,  858,  858,  860,  859,  861,  862,  860,  860,
      861,  862,  863,  864,    0,  866,    0,  864,  868,  866,
      867,  863,  868,  867,  867,  863,    0,  858,    0,  859,
      858,  858,  860,  859,  861,  862,  860,  860,  861,  862,
      863,  864,  865,  866,    0,  864,  868,  866,  867,  863,
      868,  867,  867,  863,  870,  865,  869,  875,  870,  865,

      869,  869,  871,  872,  873,  874,  871,  872,  875,  874,
      865,  872,  875,  873,  879,    0,  877,  873,  879,    0,
      877,  877,  870,  865,  869,  875,  870,  865,  869,  869,
      871,  872,  873,  874,  871,  872,  875,  874,  876,  872,
      875,  873,  879,    0,  877,  873,  879,  876,  877,  877,
      878,  876,  880,  882,  878,  878,  880,  882,  881,  924,
      925,    0,    0,  924,  925,  924,  876,  881,    0,    0,
        0,  881,    0,    0,    0,  876,    0,    0,  878,  876,
      880,  882,  878,  878,  880,  882,  881,  924,  925,    0,
        0,  924,  925,  924,    0,  881,    0,    0,    0,  881,

      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  891,  891,  891,  891,
      891,  891,  891,  891,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  895,  895,

      895,  895,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,

      918,  918,  918,  918,  918,  918,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      923,  926,  927,  926,  928,  926,  927,  923,  929,  930,
      931,  923,    0,  930,  931,  932,  928,    0,  932,  929,
      928,  933,  932,  929,  933,  933,    0,    0,  923,  926,
      927,  926,  928,  926,  927,  923,  929,  930,  931,  923,
        0,  930,  931,  932,  928,    0,  932,  929,  928,  933,
      932,  929,  933,  933,  934,  937,  935,  936,  934,  934,

      935,  936,  938,  939,    0,  940,  938,  941,  937,    0,
      941,  941,  937,  939,  940,  942,  943,  939,  940,  942,
      943,    0,  934,  937,  935,  936,  934,  934,  935,  936,
      938,  939,    0,  940,  938,  941,  937,    0,  941,  941,
      937,  939,  940,  942,  943,  939,  940,  942,  943,  944,
        0,  945,    0,  944,  945,  945,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,    0,  954,    0,    0,  944,  954,  945,
        0,  944,  945,  945,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,

      952,  955,  954,  958,  956,  957,  954,  958,  958,  960,
      961,  959,  955,  956,  957,  959,  955,  956,  957,  962,
      964,  961,  960,  962,  964,  961,  960,    0,  963,  955,
      963,  958,  956,  957,  963,  958,  958,  960,  961,  959,
      955,  956,  957,  959,  955,  956,  957,  962,  964,  961,
      960,  962,  964,  961,  960,  965,  963,  967,  963,  965,
      966,  966,  963,  969,  970,  966,  967,  969,  970,  970,
      967,  971,  972,  973,    0,  971,  972,  973,  974,    0,
      974,    0,  976,  965,  974,  967,  976,  965,  966,  966,
        0,  969,  970,  966,  967,  969,  970,  970,  967,  971,

      972,  973,    0,  971,  972,  973,  974,  975,  974,  978,
      976,  977,  974,  975,  976,  977,  979,  975,  980,  978,
      979,  981,  980,  978,  982,  983,    0,  984,  982,  983,
      981,  984,    0,    0,  981,  975,    0,  978,    0,  977,
        0,  975,    0,  977,  979,  975,  980,  978,  979,  981,
      980,  978,  982,  983,    0,  984,  982,  983,  981,  984,
        0,    0,  981,  986,    0,  986,  986,  986,  987,    0,
      987,  987,  987,  988,    0,  988,  988,  988,  989,  989,
      989,  991,  991,  991,  991,  991,  992,  992,  992,  992,
      992,  993,  993,  994,    0,  994,  994,  994,  995,    0,

      995,  995,  995,  996,    0,  996,  996,  996,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,

      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985
    } ;

static yyconst flex_int16_t yy_rule_linenum[99] =
    {   0,
      177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
      187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
      197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  222,  223,  224,  225,  226,
      227,  228,  229,  230,  231,  232,  233,  234,  235,  236,
      237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  270,  271,  272,  273,  274

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "..\\lib\\SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/** \file SPARQLfedScanner.ll Define the Flex lexical scanner */
#line 5 "..\\lib\\SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
#undef yywrap
#define yywrap()	1

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 57 "..\\lib\\SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
/* START patterns for SPARQLfed terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 3194 "\\\\vboxsvr\\sparul\\lib\\SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 176 "..\\lib\\SPARQLfedScanner.lpp"

#line 3353 "\\\\vboxsvr\\sparul\\lib\\SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 986 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 985 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 99 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 99 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 100 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 177 "..\\lib\\SPARQLfedScanner.lpp"
{ /* yylloc->step(); @@ needed? useful? */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 178 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 179 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 180 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 181 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 182 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 183 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 184 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 185 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 186 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 187 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 188 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 189 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 190 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 191 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 192 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 193 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 194 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 195 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 196 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 197 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 198 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 199 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 200 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 201 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 202 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 203 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 204 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 205 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 206 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 207 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 208 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 209 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 210 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 211 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 212 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 213 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 214 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 215 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 216 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 217 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_NULL;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 218 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 219 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 220 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 221 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 222 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 223 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 224 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 225 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 226 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 227 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 228 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 229 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 230 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 231 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 232 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 233 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 234 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 235 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 236 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 237 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 238 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 239 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 240 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 241 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 242 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 243 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 244 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 245 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 246 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 247 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 248 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 249 "..\\lib\\SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 250 "..\\lib\\SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 251 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 252 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 253 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 254 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 255 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 256 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 257 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 258 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 259 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 260 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 261 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 262 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 263 "..\\lib\\SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 264 "..\\lib\\SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 265 "..\\lib\\SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 266 "..\\lib\\SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 267 "..\\lib\\SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 268 "..\\lib\\SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 269 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_POS = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 270 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 271 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 272 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_POS = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 273 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 274 "..\\lib\\SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 276 "..\\lib\\SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 277 "..\\lib\\SPARQLfedScanner.lpp"
ECHO;
	YY_BREAK
#line 3966 "\\\\vboxsvr\\sparul\\lib\\SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 986 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 986 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 985);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 277 "..\\lib\\SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


