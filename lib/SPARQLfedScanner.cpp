#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1084] =
    {   0,
        0,    0,  132,  130,    2,    1,    1,   58,  130,    2,
      130,  130,  130,    9,   10,   11,   57,   51,   76,   45,
       54,  115,  109,   30,   70,   68,   71,   56,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   59,   60,
       55,  130,   52,  130,  130,   27,   53,   28,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,    2,    1,   69,
        0,  125,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    2,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  113,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   67,    0,  124,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  128,
        0,  118,    0,  121,  116,  116,  115,    0,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
      108,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   73,  112,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  114,    0,    0,  109,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   86,   74,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
      105,    0,    0,    0,   66,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  125,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  113,  113,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  113,  113,
      113,  113,  113,  113,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  124,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  119,  119,
        0,  122,  122,    0,    0,  116,    0,    0,  117,  110,
        0,  110,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  110,  110,  110,  110,  110,  110,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  112,  112,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,  112,  112,  112,  112,
      112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   44,   64,   22,   14,  102,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   82,    0,    0,    0,
        0,    0,    0,    0,    0,  101,    0,  100,    0,   75,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   77,   99,    0,    0,    0,   83,    0,    0,
        0,  111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    2,    0,    0,
        0,  113,  113,  113,  113,  113,  113,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  113,  113,  113,  113,  113,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  119,    0,    0,  120,
        0,  122,    0,    0,  123,    0,  117,    0,  117,  110,
      110,  110,  110,  110,  110,  110,  110,  110,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  110,  110,  110,  110,  110,    0,    0,    0,    0,
        0,    0,  112,  112,  112,  112,  112,  112,  112,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  112,  112,  112,  112,  112,    0,    0,  114,
        0,    0,    0,    0,    0,    0,    0,    3,    0,    0,
        0,    0,    0,    0,    0,    0,   38,    0,    0,   23,
        0,   35,   63,    0,    0,   15,    0,    0,    0,    0,
       32,    0,    0,    0,    0,    0,   78,    0,   31,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   40,  111,    0,  111,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  111,  111,
      111,  111,  111,  111,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,  113,  113,  113,  113,    0,    0,  113,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  120,
        0,  120,    0,  123,    0,  123,  110,  110,  110,  110,
      110,    0,    0,  110,  112,  112,  112,  112,  112,    0,

        0,  112,    0,    0,   84,   81,   33,    0,    0,   97,
        0,    0,    0,    0,    0,    0,    0,    0,   42,   18,
        0,    0,    0,   90,    0,    0,   91,    0,   24,    0,
       48,   16,    0,    0,   21,    0,    0,   95,    0,    0,
        0,    0,    0,    0,    0,   88,    0,   29,   49,    0,
       41,   17,  111,  111,  111,  111,  111,  111,  111,  111,
      111,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  111,  111,  111,  111,  111,    0,
        0,  107,  127,    0,    0,    0,    0,  113,  126,    0,
        0,    0,    0,  110,  112,    0,    0,    0,   36,    0,

        0,   39,    0,    0,   96,   50,    0,   20,   37,    0,
        0,    0,    0,    0,   25,    0,    4,    0,    0,  103,
        5,    0,    0,   34,   62,    0,    0,  111,  111,  111,
      111,  111,    0,    0,  111,    0,    0,    0,    0,   43,
        0,    0,    0,   92,    0,    0,    0,   61,    0,    7,
        0,    0,   47,   87,    0,  111,   26,   85,    0,   80,
       13,    6,    0,    0,    0,    0,   46,   89,    0,    0,
       12,    0,   93,   94,    0,  104,   65,    0,    0,    0,
       79,   98,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   67,   74,   75,   76,   77,   78,   79,   80,
       81,   67,   82,   83,   84,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1096] =
    {   0,
        0,    0,  604,13972,  118,13972,  600,  575,  117,  146,
      245,  585,  352,  123,13972,13972,  110,13972,  111,  572,
    13972,  114,  451,13972,  545,13972,  555,  644,    0,  745,
      109,  114,  336,   99,  346,  170,  537,  542,  347,  831,
      552,  836,  876,  884,  894,  944,  934,  958,  191,13972,
      519,  535,    0,  997, 1001,13972,  471,13972,  341,  995,
     1012, 1029, 1046, 1063, 1080, 1097,  100, 1114,  172, 1131,
     1148, 1165, 1182, 1199,   46, 1202, 1219,  160,13972,13972,
     1314,  546, 1315, 1243, 1259, 1349,  349, 1366, 1307, 1383,
     1393, 1410,  117, 1421, 1456, 1472, 1487,  378, 1504, 1521,

     1531, 1541, 1558,  552, 1639, 1673, 1690, 1707, 1724, 1741,
     1758, 1775, 1792,  269, 1809,  571, 1826, 1843, 1860, 1877,
     1894,  202, 1897, 1914,13972, 2004,  524, 2010, 1938, 1954,
     2039, 1264, 2056, 2073, 2083, 2093, 2110,  683,  629,13972,
      486,  851,  433,  898,  339,  557,  949,  148, 2194, 2228,
     2245, 2262, 2279, 2296, 2313, 2002, 2330,  527, 2347, 1284,
     2364, 2381, 2398, 2415, 2432,  231, 2435, 2452, 2528,    0,
    13972, 2470, 2486, 2501, 1311, 2563, 2518, 2580, 2590, 2607,
      979,13972, 2688, 2722, 2739, 2756, 2773, 2790, 2807, 2824,
     2841,  789, 2858, 1418, 2875, 2892, 2909, 2926, 2943,  408,

     2946, 2963,  434, 3025, 3044,    0, 3030, 3043, 3083, 3097,
     3098, 3092, 3109, 3126, 3143, 3160, 3177, 3194,  353, 3211,
     3228, 3245, 3262, 3279, 1566, 3296, 3313, 3330, 3347, 3364,
      437, 3367, 3384, 3446, 3447, 3457, 3462, 3496, 3501, 3520,
     3515, 3554, 3565, 3564, 3575, 3609, 3617, 3622, 3633, 3667,
     3672, 3677, 3682, 3719, 3732, 3724, 3771, 3776, 3781, 3822,
     3827, 3837, 3871, 3882, 3883, 3895, 3929, 3944, 3983, 3943,
     3988, 3998, 4037, 4048, 4047, 4087, 3993, 4088,  695,13972,
    13972, 4146, 4225, 4230,13972, 4235, 4240, 4274, 4279, 4284,
     4289, 4323, 4288, 4317, 4334, 4351, 4368, 4385, 4402, 4419,

     4436, 4453, 1962, 4470, 4487,13972, 4582, 4505,  368, 4522,
     4552, 4569, 4617, 4634, 4651, 4668, 4685,  364, 4702, 4719,
     4736, 4753, 4770, 4787, 4804,    0,    0, 4821, 4838, 4855,
     4872, 4889, 4906, 4923,  315, 4940, 4957, 4053, 4974, 1979,
     4991, 5008, 5025, 5042, 4539,  476, 5052, 5069,    0,    0,
        0,    0,    0,    0, 5086, 5103, 5120, 5137, 5154, 5171,
     5188, 5205, 5222, 5239, 2119, 5256, 5273,13972, 5363, 5291,
      354, 5308, 5333, 5350, 5398, 5415, 5432, 5449,  902,  954,
      193, 1016, 1354,  222,  359, 3047,  581,  387,  383,    0,
        0,    0, 5466, 5483, 5500, 5517, 5534, 5551, 5568,  305,

     5585, 5602, 5619, 5636, 5653, 2525, 5670, 5687, 5704, 5721,
     5738,  630, 5741, 5758,    0,    0,    0,    0,    0,    0,
     5775, 5792, 5809, 5826, 5843, 5860, 5877, 5894, 5911, 5928,
     2516, 5945, 5962, 5979,  345, 5996, 6013, 6030, 6047, 6064,
     6081, 6098,    0,    0, 6115, 6132, 6149, 6166, 6183, 6200,
     6217,  301, 6234, 6251, 6268, 6285, 2615, 6302, 6319, 6336,
     6353, 6370,  702, 6373, 6390,    0,    0,    0,    0,    0,
        0, 6407, 6424, 6441, 6458, 6475, 6492, 6509, 6526, 6543,
     6560, 3738, 6577, 6594,    0, 6656, 6657, 6667, 6668, 6707,
     6708, 6718, 6719, 6758, 6759, 6769, 6770, 6809, 6810, 6775,

     6804, 6821, 6838, 6855, 6872, 6889, 6906, 6923, 6940, 4001,
     6957, 6974, 7043, 7048, 7061, 7062, 7105, 7104, 7115, 7116,
     7159, 7160, 7174, 7208, 7213, 7218, 7232, 7260, 7271, 7272,
     7284, 7321, 7326, 7336, 7373, 7378, 7383, 7388, 7422, 7432,
     7437, 7471, 7483, 7482, 7495, 7523, 7537, 7536, 7576, 7577,
     7587, 7595, 7634, 7629, 7639, 7644, 7685, 7690, 7695, 7700,
     7734, 7739, 7755, 7779, 7789, 7794, 7807, 7828, 7844, 7849,
     7865, 7926, 7960, 7977, 7994, 8011, 8028, 8045, 8062, 8079,
      794, 8096, 4073, 8113, 8130, 8147, 8164, 8181,  731, 8184,
     8201, 8263, 8264, 8274, 8275, 8314, 8315, 8325, 8319, 8336,

     8431,  390, 8390, 8382, 8401, 8416, 4579, 8466, 8483, 8493,
     8503, 8520, 5325, 8615, 8538, 8555, 8585, 8644, 8602, 8679,
     8696,    0,    0,    0,    0,    0,    0,    0, 8713, 8730,
     8747, 8764, 8781, 8798, 8815, 8832, 8849, 8866, 5358, 8883,
     8900,    0,    0,    0,    0,    0, 8917, 8934, 9024,  378,
     9030, 8958, 8974, 9059, 6623, 9076, 8572, 9093, 9103, 9120,
     6684, 9210, 9138, 9155, 9180,  848, 3048,  880,  363,  358,
     1030, 3054, 1036,  353,  350,  330,  327,  326,  309,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 9197, 9245,
     9262, 9279, 9296, 9313, 9330, 9347, 9364, 9381, 6723, 9398,

     9415,    0,    0,    0,    0,    0, 9432, 9449, 9525, 9467,
     9484, 9501,    0,    0,    0,    0,    0,    0,    0, 9560,
     9577, 9594, 9611, 9628, 9645, 9662, 9679, 9696, 9713, 7069,
     9730, 9747,    0,    0,    0,    0,    0, 9764, 9781,  283,
     8668, 9034, 9039, 9843, 9844, 9809, 9838, 9900, 9908, 9918,
     9952, 9957, 9976, 9965,10006,10016,10024,10061,10066,10074,
    10085,10113,10124,10125,10143,10164,10180,10188,10198,10232,
    10222,10246,10274,10285,10295,10313,10334,10347,10368,10386,
    10387,10398,10435,10440,10445,10456,10486,10496,10526,10510,
    10538,10554,10568,10578,10608,10618,10632,10666,10671,10682,

    10681,10721,10722,    0,    0,    0,10716,10733,10750,10767,
    10784,10801,10818,  144, 9518,10835,10852,10869,10886, 7853,
    10903,10920,10937,10954,10687,  942,10964,10981,    0,    0,
        0,    0,    0,    0,10998,11015,11032,11049,11066,11083,
    11100,11117,11134,11151, 7490,11168,11185,11247,11248,11258,
      210,11252,  158,11269,11286,11303,11320,11337,11354,11371,
        0,    0,    0,    0,    0,11388,11405,    0,  188,11422,
      136,11439,11456,11473,11490,11507,11524,11541,  161,  152,
      151,  132,  119,  115,  113,  101,    0,    0,    0,    0,
        0,11558,11575,    0,    0,    0,    0,    0,    0,11592,

    11609,    0,11671,11672,11682,11683,11722,11723,11733,11734,
    11773,11774,11785,11824,11825,11835,11836,11875,11876,11886,
    11923,11928,11936,11944,11983,11984,11994,12002,12036,12041,
    12049,12054,12088,12096,12101,12109,12148,12153,12158,12163,
    12197,12211,12216,12250,12258,12263,12268,12302,12307,12312,
    12317,12351,    0,    0,    0,    0,    0,    0,    0,    0,
        0,12316,12345,12362,12379,12396,12413,12430,12447,12464,
    12481, 7692,12498,12515,    0,    0,    0,    0,    0,12532,
    12549,12611,13972,    0,12576,12605,12622,    0,13972,    0,
    12639,12656,12673,    0,    0,12740,12745,12750,12761,12789,

    12800,12808,12842,12850,12858,12863,12900,12905,12910,12924,
    12958,12966,12974,12982,13016,13026,13021,13037,13065,13076,
    13077,13095,13116,13134,13135,13153,13174,    0,    0,    0,
        0,    0,13168,13185,    0,13247,13255,13260,13265,13299,
    13304,13309,13346,13351,13361,13362,13403,13402,13413,13418,
    13457,13462,13467,13472,13506,    0,13511,13516,13524,13561,
    13566,13571,13576,13610,13622,13621,13634,13662,13673,13674,
    13690,13724,13714,13729,13748,13763,13776,13791,13804,13821,
    13832,13845,13972,13923,13928,13933,13936,  116,13941,13946,
    13948,13953,13958,13963,13966

    } ;

static yyconst flex_int16_t yy_def[1096] =
    {   0,
     1083,    1, 1083, 1083, 1083, 1083, 1083, 1083, 1084, 1085,
     1083, 1083, 1086, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1087, 1083, 1083, 1083, 1088, 1083,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1083, 1083,
     1083, 1083,   30,   46,   30, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1084, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1085, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1086, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1087,  169,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1088,   30,   30,   23,   30,   30,   30,   30,
       30, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1083, 1083,
     1083, 1083,   30,   30, 1083,   30,   30,   30,   30,   30,
       30,   30, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1089, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083,  105,  105, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  105,  105,
      105,  105,  105,  105, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1090, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  149,
      149,  149, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083,  149,  149,  149,  149,  149,  149,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,  183,  183, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083,  183,  183,  183,  183,  183,
      183, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1091,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083,   30,   30,   30,   30,   30,   30,   30, 1083, 1083,

     1089,  601, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1092, 1083, 1083, 1083, 1093, 1083, 1083,
     1083,  105,  105,  105,  105,  105,  105,  105, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083,  105,  105,  105,  105,  105, 1083, 1083, 1090,  649,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1094, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  149,
      149,  149,  149,  149,  149,  149,  149,  149, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083,  149,  149,  149,  149,  149, 1083, 1083, 1095, 1083,
     1083, 1083,  183,  183,  183,  183,  183,  183,  183, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,  183,  183,  183,  183,  183, 1083, 1083, 1091,
       30,   30,   30,   30,   30, 1083, 1083,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,  572,  572,  572, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  572,  572,
      572,  572,  572,  572, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083,   30,   30,   30,
      601, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
      105,  105,  105,  105,  105, 1083, 1083,  105,  649, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083,  149,  149,  149,  149,
      149, 1083, 1083,  149,  183,  183,  183,  183,  183, 1083,

     1083,  183,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  572,  572,  572,  572,  572,  572,  572,  572,
      572, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083,  572,  572,  572,  572,  572, 1083,
     1083,   30, 1083,  601, 1083, 1083, 1083,  105, 1083,  649,
     1083, 1083, 1083,  149,  183,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  572,  572,  572,
      572,  572, 1083, 1083,  572,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  572,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,    0, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083

    } ;

static yyconst flex_int16_t yy_nxt[14092] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   39,   40,
       41,   42,   43,   44,   45,   46,   39,   47,   39,   48,
       39,   39,   49,    4,   50,   51,   52,   53,   31,   32,
       33,   34,   54,   36,   37,   38,   39,   39,   40,   41,
       42,   43,   44,   45,   46,   55,   47,   39,   48,   39,
       39,   56,   57,   58,    4,   59,   60,   61,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   62,   63,   63,

       64,    4,    4,   65,   66,    4,   67,   68,   69,   70,
       71,   72,   73,   74,    4,   75,   76,   77,    4,   78,
      203,  886,   78,   82,  139,  139,  139,  139,  141,  143,
      142,  144,  146,  886,  147,  884,  140,  234,  207,  884,
      246,  302,  302,  303,  207,  235,  148,  207,  207,  247,
      236,  237,  882,  239,  207,  207,  240,  207,  241,  207,
      238,   78,  207,  388,   78,  388,  234,  207,  389,  246,
       83,  882,  880,  207,  235,  148,  207,  207,  247,  236,
      237,  880,  239,  207,  207,  240,  207,  241,  207,  238,
      649,  207,  279,  279,  279,  279,  292,  292,  292,  989,

      292,  316,  316,  316,  316,  316,  316,   84,  669,  207,
      669,  207,  601,  670,  250,  207,  983,   85,  207,   86,
       86,   86,   86,   86,   86,   87,   88,   88,   88,   88,
       89,   90,   90,   91,   92,   93,   95,  674,  207,  674,
      207,  804,  675,  250,  207,  280,   96,  207,   97,   97,
       97,   97,   97,   97,   98,   99,   99,   99,   99,  100,
      101,  101,  102,  103,  104,  105,  293,  293,  293,  293,
      293,  293,  293,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  364,  364,  365,

      485,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  430,  430,  431,  679,
      106,  107,  108,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  109,  110,  110,  111,  679,  677,  112,  113,
      677,  114,  115,  116,  117,  118,  119,  120,  121,  145,
      122,  123,  124,  127,  242,  354,  354,  354,  243,  354,
      675,  385,  244,  675,  676,  207,  676,  207,  670,  677,
      245,  207,  248,  670,  207,  207,  207,  207,  207,  869,
      249,  207,  207,  242,  207,  207,  851,  243,  443,  169,

      385,  244,  390,  389,  207,  128,  207,  389,  126,  245,
      207,  248,  326,  207,  207,  207,  207,  207,   94,  249,
      207,  207,   81,  207,  207,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  129,  310,  310,  310,  310,  310,  310,  310,
      204,  485,  130,  382,  131,  131,  131,  131,  131,  131,
      132,  133,  133,  133,  133,  134,  135,  135,  136,  137,
      138,  149,  319,  319,  319,  319,  319,  319,  319,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  481,  481,  482,  379,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  509,  509,  510,  369,  150,  151,  152,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  153,  154,
      154,  155,  307,  285,  156,  157,  282,  158,  159,  160,
      161,  162,  163,  164,  165,  251,  166,  167,  168,  170,
      171,  638,  638,  639,  281,  252,  207,  386,  207,  182,
      259,  207,  207,  253,  260,  207,  254,  255,  261,  387,
      207,  207,  145,  207,  251,  125,  678,  207,  678,   80,

      207,  679,   79, 1083,  252,  207, 1083,  207, 1083,  259,
      207,  207,  253,  260,  207,  254,  255,  261,  387,  207,
      207, 1083,  207,  420,  420,  420,  207,  420, 1083,  207,
      139,  139,  139,  139, 1083,  172,  325,  325,  325,  325,
      325,  325,  140, 1083, 1083,  173, 1083,  174,  174,  174,
      174,  174,  174,  175,  176,  176,  176,  176,  177,  178,
      178,  179,  180,  181,  183,  355,  355,  355,  355,  355,
      355,  355,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  279,  279,  279,  279,

      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  698,  698,  699, 1083,  184,
      185,  186,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  187,  188,  188,  189, 1083, 1083,  190,  191,  280,
      192,  193,  194,  195,  196,  197,  198,  199, 1083,  200,
      201,  202,  204,  205, 1083,  204,  206,  378,  378,  378,
      378,  378,  378,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  208,  207,  209,  207,  207,  207,
      210,  207,  207,  211,  207,  207,  207,  729,  729,  730,

     1083,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  208,  207,  209,  207,  207,  207,  210,
      207,  207,  211,  207,  207,  207,  844,  844,  845, 1083,
      212,  213,  214,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  216,  217,  217,  218, 1083,  219,  220,  221,
      222,  223,  224,  225,  226,  227,  228,  229,  230,  256,
      231,  232,  233,  879,  262,  879, 1083,  257,  880,  380,
      207,  142,  207,  258, 1083,  207,  207,  207,  263,  207,
     1083,  207, 1083,  381,  207,  471,  471,  471,  256,  471,
      834,  834,  834,  262,  834,  881,  257,  881, 1083,  207,

      882,  207,  258, 1083,  207,  207,  207,  263,  207,  264,
      207, 1083,  381,  207, 1083,  207,  383,  207,  144,  265,
      266,  207,  379,  207,  207,  207,  268, 1083,  267,  207,
      384, 1083,  207,  207,  666,  207, 1083, 1083,  264,  207,
     1083, 1083,  207, 1083,  207, 1083,  207, 1083,  265,  266,
      207, 1083,  207,  207,  207,  268, 1083,  267,  207,  384,
     1083,  207,  207,  666,  207, 1083, 1083,  146,  207,  147,
     1083,  207,  269,  207,  667,  274,  270, 1083,  275,  276,
      271,  148,  207,  207, 1083,  207,  668, 1083, 1083,  207,
      272,  273,  207,  277,  278, 1083, 1083,  207, 1083,  207,

     1083,  269,  207,  207,  274,  270,  207,  275,  276,  271,
      148,  207,  207, 1083,  207,  668, 1083, 1083,  207,  272,
      273,  207,  277,  278, 1083,  207,  207, 1083,  207,  207,
     1083, 1083,  207,  248, 1083,  207,  382,  971,  971,  972,
      207,  249,  207,  207,  207,  883,  207,  883,  671,  207,
      884,  885, 1083,  885,  283, 1083,  886, 1083,  207, 1083,
     1083, 1083,  248,  442,  442,  442,  442,  442,  442,  207,
      249,  207,  207,  207,  284,  207, 1083,  671,  207,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,

      287,  287,  287,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  288,  288,  288,  288,  288,  288,  288,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  289,
      289,  289,  286,  286,  291,  291,  291,  291,  291,  291,
      291,  291, 1083,  291,  291,  291,  291, 1083,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  292,  292,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  295,  296,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  298,  298,  298,  298,  297,  299,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      306,   81, 1083, 1083, 1083, 1083,   81,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  372,  372,
      372,  372,  372,  372,  372, 1083, 1083,   83,   81, 1083,
     1083, 1083, 1083,   81,  672, 1083, 1083,   81,  421,  421,
      421,  421,  421,  421,  421,   81,  673, 1083,   81, 1083,
       81,  312,  312,  312,  312,  312,  312,  312,  312,  312,

      312, 1083, 1083, 1083,   84,  436,  436,  436,  436,  436,
      436,  436, 1083, 1083,   85,  673,   86,   86,   86,   86,
       86,   86,   87,   88,   88,   88,   88,   89,   90,   90,
       91,   92,   93,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,   95,  472,  472,  472,  472,  472,  472,  472, 1083,
     1083,   96, 1083,   97,   97,   97,   97,   97,   97,   98,
       99,   99,   99,   99,  100,  101,  101,  102,  103,  104,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,

      320,  320,  320,  320,  320,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  326,
      500,  500,  500,  500,  500,  500,  500,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327, 1083, 1083, 1083, 1083,  327,  327,  327,  327,  327,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
     1083, 1083, 1083, 1083,  328,  329,  330,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  332,  333,  333,  334,
     1083,  335,  336,  337, 1083,  338,  339,  340,  341,  342,
      343,  344,  345, 1083,  346,  347,  348,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  349,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  351,  351,
      351,  351,  351,  351,  351,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  352,  352,  352,  349,  349,  105,
      105,  105,  105,  105,  105,  105,  105, 1083,  105,  105,
      105,  105, 1083,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  354,  354,  354,  354,  354,  354,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  357,  358,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  360,
      360,  360,  360,  359,  361,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  368,  126, 1083, 1083, 1083,
     1083,  126,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371, 1083, 1083, 1083, 1083,  128,  598,  598,
      598,  598,  598,  126, 1083, 1083, 1083, 1083,  126, 1083,
     1083, 1083,  126,  629,  629,  629,  629,  629,  629,  629,
      126, 1083, 1083,  126, 1083,  126,  149,  149,  149,  149,
      149,  149,  149,  149,  129,  149,  149,  149,  149, 1083,

      149,  149,  149, 1083,  130, 1083,  131,  131,  131,  131,
      131,  131,  132,  133,  133,  133,  133,  134,  135,  135,
      136,  137,  138,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  377,  377,  377,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  390,  391, 1083,  390,  646,  646,  646,  646,  646,
     1083, 1083,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392, 1083, 1083, 1083, 1083,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392, 1083, 1083, 1083, 1083,  393,
      394,  395,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  397,  398,  398,  399, 1083,  400,  401,  402,  403,

      404,  405,  406,  407,  408,  409,  410,  411, 1083,  412,
      413,  414,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  417,  417,  417,  417,  417,  417,  417,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  418,  418,  419,  419,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  418,
      418,  418,  415,  415,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  423,  424,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  426,  426,  426,
      426,  425,  427,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  171,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,

      169,  169,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  706,  706,  706,  706,  706, 1083,  172,  689,
      689,  689,  689,  689,  689,  689, 1083, 1083,  173, 1083,
      174,  174,  174,  174,  174,  174,  175,  176,  176,  176,
      176,  177,  178,  178,  179,  180,  181,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  441,  441,  441,  441,  441,  441,  441,  441,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  443,  720,
      720,  720,  720,  720,  720,  720,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
     1083, 1083, 1083, 1083,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444, 1083,
     1083, 1083, 1083,  445,  446,  447,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  449,  450,  450,  451, 1083,
      452,  453,  454, 1083,  455,  456,  457,  458,  459,  460,

      461,  462, 1083,  463,  464,  465,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  468,  468,  468,
      468,  468,  468,  468,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  470,  470,  470,  470,  470,  470,  470,  470,  470,

      470,  470,  470,  469,  469,  469,  466,  466,  183,  183,
      183,  183,  183,  183,  183,  183, 1083,  183,  183,  183,
      183, 1083,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  474,  475,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  477,  477,
      477,  477,  476,  478,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  207, 1083,  207,  386,  667,  207,
      207,  207, 1083,  207,  672,  207, 1083, 1083,  207,  387,
      668, 1083,  486,  207,  207,  207,  673, 1083,  207,  207,
     1083,  207,  207,  207, 1083,  207, 1083, 1083,  207,  207,

      207, 1083,  207, 1083,  207, 1083, 1083,  207,  387,  668,
     1083,  486,  207,  207,  207,  673, 1083,  207,  207, 1083,
      207,  207,  207, 1083,  207, 1083, 1083,  488,  207, 1083,
     1083,  207,  490, 1083,  487,  489,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207, 1083, 1083, 1083,
     1083,  207, 1083,  207, 1083, 1083,  488,  207, 1083, 1083,
      207,  490, 1083,  487,  489,  207,  207,  207,  207, 1083,
     1083,  207,  207, 1083,  207,  207,  491,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  494,  494,  494,  494,  494,  494,
      494,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      495,  495,  495,  492,  492,  207,  207,  207,  207,  207,

      207,  207,  207, 1083,  207,  207,  207,  207, 1083,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  498,  498,
      498,  207,  498,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  502,  503,  504,

      504,  504,  504,  504,  504,  504,  504,  504,  504,  505,
      505,  505,  505,  504,  506,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  207,  207,  207,  514, 1083,
     1083,  513,  207, 1083,  207,  207,  207, 1083,  207,  515,

     1083,  207,  207,  207, 1083,  207, 1083,  207, 1083,  516,
      207, 1083, 1083, 1083,  207,  207,  207,  514, 1083, 1083,
      513,  207, 1083,  207,  207,  207, 1083,  207,  515, 1083,
      207,  207,  207,  517,  207,  207,  207,  207,  516,  207,
      207,  207,  207, 1083,  207, 1083,  207,  521,  518,  207,
     1083, 1083, 1083, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  519,  517,  207,  207,  207,  207,  520,  207,  207,
      207,  207, 1083,  207, 1083,  207,  521,  518,  207, 1083,
     1083, 1083, 1083,  207, 1083,  207, 1083, 1083,  207,  207,
      519, 1083,  207,  207,  207,  207,  520,  207,  523,  207,

      522, 1083,  207,  207,  524,  207,  207, 1083, 1083,  526,
      525, 1083,  207,  207,  207, 1083,  207,  527, 1083, 1083,
      207, 1083,  207,  207,  207, 1083, 1083,  523,  207,  522,
     1083,  207,  207,  524,  207,  207, 1083, 1083,  526,  525,
      528,  207,  207,  207, 1083,  207,  527, 1083,  207,  207,
      207, 1083,  207,  529,  207, 1083,  207,  207,  207, 1083,
     1083,  530,  207,  207, 1083,  207, 1083,  207, 1083,  528,
      207, 1083,  207, 1083,  207,  531, 1083,  207,  207,  207,
     1083,  207,  529,  207, 1083,  207,  207,  207, 1083, 1083,
      530,  207,  207, 1083,  207,  532,  207, 1083, 1083,  207,

     1083,  207, 1083,  207,  531, 1083,  207,  207,  207,  533,
      207,  207,  207,  207, 1083,  207,  207,  207,  207, 1083,
      534,  207,  207,  207,  532,  207, 1083,  535,  536, 1083,
      207, 1083, 1083, 1083, 1083,  207, 1083,  207,  533, 1083,
      207,  207,  207, 1083,  207,  207,  207,  207, 1083,  534,
      207,  207,  207, 1083,  207,  537,  535,  536,  207,  207,
      207,  538, 1083,  207,  207,  543, 1083,  207,  539,  207,
     1083,  540,  207,  541, 1083, 1083, 1083,  207, 1083,  542,
      207, 1083, 1083, 1083,  537, 1083, 1083,  207, 1083,  207,
      538, 1083,  207,  207,  543, 1083,  207,  539,  207, 1083,

      540,  207,  541, 1083,  545, 1083,  207, 1083,  542,  207,
      207,  544,  207, 1083, 1083,  207,  207,  207, 1083,  207,
      207,  207,  207, 1083,  207, 1083,  207, 1083, 1083,  207,
     1083,  546, 1083,  545,  737,  737,  737,  737,  737,  207,
      544,  207, 1083, 1083,  207,  207,  207, 1083,  207,  207,
      207,  207, 1083,  207, 1083,  207, 1083, 1083,  207, 1083,
      546,  207,  547,  207, 1083, 1083,  207,  207,  548, 1083,
      207, 1083,  207, 1083, 1083,  207,  207,  549,  207, 1083,
     1083, 1083,  207, 1083, 1083,  207, 1083, 1083, 1083, 1083,
      207,  547,  207, 1083, 1083,  207,  207,  548, 1083,  207,

     1083,  207, 1083, 1083,  207,  207,  549,  207, 1083, 1083,
      207,  207,  207, 1083,  207,  551,  207,  550, 1083,  207,
     1083,  207,  207,  207,  207, 1083,  553,  207,  207,  552,
      207,  207, 1083, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  207, 1083,  207,  551,  207,  550, 1083,  207, 1083,
      207,  207,  207,  207, 1083,  553,  207,  207,  552,  207,
      207,  554, 1083,  207, 1083,  207, 1083, 1083,  207,  207,
      207, 1083,  207, 1083,  207,  555, 1083,  207,  556, 1083,
     1083, 1083,  558,  207,  207,  207,  559,  560,  207,  207,
      554,  207,  207, 1083, 1083, 1083, 1083,  207, 1083,  207,

     1083, 1083, 1083,  207,  555, 1083,  207,  556, 1083, 1083,
     1083,  558,  207,  207,  207,  559,  560,  207,  207, 1083,
      207,  207,  207,  557,  207,  570,  562,  561,  207,  207,
     1083,  207,  207,  207,  207, 1083,  207,  207,  207,  207,
     1083,  207,  563,  207, 1083, 1083,  207, 1083, 1083, 1083,
     1083,  207,  557,  207,  570,  562,  561,  207,  207, 1083,
      207,  207,  207,  207, 1083,  207,  207,  207,  207, 1083,
      207,  563,  207, 1083, 1083,  207,  207,  564,  207,  565,
     1083, 1083,  207,  568,  566,  207,  207,  207,  207,  207,
      567, 1083,  207,  207, 1083,  207,  207,  745,  745,  745,

      745,  745, 1083, 1083, 1083,  207,  564,  207,  565, 1083,
     1083,  207,  568,  566,  207,  207,  207,  207,  207,  567,
     1083,  207,  207,  569,  207,  207,  207,  207,  207,  207,
     1083, 1083,  207,  207,  571,  207,  207,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  628,
      628,  628,  569,  628, 1083,  207,  207,  207,  207, 1083,
     1083,  207,  207,  571,  207,  207,  572,  835,  835,  835,
      835,  835,  835,  835,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572, 1083, 1083,

     1083, 1083,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572, 1083, 1083, 1083,
     1083,  573,  574,  575,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  576,  577,  577,  578, 1083, 1083,  579,
      580, 1083,  581,  582,  583,  584,  585,  586,  587,  588,
     1083,  589,  590,  591,  207, 1083,  207, 1083, 1083,  207,
      207,  207, 1083,  207,  207,  207,  207, 1083,  207,  207,
      207,  207, 1083,  207, 1083,  207, 1083, 1083,  207, 1083,
     1083, 1083, 1083,  592, 1083,  207, 1083, 1083,  207,  207,

      207, 1083,  207,  207,  207,  207,  593,  207,  207,  207,
      207, 1083,  207,  207,  207,  207, 1083,  207,  207,  207,
      207, 1083,  207,  207,  207,  207, 1083,  207,  207,  207,
      207, 1083,  207, 1083,  207, 1083, 1083,  207, 1083, 1083,
     1083, 1083,  207, 1083,  207, 1083, 1083,  207,  207,  207,
     1083,  207,  207,  207,  207, 1083,  207,  207,  207,  207,
     1083,  207,  207,  207,  207, 1083,  207, 1083,  207, 1083,
     1083,  207,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292, 1083,
     1083,  207, 1083,  207, 1083, 1083, 1083,  207, 1083, 1083,

      207,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  286,  286,
      286,  286,  286,  287,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  287,  287,  287,
      287,  287,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  286,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  602,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637, 1083, 1083,  603,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
     1083, 1083,  604,  854,  854,  854,  854,  854,  854,  854,
     1083, 1083,  605, 1083,  606,  606,  606,  606,  606,  606,
      607,  608,  608,  608,  608,  609,  610,  610,  611,  612,

      613,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,

      621,  621,  621,  621,  621,  622,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  625,  625,  625,  625,  625,  625,  625,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  626,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  626,
      626,  626,  623,  623,  327,  327,  327,  327,  327,  327,
      327,  327, 1083,  327,  327,  327,  327, 1083,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  631,  632,  633,  633,  633,  633,  633,  633,

      633,  633,  633,  633,  634,  634,  634,  634,  633,  635,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  642,  642,  349,  349,  349,  349,  349,  350,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  350,  350,  350,  350,  350,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  349,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,

      644,  644,  644,  644,  644,  644,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  650,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  860,
      860,  860,  860,  860,  860, 1083,  651,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126, 1083, 1083,  652,  865,  865,  865,  865,  865, 1083,
     1083, 1083, 1083,  653, 1083,  654,  654,  654,  654,  654,
      654,  655,  656,  656,  656,  656,  657,  658,  658,  659,
      660,  661,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      680,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  681,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  683,  683,
      683,  683,  683,  683,  683,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  684,  684,  684,  681,  681,  392,
      392,  392,  392,  392,  392,  392,  392, 1083,  392,  392,
      392,  392, 1083,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  687,  687,  687,  392,  687,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  691,  692,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  694,  694,  694,  694,  693,  695,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  415,  415,  415,  415,  415,  416,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  416,  416,  416,  416,  416,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  415,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  415,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  713,

      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  716,  716,  716,
      716,  716,  716,  716,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  717,  717,  717,  714,  714,  444,  444,
      444,  444,  444,  444,  444,  444, 1083,  444,  444,  444,
      444, 1083,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  719,  719,  719, 1083,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  722,  723,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  725,  725,  725,  725,  724,
      726,  724,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  471,  471,  471,  471,  471,  471,  471,  471,  471,

      471,  471,  471,  471,  471,  471,  471,  471,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  466,  466,  466,  466,  466,
      467,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  467,  467,  467,  467,  467,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  466,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  207,  207,  207,  207, 1083,

     1083,  207,  207, 1083,  207,  207,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207,  872,  872,  872,
      872,  872,  872,  872,  207,  207,  207,  207, 1083, 1083,
      207,  207, 1083,  207,  207,  207,  207,  207,  207, 1083,
     1083,  207,  207, 1083,  207,  207,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207,  207,  207,  207,
      207, 1083, 1083,  207,  207, 1083,  207,  207,  878,  878,
      878,  878,  878,  878, 1083,  207,  207,  207,  207, 1083,
     1083,  207,  207, 1083,  207,  207,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207,  207,  207,  207,

      207, 1083, 1083,  207,  207, 1083,  207,  207,  207,  207,
      207,  207, 1083, 1083,  207,  207, 1083,  207,  207,  891,
      891,  891,  891,  891, 1083, 1083,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207,  207,  207,  207,
      207, 1083, 1083,  207,  207, 1083,  207,  207,  207,  207,
      207,  207, 1083, 1083,  207,  207, 1083,  207,  207,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499, 1083,  207,  207,  207,
      207, 1083, 1083,  207,  207, 1083,  207,  207,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  492,  492,  492,  492,  492,
      493,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  491,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  493,  493,  493,  493,  493,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  492,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  748, 1083, 1083, 1083,  749,
     1083, 1083,  207, 1083,  207, 1083, 1083,  207,  207,  207,
     1083,  207,  750,  207, 1083, 1083,  207, 1083, 1083, 1083,

      207,  207,  207,  751,  748, 1083,  207,  207,  749,  207,
      207,  207, 1083,  207, 1083, 1083,  207,  207,  207, 1083,
      207,  750,  207, 1083, 1083,  207, 1083, 1083, 1083,  207,
      207,  207,  751,  752, 1083,  207,  207, 1083,  207,  207,
     1083, 1083, 1083,  753,  207,  207,  207, 1083, 1083,  207,
      207, 1083,  207,  207,  207,  207,  207,  755, 1083, 1083,
      754,  207,  752,  207,  207,  899,  899,  899,  899,  899,
     1083, 1083,  753,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207,  207,  207,  207,  755,  756,  757,  754,
      207, 1083,  207,  207, 1083, 1083, 1083, 1083,  207,  207,

      207,  207,  758, 1083,  207,  207, 1083,  207,  207, 1083,
     1083, 1083, 1083,  207, 1083,  207,  756,  757, 1083,  207,
     1083, 1083,  207, 1083, 1083, 1083, 1083,  207,  207,  207,
      207,  758, 1083,  207,  207, 1083,  207,  207, 1083, 1083,
      759, 1083,  207,  760,  207, 1083, 1083,  207,  207,  207,
     1083,  207,  207,  207,  207, 1083,  207,  207,  207,  207,
     1083,  207, 1083,  207,  761, 1083,  207, 1083, 1083,  759,
     1083,  207,  760,  207, 1083,  762,  207,  207,  207, 1083,
      207,  207,  207,  207, 1083,  207,  207,  207,  207, 1083,
      207, 1083,  207,  761, 1083,  207, 1083, 1083, 1083,  207,

      207,  207,  207, 1083,  762,  763,  207, 1083,  207,  207,
      207,  207,  207,  207, 1083, 1083,  764,  207,  765,  207,
      207, 1083, 1083,  207,  766,  207, 1083, 1083,  207,  207,
      207, 1083,  207, 1083,  763, 1083, 1083,  207, 1083,  207,
      207,  207,  207, 1083, 1083,  764,  207,  765,  207,  207,
     1083, 1083,  207,  766,  207, 1083, 1083, 1083,  207, 1083,
      207,  207,  207, 1083,  767,  207,  207,  207, 1083,  207,
     1083,  207,  769,  768,  207,  207, 1083,  207, 1083, 1083,
     1083,  207, 1083, 1083,  207, 1083, 1083, 1083, 1083,  207,
     1083,  207, 1083,  767,  207,  207,  207, 1083,  207, 1083,

      207,  769,  768,  207,  207,  770,  207, 1083, 1083, 1083,
      207, 1083,  207,  207,  207, 1083, 1083,  207,  207,  207,
      771,  207,  207,  207,  207, 1083,  207,  772,  207,  207,
     1083,  207, 1083,  207,  770, 1083,  207, 1083, 1083, 1083,
     1083,  207, 1083,  207, 1083, 1083,  207,  207,  207,  771,
      207,  207,  207,  207, 1083,  207,  772,  207,  207, 1083,
      207,  207,  207,  207, 1083,  207,  773,  207,  774, 1083,
      207,  207, 1083,  207, 1083, 1083,  207,  207,  207, 1083,
      207, 1083,  207, 1083,  775,  207, 1083, 1083, 1083, 1083,
      207, 1083,  207, 1083, 1083,  773,  207,  774, 1083,  207,

      207, 1083,  207, 1083, 1083,  207,  207,  207, 1083,  207,
      207,  207,  207,  775,  207,  776,  207,  777,  778,  207,
     1083,  207,  207,  207,  207, 1083,  779,  207,  207, 1083,
      207,  207, 1083, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  207, 1083,  207,  776,  207,  777,  778,  207, 1083,
      207,  207,  207,  207, 1083,  779,  207,  207, 1083,  207,
      207, 1083,  207,  207,  207,  207,  780, 1083,  207,  207,
     1083,  207,  207, 1083, 1083,  207,  207,  207,  207, 1083,
     1083,  207,  207,  781,  207,  207,  979,  979,  979,  979,
      979,  207, 1083,  207, 1083,  780, 1083,  207, 1083, 1083,

      207, 1083, 1083, 1083,  207,  207,  207,  207,  782, 1083,
      207,  207,  781,  207,  207,  207,  207,  207,  207, 1083,
     1083,  207,  207, 1083,  207,  207,  207, 1083,  207, 1083,
     1083,  784,  783, 1083,  207,  207,  207,  782, 1083, 1083,
      207, 1083, 1083,  207,  207,  207,  207,  207, 1083, 1083,
      207,  207, 1083,  207,  207,  207, 1083,  207, 1083, 1083,
      784,  783,  786,  207,  207,  207,  785, 1083,  207,  207,
      207, 1083,  207,  207,  207,  207,  788,  207,  207,  207,
      207, 1083,  207,  207,  207,  207,  787,  207, 1083,  207,
     1083,  786,  207, 1083, 1083,  785, 1083,  207, 1083,  207,

     1083, 1083,  207,  207,  207,  788,  207,  207,  207,  207,
     1083,  207,  207,  207,  207,  787,  207,  789,  207, 1083,
     1083,  207,  791,  792,  207, 1083,  207, 1083,  790,  207,
      207,  207, 1083,  207,  207,  207,  207, 1083,  207,  207,
      207,  207, 1083,  207, 1083,  207,  789, 1083,  793, 1083,
     1083,  791,  792,  207, 1083,  207, 1083,  790,  207,  207,
      207, 1083,  207,  207,  207,  207,  794,  207,  207,  207,
      207, 1083,  207,  207,  207,  207, 1083,  793,  207,  207,
      207, 1083,  207,  795,  207, 1083,  796,  207, 1032, 1032,
     1032, 1032, 1032, 1083,  797,  794,  207, 1083, 1083, 1083,

      207, 1083,  207,  207,  207, 1083, 1083,  207,  207,  207,
     1083,  207,  795,  207, 1083,  796,  207, 1083,  207, 1083,
      207,  798, 1083,  797,  207,  207, 1083,  207,  207,  207,
      207, 1083,  207,  207,  207,  207,  799,  207, 1083,  207,
     1083, 1083,  207, 1083, 1083, 1083,  207,  207,  207,  207,
      798,  800,  207,  207, 1083,  207,  207,  207, 1083,  207,
     1083, 1083,  207,  207,  207,  799,  207,  207,  207,  207,
     1083,  207, 1083,  207, 1083,  207,  207,  207, 1083, 1083,
      800,  207, 1083,  207,  207,  801, 1083, 1083,  207,  207,
      207, 1083,  207,  802,  207, 1083,  207,  207,  207, 1083,

      803, 1083,  207, 1083,  207,  207,  207, 1083, 1083, 1083,
      207, 1083,  207,  207,  801, 1083, 1083,  207,  207,  207,
     1083,  207,  802,  207, 1083, 1083,  207, 1083, 1083,  803,
     1083, 1083, 1083,  207, 1083,  207, 1083, 1083, 1083,  207,
     1083, 1083,  207,  804,  805, 1083,  804,  962,  962,  962,
      962,  962,  962,  962,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806, 1083, 1083,
     1083, 1083,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,

      806,  806,  806,  806,  806,  806,  806, 1083, 1083, 1083,
     1083,  807,  808,  809,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  811,  812,  812,  813, 1083,  814,  815,
      816,  817,  818,  819,  820,  821,  822,  823,  824,  825,
     1083,  826,  827,  828,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  831,  831,  831,  831,  831,

      831,  831,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  832,  832,  832,  829,  829,  572,  572,  572,  572,
      572,  572,  572,  572, 1083,  572,  572,  572,  572, 1083,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  836,  836,  836,

      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  837,  838,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  840,  840,  840,  840,
      839,  841,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  847,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207,  207,  207,  207,  207, 1083, 1083,  207,
      207, 1083,  207,  207, 1083,  849, 1083, 1083, 1083, 1083,
     1083,  207,  207,  207,  207, 1083, 1083,  848,  207, 1083,
      207,  207,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207,  207,  207,  207,  207, 1083, 1083,  207,
      207, 1083,  207,  207,  207, 1083,  207, 1083, 1083, 1083,
      207, 1083, 1083,  207, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207,  207, 1083,  207,  601, 1083, 1083,  207,

     1083,  601,  207,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  602, 1083, 1083,
     1083, 1083, 1083,  601, 1083, 1083, 1083, 1083,  601, 1083,
     1083, 1083,  601, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
      601, 1083, 1083,  601, 1083,  601,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852, 1083, 1083,  603,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601, 1083, 1083, 1083,
     1083,  604, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083,  605, 1083,  606,  606,  606,  606,  606,  606,  607,
      608,  608,  608,  608,  609,  610,  610,  611,  612,  613,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  858,  858,  858,  858,  858,  858,

      858,  858,  858,  858,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  306,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874, 1083, 1083,   83,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94, 1083, 1083,   84, 1083,  207, 1083,  207,
     1083, 1083, 1083,  207, 1083,   85,  207,   86,   86,   86,
       86,   86,   86,   87,   88,   88,   88,   88,   89,   90,
       90,   91,   92,   93,   95, 1083,  207, 1083,  207, 1083,
     1083, 1083,  207, 1083,   96,  207,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,  100,  101,  101,
      102,  103,  104,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  628,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  623,  623,  623,  623,  623,  624,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  622,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      624,  624,  624,  624,  624,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  623,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,

      867,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  650,  649, 1083, 1083, 1083,
     1083,  649,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  207, 1083,  207, 1083,  651,  207,  207,
      207, 1083,  207,  649,  207, 1083, 1083,  207,  649, 1083,
     1083, 1083,  649, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

      649, 1083,  207,  649,  207,  649, 1083,  207,  207,  207,
     1083,  207, 1083,  207,  652, 1083,  207, 1083, 1083, 1083,
     1083, 1083, 1083, 1083,  653, 1083,  654,  654,  654,  654,
      654,  654,  655,  656,  656,  656,  656,  657,  658,  658,
      659,  660,  661,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  876,  876,  876,  876,  876,  876,

      876,  876,  876,  876,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  368,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126, 1083, 1083, 1083, 1083,
     1083, 1083, 1083,  128,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688, 1083, 1083,

      129, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
      130, 1083,  131,  131,  131,  131,  131,  131,  132,  133,
      133,  133,  133,  134,  135,  135,  136,  137,  138,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  681,  681,  681,  681,
      681,  682,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  680,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  888,  888,  888,

      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  681,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  889,  889,  889,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  893,

      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      171,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  806,  806,  806,  806,  806,  806,  806,  806,
     1083,  806,  806,  806,  806,  172,  806,  806,  806, 1083,
     1083, 1083, 1083, 1083, 1083,  173, 1083,  174,  174,  174,
      174,  174,  174,  175,  176,  176,  176,  176,  177,  178,
      178,  179,  180,  181,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  895,  895,  895,  895,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  895,  895,  714,  714,
      714,  714,  714,  715,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  713,  714,  714,  714,  714,  714,

      714,  714,  714,  714,  714,  714,  714,  715,  715,  715,
      715,  715,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  896,
      896,  896,  896,  896,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  896,  714,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  897,  897,  897,  897,  897,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  898,  898,  898,

      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  902,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207,  903,  903,  903,  903,  903,  903,  903,

      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
     1083,  207,  207,  207,  207, 1083, 1083,  207,  207, 1083,
      207,  207,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  207,
     1083,  207, 1083, 1083,  904,  207, 1083,  207,  207,  207,
      905, 1083, 1083,  207, 1083, 1083,  207,  207, 1083,  207,
     1083, 1083, 1083,  207, 1083, 1083,  207, 1083,  207, 1083,
      207, 1083, 1083,  904,  207, 1083,  207,  207,  207,  905,
     1083, 1083,  207,  906, 1083,  207,  207, 1083,  207, 1083,
     1083,  207,  207,  207, 1083,  207,  207,  207,  207, 1083,

      207,  907,  207, 1083,  207,  207,  207, 1083,  908, 1083,
      207,  909,  906,  207, 1083,  207, 1083,  207, 1083, 1083,
      207,  207,  207, 1083,  207,  207,  207,  207, 1083,  207,
      907,  207, 1083,  207,  207,  207, 1083,  908, 1083,  207,
      909, 1083,  207, 1083,  207,  207,  207,  207, 1083, 1083,
      207,  207,  910,  207,  207,  207, 1083,  207, 1083, 1083,
     1083,  207,  911,  207,  207,  207, 1083, 1083, 1083,  207,
      912, 1083,  207, 1083,  207, 1083,  207, 1083, 1083, 1083,
      207,  910, 1083,  207,  207, 1083,  207, 1083, 1083, 1083,
      207,  911,  207,  207,  207, 1083, 1083, 1083,  207,  912,

      207,  207,  207, 1083, 1083,  207,  207,  207,  913,  207,
     1083,  207,  914,  207,  207,  207, 1083, 1083,  915,  207,
     1083,  916,  207, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  207, 1083,  207,  207,  207,  207,  913,  207, 1083,
      207,  914,  207,  207,  207, 1083, 1083,  915,  207, 1083,
      916,  207,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207,  207,  207,  207,  207, 1083, 1083,  207,
      207,  917,  207,  207, 1083,  918, 1083, 1083, 1083, 1083,
     1083,  207,  207,  207,  207, 1083, 1083,  207,  207, 1083,
      207,  207,  207,  207,  207,  207, 1083, 1083,  207,  207,

      917,  207,  207,  207,  918,  207, 1083, 1083, 1083,  207,
     1083,  207,  207,  207, 1083,  919, 1083,  207, 1083,  207,
      207,  207, 1083, 1083, 1083,  207, 1083,  207,  207,  207,
     1083,  920,  207,  207,  207, 1083,  207,  207,  207,  921,
     1083,  207, 1083,  207,  919, 1083,  207, 1083,  207, 1083,
      207, 1083, 1083, 1083,  207, 1083,  207,  207,  207, 1083,
      920,  207,  207,  207, 1083,  207,  207,  207,  921, 1083,
      207,  207,  207,  207,  923,  207,  922,  207, 1083, 1083,
      207, 1083, 1083, 1083, 1083,  207, 1083,  207, 1083, 1083,
      207,  207,  207, 1083,  207, 1083,  207, 1083, 1083,  207,

      207, 1083,  207,  923, 1083,  922,  207, 1083, 1083,  207,
      924, 1083, 1083,  207,  207,  207,  207, 1083, 1083,  207,
      207, 1083,  207,  207,  207, 1083,  207, 1083, 1083, 1083,
      207,  925, 1083,  207,  207,  926,  207, 1083, 1083,  924,
      207, 1083,  207,  207,  207, 1083, 1083, 1083,  207,  927,
     1083,  207,  207,  207,  207,  207, 1083, 1083,  207,  207,
      925,  207,  207,  207,  926,  207, 1083, 1083, 1083,  207,
     1083, 1083,  207,  207,  928,  207, 1083, 1083,  927,  207,
     1083,  207,  207,  207, 1083, 1083,  207,  207,  207, 1083,
      207, 1083,  207,  929, 1083,  207, 1083, 1083, 1083, 1083,

     1083, 1083,  207,  928,  207, 1083, 1083,  207,  207,  207,
     1083,  207, 1083,  207, 1083,  207,  207,  207,  930, 1083,
     1083,  207,  929, 1083,  207,  207,  207,  207,  207,  932,
     1083,  207,  931, 1083,  207,  207,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207,  930, 1083, 1083,
     1083, 1083, 1083, 1083,  207,  207,  207,  207,  932, 1083,
      207,  931, 1083,  207,  207, 1083,  207,  933,  207, 1083,
     1083, 1083,  207, 1083,  207,  207,  207, 1083, 1083,  207,
      207,  207,  934,  207,  207,  207,  207, 1083,  207,  935,
      207, 1083,  936,  207, 1083,  207,  933,  207, 1083, 1083,

     1083,  207, 1083,  207,  207,  207, 1083, 1083,  207,  207,
      207,  934,  207,  207,  207,  207,  937,  207,  935,  207,
     1083,  936,  207, 1083,  207,  207,  207,  207, 1083, 1083,
      207,  207, 1083,  207,  207,  207, 1083,  207, 1083, 1083,
     1083,  207, 1083, 1083,  207,  937,  938, 1083, 1083,  940,
     1083,  207, 1083, 1083,  207,  207,  207, 1083,  207, 1083,
      207, 1083, 1083,  207,  207,  207,  207,  207,  941, 1083,
      207,  207,  939,  207,  207,  938, 1083,  207,  940,  207,
      207, 1083, 1083,  207,  207, 1083,  207,  207, 1083, 1083,
     1083, 1083, 1083,  207,  207,  207,  207,  941,  942,  207,

      207,  939,  207,  207,  943, 1083,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207,  207, 1083,  944,
     1083, 1083,  207,  207,  207, 1083,  207,  942,  207, 1083,
     1083,  207, 1083,  943, 1083, 1083,  207, 1083,  207, 1083,
     1083, 1083,  207, 1083, 1083,  207,  207,  207,  944,  207,
     1083, 1083,  207,  207,  945,  207,  207,  207, 1083,  207,
      947, 1083, 1083,  207,  946, 1083,  207, 1083, 1083, 1083,
     1083,  207, 1083,  207, 1083, 1083,  207,  207,  207, 1083,
      207, 1083,  207,  945, 1083,  207,  207, 1083,  207,  947,
     1083, 1083,  207,  946, 1083,  207, 1083, 1083, 1083,  948,

      207, 1083,  207, 1083, 1083,  207,  207,  207, 1083,  207,
      207,  207,  949,  950,  207,  951,  207, 1083, 1083,  207,
      207,  207,  207,  207, 1083, 1083,  207,  207,  948,  207,
      207, 1083, 1083, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  949,  950,  207,  951,  207, 1083, 1083,  207,  207,
      207,  207,  207,  952, 1083,  207,  207, 1083,  207,  207,
      207,  207,  207,  207, 1083, 1083,  207,  207, 1083,  207,
      207,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970, 1083,  952, 1083, 1083, 1083, 1083, 1083, 1083,  207,
      207,  207,  207, 1083, 1083,  207,  207, 1083,  207,  207,

      953,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  956,  956,
      956,  956,  956,  956,  956,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,

      957,  957,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  957,  957,  957,  954,  954,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  960,  960,  960,  806,  960,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,

      963,  963,  963,  963,  964,  965,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  967,  967,  967,  967,
      966,  968,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  975,

      975,  975,  975,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975,  975,  975,  975,  829,  829,  829,  829,
      829,  830,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  830,  830,  830,  830,  830,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  829,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,

      977,  977,  977,  977,  977,  977,  977,  977,  977,  977,
      977,  977,  977,  977,  977,  977,  977,  977,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  978,  978,  978,  978,  978,
      978,  978,  978,  978,  978,  978,  978,  978,  978,  978,
      978,  978,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  207,  207,  207,  207,
     1083, 1083,  207,  207, 1083,  207,  207,  207, 1083,  207,

     1083, 1083, 1083,  207, 1083, 1083,  207, 1083,  982, 1083,
     1083, 1083, 1083, 1083, 1083,  207,  207,  207,  207, 1083,
     1083,  207,  207, 1083,  207,  207,  207, 1083,  207, 1083,
     1083, 1083,  207, 1083, 1083,  207,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,  985,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  987,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,

      988,  988,  988,  988,  988,  988,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  991,  991,  991,  991,  991,  991,  991,  991,  991,

      991,  991,  991,  991,  991,  991,  991,  991,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,

      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      207,  207,  207,  996, 1083, 1083,  207,  207, 1083,  207,
      207,  207,  207,  207,  207, 1083, 1083,  207,  207, 1083,
      207,  207, 1083, 1083, 1083, 1083, 1083, 1083, 1083,  207,
      207,  207,  996, 1083, 1083,  207,  207, 1083,  207,  207,
      207,  207,  207,  207, 1083, 1083,  207,  207, 1083,  207,
      207,  207,  207,  207,  207, 1083, 1083,  207,  997, 1083,
      207,  207,  207,  207,  207,  207, 1083,  998,  207,  207,
     1083,  207,  207, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
      207,  207,  207,  207, 1083, 1083,  207,  997, 1083,  207,

      207,  207,  207,  207,  207,  999,  998,  207,  207, 1083,
      207,  207,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207, 1083, 1001, 1000,  207, 1083, 1083, 1083,
      207, 1083, 1083,  207,  999, 1083, 1083, 1083, 1083, 1083,
     1083,  207,  207,  207,  207, 1083, 1083,  207,  207, 1083,
      207,  207, 1083, 1001, 1000,  207, 1002, 1083, 1083,  207,
     1083, 1003,  207,  207,  207,  207,  207, 1083, 1083,  207,
      207, 1083,  207,  207,  207,  207, 1004,  207, 1083, 1083,
      207, 1005, 1083,  207,  207, 1002, 1083, 1083, 1083, 1083,
     1003, 1083,  207,  207,  207,  207, 1083, 1083,  207,  207,

     1083,  207,  207,  207,  207, 1004,  207, 1083, 1083,  207,
     1005, 1083,  207,  207,  207,  207,  207,  207, 1083, 1006,
      207,  207, 1083,  207,  207,  207, 1083,  207, 1083, 1083,
     1083,  207, 1083, 1083,  207, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1007,  207,  207,  207,  207, 1083, 1006,  207,
      207, 1083,  207,  207,  207, 1083,  207, 1008, 1083, 1083,
      207, 1083,  207,  207,  207, 1083, 1083,  207,  207,  207,
     1083,  207, 1083,  207, 1009,  207,  207, 1010, 1083, 1083,
     1083,  207, 1083,  207,  207,  207, 1008, 1083, 1083,  207,
     1083,  207,  207,  207, 1083, 1083,  207,  207,  207, 1083,

      207, 1083,  207, 1009,  207,  207, 1010, 1083, 1083, 1083,
      207, 1083,  207,  207,  207, 1011, 1012, 1083,  207, 1083,
     1083,  207,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1013,  207,  207,  207, 1083,  207, 1083, 1083, 1083,  207,
     1083,  207,  207,  207, 1011, 1012, 1083,  207, 1083, 1083,
      207,  207,  207,  207,  207, 1083, 1083,  207,  207, 1013,
      207,  207,  207, 1083,  207, 1083, 1083, 1083,  207, 1083,
      207,  207,  207, 1083, 1083,  207,  207,  207, 1083,  207,
      207,  207,  207, 1083,  207, 1014,  207, 1083,  207,  207,
      207, 1083, 1083,  207,  207,  207, 1083,  207, 1083,  207,

     1083, 1083,  207, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  207, 1083,  207, 1014,  207, 1083,  207,  207,  207,
     1083, 1083,  207,  207,  207, 1083,  207,  207,  207,  207,
     1083,  207, 1083,  207, 1015,  207,  207, 1016, 1083, 1083,
      207,  207,  207, 1083,  207, 1083,  207, 1083,  207,  207,
      207, 1083, 1083, 1083,  207, 1083,  207,  207,  207, 1017,
     1083, 1083,  207, 1015,  207,  207, 1016, 1083, 1083,  207,
      207,  207, 1083,  207, 1083,  207, 1083,  207,  207,  207,
     1018, 1083, 1083,  207, 1083, 1083,  207,  207, 1017,  207,
     1019, 1083,  207,  207,  207, 1020,  207,  207,  207,  207,

     1083,  207,  207,  207,  207, 1083,  207, 1083,  207, 1018,
     1083,  207, 1083, 1083, 1083, 1083,  207, 1083,  207, 1019,
     1083,  207,  207,  207, 1020,  207,  207,  207,  207, 1083,
      207,  207,  207,  207, 1083,  207,  207,  207,  207, 1022,
      207, 1083,  207, 1021, 1083,  207, 1023, 1083, 1083, 1083,
      207, 1083,  207, 1083, 1083,  207,  207,  207, 1083,  207,
     1083,  207, 1083, 1083,  207,  207, 1083,  207, 1022, 1083,
     1083,  207, 1021, 1083,  207, 1023, 1083, 1083, 1083,  207,
     1083,  207, 1083, 1083,  207,  207,  207, 1083,  207,  207,
      207,  207, 1083,  207, 1083,  207, 1024,  207,  207,  207,

     1083, 1083,  207, 1025,  207, 1083,  207,  207,  207, 1026,
     1083,  207, 1083,  207, 1083, 1083,  207, 1083,  207, 1083,
      207, 1083, 1083, 1083,  207, 1024,  207,  207,  207, 1083,
     1083,  207, 1025,  207, 1083,  207,  207,  207, 1026, 1083,
      207,  207,  207,  207, 1027,  207,  207,  207,  207, 1083,
      207,  207,  207,  207, 1083,  207,  207,  207,  207, 1083,
      207, 1083,  207, 1083, 1083,  207, 1083, 1083, 1083, 1083,
      207, 1083,  207, 1027, 1083,  207,  207,  207, 1083,  207,
      207,  207,  207, 1083,  207,  207,  207,  207, 1083,  207,
      207,  207,  207, 1083,  207, 1083,  207, 1083, 1083,  207,

      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  961,  961,  961,  961,  961,  961, 1083, 1083,  207,
     1083,  207, 1083, 1083, 1083,  207, 1083, 1083,  207, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028,  954,  954,  954,  954,
      954,  955,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  953,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  955,  955,  955,  955,  955,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954, 1029, 1029, 1029,

     1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029,  954, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034,

     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
      207, 1083,  207, 1083, 1083, 1083,  207, 1083, 1083,  207,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601, 1083, 1083,  207,
     1083,  207, 1083, 1083, 1083,  207, 1083, 1083,  207,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  871,  871,  871,
      871,  871,  871,  871, 1036, 1037, 1083, 1083, 1083,  207,
     1083,  207, 1083, 1083,  207,  207,  207, 1083,  207,  207,
      207,  207, 1083,  207, 1083,  207, 1083, 1038,  207, 1083,

      207, 1083,  207, 1036, 1037, 1083,  207, 1083,  207,  207,
      207, 1083, 1083,  207,  207,  207, 1083,  207,  207,  207,
      207, 1083,  207, 1083,  207, 1083, 1038,  207,  207,  207,
      207,  207, 1039, 1083,  207,  207, 1083,  207,  207,  207,
     1083,  207, 1083, 1083, 1083,  207, 1040,  207,  207,  207,
     1083, 1083, 1083,  207, 1083, 1083,  207,  207, 1083,  207,
     1083, 1039, 1083,  207, 1083, 1083,  207, 1083,  207, 1083,
      207, 1041, 1083, 1083,  207, 1040,  207,  207,  207, 1083,
     1042,  207,  207,  207, 1083,  207, 1083,  207, 1083,  207,
      207,  207, 1083, 1083, 1083,  207, 1083,  207,  207,  207,

     1041, 1083,  207,  207,  207, 1083,  207, 1083,  207, 1042,
      207,  207,  207, 1083, 1083, 1083,  207, 1083,  207,  207,
      207, 1083, 1083, 1083,  207, 1083,  207,  207,  207, 1083,
     1043,  207,  207,  207, 1083,  207, 1083,  207, 1083,  207,
      207,  207, 1083, 1083,  207,  207,  207, 1083,  207,  207,
      207,  207, 1083,  207, 1083,  207, 1083, 1083,  207, 1043,
     1083, 1083, 1044,  207, 1083,  207, 1083, 1083,  207,  207,
      207, 1083,  207,  207,  207,  207, 1083,  207,  207,  207,
      207, 1083,  207, 1083,  207, 1083, 1083,  207, 1083, 1083,
     1083, 1044,  207, 1083,  207, 1083, 1083,  207,  207,  207,

     1083,  207, 1045,  207, 1083,  207,  207,  207, 1083, 1083,
     1046,  207, 1083,  207,  207,  207, 1083, 1083, 1083,  207,
     1047,  207,  207,  207, 1083, 1083,  207, 1048,  207, 1083,
      207, 1045,  207, 1083,  207,  207,  207, 1083, 1083, 1046,
      207, 1083,  207,  207,  207, 1083, 1083, 1083,  207, 1047,
      207,  207,  207, 1083, 1049,  207, 1048,  207, 1083,  207,
      207,  207,  207, 1083,  207,  207,  207,  207, 1050,  207,
     1083,  207, 1083, 1083,  207, 1083,  207, 1083,  207, 1083,
     1083, 1083,  207, 1049,  207,  207,  207, 1083, 1083,  207,
      207,  207, 1083,  207,  207,  207,  207, 1050,  207, 1083,

      207, 1083, 1083,  207,  207,  207,  207,  207, 1083, 1051,
      207,  207, 1083,  207,  207,  207,  207,  207,  207, 1083,
     1083,  207,  207, 1083,  207,  207, 1083, 1083, 1083, 1083,
     1083, 1083, 1083,  207,  207,  207,  207, 1083, 1051,  207,
      207, 1052,  207,  207,  207,  207,  207,  207, 1053, 1083,
      207,  207, 1083,  207,  207,  207, 1083,  207, 1083, 1083,
     1083,  207, 1083,  207,  207,  207, 1083, 1083, 1083,  207,
     1052, 1083,  207,  207,  207,  207,  207, 1053, 1083,  207,
      207, 1083,  207,  207,  207, 1083,  207, 1054, 1083, 1083,
      207, 1083,  207,  207,  207, 1083, 1083, 1083,  207, 1083,

     1083,  207,  207,  207,  207,  207, 1083, 1083,  207,  207,
     1083,  207,  207,  207, 1083,  207, 1054, 1083, 1055,  207,
     1083,  207,  207,  207, 1083, 1083, 1083,  207, 1083, 1083,
      207, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083,  207, 1083,  207, 1083, 1083, 1055,  207, 1083,
     1083,  207, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056,  207, 1058,  207, 1083,
     1059, 1083, 1057, 1083,  207,  207,  207, 1060, 1083,  207,

      207,  207, 1083,  207,  207,  207,  207, 1083,  207, 1083,
      207, 1083, 1083,  207, 1083,  207, 1058,  207, 1083, 1059,
     1083, 1057, 1083,  207,  207,  207, 1060, 1083,  207,  207,
      207, 1083,  207,  207,  207,  207, 1061,  207,  207,  207,
      207, 1083,  207,  207,  207,  207, 1083,  207,  207,  207,
      207, 1083,  207, 1083,  207, 1062, 1083,  207, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1061, 1083,  207, 1083,  207,
     1083, 1083,  207,  207,  207, 1083,  207,  207,  207,  207,
     1083,  207, 1083,  207, 1062,  207,  207,  207, 1063, 1064,
      207,  207,  207, 1083,  207, 1083,  207, 1083, 1065,  207,

      207,  207,  207,  207, 1083, 1083,  207,  207, 1083,  207,
      207, 1083, 1083, 1083,  207, 1083,  207, 1063, 1064,  207,
      207,  207, 1083,  207, 1083,  207, 1083, 1065,  207,  207,
      207,  207,  207, 1066, 1083,  207,  207, 1083,  207,  207,
     1083,  207,  207,  207,  207, 1083, 1083,  207,  207, 1083,
      207,  207, 1067, 1083,  207, 1083, 1083,  207,  207,  207,
     1083,  207, 1066,  207, 1083, 1083,  207, 1083, 1083, 1083,
      207,  207,  207,  207, 1083, 1083,  207,  207, 1083,  207,
      207, 1067, 1083,  207, 1083, 1083,  207,  207,  207, 1083,
      207, 1083,  207, 1083, 1083,  207,  207, 1068,  207, 1083,

     1083,  207,  207,  207, 1069,  207,  207,  207,  207, 1083,
      207,  207,  207,  207, 1083,  207, 1083,  207, 1083, 1083,
      207, 1083, 1083, 1083, 1083,  207, 1068,  207, 1083, 1083,
      207,  207,  207, 1069,  207,  207,  207,  207, 1070,  207,
      207,  207,  207, 1083,  207,  207,  207,  207, 1083,  207,
      207,  207,  207, 1083,  207,  207,  207,  207, 1083,  207,
     1083,  207, 1083,  207,  207,  207, 1083, 1070, 1083,  207,
     1071, 1083,  207, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  207, 1083,  207,  207,  207,  207, 1083,  207, 1083,
      207, 1083,  207,  207,  207, 1083, 1083, 1083,  207, 1071,

      207,  207,  207, 1083, 1083,  207,  207,  207, 1083,  207,
      207,  207,  207, 1083,  207,  207,  207, 1072, 1083,  207,
     1083,  207, 1083, 1083,  207, 1083, 1083, 1083, 1083,  207,
     1083,  207, 1083, 1083,  207,  207,  207, 1083,  207,  207,
      207,  207, 1083,  207,  207,  207, 1072, 1083,  207, 1073,
      207,  207, 1074,  207, 1083,  207, 1075, 1083,  207, 1083,
      207,  207,  207,  207, 1083, 1083,  207,  207, 1083,  207,
      207, 1083, 1083,  207, 1083,  207, 1083, 1083, 1073,  207,
      207, 1074,  207, 1083,  207, 1075, 1083,  207, 1083,  207,
      207,  207,  207, 1083, 1083,  207,  207, 1083,  207,  207,

     1083,  207,  207,  207,  207, 1077, 1083,  207,  207, 1083,
      207,  207,  207,  207,  207,  207, 1083, 1076,  207,  207,
     1083,  207,  207, 1083, 1083, 1083, 1083, 1083, 1083,  207,
      207,  207,  207, 1083, 1077,  207,  207, 1083,  207,  207,
     1083,  207,  207,  207,  207, 1083, 1076,  207,  207, 1083,
      207,  207, 1083,  207, 1078,  207, 1083, 1083,  207,  207,
      207, 1083,  207,  207,  207,  207, 1083,  207,  207,  207,
      207, 1083,  207, 1083,  207, 1083, 1083,  207, 1083, 1083,
     1079, 1083,  207, 1078,  207, 1083, 1083,  207,  207,  207,
     1083,  207,  207,  207,  207, 1083,  207,  207,  207,  207,

     1083,  207,  207,  207,  207, 1083,  207, 1083,  207, 1079,
     1083,  207, 1083, 1083, 1083,  207,  207,  207,  207, 1080,
     1083,  207,  207, 1083,  207,  207, 1083, 1083, 1083, 1083,
      207,  207,  207,  207, 1083, 1083,  207,  207, 1083,  207,
      207, 1083, 1083,  207,  207,  207,  207, 1083, 1080, 1081,
      207, 1083,  207,  207, 1083, 1083, 1083, 1083, 1083,  207,
      207,  207,  207, 1083, 1083,  207,  207, 1082,  207,  207,
     1083,  207,  207,  207,  207, 1083, 1083,  207, 1081, 1083,
      207,  207, 1083, 1083,  207, 1083,  207, 1083, 1083,  207,
      207,  207, 1083,  207, 1083,  207, 1082, 1083,  207, 1083,

      207, 1083,  207, 1083, 1083, 1083,  207, 1083, 1083,  207,
     1083, 1083, 1083,  207, 1083,  207, 1083, 1083, 1083,  207,
     1083, 1083,  207,   81, 1083,   81,   81,   81,   94, 1083,
       94,   94,   94,  126, 1083,  126,  126,  126,  169,  169,
      169,  601,  601,  601,  601,  601,  649,  649,  649,  649,
      649,  740,  740,   81, 1083,   81,   81,   81,   94, 1083,
       94,   94,   94,  126, 1083,  126,  126,  126,  169,  169,
      169,    3, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083

    } ;

static yyconst flex_int16_t yy_chk[14092] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
     1088,  886,    5,    9,   14,   14,   14,   14,   17,   19,
       17,   19,   22,  885,   22,  884,   14,   31,   34,  883,
       34,   75,   75,   75,   34,   31,   22,   34,   31,   34,
       31,   31,  882,   32,   31,   32,   32,   31,   32,   32,
       31,   78,   32,  148,   78,  148,   31,   34,  148,   34,
        9,  881,  880,   34,   31,   22,   34,   31,   34,   31,
       31,  879,   32,   31,   32,   32,   31,   32,   32,   31,
      871,   32,   49,   49,   49,   49,   67,   67,   67,  869,

       67,   93,   93,   93,   93,   93,   93,    9,  381,   36,
      381,   36,  853,  381,   36,   36,  851,    9,   36,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,  384,   36,  384,
       36,  814,  384,   36,   36,   49,   10,   36,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   11,   69,   69,   69,   69,
       69,   69,   69,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,  122,  122,  122,

      740,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  166,  166,  166,  679,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  678,  677,   11,   11,
      676,   11,   11,   11,   11,   11,   11,   11,   11,  145,
       11,   11,   11,   13,   33,  114,  114,  114,   33,  114,
      675,  145,   33,  674,  385,   33,  385,   33,  670,  385,
       33,   33,   35,  669,   33,   35,   39,   35,   39,  650,
       35,   35,   39,   33,   35,   39,  602,   33,  452,  435,

      145,   33,  400,  389,   33,   13,   33,  388,  371,   33,
       33,   35,  335,   33,   35,   39,   35,   39,  318,   35,
       35,   39,  309,   35,   39,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   13,   87,   87,   87,   87,   87,   87,   87,
      219,  203,   13,  143,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   23,   98,   98,   98,   98,   98,   98,   98,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,  200,  200,  200,  141,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  231,  231,  231,  127,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   82,   57,   23,   23,   52,   23,   23,   23,
       23,   23,   23,   23,   23,   37,   23,   23,   23,   25,
       25,  346,  346,  346,   51,   38,   37,  146,   37,   27,
       41,   38,   37,   38,   41,   37,   38,   38,   41,  146,
       38,   41,   20,   41,   37,   12,  387,   41,  387,    8,

       41,  387,    7,    3,   38,   37,    0,   37,    0,   41,
       38,   37,   38,   41,   37,   38,   38,   41,  146,   38,
       41,    0,   41,  158,  158,  158,   41,  158,    0,   41,
      139,  139,  139,  139,    0,   25,  104,  104,  104,  104,
      104,  104,  139,    0,    0,   25,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,  116,  116,  116,  116,  116,
      116,  116,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  279,  279,  279,  279,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  412,  412,  412,    0,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,    0,    0,   28,   28,  279,
       28,   28,   28,   28,   28,   28,   28,   28,    0,   28,
       28,   28,   30,   30,    0,   30,   30,  138,  138,  138,
      138,  138,  138,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  463,  463,  463,

        0,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  589,  589,  589,    0,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,    0,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   40,
       30,   30,   30,  666,   42,  666,    0,   40,  666,  142,
       40,  142,   40,   40,    0,   42,   40,   42,   42,   40,
        0,   42,    0,  142,   42,  192,  192,  192,   40,  192,
      581,  581,  581,   42,  581,  668,   40,  668,    0,   40,

      668,   40,   40,    0,   42,   40,   42,   42,   40,   43,
       42,    0,  142,   42,    0,   43,  144,   43,  144,   43,
       43,   43,  379,   44,   43,   44,   45,    0,   44,   44,
      144,    0,   44,   45,  379,   45,    0,    0,   43,   45,
        0,    0,   45,    0,   43,    0,   43,    0,   43,   43,
       43,    0,   44,   43,   44,   45,    0,   44,   44,  144,
        0,   44,   45,  379,   45,    0,    0,  147,   45,  147,
        0,   45,   46,   47,  380,   47,   46,    0,   47,   47,
       46,  147,   47,   46,    0,   46,  380,    0,    0,   46,
       46,   46,   46,   48,   48,    0,    0,   48,    0,   48,

        0,   46,   47,   48,   47,   46,   48,   47,   47,   46,
      147,   47,   46,    0,   46,  380,    0,    0,   46,   46,
       46,   46,   48,   48,    0,   54,   48,    0,   48,   54,
        0,    0,   48,   54,    0,   48,  382,  826,  826,  826,
       55,   54,   55,   54,   54,  671,   55,  671,  382,   55,
      671,  673,    0,  673,   54,    0,  673,    0,   54,    0,
        0,    0,   54,  181,  181,  181,  181,  181,  181,   55,
       54,   55,   54,   54,   55,   55,    0,  382,   55,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   65,   65,   65,   65,   65,   65,
       65,   65,    0,   65,   65,   65,   65,    0,   65,   65,
       65,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       81,   83,    0,    0,    0,    0,   83,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,  132,  132,
      132,  132,  132,  132,  132,    0,    0,   81,   83,    0,
        0,    0,    0,   83,  383,    0,    0,   83,  160,  160,
      160,  160,  160,  160,  160,   83,  383,    0,   83,    0,
       83,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,    0,    0,    0,   81,  175,  175,  175,  175,  175,
      175,  175,    0,    0,   81,  383,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   94,  194,  194,  194,  194,  194,  194,  194,    0,
        0,   94,    0,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  105,
      225,  225,  225,  225,  225,  225,  225,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,    0,    0,    0,    0,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
        0,    0,    0,    0,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
        0,  105,  105,  105,    0,  105,  105,  105,  105,  105,
      105,  105,  105,    0,  105,  105,  105,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  112,
      112,  112,  112,  112,  112,  112,  112,    0,  112,  112,
      112,  112,    0,  112,  112,  112,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  124,  124,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  126,  128,    0,    0,    0,
        0,  128,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,    0,    0,    0,    0,  126,  303,  303,
      303,  303,  303,  128,    0,    0,    0,    0,  128,    0,
        0,    0,  128,  340,  340,  340,  340,  340,  340,  340,
      128,    0,    0,  128,    0,  128,  156,  156,  156,  156,
      156,  156,  156,  156,  126,  156,  156,  156,  156,    0,

      156,  156,  156,    0,  126,    0,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  149,  149,    0,  149,  365,  365,  365,  365,  365,
        0,    0,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,    0,    0,    0,    0,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,    0,    0,    0,    0,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,    0,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,    0,  149,
      149,  149,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  169,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,

      174,  174,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  431,  431,  431,  431,  431,    0,  169,  406,
      406,  406,  406,  406,  406,  406,    0,    0,  169,    0,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  183,  457,
      457,  457,  457,  457,  457,  457,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
        0,    0,    0,    0,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,    0,
        0,    0,    0,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,    0,
      183,  183,  183,    0,  183,  183,  183,  183,  183,  183,

      183,  183,    0,  183,  183,  183,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  189,  189,  189,  189,  189,  189,  189,  189,  189,

      189,  189,  189,  189,  189,  189,  189,  189,  190,  190,
      190,  190,  190,  190,  190,  190,    0,  190,  190,  190,
      190,    0,  190,  190,  190,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  204,  205,  204,  386,  667,  207,
      204,  207,    0,  204,  672,  207,    0,    0,  207,  386,
      667,    0,  208,  205,  208,  205,  672,    0,  208,  205,
        0,  208,  205,  204,    0,  204,    0,    0,  207,  204,

      207,    0,  204,    0,  207,    0,    0,  207,  386,  667,
        0,  208,  205,  208,  205,  672,    0,  208,  205,    0,
      208,  205,  209,    0,  209,    0,    0,  210,  209,    0,
        0,  209,  211,    0,  209,  210,  210,  211,  210,  211,
        0,    0,  210,  211,    0,  210,  211,    0,    0,    0,
        0,  209,    0,  209,    0,    0,  210,  209,    0,    0,
      209,  211,    0,  209,  210,  210,  211,  210,  211,    0,
        0,  210,  211,    0,  210,  211,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  220,  220,  220,  220,  220,

      220,  220,  220,    0,  220,  220,  220,  220,    0,  220,
      220,  220,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  234,  235,  234,  235,    0,
        0,  234,  235,    0,  234,  235,  236,    0,  236,  236,

        0,  237,  236,  237,    0,  236,    0,  237,    0,  237,
      237,    0,    0,    0,  234,  235,  234,  235,    0,    0,
      234,  235,    0,  234,  235,  236,    0,  236,  236,    0,
      237,  236,  237,  239,  236,  238,  237,  238,  237,  237,
      239,  238,  239,    0,  238,    0,  239,  241,  240,  239,
        0,    0,    0,    0,  241,    0,  241,    0,    0,  240,
      241,  240,  239,  241,  238,  240,  238,  240,  240,  239,
      238,  239,    0,  238,    0,  239,  241,  240,  239,    0,
        0,    0,    0,  241,    0,  241,    0,    0,  240,  241,
      240,    0,  241,  242,  240,  242,  240,  240,  243,  242,

      242,    0,  242,  244,  243,  244,  243,    0,    0,  244,
      243,    0,  244,  243,  245,    0,  245,  245,    0,    0,
      245,    0,  242,  245,  242,    0,    0,  243,  242,  242,
        0,  242,  244,  243,  244,  243,    0,    0,  244,  243,
      246,  244,  243,  245,    0,  245,  245,    0,  246,  245,
      246,    0,  245,  247,  246,    0,  247,  246,  247,    0,
        0,  248,  247,  248,    0,  247,    0,  248,    0,  246,
      248,    0,  249,    0,  249,  249,    0,  246,  249,  246,
        0,  249,  247,  246,    0,  247,  246,  247,    0,    0,
      248,  247,  248,    0,  247,  250,  248,    0,    0,  248,

        0,  249,    0,  249,  249,    0,  250,  249,  250,  250,
      249,  251,  250,  251,    0,  250,  252,  251,  252,    0,
      251,  253,  252,  253,  250,  252,    0,  253,  253,    0,
      253,    0,    0,    0,    0,  250,    0,  250,  250,    0,
      251,  250,  251,    0,  250,  252,  251,  252,    0,  251,
      253,  252,  253,    0,  252,  254,  253,  253,  254,  253,
      254,  255,    0,  256,  254,  256,    0,  254,  255,  256,
        0,  255,  256,  255,    0,    0,    0,  255,    0,  255,
      255,    0,    0,    0,  254,    0,    0,  254,    0,  254,
      255,    0,  256,  254,  256,    0,  254,  255,  256,    0,

      255,  256,  255,    0,  258,    0,  255,    0,  255,  255,
      257,  257,  257,    0,    0,  258,  257,  258,    0,  257,
      259,  258,  259,    0,  258,    0,  259,    0,    0,  259,
        0,  259,    0,  258,  482,  482,  482,  482,  482,  257,
      257,  257,    0,    0,  258,  257,  258,    0,  257,  259,
      258,  259,    0,  258,    0,  259,    0,    0,  259,    0,
      259,  260,  260,  260,    0,    0,  261,  260,  261,    0,
      260,    0,  261,    0,    0,  261,  262,  262,  262,    0,
        0,    0,  262,    0,    0,  262,    0,    0,    0,    0,
      260,  260,  260,    0,    0,  261,  260,  261,    0,  260,

        0,  261,    0,    0,  261,  262,  262,  262,    0,    0,
      263,  262,  263,    0,  262,  264,  263,  263,    0,  263,
        0,  264,  265,  264,  265,    0,  266,  264,  265,  265,
      264,  265,    0,    0,  266,    0,  266,    0,    0,  263,
      266,  263,    0,  266,  264,  263,  263,    0,  263,    0,
      264,  265,  264,  265,    0,  266,  264,  265,  265,  264,
      265,  267,    0,  266,    0,  266,    0,    0,  267,  266,
      267,    0,  266,    0,  267,  268,    0,  267,  268,    0,
        0,    0,  270,  268,  270,  268,  270,  270,  270,  268,
      267,  270,  268,    0,    0,    0,    0,  267,    0,  267,

        0,    0,    0,  267,  268,    0,  267,  268,    0,    0,
        0,  270,  268,  270,  268,  270,  270,  270,  268,    0,
      270,  268,  269,  269,  269,  277,  272,  271,  269,  271,
        0,  269,  277,  271,  277,    0,  271,  272,  277,  272,
        0,  277,  272,  272,    0,    0,  272,    0,    0,    0,
        0,  269,  269,  269,  277,  272,  271,  269,  271,    0,
      269,  277,  271,  277,    0,  271,  272,  277,  272,    0,
      277,  272,  272,    0,    0,  272,  273,  273,  273,  274,
        0,    0,  273,  275,  274,  273,  275,  274,  275,  274,
      274,    0,  275,  274,    0,  275,  274,  510,  510,  510,

      510,  510,    0,    0,    0,  273,  273,  273,  274,    0,
        0,  273,  275,  274,  273,  275,  274,  275,  274,  274,
        0,  275,  274,  276,  275,  274,  276,  278,  276,  278,
        0,    0,  276,  278,  278,  276,  278,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  276,  338,    0,  276,  278,  276,  278,    0,
        0,  276,  278,  278,  276,  278,  282,  583,  583,  583,
      583,  583,  583,  583,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,    0,    0,

        0,    0,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,    0,    0,    0,
        0,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,    0,    0,  282,
      282,    0,  282,  282,  282,  282,  282,  282,  282,  282,
        0,  282,  282,  282,  283,    0,  283,    0,    0,  284,
      283,  284,    0,  283,  286,  284,  286,    0,  284,  287,
      286,  287,    0,  286,    0,  287,    0,    0,  287,    0,
        0,    0,    0,  283,    0,  283,    0,    0,  284,  283,

      284,    0,  283,  286,  284,  286,  284,  284,  287,  286,
      287,    0,  286,  288,  287,  288,    0,  287,  289,  288,
      289,    0,  288,  290,  289,  290,    0,  289,  291,  290,
      291,    0,  290,    0,  291,    0,    0,  291,    0,    0,
        0,    0,  288,    0,  288,    0,    0,  289,  288,  289,
        0,  288,  290,  289,  290,    0,  289,  291,  290,  291,
        0,  290,  292,  291,  292,    0,  291,    0,  292,    0,
        0,  292,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,    0,
        0,  292,    0,  292,    0,    0,    0,  292,    0,    0,

      292,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  299,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  307,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  308,  308,  308,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,    0,    0,  307,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
        0,    0,  307,  607,  607,  607,  607,  607,  607,  607,
        0,    0,  307,    0,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,

      319,  319,  319,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  336,  336,  336,  336,  336,  336,
      336,  336,    0,  336,  336,  336,  336,    0,  336,  336,
      336,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  369,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  613,
      613,  613,  613,  613,  613,    0,  369,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374,    0,    0,  369,  639,  639,  639,  639,  639,    0,
        0,    0,    0,  369,    0,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  375,  375,  375,  376,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  377,  377,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      395,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  401,
      401,  401,  401,  401,  401,  401,  401,    0,  401,  401,
      401,  401,    0,  401,  401,  401,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,

      409,  409,  409,  409,  409,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  423,  423,  423,  423,  423,  423,  423,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  446,  446,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,

      450,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  453,  453,
      453,  453,  453,  453,  453,  453,    0,  453,  453,  453,
      453,    0,  453,  453,  453,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,    0,  455,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  472,  472,  472,  472,  472,  472,  472,  472,  472,

      472,  472,  472,  472,  472,  472,  472,  472,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  473,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  478,  478,  478,  478,  478,  478,  478,

      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  486,  487,  486,  487,    0,

        0,  486,  487,    0,  486,  487,  488,  489,  488,  489,
        0,    0,  488,  489,    0,  488,  489,  655,  655,  655,
      655,  655,  655,  655,  486,  487,  486,  487,    0,    0,
      486,  487,    0,  486,  487,  488,  489,  488,  489,    0,
        0,  488,  489,    0,  488,  489,  490,  491,  490,  491,
        0,    0,  490,  491,    0,  490,  491,  492,  493,  492,
      493,    0,    0,  492,  493,    0,  492,  493,  661,  661,
      661,  661,  661,  661,    0,  490,  491,  490,  491,    0,
        0,  490,  491,    0,  490,  491,  492,  493,  492,  493,
        0,    0,  492,  493,    0,  492,  493,  494,  495,  494,

      495,    0,    0,  494,  495,    0,  494,  495,  496,  497,
      496,  497,    0,    0,  496,  497,    0,  496,  497,  699,
      699,  699,  699,  699,    0,    0,  494,  495,  494,  495,
        0,    0,  494,  495,    0,  494,  495,  496,  497,  496,
      497,    0,    0,  496,  497,    0,  496,  497,  498,  499,
      498,  499,    0,    0,  498,  499,    0,  498,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,    0,  498,  499,  498,
      499,    0,    0,  498,  499,    0,  498,  499,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,

      501,  501,  501,  501,  501,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      507,  507,  507,  507,  507,  507,  507,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  513,    0,    0,    0,  514,
        0,    0,  513,    0,  513,    0,    0,  514,  513,  514,
        0,  513,  515,  514,    0,    0,  514,    0,    0,    0,

      515,  516,  515,  516,  513,    0,  515,  516,  514,  515,
      516,  513,    0,  513,    0,    0,  514,  513,  514,    0,
      513,  515,  514,    0,    0,  514,    0,    0,    0,  515,
      516,  515,  516,  517,    0,  515,  516,    0,  515,  516,
        0,    0,    0,  518,  517,  518,  517,    0,    0,  518,
      517,    0,  518,  517,  519,  520,  519,  520,    0,    0,
      519,  520,  517,  519,  520,  730,  730,  730,  730,  730,
        0,    0,  518,  517,  518,  517,    0,    0,  518,  517,
        0,  518,  517,  519,  520,  519,  520,  521,  522,  519,
      520,    0,  519,  520,    0,    0,    0,    0,  521,  522,

      521,  522,  523,    0,  521,  522,    0,  521,  522,    0,
        0,    0,    0,  523,    0,  523,  521,  522,    0,  523,
        0,    0,  523,    0,    0,    0,    0,  521,  522,  521,
      522,  523,    0,  521,  522,    0,  521,  522,    0,    0,
      524,    0,  523,  525,  523,    0,    0,  524,  523,  524,
        0,  523,  525,  524,  525,    0,  524,  526,  525,  526,
        0,  525,    0,  526,  526,    0,  526,    0,    0,  524,
        0,  527,  525,  527,    0,  527,  524,  527,  524,    0,
      527,  525,  524,  525,    0,  524,  526,  525,  526,    0,
      525,    0,  526,  526,    0,  526,    0,    0,    0,  528,

      527,  528,  527,    0,  527,  528,  527,    0,  528,  527,
      529,  530,  529,  530,    0,    0,  529,  530,  530,  529,
      530,    0,    0,  531,  531,  531,    0,    0,  528,  531,
      528,    0,  531,    0,  528,    0,    0,  528,    0,  529,
      530,  529,  530,    0,    0,  529,  530,  530,  529,  530,
        0,    0,  531,  531,  531,    0,    0,    0,  531,    0,
      532,  531,  532,    0,  532,  533,  532,  533,    0,  532,
        0,  533,  534,  533,  533,  534,    0,  534,    0,    0,
        0,  534,    0,    0,  534,    0,    0,    0,    0,  532,
        0,  532,    0,  532,  533,  532,  533,    0,  532,    0,

      533,  534,  533,  533,  534,  535,  534,    0,    0,    0,
      534,    0,  535,  534,  535,    0,    0,  536,  535,  536,
      536,  535,  537,  536,  537,    0,  536,  538,  537,  538,
        0,  537,    0,  538,  535,    0,  538,    0,    0,    0,
        0,  535,    0,  535,    0,    0,  536,  535,  536,  536,
      535,  537,  536,  537,    0,  536,  538,  537,  538,    0,
      537,  539,  538,  539,    0,  538,  539,  539,  540,    0,
      539,  540,    0,  540,    0,    0,  541,  540,  541,    0,
      540,    0,  541,    0,  541,  541,    0,    0,    0,    0,
      539,    0,  539,    0,    0,  539,  539,  540,    0,  539,

      540,    0,  540,    0,    0,  541,  540,  541,    0,  540,
      542,  541,  542,  541,  541,  542,  542,  543,  544,  542,
        0,  544,  543,  544,  543,    0,  545,  544,  543,    0,
      544,  543,    0,    0,  545,    0,  545,    0,    0,  542,
      545,  542,    0,  545,  542,  542,  543,  544,  542,    0,
      544,  543,  544,  543,    0,  545,  544,  543,    0,  544,
      543,    0,  546,  545,  546,  545,  547,    0,  546,  545,
        0,  546,  545,    0,    0,  548,  547,  548,  547,    0,
        0,  548,  547,  548,  548,  547,  845,  845,  845,  845,
      845,  546,    0,  546,    0,  547,    0,  546,    0,    0,

      546,    0,    0,    0,  548,  547,  548,  547,  549,    0,
      548,  547,  548,  548,  547,  549,  550,  549,  550,    0,
        0,  549,  550,    0,  549,  550,  551,    0,  551,    0,
        0,  552,  551,    0,  552,  551,  552,  549,    0,    0,
      552,    0,    0,  552,  549,  550,  549,  550,    0,    0,
      549,  550,    0,  549,  550,  551,    0,  551,    0,    0,
      552,  551,  554,  552,  551,  552,  553,    0,  554,  552,
      554,    0,  552,  553,  554,  553,  556,  554,  555,  553,
      555,    0,  553,  556,  555,  556,  555,  555,    0,  556,
        0,  554,  556,    0,    0,  553,    0,  554,    0,  554,

        0,    0,  553,  554,  553,  556,  554,  555,  553,  555,
        0,  553,  556,  555,  556,  555,  555,  557,  556,    0,
        0,  556,  558,  559,  557,    0,  557,    0,  557,  558,
      557,  558,    0,  557,  559,  558,  559,    0,  558,  560,
      559,  560,    0,  559,    0,  560,  557,    0,  560,    0,
        0,  558,  559,  557,    0,  557,    0,  557,  558,  557,
      558,    0,  557,  559,  558,  559,  561,  558,  560,  559,
      560,    0,  559,  561,  560,  561,    0,  560,  562,  561,
      562,    0,  561,  562,  562,    0,  563,  562,  972,  972,
      972,  972,  972,    0,  563,  561,  563,    0,    0,    0,

      563,    0,  561,  563,  561,    0,    0,  562,  561,  562,
        0,  561,  562,  562,    0,  563,  562,    0,  564,    0,
      564,  565,    0,  563,  564,  563,    0,  564,  565,  563,
      565,    0,  563,  566,  565,  566,  566,  565,    0,  566,
        0,    0,  566,    0,    0,    0,  567,  564,  567,  564,
      565,  567,  567,  564,    0,  567,  564,  565,    0,  565,
        0,    0,  566,  565,  566,  566,  565,  568,  566,  568,
        0,  566,    0,  568,    0,  567,  568,  567,    0,    0,
      567,  567,    0,  569,  567,  569,    0,    0,  570,  569,
      570,    0,  569,  570,  570,    0,  568,  570,  568,    0,

      571,    0,  568,    0,  571,  568,  571,    0,    0,    0,
      571,    0,  569,  571,  569,    0,    0,  570,  569,  570,
        0,  569,  570,  570,    0,    0,  570,    0,    0,  571,
        0,    0,    0,  571,    0,  571,    0,    0,    0,  571,
        0,    0,  571,  572,  572,    0,  572,  820,  820,  820,
      820,  820,  820,  820,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,    0,    0,
        0,    0,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,    0,    0,    0,
        0,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,    0,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
        0,  572,  572,  572,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  576,  576,  576,  576,  576,

      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  579,  579,  579,  579,
      579,  579,  579,  579,    0,  579,  579,  579,  579,    0,
      579,  579,  579,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      582,  582,  582,  582,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  592,  593,  592,  593,    0,    0,  592,  593,
        0,  592,  593,  594,  595,  594,  595,    0,    0,  594,
      595,    0,  594,  595,    0,  593,    0,    0,    0,    0,
        0,  592,  593,  592,  593,    0,    0,  592,  593,    0,
      592,  593,  594,  595,  594,  595,    0,    0,  594,  595,
        0,  594,  595,  596,  597,  596,  597,    0,    0,  596,
      597,    0,  596,  597,  598,    0,  598,    0,    0,    0,
      598,    0,    0,  598,    0,    0,    0,    0,    0,    0,
        0,    0,  596,  597,  596,  597,    0,    0,  596,  597,
        0,  596,  597,  598,    0,  598,  603,    0,    0,  598,

        0,  603,  598,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  601,    0,    0,
        0,    0,    0,  603,    0,    0,    0,    0,  603,    0,
        0,    0,  603,    0,    0,    0,    0,    0,    0,    0,
      603,    0,    0,  603,    0,  603,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,    0,    0,  601,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,

      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,    0,    0,    0,
        0,  601,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  601,    0,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  611,  611,  611,  611,  611,  611,

      611,  611,  611,  611,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  614,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,    0,    0,  614,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,    0,    0,  614,    0,  741,    0,  741,
        0,    0,    0,  741,    0,  614,  741,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  618,    0,  741,    0,  741,    0,
        0,    0,  741,    0,  618,  741,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  635,

      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  640,  640,  640,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  640,  640,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  649,  651,    0,    0,    0,
        0,  651,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  742,    0,  742,    0,  649,  743,  742,
      743,    0,  742,  651,  743,    0,    0,  743,  651,    0,
        0,    0,  651,    0,    0,    0,    0,    0,    0,    0,

      651,    0,  742,  651,  742,  651,    0,  743,  742,  743,
        0,  742,    0,  743,  649,    0,  743,    0,    0,    0,
        0,    0,    0,    0,  649,    0,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  662,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,    0,    0,    0,    0,
        0,    0,    0,  662,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,    0,    0,

      662,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      662,    0,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,  697,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      709,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  711,  711,
      711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  711,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  815,  815,  815,  815,  815,  815,  815,  815,
        0,  815,  815,  815,  815,  709,  815,  815,  815,    0,
        0,    0,    0,    0,    0,  709,    0,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  723,  723,  723,  723,  723,

      723,  723,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  723,  724,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  724,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  729,  729,  729,

      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  744,  745,  744,  745,    0,    0,  744,  745,
        0,  744,  745,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
        0,  744,  745,  744,  745,    0,    0,  744,  745,    0,
      744,  745,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  748,
        0,  748,    0,    0,  749,  748,    0,  749,  748,  749,
      750,    0,    0,  749,    0,    0,  749,  750,    0,  750,
        0,    0,    0,  750,    0,    0,  750,    0,  748,    0,
      748,    0,    0,  749,  748,    0,  749,  748,  749,  750,
        0,    0,  749,  751,    0,  749,  750,    0,  750,    0,
        0,  751,  750,  751,    0,  750,  752,  751,  752,    0,

      751,  752,  752,    0,  754,  752,  754,    0,  753,    0,
      754,  754,  751,  754,    0,  753,    0,  753,    0,    0,
      751,  753,  751,    0,  753,  752,  751,  752,    0,  751,
      752,  752,    0,  754,  752,  754,    0,  753,    0,  754,
      754,    0,  754,    0,  753,  755,  753,  755,    0,    0,
      753,  755,  755,  753,  755,  756,    0,  756,    0,    0,
        0,  756,  756,  757,  756,  757,    0,    0,    0,  757,
      757,    0,  757,    0,  755,    0,  755,    0,    0,    0,
      755,  755,    0,  755,  756,    0,  756,    0,    0,    0,
      756,  756,  757,  756,  757,    0,    0,    0,  757,  757,

      758,  757,  758,    0,    0,  759,  758,  759,  758,  758,
        0,  759,  759,  760,  759,  760,    0,    0,  760,  760,
        0,  761,  760,    0,  761,    0,  761,    0,    0,  758,
      761,  758,    0,  761,  759,  758,  759,  758,  758,    0,
      759,  759,  760,  759,  760,    0,    0,  760,  760,    0,
      761,  760,  762,  761,  762,  761,    0,    0,  762,  761,
        0,  762,  761,  763,  764,  763,  764,    0,    0,  763,
      764,  764,  763,  764,    0,  765,    0,    0,    0,    0,
        0,  762,  765,  762,  765,    0,    0,  762,  765,    0,
      762,  765,  763,  764,  763,  764,    0,    0,  763,  764,

      764,  763,  764,  766,  765,  766,    0,    0,    0,  766,
        0,  765,  766,  765,    0,  767,    0,  765,    0,  767,
      765,  767,    0,    0,    0,  767,    0,  768,  767,  768,
        0,  768,  766,  768,  766,    0,  768,  769,  766,  769,
        0,  766,    0,  769,  767,    0,  769,    0,  767,    0,
      767,    0,    0,    0,  767,    0,  768,  767,  768,    0,
      768,  771,  768,  771,    0,  768,  769,  771,  769,    0,
      771,  770,  769,  770,  772,  769,  770,  770,    0,    0,
      770,    0,    0,    0,    0,  772,    0,  772,    0,    0,
      771,  772,  771,    0,  772,    0,  771,    0,    0,  771,

      770,    0,  770,  772,    0,  770,  770,    0,    0,  770,
      773,    0,    0,  773,  772,  773,  772,    0,    0,  773,
      772,    0,  773,  772,  774,    0,  774,    0,    0,    0,
      774,  774,    0,  774,  775,  775,  775,    0,    0,  773,
      775,    0,  773,  775,  773,    0,    0,    0,  773,  776,
        0,  773,  776,  774,  776,  774,    0,    0,  776,  774,
      774,  776,  774,  775,  775,  775,    0,    0,    0,  775,
        0,    0,  775,  777,  777,  777,    0,    0,  776,  777,
        0,  776,  777,  776,    0,    0,  778,  776,  778,    0,
      776,    0,  778,  778,    0,  778,    0,    0,    0,    0,

        0,    0,  777,  777,  777,    0,    0,  779,  777,  779,
        0,  777,    0,  779,    0,  778,  779,  778,  780,    0,
        0,  778,  778,    0,  778,  780,  781,  780,  781,  782,
        0,  780,  781,    0,  780,  781,  779,  782,  779,  782,
        0,    0,  779,  782,    0,  779,  782,  780,    0,    0,
        0,    0,    0,    0,  780,  781,  780,  781,  782,    0,
      780,  781,    0,  780,  781,    0,  782,  783,  782,    0,
        0,    0,  782,    0,  783,  782,  783,    0,    0,  784,
      783,  784,  784,  783,  785,  784,  785,    0,  784,  785,
      785,    0,  786,  785,    0,  786,  783,  786,    0,    0,

        0,  786,    0,  783,  786,  783,    0,    0,  784,  783,
      784,  784,  783,  785,  784,  785,  787,  784,  785,  785,
        0,  786,  785,    0,  786,  787,  786,  787,    0,    0,
      786,  787,    0,  786,  787,  788,    0,  788,    0,    0,
        0,  788,    0,    0,  788,  787,  788,    0,    0,  790,
        0,  790,    0,    0,  787,  790,  787,    0,  790,    0,
      787,    0,    0,  787,  788,  789,  788,  789,  791,    0,
      788,  789,  789,  788,  789,  788,    0,  791,  790,  791,
      790,    0,    0,  791,  790,    0,  791,  790,    0,    0,
        0,    0,    0,  792,  789,  792,  789,  791,  792,  792,

      789,  789,  792,  789,  793,    0,  791,  793,  791,  793,
        0,    0,  791,  793,    0,  791,  793,  794,    0,  794,
        0,    0,  792,  794,  792,    0,  794,  792,  792,    0,
        0,  792,    0,  793,    0,    0,  793,    0,  793,    0,
        0,    0,  793,    0,    0,  793,  794,  795,  794,  795,
        0,    0,  794,  795,  795,  794,  795,  796,    0,  796,
      797,    0,    0,  796,  796,    0,  796,    0,    0,    0,
        0,  797,    0,  797,    0,    0,  795,  797,  795,    0,
      797,    0,  795,  795,    0,  795,  796,    0,  796,  797,
        0,    0,  796,  796,    0,  796,    0,    0,    0,  798,

      797,    0,  797,    0,    0,  798,  797,  798,    0,  797,
      799,  798,  799,  800,  798,  801,  799,    0,    0,  799,
      801,  800,  801,  800,    0,    0,  801,  800,  798,  801,
      800,    0,    0,    0,  798,    0,  798,    0,    0,  799,
      798,  799,  800,  798,  801,  799,    0,    0,  799,  801,
      800,  801,  800,  802,    0,  801,  800,    0,  801,  800,
      802,  803,  802,  803,    0,    0,  802,  803,    0,  802,
      803,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,    0,  802,    0,    0,    0,    0,    0,    0,  802,
      803,  802,  803,    0,    0,  802,  803,    0,  802,  803,

      807,  807,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  813,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,

      821,  821,  821,  821,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  836,

      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,

      841,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
      844,  844,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  848,  849,  848,  849,
        0,    0,  848,  849,    0,  848,  849,  850,    0,  850,

        0,    0,    0,  850,    0,    0,  850,    0,  848,    0,
        0,    0,    0,    0,    0,  848,  849,  848,  849,    0,
        0,  848,  849,    0,  848,  849,  850,    0,  850,    0,
        0,    0,  850,    0,    0,  850,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,

      856,  856,  856,  856,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  866,  866,  866,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  866,  866,  866,  866,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,

      867,  867,  867,  867,  867,  867,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      873,  873,  873,  873,  873,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  873,  873,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  876,  876,  876,  876,  876,  876,  876,  876,  876,

      876,  876,  876,  876,  876,  876,  876,  876,  877,  877,
      877,  877,  877,  877,  877,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      878,  878,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  901,  901,  901,  901,  901,  901,  901,

      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      903,  904,  903,  904,    0,    0,  903,  904,    0,  903,
      904,  905,  906,  905,  906,    0,    0,  905,  906,    0,
      905,  906,    0,    0,    0,    0,    0,    0,    0,  903,
      904,  903,  904,    0,    0,  903,  904,    0,  903,  904,
      905,  906,  905,  906,    0,    0,  905,  906,    0,  905,
      906,  907,  908,  907,  908,    0,    0,  907,  908,    0,
      907,  908,  909,  910,  909,  910,    0,  909,  909,  910,
        0,  909,  910,    0,    0,    0,    0,    0,    0,    0,
      907,  908,  907,  908,    0,    0,  907,  908,    0,  907,

      908,  909,  910,  909,  910,  911,  909,  909,  910,    0,
      909,  910,  911,  912,  911,  912,    0,    0,  911,  912,
        0,  911,  912,    0,  913,  912,  913,    0,    0,    0,
      913,    0,    0,  913,  911,    0,    0,    0,    0,    0,
        0,  911,  912,  911,  912,    0,    0,  911,  912,    0,
      911,  912,    0,  913,  912,  913,  914,    0,    0,  913,
        0,  915,  913,  914,  915,  914,  915,    0,    0,  914,
      915,    0,  914,  915,  916,  917,  916,  917,    0,    0,
      916,  917,    0,  916,  917,  914,    0,    0,    0,    0,
      915,    0,  914,  915,  914,  915,    0,    0,  914,  915,

        0,  914,  915,  916,  917,  916,  917,    0,    0,  916,
      917,    0,  916,  917,  918,  919,  918,  919,    0,  918,
      918,  919,    0,  918,  919,  920,    0,  920,    0,    0,
        0,  920,    0,    0,  920,    0,    0,    0,    0,    0,
        0,    0,  920,  918,  919,  918,  919,    0,  918,  918,
      919,    0,  918,  919,  920,    0,  920,  921,    0,    0,
      920,    0,  921,  920,  921,    0,    0,  922,  921,  922,
        0,  921,    0,  922,  922,  923,  922,  923,    0,    0,
        0,  923,    0,  924,  923,  924,  921,    0,    0,  924,
        0,  921,  924,  921,    0,    0,  922,  921,  922,    0,

      921,    0,  922,  922,  923,  922,  923,    0,    0,    0,
      923,    0,  924,  923,  924,  925,  926,    0,  924,    0,
        0,  924,  925,  926,  925,  926,    0,    0,  925,  926,
      928,  925,  926,  927,    0,  927,    0,    0,    0,  927,
        0,  928,  927,  928,  925,  926,    0,  928,    0,    0,
      928,  925,  926,  925,  926,    0,    0,  925,  926,  928,
      925,  926,  927,    0,  927,    0,    0,    0,  927,    0,
      928,  927,  928,    0,    0,  929,  928,  929,    0,  928,
      930,  929,  930,    0,  929,  930,  930,    0,  931,  930,
      931,    0,    0,  932,  931,  932,    0,  931,    0,  932,

        0,    0,  932,    0,  929,    0,  929,    0,    0,  930,
      929,  930,    0,  929,  930,  930,    0,  931,  930,  931,
        0,    0,  932,  931,  932,    0,  931,  933,  932,  933,
        0,  932,    0,  933,  933,  934,  933,  934,    0,    0,
      935,  934,  935,    0,  934,    0,  935,    0,  936,  935,
      936,    0,    0,    0,  936,    0,  933,  936,  933,  936,
        0,    0,  933,  933,  934,  933,  934,    0,    0,  935,
      934,  935,    0,  934,    0,  935,    0,  936,  935,  936,
      937,    0,    0,  936,    0,    0,  936,  937,  936,  937,
      939,    0,  938,  937,  938,  940,  937,  939,  938,  939,

        0,  938,  940,  939,  940,    0,  939,    0,  940,  937,
        0,  940,    0,    0,    0,    0,  937,    0,  937,  939,
        0,  938,  937,  938,  940,  937,  939,  938,  939,    0,
      938,  940,  939,  940,    0,  939,  941,  940,  941,  942,
      940,    0,  941,  941,    0,  941,  943,    0,    0,    0,
      942,    0,  942,    0,    0,  943,  942,  943,    0,  942,
        0,  943,    0,    0,  943,  941,    0,  941,  942,    0,
        0,  941,  941,    0,  941,  943,    0,    0,    0,  942,
        0,  942,    0,    0,  943,  942,  943,    0,  942,  944,
      943,  944,    0,  943,    0,  944,  944,  945,  944,  945,

        0,    0,  946,  945,  946,    0,  945,  947,  946,  947,
        0,  946,    0,  947,    0,    0,  947,    0,  944,    0,
      944,    0,    0,    0,  944,  944,  945,  944,  945,    0,
        0,  946,  945,  946,    0,  945,  947,  946,  947,    0,
      946,  948,  947,  948,  950,  947,  949,  948,  949,    0,
      948,  950,  949,  950,    0,  949,  951,  950,  951,    0,
      950,    0,  951,    0,    0,  951,    0,    0,    0,    0,
      948,    0,  948,  950,    0,  949,  948,  949,    0,  948,
      950,  949,  950,    0,  949,  951,  950,  951,    0,  950,
      952,  951,  952,    0,  951,    0,  952,    0,    0,  952,

      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,    0,    0,  952,
        0,  952,    0,    0,    0,  952,    0,    0,  952,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  967,  967,  967,

      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  969,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  974,

      974,  974,  974,  974,  974,  974,  974,  974,  974,  974,
      974,  974,  974,  974,  974,  974,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      982,    0,  982,    0,    0,    0,  982,    0,    0,  982,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985,    0,    0,  982,
        0,  982,    0,    0,    0,  982,    0,    0,  982,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,

      986,  986,  986,  986,  986,  986,  987,  987,  987,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      987,  987,  987,  991,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  993,  993,  993,
      993,  993,  993,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  993,  996,  997,    0,    0,    0,  996,
        0,  996,    0,    0,  997,  996,  997,    0,  996,  998,
      997,  998,    0,  997,    0,  998,    0,  998,  998,    0,

      999,    0,  999,  996,  997,    0,  999,    0,  996,  999,
      996,    0,    0,  997,  996,  997,    0,  996,  998,  997,
      998,    0,  997,    0,  998,    0,  998,  998, 1000,  999,
     1000,  999, 1000,    0, 1000,  999,    0, 1000,  999, 1001,
        0, 1001,    0,    0,    0, 1001, 1001, 1002, 1001, 1002,
        0,    0,    0, 1002,    0,    0, 1002, 1000,    0, 1000,
        0, 1000,    0, 1000,    0,    0, 1000,    0, 1001,    0,
     1001, 1003,    0,    0, 1001, 1001, 1002, 1001, 1002,    0,
     1004, 1003, 1002, 1003,    0, 1002,    0, 1003,    0, 1004,
     1003, 1004,    0,    0,    0, 1004,    0, 1005, 1004, 1005,

     1003,    0, 1006, 1005, 1006,    0, 1005,    0, 1006, 1004,
     1003, 1006, 1003,    0,    0,    0, 1003,    0, 1004, 1003,
     1004,    0,    0,    0, 1004,    0, 1005, 1004, 1005,    0,
     1007, 1006, 1005, 1006,    0, 1005,    0, 1006,    0, 1007,
     1006, 1007,    0,    0, 1008, 1007, 1008,    0, 1007, 1009,
     1008, 1009,    0, 1008,    0, 1009,    0,    0, 1009, 1007,
        0,    0, 1010, 1010,    0, 1010,    0,    0, 1007, 1010,
     1007,    0, 1010, 1008, 1007, 1008,    0, 1007, 1009, 1008,
     1009,    0, 1008,    0, 1009,    0,    0, 1009,    0,    0,
        0, 1010, 1010,    0, 1010,    0,    0, 1011, 1010, 1011,

        0, 1010, 1011, 1011,    0, 1012, 1011, 1012,    0,    0,
     1012, 1012,    0, 1013, 1012, 1013,    0,    0,    0, 1013,
     1013, 1014, 1013, 1014,    0,    0, 1011, 1014, 1011,    0,
     1014, 1011, 1011,    0, 1012, 1011, 1012,    0,    0, 1012,
     1012,    0, 1013, 1012, 1013,    0,    0,    0, 1013, 1013,
     1014, 1013, 1014,    0, 1016, 1015, 1014, 1015,    0, 1014,
     1017, 1015, 1017,    0, 1015, 1016, 1017, 1016, 1018, 1017,
        0, 1016,    0,    0, 1016,    0, 1018,    0, 1018,    0,
        0,    0, 1018, 1016, 1015, 1018, 1015,    0,    0, 1017,
     1015, 1017,    0, 1015, 1016, 1017, 1016, 1018, 1017,    0,

     1016,    0,    0, 1016, 1019, 1018, 1019, 1018,    0, 1019,
     1019, 1018,    0, 1019, 1018, 1020, 1021, 1020, 1021,    0,
        0, 1020, 1021,    0, 1020, 1021,    0,    0,    0,    0,
        0,    0,    0, 1019, 1022, 1019, 1022,    0, 1019, 1019,
     1022, 1022, 1019, 1022, 1020, 1021, 1020, 1021, 1023,    0,
     1020, 1021,    0, 1020, 1021, 1023,    0, 1023,    0,    0,
        0, 1023,    0, 1022, 1023, 1022,    0,    0,    0, 1022,
     1022,    0, 1022, 1024, 1025, 1024, 1025, 1023,    0, 1024,
     1025,    0, 1024, 1025, 1023,    0, 1023, 1026,    0,    0,
     1023,    0, 1026, 1023, 1026,    0,    0,    0, 1026,    0,

        0, 1026, 1024, 1025, 1024, 1025,    0,    0, 1024, 1025,
        0, 1024, 1025, 1027,    0, 1027, 1026,    0, 1027, 1027,
        0, 1026, 1027, 1026,    0,    0,    0, 1026,    0,    0,
     1026,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1027,    0, 1027,    0,    0, 1027, 1027,    0,
        0, 1027, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1036, 1037, 1036,    0,
     1038,    0, 1036,    0, 1037, 1036, 1037, 1039,    0, 1038,

     1037, 1038,    0, 1037, 1039, 1038, 1039,    0, 1038,    0,
     1039,    0,    0, 1039,    0, 1036, 1037, 1036,    0, 1038,
        0, 1036,    0, 1037, 1036, 1037, 1039,    0, 1038, 1037,
     1038,    0, 1037, 1039, 1038, 1039, 1041, 1038, 1040, 1039,
     1040,    0, 1039, 1041, 1040, 1041,    0, 1040, 1042, 1041,
     1042,    0, 1041,    0, 1042, 1042,    0, 1042,    0,    0,
        0,    0,    0,    0,    0, 1041,    0, 1040,    0, 1040,
        0,    0, 1041, 1040, 1041,    0, 1040, 1042, 1041, 1042,
        0, 1041,    0, 1042, 1042, 1043, 1042, 1043, 1043, 1045,
     1044, 1043, 1044,    0, 1043,    0, 1044,    0, 1046, 1044,

     1045, 1046, 1045, 1046,    0,    0, 1045, 1046,    0, 1045,
     1046,    0,    0,    0, 1043,    0, 1043, 1043, 1045, 1044,
     1043, 1044,    0, 1043,    0, 1044,    0, 1046, 1044, 1045,
     1046, 1045, 1046, 1047,    0, 1045, 1046,    0, 1045, 1046,
        0, 1048, 1047, 1048, 1047,    0,    0, 1048, 1047,    0,
     1048, 1047, 1049,    0, 1049,    0,    0, 1050, 1049, 1050,
        0, 1049, 1047, 1050,    0,    0, 1050,    0,    0,    0,
     1048, 1047, 1048, 1047,    0,    0, 1048, 1047,    0, 1048,
     1047, 1049,    0, 1049,    0,    0, 1050, 1049, 1050,    0,
     1049,    0, 1050,    0,    0, 1050, 1051, 1051, 1051,    0,

        0, 1052, 1051, 1052, 1052, 1051, 1053, 1052, 1053,    0,
     1052, 1054, 1053, 1054,    0, 1053,    0, 1054,    0,    0,
     1054,    0,    0,    0,    0, 1051, 1051, 1051,    0,    0,
     1052, 1051, 1052, 1052, 1051, 1053, 1052, 1053, 1055, 1052,
     1054, 1053, 1054,    0, 1053, 1055, 1054, 1055,    0, 1054,
     1057, 1055, 1057,    0, 1055, 1058, 1057, 1058,    0, 1057,
        0, 1058,    0, 1059, 1058, 1059,    0, 1055,    0, 1059,
     1059,    0, 1059,    0, 1055,    0, 1055,    0,    0, 1057,
     1055, 1057,    0, 1055, 1058, 1057, 1058,    0, 1057,    0,
     1058,    0, 1059, 1058, 1059,    0,    0,    0, 1059, 1059,

     1060, 1059, 1060,    0,    0, 1061, 1060, 1061,    0, 1060,
     1062, 1061, 1062,    0, 1061, 1063, 1062, 1063,    0, 1062,
        0, 1063,    0,    0, 1063,    0,    0,    0,    0, 1060,
        0, 1060,    0,    0, 1061, 1060, 1061,    0, 1060, 1062,
     1061, 1062,    0, 1061, 1063, 1062, 1063,    0, 1062, 1064,
     1063, 1064, 1065, 1063,    0, 1064, 1066,    0, 1064,    0,
     1066, 1065, 1066, 1065,    0,    0, 1066, 1065,    0, 1066,
     1065,    0,    0, 1067,    0, 1067,    0,    0, 1064, 1067,
     1064, 1065, 1067,    0, 1064, 1066,    0, 1064,    0, 1066,
     1065, 1066, 1065,    0,    0, 1066, 1065,    0, 1066, 1065,

        0, 1068, 1067, 1068, 1067, 1070,    0, 1068, 1067,    0,
     1068, 1067, 1069, 1070, 1069, 1070,    0, 1069, 1069, 1070,
        0, 1069, 1070,    0,    0,    0,    0,    0,    0, 1071,
     1068, 1071, 1068,    0, 1070, 1071, 1068,    0, 1071, 1068,
        0, 1069, 1070, 1069, 1070,    0, 1069, 1069, 1070,    0,
     1069, 1070,    0, 1073, 1072, 1073,    0,    0, 1071, 1073,
     1071,    0, 1073, 1072, 1071, 1072,    0, 1071, 1074, 1072,
     1074,    0, 1072,    0, 1074,    0,    0, 1074,    0,    0,
     1075,    0, 1073, 1072, 1073,    0,    0, 1075, 1073, 1075,
        0, 1073, 1072, 1075, 1072,    0, 1075, 1074, 1072, 1074,

        0, 1072, 1076, 1074, 1076,    0, 1074,    0, 1076, 1075,
        0, 1076,    0,    0,    0, 1077, 1075, 1077, 1075, 1078,
        0, 1077, 1075,    0, 1077, 1075,    0,    0,    0,    0,
     1078, 1076, 1078, 1076,    0,    0, 1078, 1076,    0, 1078,
     1076,    0,    0, 1079, 1077, 1079, 1077,    0, 1078, 1079,
     1077,    0, 1079, 1077,    0,    0,    0,    0,    0, 1078,
     1080, 1078, 1080,    0,    0, 1078, 1080, 1080, 1078, 1080,
        0, 1081, 1079, 1081, 1079,    0,    0, 1081, 1079,    0,
     1081, 1079,    0,    0, 1082,    0, 1082,    0,    0, 1080,
     1082, 1080,    0, 1082,    0, 1080, 1080,    0, 1080,    0,

     1081,    0, 1081,    0,    0,    0, 1081,    0,    0, 1081,
        0,    0,    0, 1082,    0, 1082,    0,    0,    0, 1082,
        0,    0, 1082, 1084,    0, 1084, 1084, 1084, 1085,    0,
     1085, 1085, 1085, 1086,    0, 1086, 1086, 1086, 1087, 1087,
     1087, 1089, 1089, 1089, 1089, 1089, 1090, 1090, 1090, 1090,
     1090, 1091, 1091, 1092,    0, 1092, 1092, 1092, 1093,    0,
     1093, 1093, 1093, 1094,    0, 1094, 1094, 1094, 1095, 1095,
     1095, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083

    } ;

static yyconst flex_int16_t yy_rule_linenum[131] =
    {   0,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
      245,  246,  247,  248,  249,  250,  251,  252,  253,  254,
      255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
      265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
      275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
      295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
      305,  306,  307,  308,  309,  310,  311,  312,  313,  314,

      315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
      325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
      335,  336,  337,  338,  339,  340,  341,  342,  343,  346
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/* from yacker grammar http://www.w3.org/2005/01/yacker/uploads/SPARUL_EGP/SPARUL_EGPScanner.ll */
/** Flex scanner for SPARQL + SPARUL */
#line 6 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 61 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 4030 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 214 "lib/SPARQLfedScanner.lpp"

#line 4194 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1084 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1083 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 131 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 131 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 132 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 215 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 216 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 217 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 218 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 219 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 220 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 221 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 222 "lib/SPARQLfedScanner.lpp"
{return token::IT_AS;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 223 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 224 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 225 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 226 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 227 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 228 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 229 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 230 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 231 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 232 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 233 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 234 "lib/SPARQLfedScanner.lpp"
{return token::IT_HAVING;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 235 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 236 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 237 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 238 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 239 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 240 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 241 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 242 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 243 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNDEF;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 244 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 245 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 246 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 247 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 248 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 249 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 250 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 251 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 252 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATA;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 253 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 254 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 255 "lib/SPARQLfedScanner.lpp"
{return token::IT_USING;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 256 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 257 "lib/SPARQLfedScanner.lpp"
{return token::IT_DEFAULT;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 258 "lib/SPARQLfedScanner.lpp"
{return token::IT_ALL;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 259 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 260 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return token::GT_PIPE;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return token::GT_CARROT;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return token::GT_OPT;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 287 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 288 "lib/SPARQLfedScanner.lpp"
{return token::IT_IN;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{return token::IT_NOT;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 290 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 291 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 292 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 293 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 294 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 296 "lib/SPARQLfedScanner.lpp"
{return token::IT_IRI;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 297 "lib/SPARQLfedScanner.lpp"
{return token::IT_URI;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 298 "lib/SPARQLfedScanner.lpp"
{return token::IT_BNODE;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 299 "lib/SPARQLfedScanner.lpp"
{return token::IT_COALESCE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 300 "lib/SPARQLfedScanner.lpp"
{return token::IT_IF;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 301 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRLANG;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 302 "lib/SPARQLfedScanner.lpp"
{return token::IT_STRDT;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 303 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 304 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 305 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 306 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 307 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 308 "lib/SPARQLfedScanner.lpp"
{return token::IT_isNUMERIC;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 309 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 310 "lib/SPARQLfedScanner.lpp"
{return token::IT_EXISTS;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 311 "lib/SPARQLfedScanner.lpp"
{return token::IT_COUNT;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 312 "lib/SPARQLfedScanner.lpp"
{return token::IT_GROUP_CONCAT;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 313 "lib/SPARQLfedScanner.lpp"
{return token::IT_SUM;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 314 "lib/SPARQLfedScanner.lpp"
{return token::IT_MIN;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 315 "lib/SPARQLfedScanner.lpp"
{return token::IT_MAX;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 316 "lib/SPARQLfedScanner.lpp"
{return token::IT_AVG;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 317 "lib/SPARQLfedScanner.lpp"
{return token::IT_SAMPLE;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 318 "lib/SPARQLfedScanner.lpp"
{return token::IT_SEPARATOR;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 319 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 320 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 321 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 322 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 323 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 324 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 325 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 326 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 327 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 328 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 329 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 330 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 331 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 332 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 333 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 334 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 335 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 336 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 337 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 338 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 339 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 340 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 341 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 342 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 343 "lib/SPARQLfedScanner.lpp"
{yylval->p_TTerm = driver->createBNode(); return token::ANON;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 345 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 346 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input: '" << yytext << "'";
    driver->error(*yylloc, s.str());
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 352 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4971 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1084 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1084 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1083);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int ) throw();

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 352 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


