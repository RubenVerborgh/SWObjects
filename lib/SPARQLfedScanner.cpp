#line 2 "lib/SPARQLfedScanner.cpp"

#line 4 "lib/SPARQLfedScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SPARQLfedFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SPARQLfedalloc (yy_size_t  );
void *SPARQLfedrealloc (void *,yy_size_t  );
void SPARQLfedfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1007] =
    {   0,
        0,    0,  104,  102,    2,    1,    1,   65,  102,    2,
      102,  102,  102,   41,   42,   20,   62,   49,   63,   44,
       64,   82,   97,   50,   58,   56,   59,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   52,   53,
      102,  102,   51,   39,  102,   40,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,    2,    1,   57,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  101,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   55,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   95,    0,   84,
        0,   86,   83,   83,   82,    0,   98,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   60,   80,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   61,
      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       81,    0,    0,   97,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,   77,
        0,   54,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   94,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,  101,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  101,  101,  101,  101,  101,
      101,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   85,   85,    0,   87,   87,
        0,    0,   83,    0,    0,   88,   98,    0,   98,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   98,   98,   98,   98,   98,   98,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  100,  100,  100,  100,  100,  100,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,   29,   23,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   66,    0,
        0,    0,    0,    0,   99,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    2,    0,
        0,    0,  101,  101,  101,  101,  101,  101,  101,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,  101,  101,  101,  101,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   85,    0,    0,
       90,    0,   87,    0,    0,   89,    0,   88,    0,   88,
       98,   98,   98,   98,   98,   98,   98,   98,   98,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,   98,   98,   98,   98,    0,    0,    0,
        0,    0,    0,  100,  100,  100,  100,  100,  100,  100,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  100,  100,  100,  100,  100,    0,    0,
       81,    0,    0,    0,    0,    0,    0,    0,   15,    0,
        0,    0,    0,    0,    0,    0,   30,    0,   14,   36,
        0,    0,   24,    0,    0,   10,    0,    0,    0,    0,
       67,    0,    9,    0,    0,    0,   43,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   78,
        0,    0,    0,    4,   99,    0,   99,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
       99,   99,   99,   99,   99,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  101,
      101,  101,  101,  101,    0,    0,  101,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   90,    0,
       90,    0,   89,    0,   89,   98,   98,   98,   98,   98,
        0,    0,   98,  100,  100,  100,  100,  100,    0,    0,
      100,    0,    0,   70,   11,    0,    0,    0,    0,    0,
        0,   79,    0,    7,    0,    0,   72,    0,   73,    0,
       31,    0,   46,   25,    0,    0,   27,    0,    0,   76,
        0,    0,    0,    0,    0,    0,   47,    0,   26,   99,

       99,   99,   99,   99,   99,   99,   99,   99,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   99,   99,   99,   99,   99,    0,    0,   92,    0,
        0,    0,    0,  101,   91,    0,    0,    0,    0,   98,
      100,    0,    0,   12,    0,    5,    0,    0,   48,    6,
        0,    0,    0,    0,   32,    0,   16,    0,    0,    0,
       17,    0,   13,   35,    0,   99,   99,   99,   99,   99,
        0,    0,   99,    0,    0,    0,    0,    0,   74,    0,
        0,   34,    0,   19,    3,    0,    8,    0,   99,   33,
        0,   69,   22,   18,    0,    0,   45,   71,    0,   21,

       75,    0,   38,    0,   68,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   50,   51,   52,   38,
       53,   54,   55,   56,   57,    1,   58,   59,   60,   61,

       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,   67,   74,   75,   76,   77,   78,   79,   80,
       81,   67,   82,   83,   84,   10,   10,   85,   86,   87,
       87,   87,   87,   88,   89,   89,   89,   89,   89,   90,
       90,   89,   91,   92,   92,   92,   92,   92,   92,   92,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   95,
       95,   95,   95,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   97,   97,   97,   97,   97,
       97,   97,   98,   99,   99,   99,   99,   99,   99,  100,
      101,  102,  102,  103,  104,  105,  105,  105,  105,  105,

      105,  105,  105,  106,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  110,  111,  112,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  115,  116,  117,
      118,  118,  118,  119,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102
    } ;

static yyconst flex_int32_t yy_meta[120] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        4,    3,    3,    1,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    3,    1,    3,    1,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        3,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        3,    6,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1019] =
    {   0,
        0,    0,  573,10589,  118,10589,  554,  529,  117,  146,
      245,  542,  352,  123,10589,10589,  110,10589,  111,  515,
    10589,  114,  451,10589,  545,10589,  482,  644,    0,  745,
      107,  112,  336,   92,  338,  124,   97,  114,  379,  353,
      343,  532,  167,  539,  546,  169,  402,  554,  296,10589,
      423,  456,    0,10589,  392,10589,  779,  796,  813,  830,
      847,  864,  881,  898,   93,  915,  105,  932,  949,  966,
      983, 1000,   44, 1003, 1020,  143,10589,10589, 1115,  467,
     1116, 1044, 1060, 1150,  172, 1167, 1108, 1184, 1194, 1211,
      344, 1222, 1257, 1273, 1288,  542, 1305, 1322, 1332, 1342,

     1359,  545, 1440, 1474, 1491, 1508, 1525, 1542, 1559, 1576,
     1593,  341, 1610,  571, 1627, 1644, 1661, 1678, 1695,  231,
     1698, 1715,10589, 1805,  440, 1811, 1739, 1755, 1840, 1065,
     1857, 1874, 1884, 1894, 1911,  683, 1169,10589,  428,  355,
      425,  561,  186,  414,  565,  159, 1995, 2029, 2046, 2063,
     2080, 2097, 2114, 1803, 2131, 1079, 2148, 1112, 2165, 2182,
     2199, 2216, 2233,  408, 2236, 2253, 2329,    0,10589, 2271,
     2287, 2302, 1219, 2364, 2319, 2381, 2391, 2408, 1377,10589,
     2489, 2523, 2540, 2557, 2574, 2591, 2608, 2625, 2642, 1087,
     2659, 1780, 2676, 2693, 2710, 2727, 2744,  437, 2747, 2764,

      423, 2824, 2845,    0, 2826, 2827, 2843, 2836, 2853, 2870,
     2887, 2904, 2921, 2938,  338, 2955, 2972, 2989, 3006, 3023,
     1922, 3040, 3057, 3074, 3091, 3108,  601, 3111, 3128, 2829,
     2834, 2835, 2842, 3197, 2844, 3198, 3190, 3205, 3192, 3206,
     3243, 3242, 3250, 3251, 3212, 3253, 3261, 3260, 3298, 3304,
     3301, 3266, 3307, 3312, 3317, 3314, 3352, 3324, 3361, 3360,
     3369, 3370, 3375, 3405, 3415, 3421, 3413, 1491,10589,10589,
     3476,10589, 3420, 3423, 3428, 3429, 3536, 3549, 3554, 3545,
     3562, 3579, 3596, 3613, 3630, 3647, 3664, 3681, 3698, 1763,
     3715, 3732,10589, 3827, 3750,  372, 3767, 3797, 3814, 3862,

     3879, 3896, 3913, 3930,  371, 3947, 3964, 3981, 3998, 4015,
     4032, 4049,    0,    0, 4066, 4083, 4100, 4117, 4134, 4151,
     4168,  325, 4185, 4202, 4219, 4236, 2326, 4253, 4270, 4287,
     4304, 3784,  630, 4314, 4331,    0,    0,    0,    0,    0,
        0, 4348, 4365, 4382, 4399, 4416, 4433, 4450, 4467, 4484,
     4501, 2317, 4518, 4535,10589, 4625, 4553,  350, 4570, 4595,
     4612, 4660, 4677, 4694, 4711,  566, 4792,  350, 4793, 4794,
      595, 1850, 4795, 1851,  382,  379,    0,    0,    0, 4744,
     4773, 4790, 4807, 4824, 4841, 4858,  299, 4875, 4892, 4909,
     4926, 4943, 2416, 4960, 4977, 4994, 5011, 5028,  702, 5031,

     5048,    0,    0,    0,    0,    0,    0, 5065, 5082, 5099,
     5116, 5133, 5150, 5167, 5184, 5201, 5218, 3504, 5235, 5252,
     5269,  338, 5286, 5303, 5320, 5337, 5354, 5371, 5388,    0,
        0, 5405, 5422, 5439, 5456, 5473, 5490, 5507,  294, 5524,
     5541, 5558, 5575, 3517, 5592, 5609, 5626, 5643, 5660,  731,
     5663, 5680,    0,    0,    0,    0,    0,    0, 5697, 5714,
     5731, 5748, 5765, 5782, 5799, 5816, 5833, 5850, 3822, 5867,
     5884,    0, 4775, 4776, 4777, 4778, 5944, 5945, 5946, 5947,
     5952, 5953, 5954, 5955, 5946, 5963, 5980, 5997, 6014, 6031,
     6048, 6065, 6082, 6099, 4575, 6116, 6133, 6202, 6204, 6195,

     6209, 6197, 6211, 6216, 6214, 6250, 6248, 6255, 6256, 6258,
     6261, 6270, 6271, 6272, 6306, 6311, 6293, 6313, 6316, 6328,
     6323, 6351, 6365, 6354, 6368, 6373, 6362, 6381, 6399, 6375,
     6407, 6418, 6417, 6425, 6433, 6423, 6435, 6457, 6463, 6474,
     6469, 6472, 6477, 6491, 6549, 6583, 6600, 6617, 6634, 6651,
     6668, 6685, 6702, 2795, 6719, 4622, 6736, 6753, 6770, 6787,
     5917, 1028, 6797, 6814, 6479, 6484, 6874, 6875, 6876, 6838,
     6867, 6962,  380, 6936, 6885, 6932, 6947, 6476, 6997, 7014,
     7024, 7034, 7051, 6915, 7146, 7069, 7086, 7116, 7175, 7133,
     7210, 7227,    0,    0,    0,    0,    0,    0,    0, 7244,

     7261, 7278, 7295, 7312, 7329, 7346, 7363, 7380, 7397, 6957,
     7414, 7431,    0,    0,    0,    0,    0, 7448, 7465, 7555,
      367, 7561, 7489, 7505, 7590, 7093, 7607, 7624, 7634, 7644,
     7661, 7153, 7751, 7679, 7696, 7721, 3408, 6221, 3605,  356,
      349, 3908, 7215, 6355,  339,  327,  326,  309,  225,  224,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 7738,
     7786, 7803, 7820, 7837, 7854, 7871, 7888, 7905, 7922, 7098,
     7939, 7956,    0,    0,    0,    0,    0, 7973, 7990, 8066,
     8008, 8025, 8042,    0,    0,    0,    0,    0,    0,    0,
     8101, 8118, 8135, 8152, 8169, 8186, 8203, 8220, 8237, 8254,

     7170, 8271, 8288,    0,    0,    0,    0,    0, 8305, 8322,
      221, 7565, 7568, 7570, 7576, 7577, 8339, 8356, 7579, 8421,
     8427, 8419, 8424, 8430, 8432, 8438, 8470, 8480, 8477, 8478,
     8485, 8488, 8483, 8496, 8491, 8493, 8528, 8535, 8533, 8536,
     8542, 8543, 8545, 8582, 8550, 8590, 8552, 8593, 8587, 8592,
     8603, 8600, 8601, 8641, 8638, 8646, 8649, 8647, 8654, 8648,
     8656, 8665, 8695, 8692,    0,    0,    0, 8686, 8703, 8720,
     8737, 8754, 8771, 8788,  119, 8059, 8805, 8822, 8839, 8856,
     7703, 8873, 8890, 8907, 8924, 8657, 1107, 8934, 8951,    0,
        0,    0,    0,    0,    0, 8968, 8985, 9002, 9019, 9036,

     9053, 9070, 9087, 9104, 9121, 7529, 9138, 9155, 8693,  209,
     9172,  155, 9189, 9206, 9223, 9240, 9257, 9274, 9291,    0,
        0,    0,    0,    0, 9308, 9325,    0,  185, 9342,  141,
     9359, 9376, 9393, 9410, 9427, 9444, 9461,  172,  153,  143,
      141,  140,  130,  125,  101,    0,    0,    0,    0,    0,
     9478, 9495,    0,    0,    0,    0,    0,    0, 9512, 9529,
        0, 9589, 9590, 9591, 9592, 9597, 9607, 9599, 9613, 9610,
     9602, 9608, 9644, 9645, 9650, 9652, 9653, 9660, 9658, 9688,
     9661, 9666, 9667, 9668, 9702, 9705, 9708, 9710, 9720, 9718,
     9726, 9725, 9723, 9761, 9762, 9742, 9760, 9772, 9769,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 9763, 9780,
     9797, 9814, 9831, 9848, 9865, 9882, 9899, 9916, 7746, 9933,
     9950,    0,    0,    0,    0,    0, 9967, 9984,10589,    0,
    10001,10018,10035,    0,10589,    0,10052,10069,10086,    0,
        0,10153,10148, 9770,10147,10155,10162,10167,10160,10161,
    10201,10170,10204,10206,10207,10225,10213,10224,10256,10216,
    10222,10259,10261,10262,10264,    0,    0,    0,    0,    0,
    10255,10272,    0,10332,10344,10343,10346,10335,10338,10354,
    10356,10349,10386,10388,10391,10394,10396,10406,    0,10399,
    10404,10401,10407,10412,10444,10449,10446,10447,10462,10454,

    10455,10465,10457,10460,10463,10589,10540,10545,10550,10553,
      116,10558,10563,10565,10570,10575,10580,10583
    } ;

static yyconst flex_int16_t yy_def[1019] =
    {   0,
     1006,    1, 1006, 1006, 1006, 1006, 1006, 1006, 1007, 1008,
     1006, 1006, 1009, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1010, 1006, 1006, 1006, 1011, 1006,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30, 1006, 1006,
     1006, 1006,   30, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1007, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1008, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1009, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1010,  167, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1011,   30,   30,   23,   30,   30,   30, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30, 1006, 1006, 1006,
     1006, 1006,   30,   30,   30,   30,   30,   30,   30, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1012, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006,  103,  103, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006,  103,  103,  103,  103,  103,
      103, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1013, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006,  147,  147,  147, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006,  147,  147,  147,  147,  147,  147, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  181,
      181, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006,  181,  181,  181,  181,  181,  181, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1014,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006,   30,   30,   30,   30,   30, 1006,
     1006, 1012,  572, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1015, 1006, 1006, 1006, 1016, 1006,
     1006, 1006,  103,  103,  103,  103,  103,  103,  103, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006,  103,  103,  103,  103,  103, 1006, 1006, 1013,
      620, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1017, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
      147,  147,  147,  147,  147,  147,  147,  147,  147, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006,  147,  147,  147,  147,  147, 1006, 1006, 1018,
     1006, 1006, 1006,  181,  181,  181,  181,  181,  181,  181,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006,  181,  181,  181,  181,  181, 1006, 1006,
     1014,   30,   30,   30,   30,   30, 1006, 1006,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,  545,  545,  545, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  545,
      545,  545,  545,  545,  545, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,   30,  572,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,  103,
      103,  103,  103,  103, 1006, 1006,  103,  620, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006,  147,  147,  147,  147,  147,
     1006, 1006,  147,  181,  181,  181,  181,  181, 1006, 1006,
      181,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,  545,

      545,  545,  545,  545,  545,  545,  545,  545, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006,  545,  545,  545,  545,  545, 1006, 1006, 1006,  572,
     1006, 1006, 1006,  103, 1006,  620, 1006, 1006, 1006,  147,
      181,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,  545,  545,  545,  545,  545,
     1006, 1006,  545,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,  545,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,    0, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006
    } ;

static yyconst flex_int16_t yy_nxt[10709] =
    {   0,
        4,    5,    6,    7,    5,    8,    9,   10,   11,    4,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   37,   37,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   37,   48,
       37,   37,   49,    4,   50,   51,   52,   53,   31,   32,
       33,   34,   35,   36,   37,   38,   37,   37,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   37,   48,   37,
       37,   54,   55,   56,    4,   57,   58,   59,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   60,   61,   61,

       62,    4,    4,   63,   64,    4,   65,   66,   67,   68,
       69,   70,   71,   72,    4,   73,   74,   75,    4,   76,
      201,  845,   76,   80,  137,  137,  137,  137,  139,  141,
      140,  142,  144,  241,  145,  230,  138,  205,  205,  289,
      289,  290,  205,  231,   76,  845,  146,   76,  205,  232,
      843,  234,  205,  205,  235,  246,  236,  205,  233,  247,
      843,  841,  241,  841,  230,  205,  205,  205,  245,  205,
       81,  205,  231,  839,  375,  146,  375,  205,  232,  376,
      234,  205,  205,  235,  246,  236,  205,  233,  247,  279,
      279,  279,  839,  279,  205,  620,  935,  245,  205,  280,

      280,  280,  280,  280,  280,  280,  143,   82,  205,  572,
      205,  258,  205,  264,  205,  929,  765,   83,  372,   84,
       84,   84,   84,   84,   84,   85,   86,   86,   86,   86,
       87,   88,   88,   89,   90,   91,   93,  205,  472,  205,
      258,  205,  264,  205,  650,  650,   94,  372,   95,   95,
       95,   95,   95,   95,   96,   97,   97,   97,   97,   98,
       99,   99,  100,  101,  102,  103,  297,  297,  297,  297,
      297,  297,  297,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  268,  268,  268,

      268,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  351,  351,  352,  648,
      104,  105,  106,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  107,  108,  108,  109,  648,  646,  110,  111,
      269,  112,  113,  114,  115,  116,  117,  118,  119,  646,
      120,  121,  122,  125,  237,  640,  242,  640,  238,  641,
      641,  253,  239,  367,  243,  140,  641,  205,  828,  205,
      240,  205,  244,  205,  205,  251,  810,  368,  205,  252,
      254,  430,  167,  237,  205,  242,  377,  238,  205,  376,

      253,  239,  376,  243,  124,  126,  205,  248,  205,  240,
      205,  244,  205,  205,  251,  249,  368,  205,  252,  254,
      205,  250,  313,  205,  205,   92,   79,  205,  303,  303,
      303,  303,  303,  303,  373,  202,  248,  341,  341,  341,
      472,  341,  127,  265,  249,  369,  374,  205,  366,  205,
      250,  356,  128,  205,  129,  129,  129,  129,  129,  129,
      130,  131,  131,  131,  131,  132,  133,  133,  134,  135,
      136,  147,  265,  294,  272,  374,  205,  271,  270,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  417,  417,  418,  180,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  468,  468,  469,  143,  148,  149,  150,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  151,  152,
      152,  153,  123,   78,  154,  155,   77,  156,  157,  158,
      159,  160,  161,  162,  163,  255,  164,  165,  166,  168,
      169,  259, 1006,  205,  260,  256,  257,  205,  261,  370,
      205,  142,  262,  144,  205,  145,  366,  205, 1006,  266,
      267,  205,  263,  371,  255,  205, 1006,  146,  637,  205,

      259, 1006,  205,  260,  256,  257,  205,  261, 1006,  205,
      645,  262,  645,  205, 1006,  646,  205, 1006,  266,  267,
      205,  263,  371, 1006,  205, 1006,  146,  637,  205,  312,
      312,  312,  312,  312,  312,  170,  306,  306,  306,  306,
      306,  306,  306, 1006, 1006,  171, 1006,  172,  172,  172,
      172,  172,  172,  173,  174,  174,  174,  174,  175,  176,
      176,  177,  178,  179,  181,  342,  342,  342,  342,  342,
      342,  342,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  494,  494,  495, 1006,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  609,  609,  610, 1006,  182,
      183,  184,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  185,  186,  186,  187, 1006, 1006,  188,  189, 1006,
      190,  191,  192,  193,  194,  195,  196,  197, 1006,  198,
      199,  200,  202,  203, 1006,  202,  204,  365,  365,  365,
      365,  365,  365,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  206,  205,  205,  205,
      207,  205,  205,  205,  205,  205,  205,  669,  669,  670,

     1006,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  206,  205,  205,  205,  207,
      205,  205,  205,  205,  205,  205,  700,  700,  701, 1006,
      208,  209,  210,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  212,  213,  213,  214, 1006,  215,  216,  217,
      218,  219,  220,  221,  222,  223,  224,  225,  226, 1006,
      227,  228,  229,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  275,  275,  275,  275,  275,  275,
      275,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      276,  276,  276,  273,  273,  278,  278,  278,  278,  278,
      278,  278,  278, 1006,  278,  278,  278,  278, 1006,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  282,  283,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  285,  285,  285,  285,  284,
      286,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  293,   79,  805,  805,  806, 1006,   79,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  359,
      359,  359,  359,  359,  359,  359, 1006, 1006,   81,   79,
      137,  137,  137,  137,   79,  407,  407,  407,   79,  407,
     1006, 1006,  138,  458,  458,  458,   79,  458, 1006,   79,
     1006,   79,  299,  299,  299,  299,  299,  299,  299,  299,

      299,  299,  918,  918,  919,   82,  408,  408,  408,  408,
      408,  408,  408, 1006, 1006,   83, 1006,   84,   84,   84,
       84,   84,   84,   85,   86,   86,   86,   86,   87,   88,
       88,   89,   90,   91,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,   93,  423,  423,  423,  423,  423,  423,  423,
     1006, 1006,   94, 1006,   95,   95,   95,   95,   95,   95,
       96,   97,   97,   97,   97,   98,   99,   99,  100,  101,
      102,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      313,  429,  429,  429,  429,  429,  429, 1006,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  268,  268,  268,  268,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314, 1006, 1006, 1006, 1006,  315,  316,  317,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  319,  320,  320,
      321, 1006,  322,  323,  324,  269,  325,  326,  327,  328,
      329,  330,  331,  332, 1006,  333,  334,  335,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  338,
      338,  338,  338,  338,  338,  338,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  339,  339,  339,  336,  336,
      103,  103,  103,  103,  103,  103,  103,  103, 1006,  103,
      103,  103,  103, 1006,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  344,  345,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      347,  347,  347,  347,  346,  348,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  355,  124, 1006, 1006,
     1006, 1006,  124,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358, 1006, 1006, 1006, 1006,  126,  569,
      569,  569,  569,  569,  124,  647,  649,  647,  649,  124,
      648,  650, 1006,  124,  459,  459,  459,  459,  459,  459,
      459,  124, 1006, 1006,  124, 1006,  124,  147,  147,  147,
      147,  147,  147,  147,  147,  127,  147,  147,  147,  147,

     1006,  147,  147,  147, 1006,  128, 1006,  129,  129,  129,
      129,  129,  129,  130,  131,  131,  131,  131,  132,  133,
      133,  134,  135,  136,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  364,  364,  364,  364,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  377,  378, 1006,  377,  485,  485,  485,  485,
      485,  485,  485,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379, 1006, 1006, 1006,
     1006,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379, 1006, 1006, 1006, 1006,
      380,  381,  382,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  384,  385,  385,  386, 1006,  387,  388,  389,

      390,  391,  392,  393,  394,  395,  396,  397,  398, 1006,
      399,  400,  401,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  404,  404,  404,  404,  404,  404,
      404,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      405,  405,  405,  402,  402,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  410,  411,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  413,  413,
      413,  413,  412,  414,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  169,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  617,  617,  617,  617,  617, 1006,  170,
      600,  600,  600,  600,  600,  600,  600, 1006, 1006,  171,
     1006,  172,  172,  172,  172,  172,  172,  173,  174,  174,
      174,  174,  175,  176,  176,  177,  178,  179,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  428,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  428,  428,  430,
      660,  660,  660,  660,  660,  660,  660,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431, 1006, 1006, 1006, 1006,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
     1006, 1006, 1006, 1006,  432,  433,  434,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  436,  437,  437,  438,
     1006,  439,  440,  441, 1006,  442,  443,  444,  445,  446,

      447,  448,  449, 1006,  450,  451,  452,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  455,  455,
      455,  455,  455,  455,  455,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  457,  457,  457,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  456,  456,  456,  453,  453,  181,
      181,  181,  181,  181,  181,  181,  181, 1006,  181,  181,
      181,  181, 1006,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  461,  462,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  464,
      464,  464,  464,  463,  465,  463,  463,  463,  463,  463,

      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  205, 1006,  205,  205,  205,
      205,  205,  205,  474,  498,  499,  205, 1006,  473,  205,
      205,  475,  500,  205,  205,  502,  205,  205,  205,  205,
      205,  795,  795,  795,  205,  795,  205,  205,  205,  205,

      205,  205,  474,  498,  499,  205, 1006,  473,  205,  205,
      475,  500,  205,  205,  502,  205,  205,  205,  205,  205,
      476,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  479,  479,
      479,  479,  479,  479,  479,  477,  477,  477,  477,  477,

      477,  477,  477,  477,  477,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  480,  480,  480,  477,  477,  205,
      205,  205,  205,  205,  205,  205,  205, 1006,  205,  205,
      205,  205, 1006,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  483,  483,  483,  205,  483,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  487,  488,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  490,  490,  490,  490,  489,  491,  489,
      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  501,
      503,  205, 1006,  205, 1006,  205,  504,  507,  205,  205,
      513, 1006,  205,  205,  505, 1006,  205,  205,  508, 1006,
      506,  205, 1006,  205, 1006, 1006, 1006,  205,  501,  503,
      205, 1006,  205, 1006,  205,  504,  507,  205,  205,  513,
     1006,  205,  205,  505,  509,  205,  205,  508, 1006,  506,
      205,  510,  205,  205,  205, 1006,  205,  205,  205,  511,
      516,  205,  205,  512,  205,  205,  205,  517,  514,  515,

      518,  520,  205,  509, 1006,  205,  205,  524,  519, 1006,
      510,  205,  205,  205, 1006, 1006,  205,  205,  511,  516,
      205,  205,  512,  205,  205,  205,  517,  514,  515,  518,
      520,  205,  522, 1006,  205,  205,  524,  519,  521,  205,
      205,  523,  205,  205, 1006,  205,  205,  525,  205,  205,
      527,  526,  205,  205, 1006,  205,  530,  205,  205,  205,
      528,  522,  205, 1006, 1006,  205, 1006,  521,  205,  205,
      523,  205,  205, 1006,  205,  205,  525,  205,  205,  527,
      526,  205,  205,  529,  205,  530,  205,  205,  205,  528,
     1006,  205,  531,  205,  205,  532, 1006,  205,  205, 1006,

      534,  205,  205,  538,  533,  205,  205, 1006,  535,  537,
      205,  205,  529,  536,  205,  205,  205, 1006, 1006,  539,
      205,  531,  205,  838,  532,  838,  205, 1006,  839,  534,
      205,  205,  538,  533,  205,  205, 1006,  535,  537,  205,
      205, 1006,  536,  205,  205,  205,  205, 1006,  539,  205,
      205,  541,  540,  543,  205, 1006,  205,  542,  205,  544,
      205,  205,  205, 1006,  205,  205,  205, 1006,  205,  205,
      205, 1006, 1006,  205,  205,  205, 1006, 1006, 1006,  205,
      541,  540,  543,  205, 1006,  205,  542,  205,  544,  205,
      205,  205, 1006,  205,  205,  205,  545,  205,  205,  205,

     1006, 1006,  205,  205,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545, 1006, 1006,
     1006, 1006,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545, 1006, 1006, 1006,
     1006,  546,  547,  548,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  549,  550,  550,  551,  205, 1006,  552,
      553,  205,  554,  555,  556,  557,  558,  559,  560,  561,
      205,  562,  563,  564,  205,  205, 1006, 1006, 1006,  205,

      677,  677,  677,  677,  677, 1006,  205, 1006, 1006, 1006,
      205,  691,  691,  691,  691,  691,  691,  691, 1006,  205,
      840, 1006,  840,  205,  205,  841, 1006, 1006,  205,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  273,  273,  273,  273,  273,  274,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  274,  274,  274,  274,  274,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  273,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  573,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608, 1006, 1006,
      574,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79, 1006, 1006,  575,  708,  708,
      708,  708,  708,  842, 1006,  842, 1006,  576,  843,  577,
      577,  577,  577,  577,  577,  578,  579,  579,  579,  579,
      580,  581,  581,  582,  583,  584,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  588,  588,  588,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      593,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      595,  594,  594,  594,  594,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  596,  596,
      596,  596,  596,  596,  596,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  597,
      597,  597,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  597,  597,  597,  594,  594,  314,
      314,  314,  314,  314,  314,  314,  314, 1006,  314,  314,
      314,  314, 1006,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  599,  599,  599, 1006,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  602,  603,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  605,  605,  605,  605,
      604,  606,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  607,  607,  607,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  336,  336,  336,  336,
      336,  337,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  614,  336,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  621,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  716,  716,  716,  716,  716, 1006, 1006,  622,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  124,  124,  124,  124,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124, 1006, 1006,  623,  796,  796,  796,  796,
      796,  796,  796, 1006, 1006,  624, 1006,  625,  625,  625,
      625,  625,  625,  626,  627,  627,  627,  627,  628,  629,
      629,  630,  631,  632,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  638,  369,  643,  373,  205,  205,  205,  205,
      205,  205,  205,  205,  639,  642,  644,  374,  651,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  205,  205,  205,  205,  205,
      205,  205,  205,  639,  642,  644,  374,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  652,  652,  652,  654,  654,
      654,  654,  654,  654,  654,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  655,  655,  655,  652,  652,  379,
      379,  379,  379,  379,  379,  379,  379, 1006,  379,  379,
      379,  379, 1006,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  658,  658,  658,  379,  658,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  662,  663,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  665,  665,  665,  665,  664,  666,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  667,  667,  667,  667,  667,

      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  402,  402,  402,  402,  402,  403,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  403,  403,  403,  403,  403,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  402,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  684,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  687,  687,  687,
      687,  687,  687,  687,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  688,  688,  688,  685,  685,  431,  431,
      431,  431,  431,  431,  431,  431, 1006,  431,  431,  431,
      431, 1006,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  690,  690,  690, 1006,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  693,  694,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  696,  696,  696,  696,  695,
      697,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  704,  704,

      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  453,  453,  453,  453,  453,
      454,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  454,  454,  454,  454,  454,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  453,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  804,  804,  804,  804,  804,  804,  804,  804,  804,
      804, 1006, 1006, 1006,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  477,  477,  477,  477,  477,  478,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      476,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  478,  478,  478,  478,  478,  477,  477,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  477,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  715,  715,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  719,  720,  721,  722,  205,  724,
      205,  638,  723,  205,  725,  205,  726,  205, 1006,  205,
      205, 1006,  205,  639,  205,  205,  205,  205, 1006,  205,
     1006,  205, 1006,  719,  720,  721,  722,  205,  724,  205,
     1006,  723,  205,  725,  205,  726,  205, 1006,  205,  205,
      727,  205,  639,  205,  205,  205,  205, 1006,  205,  205,
      205,  205, 1006,  205,  728,  205,  205,  205,  729,  205,

      205,  730,  205,  731,  735, 1006,  205,  732, 1006,  727,
      733,  205,  205,  205,  734,  205,  205,  205,  205, 1006,
      205, 1006,  205,  728,  205,  205,  205,  729,  205,  205,
      730,  205,  731,  735,  205,  205,  732,  738,  205,  733,
      205,  205,  205,  734,  205,  205,  205,  205,  736,  739,
      737,  205,  205, 1006,  205, 1006,  205,  205,  205,  742,
      740,  205,  741,  205,  205, 1006,  738,  205,  205,  205,
      844, 1006,  844,  205, 1006,  845,  205,  736,  739,  737,
      205,  205,  743,  205, 1006,  205,  205,  205,  742,  740,
      205,  741,  205,  205,  744,  205,  205,  205,  205,  205,

      746,  745,  205,  205, 1006, 1006,  205,  748,  751,  205,
      205,  743,  747,  205,  205, 1006,  205,  749,  205, 1006,
      205,  205,  205,  744,  205,  205,  205, 1006,  205,  746,
      745,  750,  205, 1006, 1006,  205,  748,  751,  205,  205,
      205,  747,  205,  205,  205,  205,  749,  205,  205,  205,
      753,  205,  205, 1006,  752,  205,  754,  755,  205,  205,
      750, 1006,  205,  205,  205,  756,  205,  758,  205,  205,
      205,  757, 1006,  205,  205, 1006,  205,  205,  205,  753,
      205,  205, 1006,  752, 1006,  754,  755,  205,  205, 1006,
     1006,  205,  205,  205,  756,  205,  758,  205,  205,  205,

      757,  759,  205,  205,  205,  205,  760,  205,  205,  205,
      205,  761, 1006,  205,  205,  205,  762,  205,  205,  205,
      205,  763,  205, 1006,  205,  205,  764,  205, 1006,  205,
      759,  205,  205,  205, 1006,  760,  205,  205, 1006,  205,
      761, 1006,  205,  205,  205,  762,  205,  205,  205,  205,
      763,  205, 1006,  205,  205,  764, 1006, 1006,  205, 1006,
     1006,  205, 1006, 1006, 1006,  205,  765,  766, 1006,  765,
      813,  813,  813,  813,  813,  813,  813,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,

      767, 1006, 1006, 1006, 1006,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
     1006, 1006, 1006, 1006,  768,  769,  770,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  772,  773,  773,  774,
     1006,  775,  776,  777,  778,  779,  780,  781,  782,  783,
      784,  785,  786, 1006,  787,  788,  789,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  792,  792,
      792,  792,  792,  792,  792,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  794,  794,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  793,  793,  793,  790,  790,  545,
      545,  545,  545,  545,  545,  545,  545, 1006,  545,  545,
      545,  545, 1006,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  545,  545,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  798,  799,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  801,
      801,  801,  801,  800,  802,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  808,  808,

      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  205,  205,  205, 1006,  205,
      205,  205,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  809, 1006,
     1006, 1006,  572, 1006,  205,  205,  205,  572,  205,  205,
      205,  809,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,  809,  809,  809,  809,  809,  809,  573,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811, 1006, 1006, 1006, 1006,  572,
     1006, 1006, 1006, 1006,  572, 1006, 1006, 1006,  572,  819,

      819,  819,  819,  819,  819, 1006,  572, 1006, 1006,  572,
     1006,  572, 1006, 1006, 1006,  574,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572, 1006, 1006,
     1006, 1006,  575,  824,  824,  824,  824,  824, 1006, 1006,
     1006, 1006,  576, 1006,  577,  577,  577,  577,  577,  577,
      578,  579,  579,  579,  579,  580,  581,  581,  582,  583,
      584,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  815,  815,

      815,  815,  815,  815,  815,  815,  815,  815,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  293,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,  831,  831,  831,
      831,  831,  831,  831,  850,  850,  850,  850,  850,   81,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92, 1006,  643,   82,  837,  837,  837,
      837,  837,  837, 1006, 1006, 1006,   83,  644,   84,   84,
       84,   84,   84,   84,   85,   86,   86,   86,   86,   87,
       88,   88,   89,   90,   91,   93,  858,  858,  858,  858,
      858, 1006, 1006, 1006, 1006,   94,  644,   95,   95,   95,
       95,   95,   95,   96,   97,   97,   97,   97,   98,   99,
       99,  100,  101,  102,   92,   92,   92,   92,   92,   92,

       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  594,  594,  594,  594,  594,  595,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  593,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  595,  595,  595,  595,  595,  594,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      594,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  621,  620, 1006, 1006,
     1006, 1006,  620,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,

      830,  830,  830,  830, 1006, 1006,  205, 1006,  622,  205,
      205,  205, 1006,  205,  620,  205, 1006,  205,  205,  620,
      205,  205,  205,  620,  205,  926,  926,  926,  926,  926,
     1006,  620, 1006, 1006,  620,  205,  620, 1006,  205,  205,
      205, 1006,  205, 1006,  205,  623,  205,  205, 1006,  205,
      205,  205, 1006,  205, 1006,  624, 1006,  625,  625,  625,
      625,  625,  625,  626,  627,  627,  627,  627,  628,  629,
      629,  630,  631,  632,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  355,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  909,  909,  909,

      909,  909,  909,  909,  126,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659, 1006,
     1006,  127,  970,  970,  970,  970,  970, 1006, 1006, 1006,
     1006,  128, 1006,  129,  129,  129,  129,  129,  129,  130,
      131,  131,  131,  131,  132,  133,  133,  134,  135,  136,
      846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  846,  846,  652,  652,  652,
      652,  652,  653,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  651,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  653,  653,  653,  653,
      653,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  847,  847,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  652,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,

      652,  652,  652,  652,  652,  652,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      853,  169,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  767,  767,  767,  767,  767,  767,  767,
      767, 1006,  767,  767,  767,  767,  170,  767,  767,  767,
     1006, 1006, 1006, 1006, 1006, 1006,  171, 1006,  172,  172,
      172,  172,  172,  172,  173,  174,  174,  174,  174,  175,
      176,  176,  177,  178,  179,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  685,
      685,  685,  685,  685,  686,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  684,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  686,  686,
      686,  686,  686,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  855,  685,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,

      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  857,  857,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,

      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  862,  863,  864, 1006,
      205, 1006,  205,  865,  205,  205,  205, 1006,  205,  205,
      866,  205,  205,  205, 1006,  205,  867,  205,  868,  205,
     1006, 1006, 1006,  205,  869, 1006,  863,  864, 1006,  205,
     1006,  205,  865,  205,  205,  205, 1006,  205,  205,  866,

      205,  205,  205, 1006,  205,  867,  205,  868,  205, 1006,
     1006,  205,  205,  869,  870,  205,  871,  872,  205,  205,
      873,  205,  205,  205,  205,  205,  205, 1006,  205,  205,
      205,  874,  205,  205,  205,  875,  205,  205,  205, 1006,
      205,  205, 1006,  870,  205,  871,  872,  205,  205,  873,
      205,  205,  205,  205,  205,  205,  876,  205,  205,  205,
      874,  205,  205,  205,  875,  205,  205,  205, 1006,  205,
      205,  877,  879,  205,  205, 1006,  205,  205,  205,  878,
      205,  205,  880,  205,  205,  876,  205,  205,  205,  881,
      205,  205, 1006,  205, 1006,  883, 1006,  205,  205, 1006,

      877,  879,  205,  205, 1006,  205,  205,  205,  878,  205,
      205,  880,  205,  205,  882,  205,  205,  205,  881,  205,
      205,  884,  205,  205,  883,  885,  205,  205,  205,  886,
      889,  205,  205,  205,  205,  205,  887,  205,  205,  888,
     1006,  205,  205,  882,  205,  205,  205, 1006,  205, 1006,
      884,  890,  205, 1006,  885, 1006,  205,  205,  886,  889,
      205,  205,  205,  205,  205,  887,  205,  205,  888,  891,
      205,  205, 1006,  205,  205,  205,  893,  205, 1006,  205,
      890, 1006,  205,  205,  892,  894,  205,  205,  895,  205,
      205,  205,  205,  205,  205,  205,  898,  897,  891,  205,

      896,  205, 1006, 1006, 1006,  893,  205, 1006,  205, 1006,
      205,  205,  205,  892,  894,  205,  205,  895,  205,  205,
      205,  205,  205,  205,  205,  898,  897,  899,  205,  896,
      205, 1006, 1006,  205,  205,  205,  205,  205,  205,  205,
      205,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917, 1006, 1006, 1006, 1006, 1006,  899, 1006, 1006, 1006,
     1006, 1006,  205,  205, 1006,  205,  205,  205, 1006,  205,
      900,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
      902,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  903,  903,
      903,  903,  903,  903,  903,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      904,  904,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  904,  904,  904,  901,  901,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,

      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  907,  907,  907,  767,  907,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  911,  912,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  914,  914,  914,  914,
      913,  915,  913,  913,  913,  913,  913,  913,  913,  913,

      913,  913,  913,  913,  913,  913,  913,  913,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  790,  790,  790,  790,
      790,  791,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  791,  791,  791,  791,  791,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  790,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  924,  924,  924,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  928,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      205,  942,  205,  205,  205,  205,  205,  205,  205,  944,
      205,  943,  205,  948,  205,  946,  947,  205,  205,  205,
      945,  205,  205,  205,  205,  205, 1006, 1006,  205,  205,
      942,  205,  205,  205,  205,  205,  205,  205,  944,  205,
      943,  205,  948,  205,  946,  947,  205,  205,  205,  945,
      205,  205,  205,  205,  205,  205,  205,  205,  949,  205,
      205,  205,  952,  951,  205,  205,  950,  205,  205,  205,

     1006,  205,  205,  205, 1006,  205,  205,  205,  205,  205,
      954,  205,  205,  205,  205,  205,  953,  949,  205,  205,
      205,  952,  951,  205,  205,  950,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  954,
      205,  205,  205,  205, 1006,  953,  956,  205,  955,  205,
      205,  205,  958,  205, 1006,  205,  959,  960,  205,  205,
      957,  205,  205,  205,  205,  205,  205,  205,  205,  961,
      205,  205,  205, 1006, 1006,  956,  205,  955,  205,  205,
      205,  958,  205,  205,  205,  959,  960,  964,  205,  957,
      205,  962,  205,  205,  205,  205,  205,  205,  961,  205,

      205,  205,  205,  205,  965,  205,  205,  205,  963, 1006,
      205,  205,  205,  205,  205,  205,  964,  205, 1006, 1006,
      962, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
      205,  205,  205,  965,  205,  205,  205,  963, 1006,  205,
      205, 1006,  205,  205,  205, 1006,  205,  908,  908,  908,
      908,  908,  908,  908,  908,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  966,  966,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  901,  901,  901,  901,  901,  902,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  900,  901,  901,

      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      902,  902,  902,  902,  902,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  901,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  901,  901,  901,  901,  901,  901,  901,
      901,  901,  901,  901,  901,  901,  901,  901,  901,  901,

      969,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  969,  969,  969,  969,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  830,  974,  205,  205,
      976,  977,  205,  205,  205,  975,  205,  978,  205, 1006,

      205,  205,  205,  205, 1006,  205,  205,  205,  205, 1006,
     1006,  205,  205, 1006,  980,  205,  974,  205,  205,  976,
      977,  205,  205,  205,  975,  205,  978,  205, 1006,  205,
      205,  205,  205, 1006,  205,  205,  205,  205, 1006,  979,
      205,  205,  205,  980,  205,  205,  205,  205,  205,  205,
      981,  982,  205,  983,  205,  984, 1006,  205,  205, 1006,
      986,  205, 1006,  205, 1006,  205,  205,  205,  979,  205,
      205,  205, 1006, 1006,  205,  205,  205,  205,  205,  981,
      982,  205,  983,  205,  984, 1006,  205,  205,  985,  986,
      205,  987,  205, 1006,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  988,  205,
     1006, 1006, 1006, 1006, 1006, 1006, 1006,  985, 1006, 1006,
      987, 1006, 1006, 1006, 1006, 1006,  205, 1006, 1006,  205,
      205,  205,  205,  205,  205,  205,  205,  988,  205,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  205,  991,  992,  205,  990,  993,  205,
      205,  994,  995,  205,  205,  205,  996,  205,  205,  205,
      205,  205, 1006, 1006,  205,  205, 1006,  205, 1006,  205,

     1006,  205,  205,  991,  992,  205,  990,  993,  205,  205,
      994,  995,  205,  205,  205,  996,  205,  205,  205,  205,
      205, 1006, 1006,  205,  205,  997,  205,  205,  205,  205,
      205,  205,  205,  205,  998,  205,  205,  205,  999,  205,
      205,  205,  205, 1006,  205,  205,  205,  205,  205,  205,
     1000,  205,  205,  205,  997, 1006,  205,  205,  205, 1006,
      205,  205,  205,  998,  205,  205,  205,  999,  205,  205,
      205,  205, 1006,  205,  205,  205,  205,  205,  205, 1000,
      205,  205,  205, 1001, 1002,  205,  205,  205,  205,  205,
      205,  205,  205, 1003,  205,  205,  205, 1004,  205,  205,

      205,  205,  205,  205,  205, 1005,  205,  205,  205, 1006,
      205, 1006, 1001, 1002,  205, 1006,  205,  205,  205,  205,
      205,  205, 1003,  205,  205,  205, 1004,  205,  205,  205,
      205,  205,  205,  205, 1005,  205,  205,  205, 1006,  205,
       79, 1006,   79,   79,   79,   92, 1006,   92,   92,   92,
      124, 1006,  124,  124,  124,  167,  167,  167,  572,  572,
      572,  572,  572,  620,  620,  620,  620,  620,  711,  711,
       79, 1006,   79,   79,   79,   92, 1006,   92,   92,   92,
      124, 1006,  124,  124,  124,  167,  167,  167,    3, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006
    } ;

static yyconst flex_int16_t yy_chk[10709] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
     1011,  845,    5,    9,   14,   14,   14,   14,   17,   19,
       17,   19,   22,   34,   22,   31,   14,   34,   37,   73,
       73,   73,   37,   31,   76,  844,   22,   76,   31,   31,
      843,   32,   31,   32,   32,   38,   32,   32,   31,   38,
      842,  841,   34,  840,   31,   36,   34,   37,   36,   36,
        9,   37,   31,  839,  146,   22,  146,   31,   31,  146,
       32,   31,   32,   32,   38,   32,   32,   31,   38,   65,
       65,   65,  838,   65,   36,  830,  828,   36,   36,   67,

       67,   67,   67,   67,   67,   67,  143,    9,   43,  812,
       46,   43,   43,   46,   46,  810,  775,    9,  143,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   43,  711,   46,
       43,   43,   46,   46,  650,  649,   10,  143,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   11,   85,   85,   85,   85,
       85,   85,   85,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   49,   49,   49,

       49,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  120,  120,  120,  648,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,  647,  646,   11,   11,
       49,   11,   11,   11,   11,   11,   11,   11,   11,  645,
       11,   11,   11,   13,   33,  368,   35,  368,   33,  641,
      368,   41,   33,  140,   35,  140,  640,   33,  621,   35,
       33,   33,   35,   35,   41,   40,  573,  140,   41,   40,
       41,  439,  422,   33,   40,   35,  387,   33,   40,  376,

       41,   33,  375,   35,  358,   13,   33,   39,   35,   33,
       33,   35,   35,   41,   40,   39,  140,   41,   40,   41,
       39,   39,  322,   40,   39,  305,  296,   40,   91,   91,
       91,   91,   91,   91,  144,  215,   39,  112,  112,  112,
      201,  112,   13,   47,   39,  141,  144,   47,  139,   39,
       39,  125,   13,   39,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   23,   47,   80,   55,  144,   47,   52,   51,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,  164,  164,  164,   27,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  198,  198,  198,   20,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   12,    8,   23,   23,    7,   23,   23,   23,
       23,   23,   23,   23,   23,   42,   23,   23,   23,   25,
       25,   44,    3,   42,   45,   42,   42,   42,   45,  142,
       44,  142,   45,  145,   44,  145,  366,   45,    0,   48,
       48,   45,   45,  142,   42,   48,    0,  145,  366,   48,

       44,    0,   42,   45,   42,   42,   42,   45,    0,   44,
      371,   45,  371,   44,    0,  371,   45,    0,   48,   48,
       45,   45,  142,    0,   48,    0,  145,  366,   48,  102,
      102,  102,  102,  102,  102,   25,   96,   96,   96,   96,
       96,   96,   96,    0,    0,   25,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,  114,  114,  114,  114,  114,
      114,  114,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  227,  227,  227,    0,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  333,  333,  333,    0,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,    0,    0,   28,   28,    0,
       28,   28,   28,   28,   28,   28,   28,   28,    0,   28,
       28,   28,   30,   30,    0,   30,   30,  136,  136,  136,
      136,  136,  136,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  399,  399,  399,

        0,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  450,  450,  450,    0,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,    0,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,    0,
       30,   30,   30,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   63,   63,   63,   63,   63,
       63,   63,   63,    0,   63,   63,   63,   63,    0,   63,
       63,   63,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   79,   81,  562,  562,  562,    0,   81,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,  130,
      130,  130,  130,  130,  130,  130,    0,    0,   79,   81,
      137,  137,  137,  137,   81,  156,  156,  156,   81,  156,
        0,    0,  137,  190,  190,  190,   81,  190,    0,   81,
        0,   81,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,  787,  787,  787,   79,  158,  158,  158,  158,
      158,  158,  158,    0,    0,   79,    0,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   90,   90,   90,   90,   90,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   92,  173,  173,  173,  173,  173,  173,  173,
        0,    0,   92,    0,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      103,  179,  179,  179,  179,  179,  179,    0,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  268,  268,  268,  268,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,    0,    0,    0,    0,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,    0,  103,  103,  103,  268,  103,  103,  103,  103,
      103,  103,  103,  103,    0,  103,  103,  103,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      110,  110,  110,  110,  110,  110,  110,  110,    0,  110,
      110,  110,  110,    0,  110,  110,  110,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  124,  126,    0,    0,
        0,    0,  126,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,    0,    0,    0,    0,  124,  290,
      290,  290,  290,  290,  126,  372,  374,  372,  374,  126,
      372,  374,    0,  126,  192,  192,  192,  192,  192,  192,
      192,  126,    0,    0,  126,    0,  126,  154,  154,  154,
      154,  154,  154,  154,  154,  124,  154,  154,  154,  154,

        0,  154,  154,  154,    0,  124,    0,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  135,  135,  135,  135,  135,

      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  147,  147,    0,  147,  221,  221,  221,  221,
      221,  221,  221,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,    0,    0,    0,
        0,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,    0,    0,    0,    0,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,    0,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,    0,
      147,  147,  147,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,

      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  167,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  352,  352,  352,  352,  352,    0,  167,
      327,  327,  327,  327,  327,  327,  327,    0,    0,  167,
        0,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  181,
      393,  393,  393,  393,  393,  393,  393,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,    0,    0,    0,    0,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
        0,    0,    0,    0,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
        0,  181,  181,  181,    0,  181,  181,  181,  181,  181,

      181,  181,  181,    0,  181,  181,  181,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  188,
      188,  188,  188,  188,  188,  188,  188,    0,  188,  188,
      188,  188,    0,  188,  188,  188,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  202,  203,  205,  206,  202,
      230,  205,  206,  207,  230,  231,  232,    0,  206,  231,
      232,  207,  232,  233,  207,  235,  203,  233,  207,  235,
      203,  554,  554,  554,  202,  554,  205,  206,  202,  230,

      205,  206,  207,  230,  231,  232,    0,  206,  231,  232,
      207,  232,  233,  207,  235,  203,  233,  207,  235,  203,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  216,
      216,  216,  216,  216,  216,  216,  216,    0,  216,  216,
      216,  216,    0,  216,  216,  216,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,

      219,  219,  219,  219,  219,  219,  219,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  234,
      236,  237,    0,  239,    0,  237,  237,  239,  234,  236,
      245,    0,  234,  236,  238,    0,  238,  240,  240,    0,
      238,  240,    0,  245,    0,    0,    0,  245,  234,  236,
      237,    0,  239,    0,  237,  237,  239,  234,  236,  245,
        0,  234,  236,  238,  241,  238,  240,  240,    0,  238,
      240,  242,  245,  242,  241,    0,  245,  242,  241,  243,
      247,  243,  244,  244,  246,  243,  244,  247,  246,  246,

      247,  248,  247,  241,    0,  248,  247,  252,  247,    0,
      242,  252,  242,  241,    0,    0,  242,  241,  243,  247,
      243,  244,  244,  246,  243,  244,  247,  246,  246,  247,
      248,  247,  250,    0,  248,  247,  252,  247,  249,  249,
      252,  251,  251,  249,    0,  250,  251,  253,  253,  250,
      255,  254,  253,  254,    0,  256,  258,  254,  255,  256,
      256,  250,  255,    0,    0,  258,    0,  249,  249,  258,
      251,  251,  249,    0,  250,  251,  253,  253,  250,  255,
      254,  253,  254,  257,  256,  258,  254,  255,  256,  256,
        0,  255,  259,  257,  258,  259,    0,  257,  258,    0,

      260,  260,  259,  263,  259,  260,  259,    0,  261,  262,
      261,  262,  257,  261,  261,  262,  263,    0,    0,  263,
      263,  259,  257,  637,  259,  637,  257,    0,  637,  260,
      260,  259,  263,  259,  260,  259,    0,  261,  262,  261,
      262,    0,  261,  261,  262,  263,  264,    0,  263,  263,
      264,  265,  264,  266,  267,    0,  265,  265,  267,  267,
      265,  273,  266,    0,  274,  273,  266,    0,  274,  275,
      276,    0,    0,  275,  276,  264,    0,    0,    0,  264,
      265,  264,  266,  267,    0,  265,  265,  267,  267,  265,
      273,  266,    0,  274,  273,  266,  271,  274,  275,  276,

        0,    0,  275,  276,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,    0,    0,
        0,    0,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,    0,    0,    0,
        0,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  277,    0,  271,
      271,  277,  271,  271,  271,  271,  271,  271,  271,  271,
      278,  271,  271,  271,  278,  279,    0,    0,    0,  279,

      418,  418,  418,  418,  418,    0,  277,    0,    0,    0,
      277,  444,  444,  444,  444,  444,  444,  444,    0,  278,
      639,    0,  639,  278,  279,  639,    0,    0,  279,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  284,  284,  284,

      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  294,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,    0,    0,
      294,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  299,  299,    0,    0,  294,  469,  469,
      469,  469,  469,  642,    0,  642,    0,  294,  642,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  303,  303,  303,

      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,

      317,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  323,
      323,  323,  323,  323,  323,  323,  323,    0,  323,  323,
      323,  323,    0,  323,  323,  323,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,    0,  325,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,

      331,  331,  331,  331,  331,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      346,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  356,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  359,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  495,  495,  495,  495,  495,    0,    0,  356,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  360,  361,  361,  361,  361,

      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,    0,    0,  356,  556,  556,  556,  556,
      556,  556,  556,    0,    0,  356,    0,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  364,  364,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  367,  369,  370,  373,  473,  474,  475,  476,
      473,  474,  475,  476,  367,  369,  370,  373,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  380,  473,  474,  475,  476,  473,
      474,  475,  476,  367,  369,  370,  373,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  383,  383,  383,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  386,  386,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  386,  386,  386,  386,  388,
      388,  388,  388,  388,  388,  388,  388,    0,  388,  388,
      388,  388,    0,  388,  388,  388,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  390,  390,  390,  390,  390,  390,  390,

      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  410,

      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,  411,  411,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  416,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  416,  416,  416,

      416,  416,  417,  417,  417,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  417,  417,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  426,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  428,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  428,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  432,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  440,  440,
      440,  440,  440,  440,  440,  440,    0,  440,  440,  440,
      440,    0,  440,  440,  440,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,    0,  442,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  446,  446,  446,  446,  446,  446,  446,

      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  460,  460,

      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,

      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  477,  478,  479,  480,  477,
      478,  479,  480,  481,  482,  483,  484,  481,  482,  483,

      484,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,    0,    0,    0,  477,  478,  479,  480,  477,  478,
      479,  480,  481,  482,  483,  484,  481,  482,  483,  484,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  486,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  489,  489,

      489,  489,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  492,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  498,  499,  500,  501,  502,  503,
      500,  638,  502,  498,  504,  499,  505,  498,    0,  499,
      501,    0,  503,  638,  501,  505,  503,  504,    0,  505,
        0,  504,    0,  498,  499,  500,  501,  502,  503,  500,
        0,  502,  498,  504,  499,  505,  498,    0,  499,  501,
      506,  503,  638,  501,  505,  503,  504,    0,  505,  507,
      504,  506,    0,  507,  507,  506,  508,  509,  508,  510,

      508,  509,  511,  510,  514,    0,  511,  511,    0,  506,
      512,  512,  513,  514,  513,  512,  513,  514,  507,    0,
      506,    0,  507,  507,  506,  508,  509,  508,  510,  508,
      509,  511,  510,  514,  517,  511,  511,  517,  517,  512,
      512,  513,  514,  513,  512,  513,  514,  515,  515,  518,
      516,  515,  516,    0,  518,    0,  516,  519,  518,  521,
      519,  519,  520,  517,  521,    0,  517,  517,  521,  520,
      644,    0,  644,  520,    0,  644,  515,  515,  518,  516,
      515,  516,  522,  518,    0,  516,  519,  518,  521,  519,
      519,  520,  522,  521,  523,  524,  522,  521,  520,  524,

      525,  524,  520,  527,    0,    0,  523,  527,  530,  525,
      523,  522,  526,  525,  526,    0,  530,  528,  526,    0,
      530,  522,  528,  523,  524,  522,  528,    0,  524,  525,
      524,  529,  527,    0,    0,  523,  527,  530,  525,  523,
      529,  526,  525,  526,  529,  530,  528,  526,  531,  530,
      532,  528,  531,    0,  531,  528,  533,  534,  533,  532,
      529,    0,  533,  532,  536,  535,  534,  537,  536,  529,
      534,  536,    0,  529,  535,    0,  537,  531,  535,  532,
      537,  531,    0,  531,    0,  533,  534,  533,  532,    0,
        0,  533,  532,  536,  535,  534,  537,  536,  538,  534,

      536,  538,  538,  535,  539,  537,  540,  535,  539,  537,
      541,  541,    0,  542,  541,  540,  542,  542,  543,  540,
      565,  543,  543,    0,  565,  566,  544,  538,    0,  566,
      538,  538,  544,  539,    0,  540,  544,  539,    0,  541,
      541,    0,  542,  541,  540,  542,  542,  543,  540,  565,
      543,  543,    0,  565,  566,  544,    0,    0,  566,    0,
        0,  544,    0,    0,    0,  544,  545,  545,    0,  545,
      578,  578,  578,  578,  578,  578,  578,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,    0,    0,    0,    0,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
        0,    0,    0,    0,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
        0,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,    0,  545,  545,  545,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,

      547,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  552,
      552,  552,  552,  552,  552,  552,  552,    0,  552,  552,
      552,  552,    0,  552,  552,  552,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  553,

      553,  553,  553,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  560,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  564,  564,

      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  567,  568,  569,    0,  567,
      568,  569,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,    0,
        0,    0,  574,    0,  567,  568,  569,  574,  567,  568,
      569,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  572,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,    0,    0,    0,    0,  574,
        0,    0,    0,    0,  574,    0,    0,    0,  574,  584,

      584,  584,  584,  584,  584,    0,  574,    0,    0,  574,
        0,  574,    0,    0,    0,  572,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,    0,    0,
        0,    0,  572,  610,  610,  610,  610,  610,    0,    0,
        0,    0,  572,    0,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  581,  581,
      581,  581,  581,  581,  581,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  582,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  585,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  626,  626,  626,
      626,  626,  626,  626,  670,  670,  670,  670,  670,  585,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,    0,  643,  585,  632,  632,  632,
      632,  632,  632,    0,    0,    0,  585,  643,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  589,  701,  701,  701,  701,
      701,    0,    0,    0,    0,  589,  643,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  611,  611,

      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  620,  622,    0,    0,
        0,    0,  622,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,    0,    0,  712,    0,  620,  713,
      712,  714,    0,  713,  622,  714,    0,  715,  716,  622,
      719,  715,  716,  622,  719,  806,  806,  806,  806,  806,
        0,  622,    0,    0,  622,  712,  622,    0,  713,  712,
      714,    0,  713,    0,  714,  620,  715,  716,    0,  719,
      715,  716,    0,  719,    0,  620,    0,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  627,  627,  627,  627,  627,  627,  627,  627,  627,

      627,  627,  627,  627,  627,  627,  627,  627,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  633,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  781,  781,  781,

      781,  781,  781,  781,  633,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,    0,
        0,  633,  919,  919,  919,  919,  919,    0,    0,    0,
        0,  633,    0,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  668,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  680,  681,  681,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  681,  681,  681,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  776,  776,  776,  776,  776,  776,  776,
      776,    0,  776,  776,  776,  776,  680,  776,  776,  776,
        0,    0,    0,    0,    0,    0,  680,    0,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  697,  697,  697,
      697,  697,  697,  697,  697,  697,  697,  697,  697,  697,

      697,  697,  697,  697,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  720,  721,    0,
      722,    0,  720,  722,  722,  723,  720,    0,  721,  723,
      723,  724,  721,  725,    0,  724,  724,  725,  725,  726,
        0,    0,    0,  726,  726,    0,  720,  721,    0,  722,
        0,  720,  722,  722,  723,  720,    0,  721,  723,  723,

      724,  721,  725,    0,  724,  724,  725,  725,  726,    0,
        0,  727,  726,  726,  727,  727,  728,  731,  729,  730,
      732,  728,  729,  730,  733,  728,  731,    0,  733,  732,
      731,  734,  735,  732,  736,  735,  735,  734,  736,    0,
      727,  734,    0,  727,  727,  728,  731,  729,  730,  732,
      728,  729,  730,  733,  728,  731,  737,  733,  732,  731,
      734,  735,  732,  736,  735,  735,  734,  736,    0,  737,
      734,  738,  740,  737,  739,    0,  738,  740,  739,  739,
      738,  740,  741,  741,  742,  737,  743,  741,  742,  742,
      743,  745,    0,  747,    0,  745,    0,  747,  737,    0,

      738,  740,  737,  739,    0,  738,  740,  739,  739,  738,
      740,  741,  741,  742,  744,  743,  741,  742,  742,  743,
      745,  746,  747,  744,  745,  748,  747,  744,  749,  749,
      752,  746,  749,  750,  748,  746,  750,  750,  748,  751,
        0,  752,  753,  744,  751,  752,  753,    0,  751,    0,
      746,  753,  744,    0,  748,    0,  744,  749,  749,  752,
      746,  749,  750,  748,  746,  750,  750,  748,  751,  754,
      752,  753,    0,  751,  752,  753,  756,  751,    0,  755,
      753,    0,  754,  755,  755,  757,  754,  756,  758,  760,
      757,  756,  758,  760,  757,  759,  762,  761,  754,  759,

      759,  761,    0,    0,    0,  756,  762,    0,  755,    0,
      762,  754,  755,  755,  757,  754,  756,  758,  760,  757,
      756,  758,  760,  757,  759,  762,  761,  763,  759,  759,
      761,    0,    0,  764,  809,  762,  763,  764,  809,  762,
      763,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      786,    0,    0,    0,    0,    0,  763,    0,    0,    0,
        0,    0,  764,  809,    0,  763,  764,  809,    0,  763,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  769,  769,  769,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  769,

      769,  769,  769,  769,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  771,  771,  771,  771,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,  771,  771,  771,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  777,
      777,  777,  777,  777,  777,  777,  777,  777,  777,  777,

      777,  777,  777,  777,  777,  777,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  779,  779,  779,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  783,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  783,
      783,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  796,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,

      798,  798,  798,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  802,  802,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  804,  804,

      804,  804,  804,  804,  804,  805,  805,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  807,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  807,  807,  807,  807,  807,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  816,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
      819,  819,  825,  825,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  825,  825,  825,  825,  825,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  859,  859,  859,  859,

      859,  859,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      862,  863,  864,  865,  862,  863,  864,  865,  866,  867,
      868,  866,  866,  871,  868,  869,  870,  871,  867,  872,
      868,  870,  867,  872,  869,  870,    0,    0,  869,  862,
      863,  864,  865,  862,  863,  864,  865,  866,  867,  868,
      866,  866,  871,  868,  869,  870,  871,  867,  872,  868,
      870,  867,  872,  869,  870,  873,  874,  869,  873,  873,
      874,  875,  878,  876,  877,  875,  875,  876,  877,  879,

        0,  878,  881,  879,    0,  878,  881,  882,  883,  884,
      882,  882,  883,  884,  873,  874,  880,  873,  873,  874,
      875,  878,  876,  877,  875,  875,  876,  877,  879,  880,
      878,  881,  879,  880,  878,  881,  882,  883,  884,  882,
      882,  883,  884,  885,    0,  880,  886,  885,  885,  887,
      886,  888,  889,  887,    0,  888,  891,  892,  880,  890,
      888,  889,  880,  890,  893,  889,  892,  891,  893,  893,
      892,  891,  885,    0,    0,  886,  885,  885,  887,  886,
      888,  889,  887,  896,  888,  891,  892,  896,  890,  888,
      889,  894,  890,  893,  889,  892,  891,  893,  893,  892,

      891,  897,  894,  895,  898,  897,  894,  895,  895,    0,
      899,  944,  896,  898,  899,  944,  896,  898,    0,    0,
      894,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      897,  894,  895,  898,  897,  894,  895,  895,    0,  899,
      944,    0,  898,  899,  944,    0,  898,  909,  909,  909,
      909,  909,  909,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  912,  912,

      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
      913,  913,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,

      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  928,  928,
      928,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  933,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  942,  945,  943,
      945,  947,  945,  943,  942,  943,  946,  948,  942,    0,

      946,  949,  950,  947,    0,  949,  950,  947,  948,    0,
        0,  952,  948,    0,  952,  952,  942,  945,  943,  945,
      947,  945,  943,  942,  943,  946,  948,  942,    0,  946,
      949,  950,  947,    0,  949,  950,  947,  948,    0,  951,
      952,  948,  951,  952,  952,  953,  951,  954,  955,  953,
      953,  954,  955,  956,  957,  958,    0,  960,  957,    0,
      960,  960,    0,  961,    0,  958,  956,  961,  951,  958,
      956,  951,    0,    0,  953,  951,  954,  955,  953,  953,
      954,  955,  956,  957,  958,    0,  960,  957,  959,  960,
      960,  962,  961,    0,  958,  956,  961,  959,  958,  956,

      962,  959,  963,  964,  962,  965,  963,  964,  965,  965,
        0,    0,    0,    0,    0,    0,    0,  959,    0,    0,
      962,    0,    0,    0,    0,    0,  959,    0,    0,  962,
      959,  963,  964,  962,  965,  963,  964,  965,  965,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  971,  971,  971,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  974,  975,  976,  978,  974,  977,  979,
      978,  978,  980,  979,  976,  975,  981,  977,  976,  975,
      982,  977,    0,    0,  982,  980,    0,  981,    0,  980,

        0,  981,  974,  975,  976,  978,  974,  977,  979,  978,
      978,  980,  979,  976,  975,  981,  977,  976,  975,  982,
      977,    0,    0,  982,  980,  983,  981,  983,  980,  984,
      981,  983,  985,  984,  986,  986,  985,  987,  988,  986,
      990,  987,  992,    0,  990,  991,  992,  988,  993,  991,
      991,  988,  993,  994,  983,    0,  983,  994,  984,    0,
      983,  985,  984,  986,  986,  985,  987,  988,  986,  990,
      987,  992,    0,  990,  991,  992,  988,  993,  991,  991,
      988,  993,  994,  995,  996,  995,  994,  997,  998,  995,
      996,  997,  998,  999,  996, 1000, 1001, 1002, 1003, 1000,

     1001, 1004, 1003,  999, 1005, 1004, 1002,  999, 1005,    0,
     1002,    0,  995,  996,  995,    0,  997,  998,  995,  996,
      997,  998,  999,  996, 1000, 1001, 1002, 1003, 1000, 1001,
     1004, 1003,  999, 1005, 1004, 1002,  999, 1005,    0, 1002,
     1007,    0, 1007, 1007, 1007, 1008,    0, 1008, 1008, 1008,
     1009,    0, 1009, 1009, 1009, 1010, 1010, 1010, 1012, 1012,
     1012, 1012, 1012, 1013, 1013, 1013, 1013, 1013, 1014, 1014,
     1015,    0, 1015, 1015, 1015, 1016,    0, 1016, 1016, 1016,
     1017,    0, 1017, 1017, 1017, 1018, 1018, 1018, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006
    } ;

static yyconst flex_int16_t yy_rule_linenum[103] =
    {   0,
      186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  205,
      206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
      216,  217,  218,  219,  220,  221,  222,  223,  224,  225,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
      246,  247,  248,  249,  250,  251,  252,  253,  254,  255,
      256,  257,  258,  259,  260,  261,  262,  263,  264,  265,
      266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
      276,  277,  278,  279,  280,  281,  282,  283,  284,  285,

      286,  289
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lib/SPARQLfedScanner.lpp"
/* $Id: SPARQLfedScanner.lpp,v 1.4 2008-10-03 07:06:03 eric Exp $ -*- mode: c++ -*- */
/** \file SPARQLfedScanner.ll Define the Flex lexical scanner */
#line 5 "lib/SPARQLfedScanner.lpp"

#include "SPARQLfedParser/SPARQLfedParser.hpp"
#include "SPARQLfedScanner.hpp"

/* import the parser's token type into a local typedef */
typedef w3c_sw::SPARQLfedParser::token token;
typedef w3c_sw::SPARQLfedParser::token_type token_type;

/* Work around an incompatibility in flex (at least versions 2.5.31 through
 * 2.5.33): it generates code that does not conform to C89.  See Debian bug
 * 333231 <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.  */
// #undef yywrap	// ##flex2.5
// #define yywrap() 1	// ##flex2.5

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::__EOF__

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SPARQLfedFlexLexer" */
/* consider using class instead
 * %option yyclass="SPARQLfedScanner"
 * void SPARQLfedFlexLexer::LexerError( yyconst char msg[] )
 */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 60 "lib/SPARQLfedScanner.lpp"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#define YY_FATAL_ERROR(msg) do {		\
    throw msg;   \
} while(0)
/* START patterns for SPARQLfed terminals */
/* <IRI_REF> ::= "<" (( [^<>\"{}|^`\\] - [#0000- ] ))* ">" */
/* <STRING_LITERAL_LONG2> ::= "'''" (( (( "'" | "''" ))? ( [^'\\] | ECHAR ) ))* "'''" */
/* END patterns for SPARQLfed terminals */
/* START semantic actions for SPARQLfed terminals */
#line 3255 "lib/SPARQLfedScanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 185 "lib/SPARQLfedScanner.lpp"

#line 3419 "lib/SPARQLfedScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1007 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1006 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 103 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 103 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 104 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 186 "lib/SPARQLfedScanner.lpp"
{ yylloc->end.lines(1); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 187 "lib/SPARQLfedScanner.lpp"
{ yylloc->step(); /* @@ needed? useful? */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 188 "lib/SPARQLfedScanner.lpp"
{return token::IT_REPLACE;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 189 "lib/SPARQLfedScanner.lpp"
{return token::IT_WITH;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 190 "lib/SPARQLfedScanner.lpp"
{return token::IT_DELETE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 191 "lib/SPARQLfedScanner.lpp"
{return token::IT_INSERT;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 192 "lib/SPARQLfedScanner.lpp"
{return token::IT_GRAPH;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 193 "lib/SPARQLfedScanner.lpp"
{return token::IT_SERVICE;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 194 "lib/SPARQLfedScanner.lpp"
{return token::IT_LOAD;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 195 "lib/SPARQLfedScanner.lpp"
{return token::IT_INTO;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 196 "lib/SPARQLfedScanner.lpp"
{return token::IT_CLEAR;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 197 "lib/SPARQLfedScanner.lpp"
{return token::IT_CREATE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 198 "lib/SPARQLfedScanner.lpp"
{return token::IT_SILENT;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 199 "lib/SPARQLfedScanner.lpp"
{return token::IT_DROP;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 200 "lib/SPARQLfedScanner.lpp"
{return token::IT_BASE;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 201 "lib/SPARQLfedScanner.lpp"
{return token::IT_PREFIX;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 202 "lib/SPARQLfedScanner.lpp"
{return token::IT_SELECT;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 203 "lib/SPARQLfedScanner.lpp"
{return token::IT_DISTINCT;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 204 "lib/SPARQLfedScanner.lpp"
{return token::IT_REDUCED;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 205 "lib/SPARQLfedScanner.lpp"
{return token::GT_TIMES;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 206 "lib/SPARQLfedScanner.lpp"
{return token::IT_CONSTRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 207 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESCRIBE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 208 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASK;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 209 "lib/SPARQLfedScanner.lpp"
{return token::IT_FROM;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 210 "lib/SPARQLfedScanner.lpp"
{return token::IT_NAMED;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 211 "lib/SPARQLfedScanner.lpp"
{return token::IT_WHERE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 212 "lib/SPARQLfedScanner.lpp"
{return token::IT_ORDER;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 213 "lib/SPARQLfedScanner.lpp"
{return token::IT_BY;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 214 "lib/SPARQLfedScanner.lpp"
{return token::IT_ASC;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 215 "lib/SPARQLfedScanner.lpp"
{return token::IT_DESC;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 216 "lib/SPARQLfedScanner.lpp"
{return token::IT_LIMIT;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 217 "lib/SPARQLfedScanner.lpp"
{return token::IT_OFFSET;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 218 "lib/SPARQLfedScanner.lpp"
{return token::IT_BINDINGS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 219 "lib/SPARQLfedScanner.lpp"
{return token::IT_MEMBERS;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 220 "lib/SPARQLfedScanner.lpp"
{return token::IT_STARTS;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 221 "lib/SPARQLfedScanner.lpp"
{return token::IT_ENDS;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 222 "lib/SPARQLfedScanner.lpp"
{return token::IT_ANY;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 223 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNORDERED;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 224 "lib/SPARQLfedScanner.lpp"
{return token::GT_LCURLEY;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 225 "lib/SPARQLfedScanner.lpp"
{return token::GT_RCURLEY;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 226 "lib/SPARQLfedScanner.lpp"
{return token::GT_LPAREN;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 227 "lib/SPARQLfedScanner.lpp"
{return token::GT_RPAREN;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 228 "lib/SPARQLfedScanner.lpp"
{return token::IT_NULL;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 229 "lib/SPARQLfedScanner.lpp"
{return token::GT_DOT;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 230 "lib/SPARQLfedScanner.lpp"
{return token::IT_OPTIONAL;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 231 "lib/SPARQLfedScanner.lpp"
{return token::IT_MINUS;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 232 "lib/SPARQLfedScanner.lpp"
{return token::IT_UNION;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 233 "lib/SPARQLfedScanner.lpp"
{return token::IT_FILTER;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 234 "lib/SPARQLfedScanner.lpp"
{return token::GT_COMMA;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 235 "lib/SPARQLfedScanner.lpp"
{return token::GT_SEMI;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 236 "lib/SPARQLfedScanner.lpp"
{return token::IT_a;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 237 "lib/SPARQLfedScanner.lpp"
{return token::GT_LBRACKET;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 238 "lib/SPARQLfedScanner.lpp"
{return token::GT_RBRACKET;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 239 "lib/SPARQLfedScanner.lpp"
{return token::GT_OR;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 240 "lib/SPARQLfedScanner.lpp"
{return token::GT_AND;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 241 "lib/SPARQLfedScanner.lpp"
{return token::GT_EQUAL;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 242 "lib/SPARQLfedScanner.lpp"
{return token::GT_NEQUAL;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 243 "lib/SPARQLfedScanner.lpp"
{return token::GT_LT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 244 "lib/SPARQLfedScanner.lpp"
{return token::GT_GT;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 245 "lib/SPARQLfedScanner.lpp"
{return token::GT_LE;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 246 "lib/SPARQLfedScanner.lpp"
{return token::GT_GE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 247 "lib/SPARQLfedScanner.lpp"
{return token::GT_PLUS;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 248 "lib/SPARQLfedScanner.lpp"
{return token::GT_MINUS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 249 "lib/SPARQLfedScanner.lpp"
{return token::GT_DIVIDE;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 250 "lib/SPARQLfedScanner.lpp"
{return token::GT_NOT;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 251 "lib/SPARQLfedScanner.lpp"
{return token::IT_STR;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 252 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANG;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 253 "lib/SPARQLfedScanner.lpp"
{return token::IT_LANGMATCHES;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 254 "lib/SPARQLfedScanner.lpp"
{return token::IT_DATATYPE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 255 "lib/SPARQLfedScanner.lpp"
{return token::IT_BOUND;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 256 "lib/SPARQLfedScanner.lpp"
{return token::IT_sameTerm;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 257 "lib/SPARQLfedScanner.lpp"
{return token::IT_isIRI;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 258 "lib/SPARQLfedScanner.lpp"
{return token::IT_isURI;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 259 "lib/SPARQLfedScanner.lpp"
{return token::IT_isBLANK;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 260 "lib/SPARQLfedScanner.lpp"
{return token::IT_isLITERAL;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 261 "lib/SPARQLfedScanner.lpp"
{return token::IT_REGEX;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 262 "lib/SPARQLfedScanner.lpp"
{return token::GT_DTYPE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 263 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("true", 1); return token::IT_true;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 264 "lib/SPARQLfedScanner.lpp"
{yylval->p_BooleanRDFLiteral = driver->getBooleanRDFLiteral("false", 0); return token::IT_false;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 265 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolveBase(yytext, true); return token::IRI_REF;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 266 "lib/SPARQLfedScanner.lpp"
{yylval->p_LANGTAG = new LANGTAG(yytext+1); return token::LANGTAG;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 267 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 268 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL);}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 269 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_POSITIVE);}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 270 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_POSITIVE);}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 271 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::INTEGER_NEGATIVE);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 272 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DECIMAL_NEGATIVE);}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 273 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE);}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 274 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_NEGATIVE);}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 275 "lib/SPARQLfedScanner.lpp"
{return typedLiteral(yylval, token::DOUBLE_POSITIVE);}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 276 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG1);}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 277 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 3, token::STRING_LITERAL_LONG2);}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 278 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL1);}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 279 "lib/SPARQLfedScanner.lpp"
{return unescape(yylval, 1, token::STRING_LITERAL2);}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 280 "lib/SPARQLfedScanner.lpp"
{return token::NIL;}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 281 "lib/SPARQLfedScanner.lpp"
{yylval->p_POS = driver->createBNode(); return token::ANON;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 282 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = driver->ignorePrefix() ? driver->getURI(yytext) : resolvePrefix(yytext); return token::PNAME_NS;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 283 "lib/SPARQLfedScanner.lpp"
{yylval->p_URI = resolvePrefix(yytext); return token::PNAME_LN;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 284 "lib/SPARQLfedScanner.lpp"
{yylval->p_POS = driver->getBNode(yytext+2); return token::BLANK_NODE_LABEL;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 285 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR1;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 286 "lib/SPARQLfedScanner.lpp"
{yylval->p_Variable = driver->getVariable(yytext+1); return token::VAR2;}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 288 "lib/SPARQLfedScanner.lpp"
{ yyterminate();}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 289 "lib/SPARQLfedScanner.lpp"
{
    std::stringstream s;
    s << "unexpected input '" << yytext << "' at " << *yylloc;
    throw s.str();
}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 295 "lib/SPARQLfedScanner.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4056 "lib/SPARQLfedScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SPARQLfedfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SPARQLfedfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SPARQLfedrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SPARQLfedrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1007 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1007 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1006);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SPARQLfedalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SPARQLfedalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SPARQLfedfree((void *) b->yy_ch_buf  );

	SPARQLfedfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SPARQLfedrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SPARQLfedalloc(new_size  );

		else
			(yy_start_stack) = (int *) SPARQLfedrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SPARQLfedalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SPARQLfedrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SPARQLfedfree (void * ptr )
{
	free( (char *) ptr );	/* see SPARQLfedrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 295 "lib/SPARQLfedScanner.lpp"


/* END semantic actions for SPARQLfed terminals */

/* START SPARQLfedScanner */
namespace w3c_sw {

SPARQLfedScanner::SPARQLfedScanner (SPARQLfedDriver* driver, std::istream* in, std::ostream* out) : SPARQLfedFlexLexer(in, out), driver(driver) {  }
SPARQLfedScanner::~SPARQLfedScanner () {  }

SPARQLfedParser::token_type SPARQLfedScanner::typedLiteral (SPARQLfedParser::semantic_type*& yylval, SPARQLfedParser::token_type tok) {
    std::istringstream is(yytext);

    switch (tok) {
    case token::INTEGER:
    case token::INTEGER_POSITIVE:
    case token::INTEGER_NEGATIVE:
	int i;
	is >> i;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, i);
	return tok;
    case token::DECIMAL:
    case token::DECIMAL_POSITIVE:
    case token::DECIMAL_NEGATIVE:
	float f;
	is >> f;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, f);
	return tok;
    case token::DOUBLE:
    case token::DOUBLE_POSITIVE:
    case token::DOUBLE_NEGATIVE:
	double d;
	is >> d;
	yylval->p_NumericRDFLiteral = driver->getNumericRDFLiteral(yytext, d);
	return tok;
    default: throw(new std::exception());
    }
}

SPARQLfedParser::token_type SPARQLfedScanner::unescape (SPARQLfedParser::semantic_type*& yylval, size_t skip, SPARQLfedParser::token_type tok){
    std::string* space = new std::string;
    for (size_t i = skip; i < yyleng-skip; i++) {
	if (yytext[i] == '\\') {
	    switch (yytext[++i]) {
	    case 't': (*space) += '\t'; break;
	    case 'n': (*space) += '\n'; break;
	    case 'r': (*space) += '\r'; break;
	    case 'b': (*space) += '\b'; break;
	    case 'f': (*space) += '\f'; break;
	    case '"': (*space) += '\"'; break;
	    case '\'': (*space) += '\''; break;
	    case '\\': (*space) += '\\'; break;
	    default: throw(new std::exception());
	    }
	} else {
	    (*space) += yytext[i];
	}
    }
    yylval->p_string = space;
    return tok;
}


const URI* SPARQLfedScanner::resolvePrefix (const char* yytext){
    std::string ret(yytext);
    size_t index = ret.find(':');
    if (index == std::string::npos)
	throw(std::runtime_error("Inexplicable lack of ':' in prefix"));
    const URI* nspace = driver->getNamespace(ret.substr(0, index), true);
    if (nspace == NULL) {
	std::stringstream err;
	err << "Unknown prefix: \"" << ret.substr(0, index) << "\"";
	throw(std::runtime_error(err.str()));
    }
    ret.replace(0, index+1, nspace->getLexicalValue());
    return resolveBase(ret.c_str(), false);
}

void SPARQLfedScanner::set_debug(bool b)
{
    yy_flex_debug = b;
}

/* END SPARQLfedScanner */

const URI* SPARQLfedScanner::resolveBase (const char* p_rel, bool stripDelims) {
    std::string stripped(p_rel);
    if (stripDelims) {
	stripped.replace(0, 1, "");
	stripped.replace(stripped.size()-1, 1, "");
    }
    return driver->getAbsoluteURI(stripped.c_str());

#if 0
    // was a transliteration of _generic.pm
    static const boost::regex re_scheme("^([a-zA-Z][a-zA-Z0-9.+-]*):");
    static const boost::regex re_authority("^((?:[a-zA-Z][a-zA-Z0-9.+-]*)?)(?://([^/?\\#]*))?(.*)$");
    static const boost::regex re_path("^((?:[^:/?\\#]+:)?(?://[^/?\\#]*)?)([^?\\#]*)(.*)$");

    boost::smatch what;
    URI* baseURI = driver->getBase();
    std::string base;
    if (baseURI != NULL)
	std::string base = baseURI->getLexicalValue();
    std::string base_scheme;
    if (base.size() > 0 && boost::regex_search(base, what, re_scheme))
	base_scheme = what[1];
    if (boost::regex_search(self, what, re_scheme) &&
	what[1] != base_schema)
	return driver->getURI(self.c_str());
    if (base.size() == 0)
	throw(std::runtime_error(((std::string)"no base declared while resolving relative URI ").append(abs)));

    std::string abs(self);
    if (!boost::regex_search(base, what, re_scheme))
	throw(std::runtime_error(((std::string)"resolving against base URI with no scheme ").append(base)));
    // !!! abs->scheme = base_scheme
    if (false) ; // ...

    if (!boost::regex_search(base, what, re_authority))
	throw(std::runtime_error(((std::string)"resolving against base URI with no authority ").append(base)));
    std::string base_authority(what[2]);

    if (!boost::regex_search(rel, what, re_path))
	throw(std::runtime_error(((std::string)"oddly failed to match re_path on ").append(rel)));
    std::string rel_path(what[2]);
    if (rel_path.find("/") == 0) return driver->getURI(abs.c_str());

#endif
}
} // END namespace w3c_sw

/* This implementation of SPARQLfedFlexLexer::yylex() is required to fill the
 * vtable of the class SPARQLfedFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the SPARQLfedScanner class instead. */

#ifdef yylex
#undef yylex
#endif

int SPARQLfedFlexLexer::yylex()
{
    std::cerr << "in SPARQLfedFlexLexer::yylex() !" << std::endl;
    return 0;
}


