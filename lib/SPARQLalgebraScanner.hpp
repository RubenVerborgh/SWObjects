// $Id: SPARQLalgebraScanner.hpp,v 1.3 2008-10-03 07:06:02 eric Exp $

#ifndef SPARQLalgebraScanner_H
#define SPARQLalgebraScanner_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    w3c_sw::SPARQLalgebraParser::token_type				\
    w3c_sw::SPARQLalgebraScanner::lex(				\
	w3c_sw::SPARQLalgebraParser::semantic_type* yylval,		\
	w3c_sw::SPARQLalgebraParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer SPARQLalgebraFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "SPARQLalgebraParser.hpp"

namespace w3c_sw {

/** SPARQLalgebraScanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to SPARQLalgebraFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the SPARQLalgebraScanner class. This is required
 * because the yylex() defined in SPARQLalgebraFlexLexer has no parameters. */
class SPARQLalgebraScanner : public SPARQLalgebraFlexLexer
{
private:
    SPARQLalgebraDriver* driver;
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    SPARQLalgebraScanner(SPARQLalgebraDriver* driver, std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~SPARQLalgebraScanner();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual SPARQLalgebraParser::token_type lex(
	SPARQLalgebraParser::semantic_type* yylval,
	SPARQLalgebraParser::location_type* yylloc
	);
    SPARQLalgebraParser::token_type lexWrapper(
	   SPARQLalgebraParser::semantic_type* yylval,
	   SPARQLalgebraParser::location_type* yylloc
					   ) {
	try {
	    return lex(yylval, yylloc);
	} catch (const char* e) {
	    std::stringstream s;
	    s << *yylloc << ": " << e;
	    throw s.str();
	}
    }

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    SPARQLalgebraParser::token_type typedLiteral(SPARQLalgebraParser::semantic_type*&, SPARQLalgebraParser::token_type tok);
    SPARQLalgebraParser::token_type unescape(SPARQLalgebraParser::semantic_type*&, size_t skip, SPARQLalgebraParser::token_type tok);
    const URI* resolvePrefix(const char*);
    const URI* resolveBase(const char*, bool stripDelims);
};

} // namespace w3c_sw

#endif // SPARQLalgebraScanner_H
