# Location: http://www.w3.org//2011/09/SparqlAlgebra/SPARQL11Algebra_EGP
[0]     Top                        ::= QueryUnit | UpdateUnit
[0]     QueryUnit                  ::= Query
[0]     Query                      ::= '(' BaseDecl PrefixOpt ')' | PrefixOpt
[0]     PrefixOpt                  ::= '(' PrefixDecl UsingOpt ')' | UsingOpt
[0]     UsingOpt                   ::= '(' UsingClause+ SliceOpt ')' | SliceOpt
[0]     SliceOpt                   ::= Slice | DistinctOpt
[0]     DistinctOpt                ::= DistinctReduced | ProjectOpt
[0]     ProjectOpt                 ::= Project | OrderOpt
[0]     OrderOpt                   ::= OrderClause | HavingOpt
[0]     HavingOpt                  ::= HavingClause | ExtendOpt
[0]     ExtendOpt                  ::= '(' Extend GroupOpt ')' | GroupOpt
[0]     GroupOpt                   ::= GroupClause | WhereClause
# [0]     Query                      ::= ( SelectQuery | ConstructQuery | DescribeQuery | AskQuery ) BindingsClause?
[0]     BaseDecl                   ::= 'base' IRI_REF
[0]     PrefixDecl                 ::= 'prefix' '(' ( '(' PNAME_NS IRI_REF ')' )* ')'
[0]     Project                    ::= '(' 'project' '(' Var* ')' OrderOpt ')'
[0]     Extend                     ::= 'extend' '(' Binding* ')'
[0]     Binding                    ::=  '(' Var Expression ')'
[0]     GroupExpression            ::= '(' POSITION Expression ')'
[0]     ProjectExpression          ::= '(' POSITION Aggregate ')'
#[0]     SelectQuery                ::= SelectClause DatasetClause* WhereClause SolutionModifier
[0]     SubSelect                  ::= Slice | DistinctReduced | Project | OrderClause | HavingClause
[0]     DistinctReduced            ::= '(' 'distinct' ProjectOpt ')' | '(' 'reduced' ProjectOpt ')'
#[0]     SelectClause               ::= 'SELECT' ( 'DISTINCT' | 'REDUCED' )? ( ( Var | ( '(' Expression 'AS' Var ')' ) )+ | '*' )
#[0]     ConstructQuery             ::= 'CONSTRUCT' ConstructTemplate DatasetClause* WhereClause SolutionModifier
#[0]     DescribeQuery              ::= 'DESCRIBE' ( VarOrIRIref+ | '*' ) DatasetClause* WhereClause? SolutionModifier
#[0]     AskQuery                   ::= 'ASK' DatasetClause* WhereClause
#[0]     DatasetClause              ::= 'FROM' ( DefaultGraphClause | NamedGraphClause )
#[0]     DefaultGraphClause         ::= SourceSelector
#[0]     NamedGraphClause           ::= 'NAMED' SourceSelector
#[0]     SourceSelector             ::= IRIref
[0]     WhereClause                ::= GroupGraphPatternNoSub
#[0]     SolutionModifier           ::= GroupClause? HavingClause? OrderClause? LimitOffsetClauses?
[0]     GroupClause                ::= '(' 'group' '(' GroupExpression+ ')'  '(' ProjectExpression+ ')' WhereClause ')'
#[0]     GroupCondition             ::= BuiltInCall | FunctionCall | '(' Expression ( 'AS' Var )? ')' | Var
[0]     HavingClause               ::= '(' 'filter' Expression ExtendOpt ')'
#[0]     HavingCondition            ::= Constraint
[0]     OrderClause                ::=  '(' 'order' '(' OrderCondition+ ')' HavingOpt ')'
[0]     OrderCondition             ::= ( '(' ( 'asc' | 'desc' ) Expression ')' ) | Expression
[0]     Slice                      ::= '(' 'slice' ( Integer | '_' ) ( Integer | '_' ) DistinctOpt ')'
#[0]     LimitOffsetClauses         ::= LimitClause OffsetClause? | OffsetClause LimitClause?
#[0]     LimitClause                ::= 'LIMIT' Integer
#[0]     OffsetClause               ::= 'OFFSET' Integer
#[0]     BindingsClause             ::= 'BINDINGS' Var* '{' ( '(' BindingValue+ ')' | NIL )* '}'
#[0]     BindingValue               ::= IRIref | RDFLiteral | NumericLiteral | BooleanLiteral | 'UNDEF'
[0]     UpdateUnit                 ::= Update_Base
[0]     Update_Base                ::= '(' BaseDecl Update_Prefix ')' | Update_Prefix
[0]     Update_Prefix              ::= '(' PrefixDecl Updates ')' | Updates
[0]     Updates                    ::= '(' Update1+ ')'
#[0]     Update                     ::= Prologue Update1 ( ';' Update? )?
[0]     Update1                    ::= Load | Clear | Drop | Add | Move | Copy | Create | InsertData | DeleteData | DeleteWhere | Modify
[0]     Load                       ::= '(' 'load' IRIref GraphRef? ')'
#[0]     Load                       ::= 'LOAD' IRIref ( 'INTO' GraphRef )?
[0]     Clear                      ::= '(' 'clear' 'silent'? GraphRefAll ')'
#[0]     Clear                      ::= 'CLEAR' 'SILENT'? GraphRefAll
[0]     Drop                       ::= '(' 'drop' 'silent'? GraphRefAll ')'
#[0]     Drop                       ::= 'DROP' 'SILENT'? GraphRefAll
[0]     Create                     ::= '(' 'create' 'silent'? GraphRef ')'
#[0]     Create                     ::= 'CREATE' 'SILENT'? GraphRef
[0]     Add                        ::= '(' 'add' 'silent'? GraphOrDefault GraphOrDefault ')'
#[0]     Add                        ::= 'ADD' 'SILENT'? GraphOrDefault 'TO' GraphOrDefault
[0]     Move                       ::= '(' 'move' 'silent'? GraphOrDefault GraphOrDefault ')'
#[0]     Move                       ::= 'MOVE' 'SILENT'? GraphOrDefault 'TO' GraphOrDefault
[0]     Copy                       ::= '(' 'copy' 'silent'? GraphOrDefault GraphOrDefault ')'
#[0]     Copy                       ::= 'COPY' 'SILENT'? GraphOrDefault 'TO' GraphOrDefault
[0]     InsertData                 ::= '(' 'insertdata' QuadData ')'
#[0]     InsertData                 ::= 'INSERT[ \t\r\n]+DATA' QuadData
[0]     DeleteData                 ::= '(' 'deletedata' QuadData ')'
#[0]     DeleteData                 ::= 'DELETE[ \t\r\n]+DATA' QuadData
[0]     DeleteWhere                ::= '(' 'deletewhere' QuadPattern ')'
#[0]     DeleteWhere                ::= 'DELETE[ \t\r\n]+WHERE' QuadPattern
[0]     Modify                     ::= '(' 'modify' UsingClause* GroupGraphPatternNoSub ( DeleteClause InsertClause? | InsertClause ) ')'
#[0]     Modify                     ::= ( 'WITH' IRIref )? ( DeleteClause InsertClause? | InsertClause ) UsingClause* 'WHERE' GroupGraphPatternNoSub
[0]     DeleteClause               ::= '(' 'delete' QuadPattern ')'
#[0]     DeleteClause               ::= 'DELETE' QuadPattern
[0]     InsertClause               ::= '(' 'insert' QuadPattern ')'
#[0]     InsertClause               ::= 'INSERT' QuadPattern
[0]     UsingClause                ::= '(' 'default' IRIref ')' | '(' 'named' IRIref IRIref ')'
#[0]     UsingClause                ::= 'USING' ( IRIref | 'NAMED' IRIref )
[0]     GraphOrDefault             ::= '_' | IRIref
#[0]     GraphOrDefault             ::= 'DEFAULT' | 'GRAPH'? IRIref
[0]     GraphRef                   ::= IRIref
#[0]     GraphRef                   ::= 'GRAPH' IRIref
[0]     GraphRefAll                ::= GraphRef | 'default' | 'named' | 'all'
#[0]     GraphRefAll                ::= GraphRef | 'DEFAULT' | 'NAMED' | 'ALL'
[0]     QuadPattern                ::= Quads
[0]     QuadData                   ::= Quads
[0]     Quads                      ::= ( QuadsNotTriples | TriplesTemplate )*
[0]     QuadsNotTriples            ::= 'quads' VarOrIRIref TriplesTemplate
[0]     TriplesTemplate            ::= '(' 'bgp' MyTriple+ ')' | '(' 'table' 'unit' ')'
[0]     GroupGraphPatternNoSub     ::= TriplesTemplate
                                     | Filter
                                     | '(' ('join'|'sequence') GroupGraphPatternSub GroupGraphPatternNoSub+ ')'
                                     | OptionalGraphPattern
                                     | GraphGraphPattern
                                     | ServiceGraphPattern
                                     | MinusGraphPattern
                                     | GroupOrUnionGraphPattern
                                     | '(' 'path' VarOrTerm Path VarOrTerm ')'
[0]     GroupGraphPatternSub       ::= TriplesTemplate
                                     | Filter
                                     | '(' ('join'|'sequence') GroupGraphPatternSub GroupGraphPatternSub+ ')'
                                     | OptionalGraphPattern
                                     | GraphGraphPattern
                                     | ServiceGraphPattern
                                     | MinusGraphPattern
                                     | GroupOrUnionGraphPattern
                                     | '(' 'path' VarOrTerm Path VarOrTerm ')'
                                     | SubSelect
[0]     ExprList                   ::= '(' 'exprlist' Expression+ ')'
[0]     MyTriple                   ::= '(' 'triple' VarOrTerm VarOrTerm VarOrTerm ')'
#[0]     GroupGraphPatternSub       ::= TriplesBlock? ( GraphPatternNotTriples '.'? TriplesBlock? )*
#[0]     TriplesBlock               ::= TriplesSameSubjectPath ( '.' TriplesBlock? )?
#[0]     GraphPatternNotTriples     ::= GroupOrUnionGraphPattern | OptionalGraphPattern | MinusGraphPattern | GraphGraphPattern | ServiceGraphPattern | Filter | Bind
[0]     OptionalGraphPattern       ::= '(' 'leftjoin' GroupGraphPatternNoSub GroupGraphPatternNoSub ExprList? ')'
[0]     GraphGraphPattern          ::= '(' 'graph' VarOrIRIref GroupGraphPatternNoSub ')'
[0]     ServiceGraphPattern        ::= '(' 'service' 'silent'? VarOrIRIref GroupGraphPatternNoSub ')'
#[0]     Bind                       ::= 'BIND' '(' Expression 'AS' Var ')'
[0]     MinusGraphPattern          ::= '(' 'minus' GroupGraphPatternNoSub GroupGraphPatternNoSub ')'
[0]     GroupOrUnionGraphPattern   ::= '(' 'union' GroupGraphPatternNoSub GroupGraphPatternNoSub ')'
[0]     Filter                     ::= '(' 'filter' ExprList GroupGraphPatternNoSub ')'
# [0]     Constraint                 ::= BrackettedExpression | BuiltInCall
# [0]     FunctionCall               ::= IRIref ArgList
# [0]     ArgList                    ::= NIL | '(' 'DISTINCT'? Expression ( ',' Expression )* ')'
[0]     ExpressionList             ::= NIL | '(' Expression ( ',' Expression )* ')'
#[0]     ConstructTemplate          ::= '{' ConstructTriples? '}'
#[0]     ConstructTriples           ::= TriplesSameSubject ( '.' ConstructTriples? )?
#[0]     TriplesSameSubject         ::= VarOrTerm PropertyListNotEmpty | TriplesNode PropertyList
#[0]     PropertyListNotEmpty       ::= Verb ObjectList ( ';' ( Verb ObjectList )? )*
#[0]     PropertyList               ::= PropertyListNotEmpty?
#[0]     ObjectList                 ::= Object ( ',' Object )*
#[0]     Object                     ::= GraphNode
#[0]     Verb                       ::= VarOrIRIref | 'a'
#[0]     TriplesSameSubjectPath     ::= VarOrTerm PropertyListNotEmptyPath | TriplesNode PropertyListPath
#[0]     PropertyListNotEmptyPath   ::= ( VerbPath | VerbSimple ) ObjectList ( ';' ( ( VerbPath | VerbSimple ) ObjectList )? )*
#[0]     PropertyListPath           ::= PropertyListNotEmpty?
#[0]     VerbPath                   ::= Path
#[0]     VerbSimple                 ::= Var
#[0]     Path                       ::= PathAlternative
[0]     Path                       ::=
                                       PathAlternative
                                     | PathSequence
                                     | PathEltOrInverse
                                     | PathMod
                                     | PathOneInPropertySet
                                     | PathPrimary
[0]     PathAlternative            ::= '(' 'alt' Path Path ')'
[0]     PathSequence               ::= '(' 'seq' Path Path ')'
#[0]     PathElt                    ::= PathPrimary PathMod?
[0]     PathEltOrInverse           ::= '(' 'reverse' Path ')'
[0]     PathMod                    ::= '(' ('path?' | 'path*' | 'path+') Path ')' | '(' 'mod' (Integer | '_') (Integer | '_') Path ')'
[0]     PathPrimary                ::= IRIref | 'a'
#[0]     PathNegatedPropertySet     ::= ( PathOneInPropertySet | '(' ( PathOneInPropertySet ( '|' PathOneInPropertySet )* )? ')' )
[0]     PathOneInPropertySet       ::= '(' 'notoneof' Path+ ')'
[0]     Integer                    ::= INTEGER
#[0]     TriplesNode                ::= Collection | BlankNodePropertyList
#[0]     BlankNodePropertyList      ::= '[' PropertyListNotEmpty ']'
#[0]     Collection                 ::= '(' GraphNode+ ')'
#[0]     GraphNode                  ::= VarOrTerm | TriplesNode
[0]     VarOrTerm                  ::= Var | GraphTerm
[0]     VarOrIRIref                ::= Var | IRIref
[0]     Var                        ::= VAR1 | VAR2
[0]     GraphTerm                  ::= IRIref | RDFLiteral | NumericLiteral | BooleanLiteral | BlankNode | NIL
[0]     Expression                 ::= ConditionalOrExpression | ConditionalAndExpression | ValueLogical | MultiplicativeExpression | UnaryExpression | PrimaryExpression
[0]     ConditionalOrExpression    ::= '(' '||' Expression  Expression ')'
[0]     ConditionalAndExpression   ::= '(' '&&' Expression Expression ')'
[0]     ValueLogical               ::= RelationalExpression
[0]     RelationalExpression       ::= NumericExpression | RelativeExpression
[0]     RelativeExpression         ::= '(' '=' Expression Expression ')'
                                     | '(' '!=' Expression Expression ')'
                                     | '(' '<' Expression Expression ')'
                                     | '(' '>' Expression Expression ')'
                                     | '(' '<=' Expression Expression ')'
                                     | '(' '>=' Expression Expression ')'
                                     | '(' 'in' Expression+ ')'
#                                     | '(' 'NOT IN' ExpressionList Expression ')'
[0]     NumericExpression          ::= AdditiveExpression
[0]     AdditiveExpression         ::= 
                                       '(' '+' Expression Expression ')'
                                     | '(' '-' Expression Expression ')'
                                     #| '(' NumericLiteralPositive | NumericLiteralNegative ')'
                                     # not needed in algebra? ( '*' UnaryExpression | '/' UnaryExpression )?
[0]     MultiplicativeExpression   ::= 
                                       '(' '*' Expression Expression ')'
                                     | '(' '/' Expression Expression ')'
[0]     UnaryExpression            ::= '(' '!' Expression ')'
                                     | '(' '+' Expression ')'
                                     | '(' '-' Expression ')'
[0]     PrimaryExpression          ::=
                                       BuiltInCall
                                     | IRIrefOrFunction
                                     | RDFLiteral
                                     | NumericLiteral
                                     | BooleanLiteral
                                     | Var
                                     | POSITION
                                     #  | Aggregate
# [0]     BrackettedExpression       ::= '(' Expression ')'
[0]     BuiltInCall                ::= '(' 'str' Expression ')'
                                     | '(' 'lang' Expression ')'
                                     | '(' 'langmatches' Expression ',' Expression ')'
                                     | '(' 'datatype' Expression ')'
                                     | '(' 'bound' Var ')'
                                     | '(' 'iri' Expression ')'
                                     | '(' 'uri' Expression ')'
                                     | '(' 'bnode' Expression? ')'
                                     | '(' 'RAND' ')'
                                     | '(' 'abs' Expression ')'
                                     | '(' 'ceil' Expression ')'
                                     | '(' 'floor' Expression ')'
                                     | '(' 'round' Expression ')'
                                     | '(' 'concat' Expression+ ')'
                                     | SubstringExpression
                                     | '(' 'strlen' Expression ')'
                                     | '(' 'ucase' Expression ')'
                                     | '(' 'lcase' Expression ')'
                                     | '(' 'encode_for_uri' Expression ')'
                                     | '(' 'contains' Expression ',' Expression ')'
                                     | '(' 'strstarts' Expression ',' Expression ')'
                                     | '(' 'strends' Expression ',' Expression ')'
                                     | '(' 'year' Expression ')'
                                     | '(' 'month' Expression ')'
                                     | '(' 'day' Expression ')'
                                     | '(' 'hours' Expression ')'
                                     | '(' 'minutes' Expression ')'
                                     | '(' 'seconds' Expression ')'
                                     | '(' 'timezone' Expression ')'
                                     | '(' 'now' ')'
                                     | '(' 'md5' Expression ')'
                                     | '(' 'sha1' Expression ')'
                                     | '(' 'sha224' Expression ')'
                                     | '(' 'sha256' Expression ')'
                                     | '(' 'sha384' Expression ')'
                                     | '(' 'sha512' Expression ')'
                                     | '(' 'coalesce' ExpressionList ')'
                                     | '(' 'if' Expression ',' Expression ',' Expression ')'
                                     | '(' 'strlang' Expression ',' Expression ')'
                                     | '(' 'strdt' Expression ',' Expression ')'
                                     | '(' 'sameterm' Expression ',' Expression ')'
                                     | '(' 'isiri' Expression ')'
                                     | '(' 'isuri' Expression ')'
                                     | '(' 'isblank' Expression ')'
                                     | '(' 'isliteral' Expression ')'
                                     | '(' 'isnumeric' Expression ')'
                                     | RegexExpression
                                     | ExistsFunc
#                                     | NotExistsFunc
[0]     RegexExpression            ::= '(' 'regex' Expression ',' Expression ( ',' Expression )? ')'
[0]     SubstringExpression        ::= '(' 'substr' Expression ',' Expression ( ',' Expression )? ')'
[0]     ExistsFunc                 ::= '(' 'exists' GroupGraphPatternNoSub ')'
#[0]     ExistsFunc                 ::= 'EXISTS' GroupGraphPatternNoSub
#[0]     NotExistsFunc              ::= 'NOT' 'EXISTS' GroupGraphPatternNoSub
[0]     Aggregate                  ::= '(' ( Count | MiscAgg | GroupConcat ) ')'
[0]     Count                      ::= 'COUNT' 'DISTINCT'? ( '*' | Expression )
[0]     MiscAgg                    ::= ( 'SUM' | 'MIN' | 'MAX' | 'AVG' | 'SAMPLE' ) 'DISTINCT'? Expression
[0]     GroupConcat                ::= 'GROUP_CONCAT' 'DISTINCT'? Expression
                                     | 'GROUP_CONCAT' 'DISTINCT'? Separator Expression
[0]     Separator                  ::= '(' 'separator' String ')'
[0]     IRIrefOrFunction           ::= IRIref | '(' IRIref Expression+ ')'
[0]     RDFLiteral                 ::= String ( LANGTAG | ( '^^' IRIref ) )?
[0]     NumericLiteral             ::= NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
[0]     NumericLiteralUnsigned     ::= INTEGER | DECIMAL | DOUBLE
[0]     NumericLiteralPositive     ::= INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
[0]     NumericLiteralNegative     ::= INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
[0]     BooleanLiteral             ::= 'true' | 'false'
[0]     String                     ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
[0]     IRIref                     ::= IRI_REF | PrefixedName
[0]     PrefixedName               ::= PNAME_LN | PNAME_NS
[0]     BlankNode                  ::= BLANK_NODE_LABEL | ANON

@terminals
[0]     IRI_REF                    ::= '<' ([^<>\"{}|^`\\]-[#x00-#x20])* '>'
[0]     PNAME_NS                   ::= PN_PREFIX? ':'
[0]     PNAME_LN                   ::= PNAME_NS PN_LOCAL
[0]     BLANK_NODE_LABEL           ::= '_:' PN_LOCAL
[0]     VAR1                       ::= '?' VARNAME
[0]     VAR2                       ::= '$' VARNAME
[0]     POSITION                   ::= '?' '.' INTEGER
[0]     LANGTAG                    ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
[0]     INTEGER                    ::= [0-9]+
[0]     DECIMAL                    ::= [0-9]+ '.' [0-9]* | '.' [0-9]+
[0]     DOUBLE                     ::= [0-9]+ '.' [0-9]* EXPONENT | '.' ([0-9])+ EXPONENT | ([0-9])+ EXPONENT
[0]     INTEGER_POSITIVE           ::= '+' INTEGER
[0]     DECIMAL_POSITIVE           ::= '+' DECIMAL
[0]     DOUBLE_POSITIVE            ::= '+' DOUBLE
[0]     INTEGER_NEGATIVE           ::= '-' INTEGER
[0]     DECIMAL_NEGATIVE           ::= '-' DECIMAL
[0]     DOUBLE_NEGATIVE            ::= '-' DOUBLE
[0]     EXPONENT                   ::= [eE] [+-]? [0-9]+
[0]     STRING_LITERAL1            ::= "'" ( ([^#x27#x5C#xA#xD]) | ECHAR )* "'"
[0]     STRING_LITERAL2            ::= '"' ( ([^#x22#x5C#xA#xD]) | ECHAR )* '"'
[0]     STRING_LITERAL_LONG1       ::= "'''" ( ( "'" | "''" )? ( [^'\\] | ECHAR ) )* "'''"
[0]     STRING_LITERAL_LONG2       ::= '"""' ( ( '"' | '""' )? ( [^"\\] | ECHAR ) )* '"""'
[0]     ECHAR                      ::= '\\' [tbnrf\\"']
[0]     NIL                        ::= '(' WS* ')'
[0]     WS                         ::= #x20 | #x9 | #xD | #xA
[0]     ANON                       ::= '[' WS* ']'
[0]     PN_CHARS_BASE              ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
[0]     PN_CHARS_U                 ::= PN_CHARS_BASE | '_'
[0]     VARNAME                    ::= ( PN_CHARS_U | [0-9] ) ( PN_CHARS_U | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040] )*
[0]     PN_CHARS                   ::= PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
[0]     PN_PREFIX                  ::= PN_CHARS_BASE ((PN_CHARS|'.')* PN_CHARS)?
[0]     PN_LOCAL                   ::= ( PN_CHARS_U | [0-9] ) ((PN_CHARS|'.')* PN_CHARS)?

@pass: [ \t\r\n]+ | '#' [^\r\n]*
