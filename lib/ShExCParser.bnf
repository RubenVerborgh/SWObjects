# Semantic Web Shape Expressions
# todo:
#   (a:b <c>) in predicate


[1]    ShExDoc                ::= directive* ((shape | start | CODE*) statement*)? 
[2]    statement              ::= directive | start | shape
[3]    directive              ::= sparqlPrefix | sparqlBase
[0]    start                  ::= 'start' '=' startRule
[0]    startRule              ::= label | typeSpec CODE* 
[4b]   sparqlPrefix           ::= SPARQL_PREFIX PNAME_NS IRIREF 
[5b]   sparqlBase             ::= SPARQL_BASE IRIREF 

[0]     shape                 ::= 'VIRTUAL'? label typeSpec CODE* 
[0]     typeSpec              ::= include* '{' OrExpression? '}'
[0]     include               ::= '&' label  

[111]   OrExpression          ::= AndExpression ( '|' AndExpression )* 
[112]   AndExpression         ::= UnaryExpression ( ',' UnaryExpression )*
[118]   UnaryExpression       ::= ('$' iri)? (arc | include | '(' OrExpression ')' '?'? CODE*)
[0]     label                 ::= iri | BlankNode

[0]  arc                      ::= '^'? nameClass valueSpec default? repeatCount? properties? CODE* 
[0]  nameClass                ::= iriStem | '.' exclusions | RDF_TYPE
[0]  valueSpec                ::= '@' label | typeSpec | valueSet | value | '.' exclusions | nodeType 
[0]  iriStem                  ::= iri '~'?
nodeType              ::= IRI | LITERAL | BNODE | NONLITERAL
[0]  default               ::= '=' value 

[7t]    predicateObjectList   ::= verb objectList (';' (verb objectList)* )*
[8t]    objectList            ::= object (',' object)*
[9t]    verb                  ::= predicate | RDF_TYPE
[11t]   predicate             ::= iri
[12t]   object                ::= iri | BlankNode | blankNodePropertyList | literal               
[13t]   literal               ::= RDFLiteral | NumericLiteral | BooleanLiteral
[14t]   blankNodePropertyList ::= '[' predicateObjectList ']'
properties                    ::= '[' predicateObjectList ']' 


# [0]  arc       ::= '^'? B repeatCount? CODE*
# [0] B ::= '.' exclusions ('@' label | typeSpec | valueSet | object | '.')
#         | iri C
# [0] C ::= '.' ('.' | '@' label | typeSpec | valueSet | object)?
#         |     '@' label | typeSpec | valueSet | object

exclusions                    ::= ('-' iri)* 

repeatCount                   ::= '*' | '+' | '?' | '{' INTEGER (',' INTEGER?)? '}'
valueSet                      ::= '(' value+ ')'


// [stuff from Turtle]
value        ::= iriStem | BlankNode | literal 

literal               ::= RDFLiteral | NumericLiteral | BooleanLiteral

[16]    NumericLiteral        ::= INTEGER | DECIMAL | DOUBLE
[128s]  RDFLiteral            ::= String (LANGTAG | '^^' iri)?
[133s]  BooleanLiteral        ::= 'true' | 'false'
[134s]  String                ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
[135s]  iri                   ::= IRIREF | PrefixedName
[136s]  PrefixedName          ::= PNAME_LN | PNAME_NS
[137s]  BlankNode             ::= BLANK_NODE_LABEL | ANON

@terminals

IRI                  ::= [Ii][Rr][Ii] 
LITERAL              ::= [Ll][Ii][Tt][Ee][Rr][Aa][Ll] 
BNODE                ::= [Bb][Nn][Oo][Dd][Ee] 
NONLITERAL           ::= [Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll] 

[0] CODE                 ::= '%' ([a-zA-Z+#_][a-zA-Z0-9+#_]*)? '' 

[4bb]   SPARQL_PREFIX         ::= [Pp][Rr][Ee][Ff][Ii][Xx]
[5bb]   SPARQL_BASE           ::= [Bb][Aa][Ss][Ee]
[3y]    RDF_TYPE              ::= 'a'
[18]    IRIREF                ::= '<' ([^\u0000-\u0020<>\"{}|^`\\] | UCHAR)* '>'
[139s]  PNAME_NS              ::= PN_PREFIX? ':'
[140s]  PNAME_LN              ::= PNAME_NS PN_LOCAL
[141s]  BLANK_NODE_LABEL      ::= '' [a-zA-Z_] [a-zA-Z0-9_]* 
[144s]  LANGTAG               ::= '@' ([a-zA-Z]+ ('-' [a-zA-Z0-9]+)*) 
[19]    INTEGER               ::= [+-]? [0-9]+ 
[20]    DECIMAL               ::= [+-]? [0-9]* '.' [0-9]+ 
[21]    DOUBLE                ::= [+-]? _DOUBLE_VAL 
_DOUBLE_VAL          ::= [0-9]+ '.' [0-9]* EXPONENT 
               | '.' [0-9]+ EXPONENT 
               | [0-9]+ EXPONENT 
EXPONENT             ::= [eE] [+-]? [0-9]+ 
[156s]  STRING_LITERAL1        ::= "'" ([^\u0027\u005C\u000A\u000D] | ECHAR | UCHAR)* "'" 
[157s]  STRING_LITERAL2        ::= '"' ([^\u0022\u005C\u000A\u000D] | ECHAR | UCHAR)* '"' 
[158s]  STRING_LITERAL_LONG1       ::= 	_STRING_LITERAL_LONG1_DELIM _NON_LONG1* _STRING_LITERAL_LONG1_DELIM 
_STRING_LITERAL_LONG1_DELIM       ::= "'''" 
_NON_LONG1           ::= _LONG1? [^\'\\] 
               | ECHAR | UCHAR
_LONG1       ::= "''" | "'"
[159s]  STRING_LITERAL_LONG2       ::= 	_STRING_LITERAL_LONG2_DELIM _NON_LONG2* _STRING_LITERAL_LONG2_DELIM 
_STRING_LITERAL_LONG2_DELIM       ::= '"""' 
_NON_LONG2       ::= _LONG2? [^\"\\] 
           | ECHAR | UCHAR
_LONG2               ::= '""' | '"'
[22]    UCHAR                 ::= '\\u'(HEX HEX HEX HEX) | '\\U'(HEX HEX HEX HEX HEX HEX HEX HEX) 
[159s]  ECHAR                 ::= '\\' [tbnrf\"\'\\] 
[161s]  WS                    ::= #x20 | #x9 | #xD | #xA
[162s]  ANON                  ::= '[' WS* ']' 
[163s]  PN_CHARS_BASE         ::= [A-Z] | [a-z]
[164s]  PN_CHARS_U            ::= PN_CHARS_BASE | '_'
[166s]  PN_CHARS              ::= PN_CHARS_U | '-' | [0-9]
[167s]  PN_PREFIX             ::= PN_CHARS_BASE PN_PREFIX2? 
PN_PREFIX2                    ::= '.' PN_PREFIX2 | PN_CHARS PN_PREFIX2? 

[168s]  PN_LOCAL             ::= (PN_CHARS_U | ':' | [0-9] | PLX) PN_LOCAL2?

PN_LOCAL2            ::= '.' PN_LOCAL2 
               | PN_CHARS_colon_PLX PN_LOCAL2? 
PN_CHARS_colon_PLX       ::= PN_CHARS | ':' | PLX
[169s]  PLX                   ::= PERCENT | PN_LOCAL_ESC
[170s]  PERCENT               ::= '%' HEX HEX 
[171s]  HEX                   ::= [0-9] | [A-F] | [a-f]
[172s]  PN_LOCAL_ESC          ::= '\\' [_~.!$&\'()*+,;=|?#@%-] 

WS                   ::= [ \t\r\n]+ 
COMMENT              ::=  "#" [^\r\n]* 
