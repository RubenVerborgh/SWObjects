# http://www.w3.org/2005/01/yacker/uploads/trigTurtle_EGP/bnf

[1g]   trigDoc               ::= (directive | block)*
[2g]   block                 ::= triplesOrGraph | wrappedGraph | triples2 | "GRAPH" labelOrSubject wrappedGraph
[3g]   triplesOrGraph        ::= labelOrSubject (wrappedGraph | predicateObjectList '.')
[4g]   triples2              ::= blankNodePropertyList predicateObjectList? '.' | collection predicateObjectList '.'
[5g]   wrappedGraph          ::= '{' triplesBlock? '}'
[6g]   triplesBlock          ::= triples ('.' triplesBlock?)?
[7g]   labelOrSubject        ::= iri | BlankNode
[3]    directive             ::= prefixID | base | PrefixDecl | BaseDecl
[4]    prefixID              ::= AT_PREFIX PNAME_NS IRIREF '.'
[5]    base                  ::= AT_BASE IRIREF '.'
[5s]   BaseDecl              ::= 'BASE' IRIREF
[6s]   PrefixDecl            ::= 'PREFIX' PNAME_NS IRIREF
[6]    triples               ::= subject predicateObjectList | blankNodePropertyList predicateObjectList?
[7]    predicateObjectList   ::= verb objectList (';' (verb objectList)?)*
[8]    objectList            ::= object (',' object)*
[9]    verb                  ::= predicate | RDF_TYPE
[10]   subject               ::= iri | blank
[11]   predicate             ::= iri
[12]   object                ::= iri | blank | blankNodePropertyList | literal
[13]   literal               ::= RDFLiteral | NumericLiteral | BooleanLiteral
[14]   blank                 ::= BlankNode | collection
[14t]  blankNodePropertyList ::= '[' predicateObjectList ']'
[15t]  collection            ::= '(' object* ')'
[16t]  NumericLiteral        ::= INTEGER | DECIMAL | DOUBLE
[128s] RDFLiteral            ::= String (LANGTAG | '^^' iri)?
[133s] BooleanLiteral        ::= 'true' | 'false'
[135s] String                ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
[136s] iri                   ::= IRIREF | PrefixedName
[137s] PrefixedName          ::= PNAME_LN | PNAME_NS
[138s] BlankNode             ::= BLANK_NODE_LABEL | ANON

@terminals

[3y]   RDF_TYPE              ::= 'a'
[4y]   AT_BASE               ::= '@base'
[5y]   AT_PREFIX             ::= '@prefix'
[139s] IRIREF                ::= '<' ([^#x00-#x20<>\"{}|^`\\] | UCHAR)* '>' /* #x00=NULL #01-#x1F=control codes #x20=space */
[140s] PNAME_NS              ::= PN_PREFIX? ':'
[141s] PNAME_LN              ::= PNAME_NS PN_LOCAL
[142s] BLANK_NODE_LABEL      ::= '_:' (PN_CHARS_U | [0-9]) ((PN_CHARS | '.')* PN_CHARS)?
[145s] LANGTAG               ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
[19]   INTEGER               ::= [+-]? [0-9]+
[20]   DECIMAL               ::= [+-]? [0-9]* '.' [0-9]+
[21]   DOUBLE                ::= [+-]? ([0-9]+ '.' [0-9]* EXPONENT | '.' [0-9]+ EXPONENT | [0-9]+ EXPONENT)
[155s] EXPONENT              ::= [eE] [+-]? [0-9]+
[156s] STRING_LITERAL1       ::= "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */
[157s] STRING_LITERAL2       ::= '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
[158s] STRING_LITERAL_LONG1  ::= "'''" (("'" | "''")? ([^\'\\] | ECHAR | UCHAR))* "'''"
[159s] STRING_LITERAL_LONG2  ::= '"""' (('"' | '""')? ([^\"\\] | ECHAR | UCHAR))* '"""'
[26t]  UCHAR                 ::= '\\u' HEX HEX HEX HEX | '\\U' HEX HEX HEX HEX HEX HEX HEX HEX
[160s] ECHAR                 ::= '\\' [tbnrf\\\"\']
[162s] WS                    ::= #x20 | #x9 | #xD | #xA /* #x20=space #x9=character tabulation #xD=carriage return #xA=new line */
[163s] ANON                  ::= '[' WS* ']'
[164s] PN_CHARS_BASE         ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
[165s] PN_CHARS_U            ::= PN_CHARS_BASE | '_'
[167s] PN_CHARS              ::= PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
[168s] PN_PREFIX             ::= PN_CHARS_BASE ((PN_CHARS | '.')* PN_CHARS)?
[169s] PN_LOCAL              ::= (PN_CHARS_U | ':' | [0-9] | PLX) ((PN_CHARS | '.' | ':' | PLX)* (PN_CHARS | ':' | PLX))?
[170s] PLX                   ::= PERCENT | PN_LOCAL_ESC
[171s] PERCENT               ::= '%' HEX HEX
[172s] HEX                   ::= [0-9] | [A-F] | [a-f]
[173s] PN_LOCAL_ESC          ::= '\\' ('_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%')

@pass ::= [ \t\r\n]+ | "#" [^\r\n]*
